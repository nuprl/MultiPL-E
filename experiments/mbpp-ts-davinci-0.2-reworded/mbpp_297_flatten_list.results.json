{
  "name": "mbpp_297_flatten_list",
  "language": "ts",
  "prompt": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nlet list1 = [1, [2, [3, 4], [[5]]]];\nconsole.log(flatten_list(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [4, [5, 6]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, [4, 5], 6], 7], 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            result.push(list1[i]);\n        } else {\n            result = result.concat(flatten_list(list1[i]));\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [[4, 5], 6]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\nconsole.log(flatten_list([[[3]], [4], 5]));\nconsole.log(flatten_list([[[3]]]));\nconsole.log(flatten_list([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510616,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n[ 3, 4, 5 ]\n[ 3 ]\n[]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [[4, 5], 6]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510616,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [[4], [5, 6, [7, 8, [9]]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510616,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 7, 8, 9\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [4, [5, 6]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, 2, [3, 4], [5, 6]]));\nconsole.log(flatten_list([1, [2, [3, 4], [[5], 6]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510616,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let flat_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            flat_list = flat_list.concat(flatten_list(list1[i]));\n        } else {\n            flat_list.push(list1[i]);\n        }\n    }\n    return flat_list;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510616,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [[4, 5], 6]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    list1.forEach(element => {\n        if (Array.isArray(element)) {\n            list2 = list2.concat(flatten_list(element));\n        } else {\n            list2.push(element);\n        }\n    });\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\nconsole.log(flatten_list([1, [2, [3, [4, 5], 6], 7], 8]));\nconsole.log(flatten_list([1, [2, [3, 4], [[5], 6]], 7, 8]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\nconsole.log(flatten_list([[[3]], 0, [[0]], []]));\nconsole.log(flatten_list([1, 2, 3, 4, 5]));\nconsole.log(flatten_list([1, [2, 3], 4, [5]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n[ 3, 0, 0 ]\n[ 1, 2, 3, 4, 5 ]\n[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == \"number\") {\n            list2.push(list1[i]);\n        }\n        else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\nconsole.log(flatten_list([[[3, 4], 5], 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n[ 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\nconsole.log(flatten_list([[[3]], [4], 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n[ 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, [4, 5], 6], 7], 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [4, [5, 6]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\nconsole.log(flatten_list([[[3]], [2, 1], [1, [2, [3]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n[ 3, 2, 1, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\nconsole.log(flatten_list([1, 2, [3, 4], [5, 6]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            for (let j = 0; j < list1[i].length; j++) {\n                list2.push(list1[i][j]);\n            }\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[ 1, 2, 3, 4 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [4, [5, 6, [7, 8]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [4, [5, 6]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            for (let j = 0; j < list1[i].length; j++) {\n                list2.push(list1[i][j]);\n            }\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], 4, [5, 6, [7, 8], 9], 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[ 1, 2, 3, 4, 5, 6, [ 7, 8 ], 9, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nlet list1 = [1, [2, [3, 4], 5], 6];\nconsole.log(flatten_list(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            result = result.concat(flatten_list(list1[i]));\n        } else {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == \"number\") {\n            list2.push(list1[i]);\n        } else {\n            for (let j = 0; j < list1[i].length; j++) {\n                list2.push(list1[i][j]);\n            }\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[ 1, 2, [ 3, 4 ], 5, 6, 7 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [[4, 5], 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            result = result.concat(flatten_list(list1[i]));\n        } else {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let flat_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            flat_list.push(list1[i]);\n        } else {\n            flat_list = flat_list.concat(flatten_list(list1[i]));\n        }\n    }\n    return flat_list;\n}\n\nconsole.log(flatten_list([1, [2, 3], [4, [5, 6, [7, 8]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == 'number') {\n            result.push(list1[i]);\n        }\n        else {\n            result = result.concat(flatten_list(list1[i]));\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([[1, 2], [3, 4], [5, 6]]));\nconsole.log(flatten_list([[1, 2], [3, 4, [5, 6]]]));\nconsole.log(flatten_list([[1, 2], [3, 4, [5, [6, 7]]]]));\nconsole.log(flatten_list([[1, 2], [3, 4, [5, [6, [7, 8]]]]]));\nconsole.log(flatten_list([[1, 2], [3, 4, [5, [6, [7, [8, [9, 10]]]]]]]));\nconsole.log(flatten_list([1, [2, [3, 4], [[5], 6]], 7, [8, [9, 10]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n[ 1, 2, 3, 4, 5, 6 ]\n[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            result.push(list1[i]);\n        } else {\n            result = result.concat(flatten_list(list1[i]));\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([1, [2, 3], [4, [5, 6], 7], 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 7, 8, 9\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [4, [5, 6, [7, 8]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nlet list1 = [1, 2, [3, 4, [5, 6, [7, 8, 9]]]];\nconsole.log(flatten_list(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 7, 8, 9\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [4, [5, 6], 7], 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123893,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, 2, 3, [4, 5, 6, [7, 8, 9]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123893,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 7, 8, 9\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, [4, 5], 6], 7], 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, [4, 5], 6], 7], 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            result = result.concat(flatten_list(list1[i]));\n        } else {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([1, [2, 3], [4, [5, 6]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123894,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [4, [5, 6]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [[4, 5], 6]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            result.push(list1[i]);\n        } else {\n            result = result.concat(flatten_list(list1[i]));\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([1, [2, 3], [[4], [5, 6, [7, 8, [9]]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123894,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 7, 8, 9\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, [4, 5], 6], 7], 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\nconsole.log(flatten_list([[[3]], [4], 5]));\nconsole.log(flatten_list([[[3]]]));\nconsole.log(flatten_list([[[[[[[[[[3]]]]]]]]]]));\nconsole.log(flatten_list([1, 2, 3]));\nconsole.log(flatten_list([1, [1, 1], 1]));\nconsole.log(flatten_list([[[3]]]));\nconsole.log(flatten_list([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123894,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n[ 3, 4, 5 ]\n[ 3 ]\n[ 3 ]\n[ 1, 2, 3 ]\n[ 1, 1, 1, 1 ]\n[ 3 ]\n[]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            result.push(list1[i]);\n        } else {\n            result = result.concat(flatten_list(list1[i]));\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\nconsole.log(flatten_list([[[3]], [4], 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123894,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n[ 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123894,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            result = result.concat(flatten_list(list1[i]));\n        } else {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nlet list1: any = [1, [2, [3, 4], 5], 6];\nconsole.log(flatten_list(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123894,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [4, [5, [6, 7]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123894,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, 2, 3, [4, 5, [6, 7, 8]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123894,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\nconsole.log(flatten_list([1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123894,
      "stdout": "[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, [4, 5], 6], 7], 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\nconsole.log(flatten_list([1, [2, [3, 4, [5, 6]]], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123894,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [4, [5, 6]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123894,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, [4, 5], 6], 7], 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123894,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] instanceof Array) {\n            result = result.concat(flatten_list(list1[i]));\n        } else {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, 2], [3, 3]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123894,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2,\n  2, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [[4, 5], 6], 7, [8, [9, 10]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123894,
      "stdout": "[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, 2, [3, 4, [5, 6], 7], 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123894,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [[4, 5], 6]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123894,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123894,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\nconsole.log(flatten_list([1, [2, 3], 4, [5, 6, [7, 8, 9], 10]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123894,
      "stdout": "[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, 2], [3, 3]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123894,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2,\n  2, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [[4], [5, 6, [7, 8, [9]]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123894,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 7, 8, 9\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == \"number\") {\n            list2.push(list1[i]);\n        }\n        else {\n            let list3: number[] = flatten_list(list1[i]);\n            for (let j = 0; j < list3.length; j++) {\n                list2.push(list3[j]);\n            }\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [4, [5, 6], 7], 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123894,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    list1.forEach(function (element) {\n        if (Array.isArray(element)) {\n            list2 = list2.concat(flatten_list(element));\n        } else {\n            list2.push(element);\n        }\n    });\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [4, [5, 6]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123894,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\nconsole.log(flatten_list([[[3]], [4], 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123896,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n[ 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\nconsole.log(flatten_list([[[3]], [4], 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123896,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n[ 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, 2, [3, 4, [5, 6], 7], 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123896,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list = list.concat(flatten_list(list1[i]));\n        } else {\n            list.push(list1[i]);\n        }\n    }\n    return list;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\nconsole.log(flatten_list([[[3]], [4], 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123896,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n[ 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\nconsole.log(flatten_list([[[3]], [2, 1], [1, [2, [3]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123896,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n[ 3, 2, 1, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123897,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nlet list1: any = [1, [2, [3, 4], 5], 6];\nconsole.log(flatten_list(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123897,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, 2, [3, 4, [5, 6, 7], 8], 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123897,
      "stdout": "[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [[4, 5], 6]]));\nconsole.log(flatten_list([1, [2, [3, [4, 5], 6], 7], 8]));\nconsole.log(flatten_list([1, [2, [3, [4, [5, 6]]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123897,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123897,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            for (let j = 0; j < list1[i].length; j++) {\n                list2.push(list1[i][j]);\n            }\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3]], 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123897,
      "stdout": "[ 1, 2, [ 3 ], 4 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, 2], [3, 3]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123897,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2,\n  2, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123897,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            result = result.concat(flatten_list(list1[i]));\n        } else {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([1, [2, [3, [4, 5], 6], 7], 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123897,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\nconsole.log(flatten_list([[[3]], [4], 5]));\nconsole.log(flatten_list([[[3]]]));\nconsole.log(flatten_list([[[[1], [[[2]]], [[[[[[[3]]]]]]]]]]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123897,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n[ 3, 4, 5 ]\n[ 3 ]\n[ 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123894,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123897,
      "stdout": "[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == 'number') {\n            list2.push(list1[i]);\n        }\n        else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nlet list1: any = [1, [2, [3, 4], 5], 6];\nconsole.log(flatten_list(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123897,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, 2], [3, 3]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123897,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2,\n  2, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == 'number') {\n            list2.push(list1[i]);\n        }\n        else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123897,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] instanceof Array) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\nconsole.log(flatten_list([[[3]], [4], 5]));\nconsole.log(flatten_list([[[3]]]));\nconsole.log(flatten_list([[[[1], [[[2]]], [[[[[[[3]]]]]]]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123897,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n[ 3, 4, 5 ]\n[ 3 ]\n[ 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let flat_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            flat_list = flat_list.concat(flatten_list(list1[i]));\n        } else {\n            flat_list.push(list1[i]);\n        }\n    }\n    return flat_list;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, 2], [3, 3]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123897,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2,\n  2, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123897,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\nconsole.log(flatten_list([[[3]], [4], [5], [[[5]]], 6, 7, [[7]]]));\nconsole.log(flatten_list([[1, 1], 2, [[3, 4], 5], [[[5]]], 6, 7, [[7]]]));\nconsole.log(flatten_list([[1, 1], 2, [[3, 4], 5], [[[5]]], 6, 7, [[7]]]));\nconsole.log(flatten_list([[1, 1], 2, [[3, 4], 5], [[[5]]], 6, 7, [[7]]]));\nconsole.log(flatten_list([[1, 1], 2, [[3, 4], 5], [[[5]]], 6, 7, [[7]]]));\nconsole.log(flatten_list([[1, 1], 2, [[3, 4], 5], [[[5]]], 6, 7, [[7]]]));\nconsole.log(flatten_list([[1, 1], 2, [[3, 4], 5], [[[5]]], 6, 7, [[7]]]));\nconsole.log(flatten_list([[1, 1], 2, [[3, 4], 5], [[[5]]], 6, 7, [[7]]]));\nconsole.log(flatten_list([[1, 1], 2, [[3, 4], 5], [[[5]]], 6, 7, [[7]]]));\nconsole.log(flatten_list([[1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123897,
      "stdout": "../../../../tmp/tmpq8m9sznj.ts(26,1): error TS1005: ',' expected.\n../../../../tmp/tmpq8m9sznj.ts(26,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            result.push(list1[i]);\n        } else {\n            result = result.concat(flatten_list(list1[i]));\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123897,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    list1.forEach(element => {\n        if (Array.isArray(element)) {\n            list2 = list2.concat(flatten_list(element));\n        } else {\n            list2.push(element);\n        }\n    });\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [[4, 5], 6], [[[7, 8], 9], 10]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123897,
      "stdout": "[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            result = result.concat(flatten_list(list1[i]));\n        } else {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([1, [2, [3, [4, 5], 6], 7], 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123897,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\nconsole.log(flatten_list([[[3]], [2, 1], 0]));\nconsole.log(flatten_list([-1, [1, [-2], 1], -1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123899,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n[ 3, 2, 1, 0 ]\n[ -1, 1, -2, 1, -1 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [[4, 5], 6]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, [4, 5], 6], 7], 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    list1.forEach(element => {\n        if (Array.isArray(element)) {\n            list2 = list2.concat(flatten_list(element));\n        } else {\n            list2.push(element);\n        }\n    });\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [4, [5, 6]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123899,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [[4], [5, 6, [7, 8, [9]]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123894,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 7, 8, 9\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        }\n        else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [4, [5, 6]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123899,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123897,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], 4, [5, 6, [7, 8, 9]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123899,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 7, 8, 9\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    list1.forEach(element => {\n        if (Array.isArray(element)) {\n            list2 = list2.concat(flatten_list(element));\n        }\n        else {\n            list2.push(element);\n        }\n    });\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1.1]], [2, [2.1, 2.2]], [3, [3.1]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123900,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n    1, 1.1,   2, 2.1,\n  2.2,   3, 3.1\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    list1.forEach(element => {\n        if (Array.isArray(element)) {\n            list2 = list2.concat(flatten_list(element));\n        } else {\n            list2.push(element);\n        }\n    });\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\nconsole.log(flatten_list([[[3]], [4], [[5]], 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123899,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n[ 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [4, [5, 6]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123899,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, 2, [3, 4], [5, [6, 7]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123900,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2 = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123900,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [4, [5, 6]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            result = result.concat(flatten_list(list1[i]));\n        } else {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]]]));\nconsole.log(flatten_list([[[3]], [4], [5], [[[6]]]]));\nconsole.log(flatten_list([[[3]], [4], [5], [[[6]]], 7]));\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]], [6, 7], 8]));\nconsole.log(flatten_list([1, [2, [[3]], [4, [[5]]], 6, 7], 8]));\nconsole.log(flatten_list([1, [2, [[3]], [4, [[5]]], 6, 7], 8, [9, 10]]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123900,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[ 1, 1, 1, 2, 2, 2 ]\n[ 3, 4, 5, 6 ]\n[ 3, 4, 5, 6, 7 ]\n[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            result = result.concat(flatten_list(list1[i]));\n        } else {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123899,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, 2, [3, 4], [5, [6, 7]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123900,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == \"number\") {\n            list2.push(list1[i]);\n        }\n        else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [[4], [5, 6, [7, 8, [9]]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123900,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 7, 8, 9\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [4, [5, 6]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123900,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] instanceof Array) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123900,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [4, [5, 6]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            for (let j = 0; j < list1[i].length; j++) {\n                list2.push(list1[i][j]);\n            }\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], 4, [5, 6]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123900,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [[4], [5, 6, [7, 8, [9]]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123900,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 7, 8, 9\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2 = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [4, [5, 6]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123900,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    list1.forEach(element => {\n        if (Array.isArray(element)) {\n            list2 = list2.concat(flatten_list(element));\n        } else {\n            list2.push(element);\n        }\n    });\n    return list2;\n}\n\nconsole.log(flatten_list([1, 2, [3, 4], [5, 6]]));\nconsole.log(flatten_list([1, [2, [3, 4], [[5], 6]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123900,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123900,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\nconsole.log(flatten_list([[[3]], [4], 5]));\nconsole.log(flatten_list([[[3]]]));\nconsole.log(flatten_list([[[[1], [[[2]]], [[[[[[[3]]]]]]]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123900,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n[ 3, 4, 5 ]\n[ 3 ]\n[ 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123900,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] instanceof Array) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\nconsole.log(flatten_list([1, [2, [3, 4], [[5], 6]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123900,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n  let list2: number[] = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (Array.isArray(list1[i])) {\n      list2 = list2.concat(flatten_list(list1[i]));\n    } else {\n      list2.push(list1[i]);\n    }\n  }\n  return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\nconsole.log(flatten_list([[[3]], [4], [5], [[[6]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123901,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n[ 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [[4], [5, 6, [7, 8, [9]]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123894,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 7, 8, 9\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, [4, 5], 6], 7], 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [[4], [5, 6, [7, 8, [9]]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123900,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 7, 8, 9\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            for (let j = 0; j < list1[i].length; j++) {\n                list2.push(list1[i][j]);\n            }\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], 4, [5, 6, 7], 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123901,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nlet list1 = [1, 2, [3, 4, [5, 6, 7], 8], 9, 10];\nconsole.log(flatten_list(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123901,
      "stdout": "[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\nconsole.log(flatten_list([1, [2, 3], [4, [5, 6]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123901,
      "stdout": "[ 1, 2, 3, 4, 5, 6 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\nconsole.log(flatten_list([[[3]], [4], 5]));\nconsole.log(flatten_list([[[3]]]));\nconsole.log(flatten_list([[[[1], [[[2]]], [[[[[[[3]]]]]]]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123902,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n[ 3, 4, 5 ]\n[ 3 ]\n[ 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    list1.forEach(element => {\n        if (Array.isArray(element)) {\n            result = result.concat(flatten_list(element));\n        }\n        else {\n            result.push(element);\n        }\n    });\n    return result;\n}\n\nconsole.log(flatten_list([1, [2, [3, [4, 5]]]]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123902,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123902,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nlet list1 = [1, 2, [3, 4, [5, 6, 7], 8], 9, 10];\nconsole.log(flatten_list(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123901,
      "stdout": "[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, 2], [3, 3]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123897,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2,\n  2, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\nconsole.log(flatten_list([[[3]], [4], 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n[ 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123894,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [[4], [5, 6, [7, 8, [9]]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123894,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 7, 8, 9\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nlet list1: any = [1, 2, 3, [4, 5, 6, [7, 8, 9]]];\nconsole.log(flatten_list(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123902,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 7, 8, 9\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\nconsole.log(flatten_list([[[3]], [4], 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123896,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n[ 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nlet list1 = [1, [2, 3, [4, 5, 6], 7, 8], 9, 10];\nconsole.log(flatten_list(list1));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123902,
      "stdout": "[\n  1, 2, 3, 4,  5,\n  6, 7, 8, 9, 10\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i].length > 0) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([[1, 2, [3, 4]], [5, 6], 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123902,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1665510617,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123902,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let flat_list: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            flat_list.push(list1[i]);\n        } else {\n            flat_list = flat_list.concat(flatten_list(list1[i]));\n        }\n    }\n    return flat_list;\n}\n\nlet list1: any = [1, [2, [3, 4], [[5], 6]], 7, [8, [9]]];\nconsole.log(flatten_list(list1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123902,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 7, 8, 9\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\nconsole.log(flatten_list([[[3]], [4], 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n[ 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (Array.isArray(list1[i])) {\n            result = result.concat(flatten_list(list1[i]));\n        } else {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123902,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == \"number\") {\n            list2.push(list1[i]);\n        }\n        else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [4, [5, 6], 7], 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123902,
      "stdout": "[\n  1, 2, 3, 4,\n  5, 6, 7, 8\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            result.push(list1[i]);\n        } else {\n            result = result.concat(flatten_list(list1[i]));\n        }\n    }\n    return result;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123897,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] instanceof Array) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\nconsole.log(flatten_list([[[3]], [4], 5]));\nconsole.log(flatten_list([[[3]]]));\nconsole.log(flatten_list([[[[1], [[[2]]], [[[[[[[3]]]]]]]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123897,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n[ 3, 4, 5 ]\n[ 3 ]\n[ 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123902,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123891,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] instanceof Array) {\n            list2 = list2.concat(flatten_list(list1[i]));\n        } else {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\nconsole.log(flatten_list([[[3]], [4], 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123902,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n[ 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] === 'number') {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, 3], [[4], [5, 6, [7, 8, [9]]]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123902,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 7, 8, 9\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to flatten a given nested array structure.\nfunction flatten_list(list1: any): number[] {\n    let list2: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (typeof list1[i] == \"number\") {\n            list2.push(list1[i]);\n        } else {\n            list2 = list2.concat(flatten_list(list1[i]));\n        }\n    }\n    return list2;\n}\n\nconsole.log(flatten_list([1, [2, [3, 4], [[5]]]]));\nconsole.log(flatten_list([[1, [1, 1]], [2, [2, 2]], [3, [3, 3]]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = flatten_list;\n  assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);\n  assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);\n}\n\ntest();",
      "timestamp": 1666123902,
      "stdout": "[ 1, 2, 3, 4, 5 ]\n[\n  1, 1, 1, 2, 2,\n  2, 3, 3, 3\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}