{
  "name": "mbpp_576_is_Sub_Array",
  "language": "ts",
  "prompt": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var M = A.length;\n    var N = B.length;\n    for (var i = 0; i < N - M; i++) {\n        var j;\n        for (j = 0; j < M; j++) {\n            if (B[i + j] != A[j])\n                break;\n        }\n        if (j == M)\n            return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmplbzwxn8j.js:20:12)\n    at Object.<anonymous> (/tmp/tmplbzwxn8j.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n  let i = 0;\n  let j = 0;\n  while (i < A.length && j < B.length) {\n    if (A[i] == B[j]) {\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  if (j == B.length) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n            flag = true;\n        }\n        else {\n            i++;\n            flag = false;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nlet A = [1, 2, 3, 4, 5];\nlet B = [1, 2, 3, 4, 5, 6];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "true\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpn8b7x7cg.js:32:12)\n    at Object.<anonymous> (/tmp/tmpn8b7x7cg.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var M = A.length;\n    var N = B.length;\n    for (var i = 0; i <= N - M; i++) {\n        var j;\n        for (j = 0; j < M; j++) {\n            if (B[i + j] != A[j]) {\n                break;\n            }\n        }\n        if (j == M) {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\n\nlet arr1: number[] = [1, 2, 3, 4, 5, 6];\nlet arr2: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet result: boolean = is_Sub_Array(arr1, arr2);\nconsole.log(result);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "false\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\n\nlet A = [1, 2, 3, 4, 5];\nlet B = [1, 2, 3];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "false\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n            flag = true;\n        }\n        else {\n            i++;\n            flag = false;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3e25ljp1.js:29:12)\n    at Object.<anonymous> (/tmp/tmp3e25ljp1.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                for (k = 0; k < B.length; k++) {\n                    if (A[i + k] == B[j + k]) {\n                        flag = true;\n                    }\n                    else {\n                        flag = false;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "../../../../tmp/tmpj3t16juy.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpj3t16juy.ts(32,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                break;\n            }\n        }\n        if (j == B.length) {\n            return false;\n        }\n    }\n    return true;\n}\n\nlet A = [1, 2, 3, 4, 5, 6];\nlet B = [1, 2, 3, 4];\n\nlet result = is_Sub_Array(A, B);\nconsole.log(result);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "false\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\nlet arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet arr2 = [2, 4, 6, 8];\nconsole.log(is_Sub_Array(arr1, arr2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    for (i = 0; i < B.length; i++) {\n        for (j = 0; j < A.length; j++) {\n            if (B[i] == A[j]) {\n                break;\n            }\n        }\n        if (j == A.length) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4gafyxw6.js:22:12)\n    at Object.<anonymous> (/tmp/tmp4gafyxw6.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let flag = false;\n    while (i < A.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n            flag = true;\n        }\n        else {\n            i++;\n            flag = false;\n        }\n        if (j == B.length) {\n            k = 1;\n            break;\n        }\n    }\n    if (k == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    while (i < A.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n            flag = true;\n        }\n        else {\n            i++;\n            flag = false;\n        }\n    }\n    return flag;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet B: number[] = [2, 3, 4, 5];\nconsole.log(is_Sub_Array(A, B));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "false\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp8khmd5j7.js:27:12)\n    at Object.<anonymous> (/tmp/tmp8khmd5j7.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [3, 4, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            j = 0;\n            k++;\n            i = k;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "../../../../tmp/tmpis9_4wi0.ts(35,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                for (k = 0; k < B.length; k++) {\n                    if (A[i + k] == B[j + k]) {\n                        flag = true;\n                    }\n                    else {\n                        flag = false;\n                    }\n                }\n            }\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nlet A = [1, 2, 3, 4, 5];\nlet B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "true\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpcmdgb_vu.js:36:12)\n    at Object.<anonymous> (/tmp/tmpcmdgb_vu.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6, 7, 8, 9, 10, 11, 12\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "../../../../tmp/tmp9094cy3c.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmp9094cy3c.ts(32,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var M = A.length;\n    var N = B.length;\n\n    /* A loop to slide pat[] one by one */\n    for (var i = 0; i <= N - M; i++) {\n        var j;\n\n        /* For current index i, check for pattern match */\n        for (j = 0; j < M; j++)\n            if (B[i + j] != A[j])\n                break;\n\n        if (j == M)\n            return true;\n    }\n\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "../../../../tmp/tmpzlqz83m9.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpzlqz83m9.ts(32,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nlet A: number[] = [1, 2, 3, 4, 5];\nlet B: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    let count: number = 0;\n    while (i < A.length) {\n        if (A[i] == B[j]) {\n            flag = true;\n            count++;\n            j++;\n        }\n        else {\n            flag = false;\n            j = 0;\n            count = 0;\n        }\n        if (count == B.length) {\n            break;\n        }\n        i++;\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nlet A: number[] = [1, 2, 3, 4, 5, 6];\nlet B: number[] = [2, 3, 4];\nlet C: number[] = [7, 8, 9];\nlet result: boolean = is_Sub_Array(A, B);\nconsole.log(result);\nresult = is_Sub_Array(A, C);\nconsole.log(result);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpt13xpekr.js:42:12)\n    at Object.<anonymous> (/tmp/tmpt13xpekr.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var M: number = A.length;\n    var N: number = B.length;\n    /* A loop to slide pat[] one by one */\n    for (var i = 0; i <= N - M; i++) {\n        var j: number;\n        /* For current index i, check for pattern match */\n        for (j = 0; j < M; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == M)\n            return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let flag = false;\n    while (i < A.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n            flag = true;\n        }\n        else {\n            flag = false;\n            i++;\n        }\n        if (j == B.length) {\n            k = 1;\n            break;\n        }\n    }\n    if (k == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "../../../../tmp/tmpfahq_pes.ts(37,1): error TS1005: ',' expected.\n../../../../tmp/tmpfahq_pes.ts(37,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n            flag = true;\n        }\n        else {\n            j = 0;\n            flag = false;\n            i++;\n        }\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 4, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpn7w9zbjc.js:28:12)\n    at Object.<anonymous> (/tmp/tmpn7w9zbjc.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp411hzsw7.js:27:12)\n    at Object.<anonymous> (/tmp/tmp411hzsw7.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            j = 0;\n            k++;\n            i = k;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "../../../../tmp/tmpy7ycwrk5.ts(30,1): error TS1005: ',' expected.\n../../../../tmp/tmpy7ycwrk5.ts(30,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nlet A: number[] = [1, 2, 3, 4, 5, 6];\nlet B: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet C: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet D: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet E: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet F: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet G: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet H: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet I: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet J: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet K: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet L: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet M: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet N: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "../../../../tmp/tmp8vn5ez4b.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmp8vn5ez4b.ts(42,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nvar A = [1, 2, 3, 4, 5, 6, 7];\nvar B = [1, 2, 3, 4, 5, 6, 7];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8];\nvar D = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar E = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\nconsole.log(is_Sub_Array(A, D));\nconsole.log(is_Sub_Array(A, E));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "true\ntrue\ntrue\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\nlet arr1: number[] = [1, 2, 3, 4, 5];\nlet arr2: number[] = [1, 2, 3, 4, 5];\nlet arr3: number[] = [1, 2, 3, 4, 5, 6];\nlet arr4: number[] = [1, 2, 3, 4, 5, 6, 7];\nlet arr5: number[] = [1, 2, 3, 4, 5, 6, 7, 8];\nlet arr6: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet arr7: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet arr8: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nlet arr9: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nlet arr10: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\nlet arr11: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\nlet arr12: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\nlet arr13: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nlet arr\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var M = A.length;\n    var N = B.length;\n    for (var i = 0; i <= N - M; i++) {\n        var j;\n        for (j = 0; j < M; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == M)\n            return true;\n    }\n    return false;\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 4, 5];\nvar C = [1, 2, 3, 4, 5, 6];\nif (is_Sub_Array(A, B))\n    console.log(\"Array B is a subarray of A\");\nelse\n    console.log(\"Array B is not a subarray of A\");\nif (is_Sub_Array(A, C))\n    console.log(\"Array C is a subarray of A\");\nelse\n    console.log(\"Array C is not a subarray of A\");\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "Array B is not a subarray of A\nArray C is a subarray of A\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if (flag == false) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9x6p09kb.js:22:12)\n    at Object.<anonymous> (/tmp/tmp9x6p09kb.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n            j = 0;\n        }\n        if (j == B.length) {\n            flag = true;\n            break;\n        }\n    }\n    return flag;\n}\n\nlet A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet B = [5, 6, 7, 8, 9, 10];\nconsole.log(is_Sub_Array(A, B));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            flag = true;\n            i++;\n            j++;\n        }\n        else {\n            flag = false;\n            i++;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpg6pjkga0.js:29:12)\n    at Object.<anonymous> (/tmp/tmpg6pjkga0.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var i = 0;\n    var j = 0;\n    var flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar D = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(C, D));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "true\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let result = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] === B[j]) {\n            i++;\n            j++;\n            result = true;\n        }\n        else {\n            i++;\n            result = false;\n        }\n    }\n    return result;\n}\n\nlet A = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet B = [2, 3, 4];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "true\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmeervhyp.js:27:12)\n    at Object.<anonymous> (/tmp/tmpmeervhyp.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nlet A = [1, 2, 3, 4, 5];\nlet B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var M: number = A.length;\n    var N: number = B.length;\n    for (var i = 0; i < N - M; i++) {\n        var j: number;\n        for (j = 0; j < M; j++) {\n            if (B[i + j] != A[j]) {\n                break;\n            }\n        }\n        if (j == M) {\n            return true;\n        }\n    }\n    return false;\n}\nvar A: number[] = [1, 2, 3, 4, 5, 6];\nvar B: number[] = [1, 2, 4, 5, 6];\nvar C: boolean = is_Sub_Array(A, B);\nif (C == true) {\n    console.log(\"B is a subarray of A\");\n}\nelse {\n    console.log(\"B is not a subarray of A\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "B is not a subarray of A\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0i9bf8qe.js:31:12)\n    at Object.<anonymous> (/tmp/tmp0i9bf8qe.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5];\nlet B: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet C: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet D: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet E: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet F: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet G: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet H: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet I: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet J: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet K: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet L: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet M: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet N: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet O: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "../../../../tmp/tmpiuo38woy.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmpiuo38woy.ts(38,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if (flag == false) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmph0384mwz.js:23:12)\n    at Object.<anonymous> (/tmp/tmph0384mwz.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5];\nlet B: number[] = [1, 2, 3, 4, 5];\n\nlet result: boolean = is_Sub_Array(A, B);\nconsole.log(result);\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                for (k = 0; k < B.length; k++) {\n                    if (A[i + k] == B[j + k]) {\n                        flag = true;\n                    }\n                    else {\n                        flag = false;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n        if (j == B.length) {\n            flag = true;\n        }\n    }\n    return flag;\n}\nlet A = [1, 2, 3, 4, 5];\nlet B = [2, 3, 4];\nconsole.log(is_Sub_Array(A, B));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = 0;\n    let count = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n            flag = 1;\n        }\n        else {\n            if (flag == 1) {\n                j = 0;\n                flag = 0;\n            }\n            else {\n                i++;\n            }\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var M = A.length;\n    var N = B.length;\n    for (var i = 0; i <= N - M; i++) {\n        var j;\n        for (j = 0; j < M; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == M)\n            return true;\n    }\n    return false;\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 4, 5];\nif (is_Sub_Array(A, B))\n    console.log(\"A is a subarray of B\");\nelse\n    console.log(\"A is not a subarray of B\");\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "A is not a subarray of B\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nlet A: number[] = [1, 2, 3, 4, 5, 6];\nlet B: number[] = [1, 2, 3];\nlet result: boolean = is_Sub_Array(A, B);\nif (result == true) {\n    console.log(\"Array B is subarray of array A\");\n}\nelse {\n    console.log(\"Array B is not subarray of array A\");\n}\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "Array B is not subarray of array A\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "../../../../tmp/tmpsoe0s4g4.ts(30,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0, j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [2, 3, 4, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar D = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar E = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar F = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar G = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar H = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar I = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar J = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar K = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar L = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar M = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar N = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar O = [1, 2, 3, 4, 5, 6, 7\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "../../../../tmp/tmp2vr7d00o.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmp2vr7d00o.ts(42,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nlet arr1 = [1, 2, 3, 4, 5];\nlet arr2 = [1, 2, 3, 4, 5, 6, 7];\nlet arr3 = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet arr4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet arr5 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\nlet arr6 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30];\nlet arr7 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40];\nlet arr8 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "../../../../tmp/tmpbk6msqb6.ts(35,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        if (A[i] == B[j]) {\n            j++;\n            if (j == B.length) {\n                flag = true;\n                break;\n            }\n        }\n        else {\n            j = 0;\n        }\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "../../../../tmp/tmpu6mxznnl.ts(31,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "../../../../tmp/tmp9rgaqyeb.ts(31,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var M = A.length;\n    var N = B.length;\n\n    /* A loop to slide pat[] one by one */\n    for (var i = 0; i <= N - M; i++) {\n        var j;\n\n        /* For current index i, check for pattern match */\n        for (j = 0; j < M; j++)\n            if (B[i + j] != A[j])\n                break;\n\n        if (j == M)\n            return true;\n    }\n\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5, 6];\nlet B: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet C: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet D: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet E: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet F: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet G: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet H: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet I: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet J: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet K: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet L: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet M: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet N: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet O: number[] = [1, 2, 3, 4, 5, 6, 7, 8\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "../../../../tmp/tmp_8w865cb.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmp_8w865cb.ts(38,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n        if (j == B.length) {\n            flag = true;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\nlet A = [1, 2, 3, 4, 5, 6];\nlet B = [2, 3, 4];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n            flag = true;\n        }\n        else {\n            i++;\n            flag = false;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nlet A = [1, 2, 3, 4, 5];\nlet B = [1, 2, 3, 4];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "true\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp8cas0l06.js:32:12)\n    at Object.<anonymous> (/tmp/tmp8cas0l06.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var M = A.length;\n    var N = B.length;\n    /* A loop to slide pat[] one by one */\n    for (var i = 0; i <= N - M; i++) {\n        var j;\n        /* For current index i, check for pattern match */\n        for (j = 0; j < M; j++)\n            if (B[i + j] !== A[j])\n                break;\n        if (j === M)\n            return true;\n    }\n    return false;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "../../../../tmp/tmp_sqaxjsd.ts(20,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var M = A.length;\n    var N = B.length;\n    for (var i = 0; i <= N - M; i++) {\n        var j;\n        for (j = 0; j < M; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == M)\n            return true;\n    }\n    return false;\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 4, 5];\nvar C = [1, 2, 3, 4, 5, 6];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124099,
      "stdout": "false\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var M = A.length;\n    var N = B.length;\n    for (var i = 0; i <= N - M; i++) {\n        var j;\n        for (j = 0; j < M; j++) {\n            if (B[i + j] != A[j]) {\n                break;\n            }\n        }\n        if (j == M) {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124099,
      "stdout": "../../../../tmp/tmpzbc_x5q0.ts(32,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nlet A = [1, 2, 3, 4, 5];\nlet B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124099,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let M = A.length;\n    let N = B.length;\n    for (let i = 0; i < N - M; i++) {\n        let j;\n        for (j = 0; j < M; j++) {\n            if (B[i + j] != A[j]) {\n                break;\n            }\n        }\n        if (j == M) {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124099,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmptmyk87za.js:22:12)\n    at Object.<anonymous> (/tmp/tmptmyk87za.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length) {\n        if (A[i] == B[j]) {\n            flag = true;\n            j++;\n        }\n        else {\n            flag = false;\n            j = 0;\n        }\n        if (j == B.length) {\n            break;\n        }\n        i++;\n    }\n    return flag;\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124100,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpi3m5533q.js:29:12)\n    at Object.<anonymous> (/tmp/tmpi3m5533q.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number, j: number;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                break;\n            }\n        }\n        if (j == B.length) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if (flag == false) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9x6p09kb.js:22:12)\n    at Object.<anonymous> (/tmp/tmp9x6p09kb.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nlet A: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet B: number[] = [1, 2, 3, 4, 5];\nlet C: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet D: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet E: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet F: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet G: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet H: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet I: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet J: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet K: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet L: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet M: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet N: number[] =\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124099,
      "stdout": "../../../../tmp/tmp97qrmu9_.ts(42,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        if (A[i] == B[j]) {\n            for (k = i, j = 0; k < A.length && j < B.length; k++ , j++) {\n                if (A[k] != B[j]) {\n                    break;\n                }\n            }\n            if (j == B.length) {\n                flag = true;\n                break;\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124100,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n            flag = true;\n        }\n        else {\n            i++;\n            flag = false;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nlet A = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet B = [2, 3, 4];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124100,
      "stdout": "true\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmplv6nwg_2.js:32:12)\n    at Object.<anonymous> (/tmp/tmplv6nwg_2.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if (flag == false) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmph0384mwz.js:23:12)\n    at Object.<anonymous> (/tmp/tmph0384mwz.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag = false;\n    for (let i = 0; i < A.length; i++) {\n        for (let j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\n\nlet A = [1, 2, 3, 4, 5];\nlet B = [1, 2, 3, 4, 5];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124099,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124100,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nlet A = [1, 2, 3, 4, 5, 6];\nlet B = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\nlet D = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\nlet E = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30];\nlet F = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40];\nlet G = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124100,
      "stdout": "../../../../tmp/tmp9ptr_81k.ts(34,1): error TS1005: ',' expected.\n../../../../tmp/tmp9ptr_81k.ts(34,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nlet A = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet B = [2, 3, 4, 5];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124100,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7, 8, 9, 10\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124100,
      "stdout": "../../../../tmp/tmpadchv2cp.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpadchv2cp.ts(32,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124100,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6tmart6j.js:24:12)\n    at Object.<anonymous> (/tmp/tmp6tmart6j.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var M = A.length;\n    var N = B.length;\n    for (var i = 0; i <= N - M; i++) {\n        var j;\n        for (j = 0; j < M; j++) {\n            if (B[i + j] != A[j]) {\n                break;\n            }\n        }\n        if (j == M) {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nlet A: number[] = [1, 2, 3, 4, 5, 6];\nlet B: number[] = [1, 2, 3, 4, 5, 6];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124100,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n        }\n        j++;\n    }\n    return (i == A.length);\n}\n\nlet A = [1, 2, 3, 4, 5];\nlet B = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124100,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124100,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\n\nlet A = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet B = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nlet D = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n\nlet result = is_Sub_Array(A, B);\nconsole.log(result);\n\nresult = is_Sub_Array(A, C);\nconsole.log(result);\n\nresult = is_Sub_Array(A, D);\nconsole.log(result);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124100,
      "stdout": "true\ntrue\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let flag: boolean = false;\n    let i: number = 0;\n    let j: number = 0;\n    while (i < A.length) {\n        if (A[i] == B[j]) {\n            flag = true;\n            j++;\n        }\n        else {\n            flag = false;\n            j = 0;\n        }\n        if (j == B.length) {\n            break;\n        }\n        i++;\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124100,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpv3no2_jn.js:27:12)\n    at Object.<anonymous> (/tmp/tmpv3no2_jn.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if (flag == false) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmph0384mwz.js:23:12)\n    at Object.<anonymous> (/tmp/tmph0384mwz.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [3, 4, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124100,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let m = A.length;\n    let n = B.length;\n    for (let i = 0; i < n - m; i++) {\n        let j;\n        for (j = 0; j < m; j++) {\n            if (B[i + j] != A[j]) {\n                break;\n            }\n        }\n        if (j == m) {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124100,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1yq1l7d1.js:22:12)\n    at Object.<anonymous> (/tmp/tmp1yq1l7d1.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let flag = false;\n    while (i < A.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n            flag = true;\n        }\n        else {\n            j = 0;\n            flag = false;\n            i++;\n        }\n        if (j == B.length) {\n            k = 1;\n            break;\n        }\n    }\n    if (k == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124100,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\nlet A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet B = [2, 4, 6, 8, 10];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124100,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var M = A.length;\n    var N = B.length;\n    for (var i = 0; i <= N - M; i++) {\n        var j;\n        for (j = 0; j < M; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == M)\n            return true;\n    }\n    return false;\n}\n\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 4, 5];\nif (is_Sub_Array(A, B))\n    console.log(\"Array B is a subarray of A\");\nelse\n    console.log(\"Array B is not a subarray of A\");\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124102,
      "stdout": "Array B is not a subarray of A\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nlet A = [1, 2, 3, 4, 5];\nlet B = [1, 2, 3, 4];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124102,
      "stdout": "false\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n            flag = true;\n        }\n        else {\n            j = 0;\n            i = ++k;\n            flag = false;\n        }\n    }\n    if (flag) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6], [2, 4, 3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124102,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpi_vd7zi6.js:33:12)\n    at Object.<anonymous> (/tmp/tmpi_vd7zi6.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nlet A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet B = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet D = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(C, D));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124102,
      "stdout": "true\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5, 6];\nlet B: number[] = [2, 3, 4, 5];\nlet C: number[] = [1, 2, 3, 4, 5, 6];\nlet D: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\nconsole.log(is_Sub_Array(A, D));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124102,
      "stdout": "false\ntrue\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let flag = false;\n    while (i < A.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n            flag = true;\n        }\n        else {\n            flag = false;\n            i++;\n            j = 0;\n        }\n        if (j == B.length) {\n            k = 1;\n            break;\n        }\n    }\n    if (k == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124102,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var M = A.length;\n    var N = B.length;\n    /* A loop to slide pat[] one by one */\n    for (var i = 0; i <= N - M; i++) {\n        var j;\n        /* For current index i, check for pattern match */\n        for (j = 0; j < M; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == M)\n            return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124102,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        if (A[i] == B[j]) {\n            for (k = i, j = 0; k < A.length && j < B.length; k++ , j++) {\n                if (A[k] != B[j]) {\n                    break;\n                }\n            }\n            if (j == B.length) {\n                flag = true;\n                break;\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124100,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if (flag == false) {\n            return false;\n        }\n    }\n    return true;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5];\nlet B: number[] = [1, 2, 3, 4, 5];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "true\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpexmzmoa4.js:25:12)\n    at Object.<anonymous> (/tmp/tmpexmzmoa4.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n  let i: number = 0;\n  let j: number = 0;\n  let flag: boolean = false;\n  for (i = 0; i < A.length; i++) {\n    for (j = 0; j < B.length; j++) {\n      if (A[i] == B[j]) {\n        flag = true;\n      } else {\n        flag = false;\n      }\n    }\n  }\n  if (flag == true) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nlet a: number[] = [1, 2, 3, 4, 5, 6];\nlet b: number[] = [1, 2, 3];\nlet c: number[] = [1, 2, 3, 4, 5, 6];\nlet d: number[] = [1, 2, 3];\nconsole.log(is_Sub_Array(a, b));\nconsole.log(is_Sub_Array(c, d));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "false\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nlet A = [1, 2, 3, 4, 5];\nlet B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet C = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet D = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet E = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet F = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet G = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet H = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet I = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet J = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet K = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet L = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet M = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet N = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet O = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet P = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet Q =\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124102,
      "stdout": "../../../../tmp/tmppx3xu38_.ts(44,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if (flag == false) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124097,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmph0384mwz.js:23:12)\n    at Object.<anonymous> (/tmp/tmph0384mwz.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            j++;\n        }\n    }\n    if (i == A.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]));\nconsole.log(is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124102,
      "stdout": "../../../../tmp/tmpopqlni7n.ts(27,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n        }\n        j++;\n    }\n    return (i == A.length);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "../../../../tmp/tmpj3t16juy.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpj3t16juy.ts(32,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5];\nlet B: number[] = [1, 2, 3];\n\nconsole.log(is_Sub_Array(A, B));\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "false\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "true\ntrue\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            flag = true;\n            i++;\n            j++;\n        }\n        else {\n            flag = false;\n            i++;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_Sub_Array([1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "../../../../tmp/tmp6v3n4l0o.ts(35,1): error TS1005: ',' expected.\n../../../../tmp/tmp6v3n4l0o.ts(35,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5];\nlet B: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet C: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet D: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet E: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet F: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet G: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet H: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet I: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet J: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet K: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet L: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet M: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet N: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet O: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124096,
      "stdout": "../../../../tmp/tmpiuo38woy.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmpiuo38woy.ts(38,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n            flag = true;\n        } else {\n            i++;\n            flag = false;\n        }\n    }\n    if (flag == true) {\n        return true;\n    } else {\n        return false;\n    }\n}\nlet A = [1, 2, 3, 4, 5, 6, 7];\nlet B = [2, 3, 4, 5];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "true\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp50ybs3ko.js:32:12)\n    at Object.<anonymous> (/tmp/tmp50ybs3ko.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var M = A.length;\n    var N = B.length;\n    for (var i = 0; i <= N - M; i++) {\n        var j;\n        for (j = 0; j < M; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == M)\n            return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "../../../../tmp/tmp0pp1r3et.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmp0pp1r3et.ts(32,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5];\nlet B: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet C: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\nlet D: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\nconsole.log(is_Sub_Array(A, D));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "true\ntrue\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nlet A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet B = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet D = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet E = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet F = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet G = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet H = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet I = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet J = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet K = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet L = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet M = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet N = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet O = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet P = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet Q = [1, 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "../../../../tmp/tmp6gm8ns5b.ts(39,1): error TS1005: ',' expected.\n../../../../tmp/tmp6gm8ns5b.ts(39,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number, j: number;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                break;\n            }\n        }\n        if (j == B.length) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpx4ifyq_r.js:24:12)\n    at Object.<anonymous> (/tmp/tmpx4ifyq_r.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let flag = false;\n    while (i < A.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n            flag = true;\n        }\n        else {\n            i++;\n            j = 0;\n            flag = false;\n        }\n        if (j == B.length) {\n            k = 1;\n            break;\n        }\n    }\n    if (k == 1) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5];\nlet B: number[] = [1, 2, 3];\nlet C: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet D: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\nconsole.log(is_Sub_Array(A, D));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124103,
      "stdout": "false\ntrue\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var M: number = A.length;\n    var N: number = B.length;\n    for (var i = 0; i < N - M; i++) {\n        var j: number;\n        for (j = 0; j < M; j++) {\n            if (B[i + j] != A[j]) {\n                break;\n            }\n        }\n        if (j == M) {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpunq7ip7e.js:22:12)\n    at Object.<anonymous> (/tmp/tmpunq7ip7e.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0, j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nlet A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet B = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nlet D = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\nconsole.log(is_Sub_Array(A, D));\nconsole.log(is_Sub_Array(B, C));\nconsole.log(is_Sub_Array(B, D));\nconsole.log(is_Sub_Array(C, D));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nlet A = [1, 2, 3, 4, 5, 6];\nlet B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(is_Sub_Array(A, B));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "true\ntrue\nfalse\ntrue\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7], [3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9, 10, 11,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "../../../../tmp/tmp5i0piy1r.ts(29,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                break;\n            }\n        }\n        if (j == B.length) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n            flag = true;\n        }\n        else {\n            j = 0;\n            i = ++k;\n            flag = false;\n        }\n    }\n    if (flag) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nlet A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet B = [2, 4, 6, 8, 10];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "false\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmplfwgi_6f.js:34:12)\n    at Object.<anonymous> (/tmp/tmplfwgi_6f.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\nlet A = [1, 2, 3, 4, 5, 6];\nlet B = [2, 3, 4];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "false\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var M: number = A.length;\n    var N: number = B.length;\n    /* A loop to slide pat[] one by one */\n    for (var i = 0; i <= N - M; i++) {\n        var j: number;\n        /* For current index i, check for pattern match */\n        for (j = 0; j < M; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == M)\n            return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            flag = true;\n            i++;\n            j++;\n        }\n        else {\n            flag = false;\n            i++;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "true\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpl2i61vpa.js:31:12)\n    at Object.<anonymous> (/tmp/tmpl2i61vpa.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if (flag == false) {\n            return false;\n        }\n    }\n    return true;\n}\n\nlet A = [1, 2, 3, 4, 5, 6];\nlet B = [1, 2, 3, 4, 5];\nlet C = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet D = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet E = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nlet F = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(A, C));\nconsole.log(is_Sub_Array(A, D));\nconsole.log(is_Sub_Array(A, E));\nconsole.log(is_Sub_Array(A, F));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "true\ntrue\ntrue\ntrue\ntrue\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp617qwugf.js:33:12)\n    at Object.<anonymous> (/tmp/tmp617qwugf.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [6, 7, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124106,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] < B[j]) {\n            i++;\n        }\n        else if (A[i] > B[j]) {\n            return false;\n        }\n        else {\n            i++;\n            j++;\n        }\n    }\n    if (j < B.length) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var M = A.length;\n    var N = B.length;\n    /* A loop to slide pat[] one by one */\n    for (var i = 0; i <= N - M; i++) {\n        var j;\n        /* For current index i, check for pattern match */\n        for (j = 0; j < M; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == M)\n            return true;\n    }\n    return false;\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\nvar D = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30];\nvar E = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40];\nvar F = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50];\nvar G = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "../../../../tmp/tmpyr3hma4k.ts(24,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0, j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    while (i < A.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n            if (j == B.length) {\n                flag = true;\n                break;\n            }\n        }\n        else {\n            i++;\n            j = 0;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var M = A.length;\n    var N = B.length;\n\n    /* A loop to slide pat[] one by one */\n    for (var i = 0; i <= N - M; i++) {\n        var j;\n\n        /* For current index i, check for pattern match */\n        for (j = 0; j < M; j++)\n            if (B[i + j] !== A[j])\n                break;\n\n        if (j === M)\n            return true;\n    }\n\n    return false;\n}\n\nvar A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nvar B = [2, 4, 6, 8, 10, 12];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124106,
      "stdout": "false\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124100,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n            flag = true;\n        }\n        else {\n            i++;\n            flag = false;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nlet A = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet B = [2, 3, 4, 5, 6];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124106,
      "stdout": "true\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpl439h5lg.js:32:12)\n    at Object.<anonymous> (/tmp/tmpl439h5lg.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [6, 7, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "true\ntrue\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124106,
      "stdout": "true\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if (flag == false) {\n            return false;\n        }\n    }\n    return true;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5];\nlet B: number[] = [1, 2, 3, 4, 5];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124106,
      "stdout": "true\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpiwx_zrzk.js:26:12)\n    at Object.<anonymous> (/tmp/tmpiwx_zrzk.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                for (k = 0; k < B.length; k++) {\n                    if (A[i + k] == B[j + k]) {\n                        flag = true;\n                    }\n                    else {\n                        flag = false;\n                    }\n                }\n            }\n        }\n    }\n    return flag;\n}\nlet arr1 = [1, 2, 3, 4, 5, 6, 7];\nlet arr2 = [2, 3, 4];\nconsole.log(is_Sub_Array(arr1, arr2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124106,
      "stdout": "false\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpciqcfwxu.js:31:12)\n    at Object.<anonymous> (/tmp/tmpciqcfwxu.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\n\nlet A: number[] = [1, 2, 3, 4, 5, 6];\nlet B: number[] = [1, 2, 3, 4, 5, 6];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124106,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var M = A.length;\n    var N = B.length;\n\n    /* A loop to slide pat[] one by one */\n    for (var i = 0; i <= N - M; i++) {\n        var j;\n\n        /* For current index i, check for pattern match */\n        for (j = 0; j < M; j++)\n            if (B[i + j] !== A[j])\n                break;\n\n        if (j === M)\n            return true;\n    }\n\n    return false;\n}\n\nconsole.log(is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124106,
      "stdout": "../../../../tmp/tmp2azri6mj.ts(25,1): error TS1005: ',' expected.\n../../../../tmp/tmp2azri6mj.ts(25,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let flag = false;\n    while (i < A.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n            flag = true;\n        }\n        else {\n            i++;\n            flag = false;\n        }\n        if (j == B.length) {\n            k = 1;\n            break;\n        }\n    }\n    if (k == 1 && flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124107,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    return flag;\n}\nlet A: number[] = [1, 2, 3, 4, 5, 6];\nlet B: number[] = [1, 2, 3];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124107,
      "stdout": "false\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if (flag == false) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124107,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdt7gn4p5.js:22:12)\n    at Object.<anonymous> (/tmp/tmpdt7gn4p5.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n        }\n        if (flag == false) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9x6p09kb.js:22:12)\n    at Object.<anonymous> (/tmp/tmp9x6p09kb.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var M = A.length;\n    var N = B.length;\n    for (var i = 0; i <= N - M; i++) {\n        var j;\n        for (j = 0; j < M; j++) {\n            if (B[i + j] != A[j]) {\n                break;\n            }\n        }\n        if (j == M) {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var M: number = A.length;\n    var N: number = B.length;\n    for (var i = 0; i <= N - M; i++) {\n        var j: number;\n        for (j = 0; j < M; j++) {\n            if (B[i + j] != A[j]) {\n                break;\n            }\n        }\n        if (j == M) {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124107,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var M = A.length;\n    var N = B.length;\n    for (var i = 0; i <= N - M; i++) {\n        var j;\n        for (j = 0; j < M; j++)\n            if (B[i + j] != A[j])\n                break;\n        if (j == M)\n            return true;\n    }\n    return false;\n}\nvar A = [1, 2, 3, 4, 5, 6];\nvar B = [1, 2, 4, 5];\nif (is_Sub_Array(A, B))\n    console.log(\"A is a subarray of B\");\nelse\n    console.log(\"A is not a subarray of B\");\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124107,
      "stdout": "A is not a subarray of B\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nvar A = [1, 2, 3, 4, 5];\nvar B = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar C = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nvar D = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(is_Sub_Array(A, B));\nconsole.log(is_Sub_Array(C, D));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124107,
      "stdout": "true\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        flag = true;\n    }\n    return flag;\n}\nlet A = [1, 2, 3, 4, 5, 6];\nlet B = [1, 2, 3];\nconsole.log(is_Sub_Array(A, B));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124107,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 4, 5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "../../../../tmp/tmpj3t16juy.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmpj3t16juy.ts(32,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n            }\n            else {\n                flag = false;\n                break;\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124107,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1bfvcobp.js:23:12)\n    at Object.<anonymous> (/tmp/tmp1bfvcobp.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124107,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i: number = 0, j: number = 0;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                break;\n            }\n        }\n        if (j == B.length) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124107,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    for (i = 0; i < A.length; i++) {\n        for (j = 0; j < B.length; j++) {\n            if (A[i] == B[j]) {\n                flag = true;\n                break;\n            }\n            else {\n                flag = false;\n            }\n        }\n        if (flag == false) {\n            break;\n        }\n    }\n    if (flag == true) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\nconsole.log(is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124107,
      "stdout": "../../../../tmp/tmp67c_y0m_.ts(31,1): error TS1005: ',' expected.\n../../../../tmp/tmp67c_y0m_.ts(31,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        }\n        else {\n            i++;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    while (i < A.length && j < B.length) {\n        if (A[i] == B[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == B.length) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to check whether an array is subarray of another or not.\nfunction is_Sub_Array(A: number[], B: number[]): boolean {\n    var M = A.length;\n    var N = B.length;\n    for (var i = 0; i <= N - M; i++) {\n        var j;\n        for (j = 0; j < M; j++) {\n            if (B[i + j] != A[j]) {\n                break;\n            }\n        }\n        if (j == M) {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_Sub_Array;\n  assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);\n  assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);\n  assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);\n}\n\ntest();",
      "timestamp": 1665510660,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}