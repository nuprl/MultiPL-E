{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "ts",
  "prompt": "//Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfunction maxAverageOfPath(cost: number[][]): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maxAverageOfPath;\n  assert.deepEqual(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]),5.2);\n  assert.deepEqual(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]),6.2);\n  assert.deepEqual(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]),7.2);\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),5.8);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    const n = cost.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp.push([]);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === 0 && j === 0) {\n        dp[i][j] = cost[i][j];\n      } else if (i === 0) {\n        dp[i][j] = dp[i][j - 1] + cost[i][j];\n      } else if (j === 0) {\n        dp[i][j] = dp[i - 1][j] + cost[i][j];\n      } else {\n        dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n      }\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n);\n  for (let i = 0; i < n; i++) {\n    dp[i] = new Array(n);\n  }\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n  }\n  for (let i = 1; i < n; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp: number[][] = new Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(n);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp: number[][] = new Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(n);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = cost[i][j];\n        }\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (i === 0 && j === 0) continue;\n            if (i === 0) {\n                dp[i][j] += dp[i][j - 1];\n            } else if (j === 0) {\n                dp[i][j] += dp[i - 1][j];\n            } else {\n                dp[i][j] += Math.max(dp[i - 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const m = cost[0].length;\n    const dp = new Array(n).fill(0).map(() => new Array(m).fill(0));\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let j = 1; j < m; j++) {\n        dp[0][j] = dp[0][j - 1] + cost[0][j];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < m; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][m - 1] / (n + m - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = cost[i][j];\n    }\n  }\n\n  for (let i = 1; i < n; i++) {\n    dp[0][i] += dp[0][i - 1];\n    dp[i][0] += dp[i - 1][0];\n  }\n\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] += Math.max(dp[i - 1][j], dp[i][j - 1]);\n    }\n  }\n\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = new Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(n).fill(0);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = cost[i][j];\n    }\n  }\n  for (let i = 1; i < n; i++) {\n    dp[0][i] += dp[0][i - 1];\n    dp[i][0] += dp[i - 1][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] += Math.max(dp[i - 1][j], dp[i][j - 1]);\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  let rows = cost.length;\n  let cols = cost[0].length;\n  let dp: number[][] = new Array(rows);\n  for (let i = 0; i < rows; i++) {\n    dp[i] = new Array(cols);\n  }\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < rows; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < cols; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n  }\n  for (let i = 1; i < rows; i++) {\n    for (let j = 1; j < cols; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[rows - 1][cols - 1] / (rows + cols - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n  }\n  for (let i = 1; i < n; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n  }\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let m = cost[0].length;\n    let dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < m; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let j = 1; j < m; j++) {\n        dp[0][j] = dp[0][j - 1] + cost[0][j];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < m; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][m - 1] / (n + m - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = cost[i][j];\n        }\n    }\n    for (let i = 1; i < n; i++) {\n        dp[0][i] += dp[0][i - 1];\n        dp[i][0] += dp[i - 1][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] += Math.max(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const m = cost[0].length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < m; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < m; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][m - 1] / (n + m - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = cost[i][j];\n        }\n    }\n\n    for (let i = 1; i < n; i++) {\n        dp[0][i] += dp[0][i - 1];\n        dp[i][0] += dp[i - 1][0];\n    }\n\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] += Math.max(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = Array(n).fill(0).map(() => Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n\nconsole.log(maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]));\n",
    "  const n = cost.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let rows = cost.length;\n    let cols = cost[0].length;\n    let dp: number[][] = [];\n    for (let i = 0; i < rows; i++) {\n        dp[i] = [];\n        for (let j = 0; j < cols; j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = cost[i][j];\n            } else {\n                dp[i][j] = Math.max(i > 0 ? dp[i - 1][j] : 0, j > 0 ? dp[i][j - 1] : 0) + cost[i][j];\n            }\n        }\n    }\n    return dp[rows - 1][cols - 1] / (rows + cols - 1);\n}\n",
    "    let n = cost.length;\n    let dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp: number[][] = new Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(n);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp.push(new Array(n).fill(0));\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  let n = cost.length;\n  let dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp = Array(n).fill(0).map(() => Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(n).fill(0);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const m = cost[0].length;\n    const dp = new Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(m).fill(0);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let j = 1; j < m; j++) {\n        dp[0][j] = dp[0][j - 1] + cost[0][j];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < m; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][m - 1] / (n + m - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = new Array(n);\n  for (let i = 0; i < n; i++) {\n    dp[i] = new Array(n).fill(0);\n  }\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = Array(n).fill(null).map(() => Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp: number[][] = new Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(n);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const m = cost[0].length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < m; j++) {\n            dp[i][j] = cost[i][j];\n        }\n    }\n    for (let i = 1; i < n; i++) {\n        dp[i][0] += dp[i - 1][0];\n    }\n    for (let j = 1; j < m; j++) {\n        dp[0][j] += dp[0][j - 1];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < m; j++) {\n            dp[i][j] += Math.max(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n    return dp[n - 1][m - 1] / (n + m - 1);\n}\n",
    "    const n = cost.length;\n    const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let m = cost.length;\n    let n = cost[0].length;\n    let dp = new Array(m);\n    for (let i = 0; i < m; i++) {\n        dp[i] = new Array(n);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < m; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let j = 1; j < n; j++) {\n        dp[0][j] = dp[0][j - 1] + cost[0][j];\n    }\n    for (let i = 1; i < m; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[m - 1][n - 1] / (m + n - 1);\n}\n",
    "    const n = cost.length;\n    const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            if (i === 0 && j === 0) {\n                dp[i][j] = cost[i][j];\n            } else if (i === 0) {\n                dp[i][j] = dp[i][j - 1] + cost[i][j];\n            } else if (j === 0) {\n                dp[i][j] = dp[i - 1][j] + cost[i][j];\n            } else {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n            }\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp: number[][] = new Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(n);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = Array.from({ length: n }, () => Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp: number[][] = new Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(n);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  let n = cost.length;\n  let dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  dp[0][0] = cost[0][0];\n\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  let n = cost.length;\n  let dp = new Array(n);\n  for (let i = 0; i < n; i++) {\n    dp[i] = new Array(n);\n  }\n\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = Array(n).fill(0).map(() => Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let row = cost.length;\n    let col = cost[0].length;\n    let dp: number[][] = [];\n    for (let i = 0; i < row; i++) {\n        dp[i] = [];\n        for (let j = 0; j < col; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < row; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < col; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n    }\n    for (let i = 1; i < row; i++) {\n        for (let j = 1; j < col; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[row - 1][col - 1] / (row + col - 1);\n}\n",
    "    let rows = cost.length;\n    let cols = cost[0].length;\n    let dp = new Array(rows).fill(0).map(() => new Array(cols).fill(0));\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < rows; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let j = 1; j < cols; j++) {\n        dp[0][j] = dp[0][j - 1] + cost[0][j];\n    }\n    for (let i = 1; i < rows; i++) {\n        for (let j = 1; j < cols; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[rows - 1][cols - 1] / (rows + cols - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = Array(n).fill(0).map(() => Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const rows = cost.length;\n  const cols = cost[0].length;\n  const dp: number[][] = [];\n  for (let i = 0; i < rows; i++) {\n    dp.push(new Array(cols).fill(0));\n  }\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < rows; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < cols; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n  }\n  for (let i = 1; i < rows; i++) {\n    for (let j = 1; j < cols; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[rows - 1][cols - 1] / (rows + cols - 1);\n}\n",
    "    let rows = cost.length;\n    let cols = cost[0].length;\n    let dp: number[][] = new Array(rows);\n    for (let i = 0; i < rows; i++) {\n        dp[i] = new Array(cols);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < rows; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < cols; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n    }\n    for (let i = 1; i < rows; i++) {\n        for (let j = 1; j < cols; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[rows - 1][cols - 1] / (rows + cols - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp: number[][] = new Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(n);\n        dp[i][0] = cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = cost[0][i];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp = new Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(n);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let rows = cost.length;\n    let cols = cost[0].length;\n    let dp: number[][] = [];\n    for (let i = 0; i < rows; i++) {\n        dp[i] = [];\n        for (let j = 0; j < cols; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < rows; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < cols; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n    }\n    for (let i = 1; i < rows; i++) {\n        for (let j = 1; j < cols; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[rows - 1][cols - 1] / (rows + cols - 1);\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i < cost.length; i++) {\n        dp[i] = [];\n        for (let j = 0; j < cost[i].length; j++) {\n            if (i === 0 && j === 0) {\n                dp[i][j] = cost[i][j];\n            } else if (i === 0) {\n                dp[i][j] = dp[i][j - 1] + cost[i][j];\n            } else if (j === 0) {\n                dp[i][j] = dp[i - 1][j] + cost[i][j];\n            } else {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n            }\n        }\n    }\n    return dp[cost.length - 1][cost[0].length - 1] / (cost.length + cost[0].length - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let maxAverage = 0;\n    let maxPath = [];\n    let maxPathLength = 0;\n    let currentPath = [];\n    let currentPathLength = 0;\n    let currentAverage = 0;\n    let currentRow = 0;\n    let currentColumn = 0;\n    let currentCost = 0;\n    let nextCost = 0;\n    let nextRow = 0;\n    let nextColumn = 0;\n    let nextPath = [];\n    let nextPathLength = 0;\n    let nextAverage = 0;\n    let nextPaths = [];\n    let nextPathsLength = 0;\n    let nextPathsAverages = [];\n    let nextPathsAveragesLength = 0;\n    let nextPathsAveragesMax = 0;\n    let nextPathsAveragesMaxIndex = 0;\n    let nextPathsMax = [];\n    let nextPathsMaxLength = 0;\n    let nextPathsMaxAverage = 0;\n    let nextPathsMaxAverageIndex = 0;\n    let nextPathsMaxAverageIndexRow = 0;\n    let nextPathsMaxAverageIndexColumn = 0;\n    let nextPathsMaxAverageIndexCost = 0;\n    let nextPathsMaxAverageIndexPath = [];\n    let nextPathsMaxAverageIndexPathLength = 0;\n    let nextPathsMaxAverageIndexPathAverage = 0;\n    let nextPathsMaxAverageIndexPathAverageIndex = 0;\n    let nextPathsMaxAverageIndexPathAverageIndexRow = 0;\n    let nextPathsMaxAverageIndexPathAverageIndexColumn = 0;\n    let nextPathsMaxAverageIndexPathAverageIndexCost = 0;\n    let nextPathsMaxAverageIndexPathAverageIndexPath = [];\n    let nextPathsMaxAverageIndexPathAverageIndexPathLength = 0;\n    let nextPathsMaxAverageIndexPathAverageIndexPathAverage = 0;\n    let nextPathsMaxAverageIndexPathAverageIndexPathAverageIndex = 0;\n    let nextPathsMaxAverageIndexPathAverageIndexPathAverageIndexRow = 0;\n    let nextPathsMaxAverageIndexPathAverageIndexPathAverageIndexColumn = 0;\n    let nextPathsMaxAverageIndexPathAverageIndexPathAverageIndexCost = 0;\n    let nextPathsMaxAverageIndexPathAverageIndexPathAverageIndexPath = [];",
    "  const n = cost.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n    }\n    for (let i = 1; i < n; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = new Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(n);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = new Array(n);\n  for (let i = 0; i < n; i++) {\n    dp[i] = new Array(n);\n  }\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let row = cost.length;\n    let col = cost[0].length;\n    let dp: number[][] = new Array(row);\n    for (let i = 0; i < row; i++) {\n        dp[i] = new Array(col);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < row; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < col; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n    }\n    for (let i = 1; i < row; i++) {\n        for (let j = 1; j < col; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[row - 1][col - 1] / (row + col - 1);\n}\n",
    "  const dp: number[][] = [];\n  for (let i = 0; i < cost.length; i++) {\n    dp[i] = [];\n    for (let j = 0; j < cost[i].length; j++) {\n      if (i === 0 && j === 0) {\n        dp[i][j] = cost[i][j];\n      } else if (i === 0) {\n        dp[i][j] = dp[i][j - 1] + cost[i][j];\n      } else if (j === 0) {\n        dp[i][j] = dp[i - 1][j] + cost[i][j];\n      } else {\n        dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n      }\n    }\n  }\n  return dp[cost.length - 1][cost[0].length - 1] / (cost.length + cost[0].length - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp = new Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(n).fill(0);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let rows = cost.length;\n    let cols = cost[0].length;\n    let dp: number[][] = [];\n    for (let i = 0; i < rows; i++) {\n        dp[i] = [];\n        for (let j = 0; j < cols; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < rows; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < cols; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n    }\n    for (let i = 1; i < rows; i++) {\n        for (let j = 1; j < cols; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[rows - 1][cols - 1] / (rows + cols - 1);\n}\n",
    "    const n = cost.length;\n    const dp = new Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(n);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp: number[][] = new Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(n);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (i == 0 && j == 0) {\n                dp[i][j] = cost[i][j];\n            } else if (i == 0) {\n                dp[i][j] = dp[i][j - 1] + cost[i][j];\n            } else if (j == 0) {\n                dp[i][j] = dp[i - 1][j] + cost[i][j];\n            } else {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n            }\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const m = cost[0].length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < m; j++) {\n            if (i === 0 && j === 0) {\n                dp[i][j] = cost[i][j];\n            } else if (i === 0) {\n                dp[i][j] = dp[i][j - 1] + cost[i][j];\n            } else if (j === 0) {\n                dp[i][j] = dp[i - 1][j] + cost[i][j];\n            } else {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n            }\n        }\n    }\n    return dp[n - 1][m - 1] / (n + m - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  dp[0][0] = cost[0][0];\n\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const dp = new Array(cost.length).fill(0).map(() => new Array(cost[0].length).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < cost.length; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let j = 1; j < cost[0].length; j++) {\n    dp[0][j] = dp[0][j - 1] + cost[0][j];\n  }\n  for (let i = 1; i < cost.length; i++) {\n    for (let j = 1; j < cost[0].length; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[cost.length - 1][cost[0].length - 1] / (cost.length + cost[0].length - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  dp[0][0] = cost[0][0];\n\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = new Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(n);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let rows = cost.length;\n    let cols = cost[0].length;\n    let dp: number[][] = new Array(rows);\n    for (let i = 0; i < rows; i++) {\n        dp[i] = new Array(cols);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < rows; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < cols; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n    }\n    for (let i = 1; i < rows; i++) {\n        for (let j = 1; j < cols; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[rows - 1][cols - 1] / (rows + cols - 1);\n}\n",
    "    const n = cost.length;\n    const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let maxAverage = 0;\n    let maxAveragePath = [];\n    let maxAveragePaths = [];\n    let path = [];\n    let paths = [];\n    let pathCost = 0;\n    let pathCosts = [];\n    let pathLength = 0;\n    let pathLengths = [];\n    let pathAverage = 0;\n    let pathAverages = [];\n    let pathAveragesSorted = [];\n    let pathAveragesSortedDesc = [];\n    let pathAveragesSortedDescIndex = [];\n    let pathAveragesSortedDescIndexSorted = [];\n    let pathAveragesSortedDescIndexSortedDesc = [];\n    let pathAveragesSortedDescIndexSortedDescIndex = [];\n\n    function findPaths(cost: number[][], row: number, col: number, path: number[], paths: number[][], pathCost: number, pathCosts: number[], pathLength: number, pathLengths: number[], pathAverage: number, pathAverages: number[]) {\n        if (row === cost.length - 1 && col === cost.length - 1) {\n            path.push(cost[row][col]);\n            pathCost += cost[row][col];\n            pathLength += 1;\n            pathAverage = pathCost / pathLength;\n            pathAverages.push(pathAverage);\n            paths.push(path);\n            pathCosts.push(pathCost);\n            pathLengths.push(pathLength);\n            return;\n        }\n        if (row < cost.length - 1) {\n            path.push(cost[row][col]);\n            pathCost += cost[row][col];\n            pathLength += 1;\n            findPaths(cost, row + 1, col, path.slice(), paths, pathCost, pathCosts, pathLength, pathLengths, pathAverage, pathAverages);\n        }\n        if (col < cost.length - 1) {\n            path.push(cost[row][col]);\n            pathCost += cost[row][col];\n            pathLength += 1;\n            findPaths(cost, row, col + 1, path.slice(), paths, pathCost, pathCosts, pathLength, pathLengths, pathAverage, pathAverages",
    "  const n = cost.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = Array.from({ length: n }, () =>\n    Array(n).fill(Number.NEGATIVE_INFINITY)\n  );\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let rows = cost.length;\n    let cols = cost[0].length;\n    let dp: number[][] = new Array(rows);\n    for (let i = 0; i < rows; i++) {\n        dp[i] = new Array(cols).fill(0);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < rows; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let j = 1; j < cols; j++) {\n        dp[0][j] = dp[0][j - 1] + cost[0][j];\n    }\n    for (let i = 1; i < rows; i++) {\n        for (let j = 1; j < cols; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[rows - 1][cols - 1] / (rows + cols - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n);\n  for (let i = 0; i < n; i++) {\n    dp[i] = new Array(n);\n  }\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const m = cost[0].length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < m; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let j = 1; j < m; j++) {\n        dp[0][j] = dp[0][j - 1] + cost[0][j];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < m; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][m - 1] / (n + m - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const row = cost.length;\n  const col = cost[0].length;\n  const dp = new Array(row).fill(0).map(() => new Array(col).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < row; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let j = 1; j < col; j++) {\n    dp[0][j] = dp[0][j - 1] + cost[0][j];\n  }\n  for (let i = 1; i < row; i++) {\n    for (let j = 1; j < col; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[row - 1][col - 1] / (row + col - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = new Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(n);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n);\n  for (let i = 0; i < n; i++) {\n    dp[i] = new Array(n);\n    dp[i][0] = cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = cost[0][i];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = cost[i][j] + Math.max(dp[i - 1][j], dp[i][j - 1]);\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i < cost.length; i++) {\n        dp[i] = [];\n        for (let j = 0; j < cost[0].length; j++) {\n            if (i === 0 && j === 0) {\n                dp[i][j] = cost[i][j];\n            } else if (i === 0) {\n                dp[i][j] = dp[i][j - 1] + cost[i][j];\n            } else if (j === 0) {\n                dp[i][j] = dp[i - 1][j] + cost[i][j];\n            } else {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n            }\n        }\n    }\n    return dp[cost.length - 1][cost[0].length - 1] / (cost.length + cost[0].length - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = Array(n).fill(0).map(() => Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = Array(n).fill(0).map(() => Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp: number[][] = new Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(n);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i < cost.length; i++) {\n        dp[i] = [];\n        for (let j = 0; j < cost[i].length; j++) {\n            if (i === 0 && j === 0) {\n                dp[i][j] = cost[i][j];\n            } else if (i === 0) {\n                dp[i][j] = dp[i][j - 1] + cost[i][j];\n            } else if (j === 0) {\n                dp[i][j] = dp[i - 1][j] + cost[i][j];\n            } else {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n            }\n        }\n    }\n    return dp[cost.length - 1][cost[0].length - 1] / (cost.length + cost[0].length - 1);\n}\n",
    "  const dp: number[][] = [];\n  for (let i = 0; i < cost.length; i++) {\n    dp[i] = [];\n    for (let j = 0; j < cost[0].length; j++) {\n      if (i === 0 && j === 0) {\n        dp[i][j] = cost[i][j];\n      } else if (i === 0) {\n        dp[i][j] = dp[i][j - 1] + cost[i][j];\n      } else if (j === 0) {\n        dp[i][j] = dp[i - 1][j] + cost[i][j];\n      } else {\n        dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n      }\n    }\n  }\n  return dp[cost.length - 1][cost[0].length - 1] / (cost.length + cost[0].length - 1);\n}\n",
    "  let row = cost.length;\n  let col = cost[0].length;\n  let dp: number[][] = [];\n  for (let i = 0; i < row; i++) {\n    dp[i] = [];\n    for (let j = 0; j < col; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < row; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < col; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n  }\n  for (let i = 1; i < row; i++) {\n    for (let j = 1; j < col; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[row - 1][col - 1] / (row + col - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = new Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(n).fill(0);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp = new Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(n);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n    }\n    for (let i = 1; i < n; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = Array.from({ length: n }, () => Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const m = cost[0].length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let j = 1; j < m; j++) {\n    dp[0][j] = dp[0][j - 1] + cost[0][j];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < m; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][m - 1] / (n + m - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i < cost.length; i++) {\n        dp[i] = [];\n        for (let j = 0; j < cost[i].length; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < cost.length; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let j = 1; j < cost[0].length; j++) {\n        dp[0][j] = dp[0][j - 1] + cost[0][j];\n    }\n    for (let i = 1; i < cost.length; i++) {\n        for (let j = 1; j < cost[i].length; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[cost.length - 1][cost[0].length - 1] / (cost.length + cost[0].length - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = cost[i][j];\n        }\n    }\n    for (let i = 1; i < n; i++) {\n        dp[0][i] += dp[0][i - 1];\n        dp[i][0] += dp[i - 1][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] += Math.max(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = cost[i][j];\n    }\n  }\n\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = Array.from({ length: n }, () =>\n    Array(n).fill(Number.MIN_SAFE_INTEGER)\n  );\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n  }\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp.push(new Array(n).fill(0));\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp = new Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(n);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp = new Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(n);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp = Array(n).fill(null).map(() => Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp = new Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(n);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp.push([]);\n  }\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n  dp[0][0] = cost[0][0];\n\n  for (let i = 1; i < n; i++) {\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n  }\n\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = new Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(n);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    let n = cost.length;\n    let dp = new Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(n);\n    }\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp: number[][] = Array.from({ length: n }, () => Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "  const n = cost.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n\n  dp[0][0] = cost[0][0];\n  for (let i = 1; i < n; i++) {\n    dp[0][i] = dp[0][i - 1] + cost[0][i];\n    dp[i][0] = dp[i - 1][0] + cost[i][0];\n  }\n\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n    }\n  }\n\n  return dp[n - 1][n - 1] / (2 * n - 1);\n}\n",
    "    const n = cost.length;\n    const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n    dp[0][0] = cost[0][0];\n    for (let i = 1; i < n; i++) {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 1; j < n; j++) {\n            dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\n"
  ]
}