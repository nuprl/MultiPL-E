{
  "name": "mbpp_407_rearrange_bigger",
  "language": "ts",
  "prompt": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n  let arr = n.toString().split(\"\");\n  let i = arr.length - 1;\n  while (i > 0 && arr[i - 1] >= arr[i]) {\n    i--;\n  }\n  if (i <= 0) {\n    return -1;\n  }\n  let j = arr.length - 1;\n  while (arr[j] <= arr[i - 1]) {\n    j--;\n  }\n  let temp = arr[i - 1];\n  arr[i - 1] = arr[j];\n  arr[j] = temp;\n  j = arr.length - 1;\n  while (i < j) {\n    temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    i++;\n    j--;\n  }\n  return parseInt(arr.join(\"\"));\n}\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "1243\n-1\n536479\n536479\n536479\n536479\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0v_2cxof.js:38:12)\n    at Object.<anonymous> (/tmp/tmp0v_2cxof.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits: number[] = n.toString().split('').map(Number);\n    let i: number = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp: number = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\n\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "1243\n-1\n536479\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpigqh2xun.js:35:12)\n    at Object.<anonymous> (/tmp/tmpigqh2xun.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n  let arr = n.toString().split(\"\");\n  let i = arr.length - 1;\n  while (i > 0 && arr[i - 1] >= arr[i]) {\n    i--;\n  }\n  if (i <= 0) {\n    return -1;\n  }\n  let j = arr.length - 1;\n  while (arr[j] <= arr[i - 1]) {\n    j--;\n  }\n  let temp = arr[i - 1];\n  arr[i - 1] = arr[j];\n  arr[j] = temp;\n  j = arr.length - 1;\n  while (i < j) {\n    temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    i++;\n    j--;\n  }\n  return parseInt(arr.join(\"\"));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp83x216vw.js:32:12)\n    at Object.<anonymous> (/tmp/tmp83x216vw.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_str = n.toString();\n    let n_arr = n_str.split('');\n    let n_arr_num = n_arr.map(Number);\n    let n_arr_num_sorted = n_arr_num.sort((a, b) => b - a);\n    let n_arr_num_sorted_str = n_arr_num_sorted.join('');\n    let n_arr_num_sorted_num = parseInt(n_arr_num_sorted_str);\n    if (n_arr_num_sorted_num === n) {\n        return -1;\n    }\n    else {\n        return n_arr_num_sorted_num;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnvn37smz.js:20:12)\n    at Object.<anonymous> (/tmp/tmpnvn37smz.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\nconsole.log(rearrange_bigger(1234567890));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(12345678));\nconsole.log(rearrange_bigger(1234567));\nconsole.log(rearrange_bigger(123456));\nconsole.log(rearrange_bigger(12345));\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(123));\nconsole.log(rearrange_bigger(12));\nconsole.log(rearrange_bigger(1));\nconsole.log(rearrange_bigger(123450));\nconsole.log(rearrange_bigger(123450));\nconsole.log(rearrange_bigger(123450));\nconsole.log(rearrange_bigger(123450));\nconsole.log(rearrange_bigger(123450));\nconsole.log(rearrange_bigger(123450));\nconsole.log(rearrange_bigger(123450));\nconsole.log(rearrange_bigger(123450));\nconsole.log(rearrange_bigger(123450));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "1234567908\n123456798\n12345687\n1234576\n123465\n12354\n1243\n132\n21\n-1\n123504\n123504\n123504\n123504\n123504\n123504\n123504\n123504\n123504\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmphcxos9wc.js:52:12)\n    at Object.<anonymous> (/tmp/tmphcxos9wc.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n  let arr: number[] = n.toString().split(\"\").map(Number);\n  let i: number = arr.length - 1;\n  while (i > 0 && arr[i - 1] >= arr[i]) {\n    i--;\n  }\n  if (i <= 0) {\n    return -1;\n  }\n  let j: number = arr.length - 1;\n  while (arr[j] <= arr[i - 1]) {\n    j--;\n  }\n  let temp: number = arr[i - 1];\n  arr[i - 1] = arr[j];\n  arr[j] = temp;\n  j = arr.length - 1;\n  while (i < j) {\n    temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    i++;\n    j--;\n  }\n  return arr.join(\"\");\n}\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "1243\n-1\n536479\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpue1fgox_.js:35:12)\n    at Object.<anonymous> (/tmp/tmpue1fgox_.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let num: string = n.toString();\n    let arr: string[] = num.split('');\n    let index: number = 0;\n    let temp: string = '';\n    let result: number = 0;\n    for (let i: number = arr.length - 1; i > 0; i--) {\n        if (arr[i] > arr[i - 1]) {\n            index = i - 1;\n            temp = arr[i];\n            arr[i] = arr[i - 1];\n            arr[i - 1] = temp;\n            break;\n        }\n    }\n    if (index === 0 && temp === '') {\n        return -1;\n    }\n    let right: string[] = arr.splice(index);\n    right.sort();\n    arr = arr.concat(right);\n    for (let j: number = 0; j < arr.length; j++) {\n        result = result * 10 + parseInt(arr[j]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n12\n\nshould loosely deep-equal\n\n21\n    at test (/tmp/tmpbbb6zm1g.js:31:12)\n    at Object.<anonymous> (/tmp/tmpbbb6zm1g.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 12,\n  expected: 21,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let str = n.toString();\n    let arr = str.split('');\n    let arr2 = arr.slice();\n    arr2.sort((a, b) => b - a);\n    if (arr.join('') == arr2.join('')) {\n        return -1;\n    }\n    let i = arr.length - 1;\n    while (i > 0 && arr[i] <= arr[i - 1]) {\n        i--;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "../../../../tmp/tmp01bm9vk6.ts(6,25): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmp01bm9vk6.ts(6,29): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let nums: string[] = n.toString().split('');\n    let i: number = nums.length - 1;\n    while (i > 0 && nums[i - 1] >= nums[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = nums.length - 1;\n    while (nums[j] <= nums[i - 1]) {\n        j--;\n    }\n    let tmp: string = nums[i - 1];\n    nums[i - 1] = nums[j];\n    nums[j] = tmp;\n    j = nums.length - 1;\n    while (i < j) {\n        tmp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = tmp;\n        i++;\n        j--;\n    }\n    return parseInt(nums.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp46se9bcn.js:32:12)\n    at Object.<anonymous> (/tmp/tmp46se9bcn.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return arr.join('');\n}\n\nconsole.log(rearrange_bigger(123));\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(531));\nconsole.log(rearrange_bigger(2017));\nconsole.log(rearrange_bigger(111));\nconsole.log(rearrange_bigger(534976));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "132\n1243\n-1\n2071\n-1\n536479\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpaay124f_.js:38:12)\n    at Object.<anonymous> (/tmp/tmpaay124f_.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let str = n.toString();\n    let arr = str.split('');\n    let arr2 = arr.slice();\n    let arr3 = arr.slice();\n    let arr4 = arr.slice();\n    let arr5 = arr.slice();\n    let arr6 = arr.slice();\n    let arr7 = arr.slice();\n    let arr8 = arr.slice();\n    let arr9 = arr.slice();\n    let arr10 = arr.slice();\n    let arr11 = arr.slice();\n    let arr12 = arr.slice();\n    let arr13 = arr.slice();\n    let arr14 = arr.slice();\n    let arr15 = arr.slice();\n    let arr16 = arr.slice();\n    let arr17 = arr.slice();\n    let arr18 = arr.slice();\n    let arr19 = arr.slice();\n    let arr20 = arr.slice();\n    let arr21 = arr.slice();\n    let arr22 = arr.slice();\n    let arr23 = arr.slice();\n    let arr24 = arr.slice();\n    let arr25 = arr.slice();\n    let arr26 = arr.slice();\n    let arr27 = arr.slice();\n    let arr28 = arr.slice();\n    let arr29 = arr.slice();\n    let arr30 = arr.slice();\n    let arr31 = arr.slice();\n    let arr32 = arr.slice();\n    let arr33 = arr.slice();\n    let arr34 = arr.slice();\n    let arr35 = arr.slice();\n    let arr36 = arr.slice();\n    let arr37 = arr.slice();\n    let arr38 = arr.slice();\n    let arr39 = arr.slice();\n    let arr40 = arr.slice();\n    let arr41 = arr.slice();\n    let arr42 = arr.slice();\n    let arr43 = arr.slice();\n    let arr44 = arr.slice();\n    let arr45 = arr.slice();\n    let arr46 = arr.slice();\n    let arr47 = arr.slice();\n    let arr48 = arr.slice();\n    let arr49 = arr.slice();\n    let arr50 = arr.slice();\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "../../../../tmp/tmpgrtmhay8.ts(66,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\nconsole.log(rearrange_bigger(1234567890));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(12345678));\nconsole.log(rearrange_bigger(1234567));\nconsole.log(rearrange_bigger(123456));\nconsole.log(rearrange_bigger(12345));\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(123));\nconsole.log(rearrange_bigger(12));\nconsole.log(rearrange_bigger(1));\nconsole.log(rearrange_bigger(0));\nconsole.log(rearrange_bigger(9876543210));\nconsole.log(rearrange_bigger(987654321));\nconsole.log(rearrange_bigger(98765432));\nconsole.log(rearrange_bigger(9876543));\nconsole.log(rearrange_bigger(987654));\nconsole.log(rearrange_bigger(98765));\nconsole.log(rearrange_bigger(9876));\nconsole.log(rearrange_bigger(987));\nconsole.log(re\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "../../../../tmp/tmpke6oxyh6.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpke6oxyh6.ts(49,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits = n.toString().split('');\n    let i = digits.length - 1;\n    while (i > 0 && digits[i] <= digits[i - 1]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmol8ikzo.js:32:12)\n    at Object.<anonymous> (/tmp/tmpmol8ikzo.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let nums: number[] = n.toString().split('').map(Number);\n    let i: number = nums.length - 1;\n    while (i > 0 && nums[i - 1] >= nums[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = nums.length - 1;\n    while (nums[j] <= nums[i - 1]) {\n        j--;\n    }\n    let temp: number = nums[i - 1];\n    nums[i - 1] = nums[j];\n    nums[j] = temp;\n    j = nums.length - 1;\n    while (i < j) {\n        temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(nums.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpa5cxn1gl.js:32:12)\n    at Object.<anonymous> (/tmp/tmpa5cxn1gl.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits = n.toString().split('');\n    let i = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk_4b_9ph.js:32:12)\n    at Object.<anonymous> (/tmp/tmpk_4b_9ph.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "../../../../tmp/tmpj6t8mp4v.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpj6t8mp4v.ts(48,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let num = n.toString().split('');\n    let i = num.length - 1;\n    while (i > 0 && num[i - 1] >= num[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = num.length - 1;\n    while (num[j] <= num[i - 1]) {\n        j--;\n    }\n    let temp = num[i - 1];\n    num[i - 1] = num[j];\n    num[j] = temp;\n    j = num.length - 1;\n    while (i < j) {\n        temp = num[i];\n        num[i] = num[j];\n        num[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(num.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0vpl4hp8.js:32:12)\n    at Object.<anonymous> (/tmp/tmp0vpl4hp8.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let num = n.toString().split('');\n    let i = num.length - 1;\n    while (i > 0 && num[i - 1] >= num[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = num.length - 1;\n    while (num[j] <= num[i - 1]) {\n        j--;\n    }\n    let temp = num[i - 1];\n    num[i - 1] = num[j];\n    num[j] = temp;\n    j = num.length - 1;\n    while (i < j) {\n        temp = num[i];\n        num[i] = num[j];\n        num[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(num.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0vpl4hp8.js:32:12)\n    at Object.<anonymous> (/tmp/tmp0vpl4hp8.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split(\"\");\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(\"\"));\n}\n\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "1243\n-1\n536479\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpv1c760xa.js:35:12)\n    at Object.<anonymous> (/tmp/tmpv1c760xa.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_str = n.toString();\n    let n_arr = n_str.split(\"\");\n    let n_arr_sorted = n_arr.slice().sort((a, b) => b - a);\n    let n_arr_sorted_str = n_arr_sorted.join(\"\");\n    if (n_str === n_arr_sorted_str) {\n        return -1;\n    }\n    let n_arr_sorted_str_arr = n_arr_sorted_str.split(\"\");\n    let n_arr_sorted_str_arr_sorted = n_arr_sorted_str_arr.slice().sort((a, b) => a - b);\n    let n_arr_sorted_str_arr_sorted_str = n_arr_sorted_str_arr_sorted.join(\"\");\n    let n_arr_sorted_str_arr_sorted_str_num = parseInt(n_arr_sorted_str_arr_sorted_str);\n    return n_arr_sorted_str_arr_sorted_str_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "../../../../tmp/tmpszh18jim.ts(5,53): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpszh18jim.ts(5,57): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpszh18jim.ts(11,83): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpszh18jim.ts(11,87): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('').map(Number);\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\nconsole.log(rearrange_bigger(12345));\nconsole.log(rearrange_bigger(12354));\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(1243));\nconsole.log(rearrange_bigger(19000));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "../../../../tmp/tmp5_sxqseh.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmp5_sxqseh.ts(47,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split(\"\");\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(\"\"));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpek34s43m.js:32:12)\n    at Object.<anonymous> (/tmp/tmpek34s43m.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n  let arr = n.toString().split('');\n  let i = arr.length - 1;\n  while (i > 0 && arr[i - 1] >= arr[i]) {\n    i--;\n  }\n  if (i <= 0) {\n    return -1;\n  }\n  let j = arr.length - 1;\n  while (arr[j] <= arr[i - 1]) {\n    j--;\n  }\n  let temp = arr[i - 1];\n  arr[i - 1] = arr[j];\n  arr[j] = temp;\n  j = arr.length - 1;\n  while (i < j) {\n    temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    i++;\n    j--;\n  }\n  return arr.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpht3p0drz.js:32:12)\n    at Object.<anonymous> (/tmp/tmpht3p0drz.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "1243\n-1\n536479\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpd7vodxx7.js:35:12)\n    at Object.<anonymous> (/tmp/tmpd7vodxx7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\nconsole.log(rearrange_bigger(1234567890));\nconsole.log(rearrange_bigger(1234567898));\nconsole.log(rearrange_bigger(1234567899));\nconsole.log(rearrange_bigger(1234567891));\nconsole.log(rearrange_bigger(1234567892));\nconsole.log(rearrange_bigger(1234567893));\nconsole.log(rearrange_bigger(1234567894));\nconsole.log(rearrange_bigger(1234567895));\nconsole.log(rearrange_bigger(1234567896));\nconsole.log(rearrange_bigger(1234567897));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "1234567908\n1234567988\n1234567989\n1234567918\n1234567928\n1234567938\n1234567948\n1234567958\n1234567968\n1234567978\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmph_rijomy.js:42:12)\n    at Object.<anonymous> (/tmp/tmph_rijomy.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits: number[] = n.toString().split('').map(Number);\n    let i: number = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp: number = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp88gc3noz.js:32:12)\n    at Object.<anonymous> (/tmp/tmp88gc3noz.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits: number[] = n.toString().split('').map(Number);\n    let i: number = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp: number = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp88gc3noz.js:32:12)\n    at Object.<anonymous> (/tmp/tmp88gc3noz.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split(\"\");\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(\"\"));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpek34s43m.js:32:12)\n    at Object.<anonymous> (/tmp/tmpek34s43m.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_str: string = n.toString();\n    let n_arr: string[] = n_str.split(\"\");\n    let n_arr_num: number[] = [];\n    let n_arr_num_sorted: number[] = [];\n    let n_arr_num_sorted_str: string;\n    let n_arr_num_sorted_num: number;\n    let n_arr_num_sorted_num_str: string;\n    let n_arr_num_sorted_num_arr: string[];\n    let n_arr_num_sorted_num_arr_num: number[];\n    let n_arr_num_sorted_num_arr_num_sorted: number[];\n    let n_arr_num_sorted_num_arr_num_sorted_str: string;\n    let n_arr_num_sorted_num_arr_num_sorted_num: number;\n    let n_arr_num_sorted_num_arr_num_sorted_num_str: string;\n    let n_arr_num_sorted_num_arr_num_sorted_num_arr: string[];\n    let n_arr_num_sorted_num_arr_num_sorted_num_arr_num: number[];\n    let n_arr_num_sorted_num_arr_num_sorted_num_arr_num_sorted: number[];\n    let n_arr_num_sorted_num_arr_num_sorted_num_arr_num_sorted_str: string;\n    let n_arr_num_sorted_num_arr_num_sorted_num_arr_num_sorted_num: number;\n    let n_arr_num_sorted_num_arr_num_sorted_num_arr_num_sorted_num_str: string;\n    let n_arr_num_sorted_num_arr_num_sorted_num_arr_num_sorted_num_arr: string[];\n    let n_arr_num_sorted_num_arr_num_sorted_num_arr_num_sorted\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "../../../../tmp/tmprxsqwwiz.ts(35,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let arr2 = arr.slice();\n    let arr3 = arr.slice();\n    let arr4 = arr.slice();\n    let arr5 = arr.slice();\n    let arr6 = arr.slice();\n    let arr7 = arr.slice();\n    let arr8 = arr.slice();\n    let arr9 = arr.slice();\n    let arr10 = arr.slice();\n    let arr11 = arr.slice();\n    let arr12 = arr.slice();\n    let arr13 = arr.slice();\n    let arr14 = arr.slice();\n    let arr15 = arr.slice();\n    let arr16 = arr.slice();\n    let arr17 = arr.slice();\n    let arr18 = arr.slice();\n    let arr19 = arr.slice();\n    let arr20 = arr.slice();\n    let arr21 = arr.slice();\n    let arr22 = arr.slice();\n    let arr23 = arr.slice();\n    let arr24 = arr.slice();\n    let arr25 = arr.slice();\n    let arr26 = arr.slice();\n    let arr27 = arr.slice();\n    let arr28 = arr.slice();\n    let arr29 = arr.slice();\n    let arr30 = arr.slice();\n    let arr31 = arr.slice();\n    let arr32 = arr.slice();\n    let arr33 = arr.slice();\n    let arr34 = arr.slice();\n    let arr35 = arr.slice();\n    let arr36 = arr.slice();\n    let arr37 = arr.slice();\n    let arr38 = arr.slice();\n    let arr39 = arr.slice();\n    let arr40 = arr.slice();\n    let arr41 = arr.slice();\n    let arr42 = arr.slice();\n    let arr43 = arr.slice();\n    let arr44 = arr.slice();\n    let arr45 = arr.slice();\n    let arr46 = arr.slice();\n    let arr47 = arr.slice();\n    let arr48 = arr.slice();\n    let arr49 = arr.slice();\n    let arr50 = arr.slice();\n    let arr51 = arr.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "../../../../tmp/tmped31148j.ts(53,21): error TS1003: Identifier expected.\n../../../../tmp/tmped31148j.ts(65,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits = n.toString().split('');\n    let i = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i])\n        i--;\n    if (i <= 0)\n        return -1;\n    let j = digits.length - 1;\n    while (digits[j] <= digits[i - 1])\n        j--;\n    let temp = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpa8fchfou.js:29:12)\n    at Object.<anonymous> (/tmp/tmpa8fchfou.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('').map(Number);\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmialzj3k.js:32:12)\n    at Object.<anonymous> (/tmp/tmpmialzj3k.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let str = n.toString();\n    let arr = str.split('');\n    let arr2 = arr.map(Number);\n    let arr3 = arr2.sort((a, b) => b - a);\n    let arr4 = arr3.join('');\n    let arr5 = parseInt(arr4);\n    if (arr5 > n) {\n        return arr5;\n    } else {\n        return -1;\n    }\n}\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456798));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "../../../../tmp/tmpay3vmeye.ts(39,1): error TS1005: ',' expected.\n../../../../tmp/tmpay3vmeye.ts(39,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_str = n.toString();\n    let n_arr = n_str.split(\"\");\n    let n_arr_sorted = n_arr.sort();\n    let n_arr_sorted_reverse = n_arr_sorted.reverse();\n    let n_arr_sorted_reverse_str = n_arr_sorted_reverse.join(\"\");\n    let n_arr_sorted_reverse_str_num = parseInt(n_arr_sorted_reverse_str);\n    if (n_arr_sorted_reverse_str_num === n) {\n        return -1;\n    }\n    else {\n        return n_arr_sorted_reverse_str_num;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmppj09yaxe.js:20:12)\n    at Object.<anonymous> (/tmp/tmppj09yaxe.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits: number[] = n.toString().split('').map(Number);\n    let i: number = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp: number = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp88gc3noz.js:32:12)\n    at Object.<anonymous> (/tmp/tmp88gc3noz.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr: number[] = n.toString().split('').map(Number);\n    let i: number = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp: number = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\nconsole.log(rearrange_bigger(1234567890));\nconsole.log(rearrange_bigger(2017));\nconsole.log(rearrange_bigger(414));\nconsole.log(rearrange_bigger(144));\nconsole.log(rearrange_bigger(12));\nconsole.log(rearrange_bigger(20));\nconsole.log(rearrange_bigger(111));\nconsole.log(rearrange_bigger(531));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(1234567908));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "1234567908\n2071\n441\n414\n21\n-1\n-1\n-1\n123456798\n1234567980\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp2hepjbov.js:42:12)\n    at Object.<anonymous> (/tmp/tmp2hepjbov.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits = n.toString().split('');\n    let i = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "1243\n-1\n536479\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpn5g19fh8.js:35:12)\n    at Object.<anonymous> (/tmp/tmpn5g19fh8.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr: number[] = n.toString().split('').map(Number);\n    let i: number = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp: number = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return arr.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpoul0tyuq.js:32:12)\n    at Object.<anonymous> (/tmp/tmpoul0tyuq.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_str = n.toString();\n    let n_arr = n_str.split('');\n    let n_arr_sorted = n_arr.sort((a, b) => b - a);\n    let n_sorted = parseInt(n_arr_sorted.join(''));\n    if (n_sorted === n) {\n        return -1;\n    }\n    for (let i = n + 1; i <= n_sorted; i++) {\n        let i_str = i.toString();\n        let i_arr = i_str.split('');\n        let i_arr_sorted = i_arr.sort((a, b) => b - a);\n        let i_sorted = parseInt(i_arr_sorted.join(''));\n        if (i_sorted === n_sorted) {\n            return i;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122864,
      "stdout": "../../../../tmp/tmp3z6uidcb.ts(5,45): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmp3z6uidcb.ts(5,49): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmp3z6uidcb.ts(13,49): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmp3z6uidcb.ts(13,53): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let nums = n.toString().split('');\n    let i = nums.length - 1;\n    while (i > 0 && nums[i - 1] >= nums[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = nums.length - 1;\n    while (nums[j] <= nums[i - 1]) {\n        j--;\n    }\n    let temp = nums[i - 1];\n    nums[i - 1] = nums[j];\n    nums[j] = temp;\n    j = nums.length - 1;\n    while (i < j) {\n        temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(nums.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdc17w5x1.js:32:12)\n    at Object.<anonymous> (/tmp/tmpdc17w5x1.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n  let arr = n.toString().split(\"\");\n  let i = arr.length - 1;\n  while (i > 0 && arr[i - 1] >= arr[i]) {\n    i--;\n  }\n  if (i <= 0) {\n    return -1;\n  }\n  let j = arr.length - 1;\n  while (arr[j] <= arr[i - 1]) {\n    j--;\n  }\n  let temp = arr[i - 1];\n  arr[i - 1] = arr[j];\n  arr[j] = temp;\n  j = arr.length - 1;\n  while (i < j) {\n    temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    i++;\n    j--;\n  }\n  return parseInt(arr.join(\"\"));\n}\n\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(5349\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "../../../../tmp/tmp8c4en3zq.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmp8c4en3zq.ts(48,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('').map(Number);\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmialzj3k.js:32:12)\n    at Object.<anonymous> (/tmp/tmpmialzj3k.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let nums: number[] = n.toString().split('').map(Number);\n    let i: number = nums.length - 1;\n    while (i > 0 && nums[i - 1] >= nums[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = nums.length - 1;\n    while (nums[j] <= nums[i - 1]) {\n        j--;\n    }\n    let temp: number = nums[i - 1];\n    nums[i - 1] = nums[j];\n    nums[j] = temp;\n    j = nums.length - 1;\n    while (i < j) {\n        temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n        i++;\n        j--;\n    }\n    return Number(nums.join(''));\n}\n\nconsole.log(rearrange_bigger(12345));\nconsole.log(rearrange_bigger(12354));\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(1243));\nconsole.log(rearrange_bigger(19000));\nconsole.log(rearrange_bigger(9));\nconsole.log(rearrange_bigger(111));\nconsole.log(rearrange_bigger(531));\nconsole.log(rearrange_bigger(2017));\nconsole.log(rearrange_bigger(414));\nconsole.log(rearrange_bigger(144));\nconsole.log(rearrange_bigger(12));\nconsole.log(rearrange_bigger(21));\nconsole.log(rearrange_bigger(2071));\nconsole.log(rearrange_bigger(1027));\nconsole.log(rearrange_bigger(414));\nconsole.log(rearrange_bigger(144));\nconsole.log(rearrange_bigger(12));\nconsole.log(rearrange_bigger\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "../../../../tmp/tmpml9k1f74.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpml9k1f74.ts(48,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split(\"\");\n    let arr2 = [];\n    let arr3 = [];\n    let arr4 = [];\n    let arr5 = [];\n    let arr6 = [];\n    let arr7 = [];\n    let arr8 = [];\n    let arr9 = [];\n    let arr10 = [];\n    let arr11 = [];\n    let arr12 = [];\n    let arr13 = [];\n    let arr14 = [];\n    let arr15 = [];\n    let arr16 = [];\n    let arr17 = [];\n    let arr18 = [];\n    let arr19 = [];\n    let arr20 = [];\n    let arr21 = [];\n    let arr22 = [];\n    let arr23 = [];\n    let arr24 = [];\n    let arr25 = [];\n    let arr26 = [];\n    let arr27 = [];\n    let arr28 = [];\n    let arr29 = [];\n    let arr30 = [];\n    let arr31 = [];\n    let arr32 = [];\n    let arr33 = [];\n    let arr34 = [];\n    let arr35 = [];\n    let arr36 = [];\n    let arr37 = [];\n    let arr38 = [];\n    let arr39 = [];\n    let arr40 = [];\n    let arr41 = [];\n    let arr42 = [];\n    let arr43 = [];\n    let arr44 = [];\n    let arr45 = [];\n    let arr46 = [];\n    let arr47 = [];\n    let arr48 = [];\n    let arr49 = [];\n    let arr50 = [];\n    let arr51 = [];\n    let arr52 = [];\n    let arr53 = [];\n    let arr54 = [];\n    let arr55 = [];\n    let arr56 = [];\n    let arr57 = [];\n    let arr58 = [];\n    let arr59 = [];\n    let arr60 = [];\n    let arr61 = [];\n    let arr62 = [];\n    let arr63 = [];\n    let arr64 = [];\n    let arr65 = [];\n    let arr66 = [];\n    let arr67 = [];\n    let arr68 = [];\n    let arr69 = [];\n    let arr70 = [];\n    let arr71 = [];\n    let arr72 = [];\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "../../../../tmp/tmp4iqcge0_.ts(87,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n  let num = n.toString().split('');\n  let i = num.length - 1;\n  while (i > 0 && num[i - 1] >= num[i]) {\n    i--;\n  }\n  if (i <= 0) {\n    return -1;\n  }\n  let j = num.length - 1;\n  while (num[j] <= num[i - 1]) {\n    j--;\n  }\n  let temp = num[i - 1];\n  num[i - 1] = num[j];\n  num[j] = temp;\n  j = num.length - 1;\n  while (i < j) {\n    temp = num[i];\n    num[i] = num[j];\n    num[j] = temp;\n    i++;\n    j--;\n  }\n  return parseInt(num.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpc_26xwec.js:32:12)\n    at Object.<anonymous> (/tmp/tmpc_26xwec.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_str = n.toString();\n    let n_arr = n_str.split('');\n    let n_arr_num = n_arr.map(Number);\n    let n_arr_num_sorted = n_arr_num.sort((a, b) => b - a);\n    let n_arr_num_sorted_str = n_arr_num_sorted.join('');\n    let n_arr_num_sorted_num = parseInt(n_arr_num_sorted_str);\n    if (n_arr_num_sorted_num === n) {\n        return -1;\n    } else {\n        return n_arr_num_sorted_num;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wclqosa.js:20:12)\n    at Object.<anonymous> (/tmp/tmp4wclqosa.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let num = n.toString().split('');\n    let i = num.length - 1;\n    while (i > 0 && num[i - 1] >= num[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = num.length - 1;\n    while (num[j] <= num[i - 1]) {\n        j--;\n    }\n    let temp = num[i - 1];\n    num[i - 1] = num[j];\n    num[j] = temp;\n    j = num.length - 1;\n    while (i < j) {\n        temp = num[i];\n        num[i] = num[j];\n        num[j] = temp;\n        i++;\n        j--;\n    }\n    return num.join('');\n}\n\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "1243\n-1\n536479\n536479\n536479\n536479\n536479\n536479\n536479\n536479\n536479\n536479\n536479\n536479\n536479\n536479\n536479\n536479\n536479\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpc9ws3ao9.js:51:12)\n    at Object.<anonymous> (/tmp/tmpc9ws3ao9.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits = n.toString().split('');\n    let i = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk_4b_9ph.js:32:12)\n    at Object.<anonymous> (/tmp/tmpk_4b_9ph.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n  let digits = n.toString().split('');\n  let i = digits.length - 1;\n  while (i > 0 && digits[i - 1] >= digits[i]) {\n    i--;\n  }\n  if (i <= 0) {\n    return -1;\n  }\n  let j = digits.length - 1;\n  while (digits[j] <= digits[i - 1]) {\n    j--;\n  }\n  [digits[i - 1], digits[j]] = [digits[j], digits[i - 1]];\n  j = digits.length - 1;\n  while (i < j) {\n    [digits[i], digits[j]] = [digits[j], digits[i]];\n    i++;\n    j--;\n  }\n  return parseInt(digits.join(''));\n}\n\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "1243\n-1\n536479\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpqcbz2it8.js:31:12)\n    at Object.<anonymous> (/tmp/tmpqcbz2it8.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(1234567890));\nconsole.log(rearrange_bigger(1234567891));\nconsole.log(rearrange_bigger(1234567892));\nconsole.log(rearrange_bigger(1234567893));\nconsole.log(rearrange_bigger(1234567894));\nconsole.log(rearrange_bigger(1234567895));\nconsole.log(rearrange_bigger(1234567896));\nconsole.log(rearrange_bigger(1234567897));\nconsole.log(rearrange_bigger(1234567898));\nconsole.log(rearrange_bigger(1234567899));\nconsole.log(rearrange_bigger(1234567800));\nconsole.log(rearrange_bigger(1234567700));\nconsole.log(rearrange_bigger(1234567600));\nconsole.log(rearrange_bigger(1234567000));\nconsole.log(rearrange_bigger(1234500000));\nconsole.log(rearrange_bigger(1234000000));\nconsole.log(rearrange\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "../../../../tmp/tmpmsl353no.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpmsl353no.ts(47,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits = n.toString().split('');\n    let i = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk_4b_9ph.js:32:12)\n    at Object.<anonymous> (/tmp/tmpk_4b_9ph.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let nums: number[] = n.toString().split('').map(Number);\n    let i: number = nums.length - 1;\n    while (i > 0 && nums[i - 1] >= nums[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = nums.length - 1;\n    while (nums[j] <= nums[i - 1]) {\n        j--;\n    }\n    let temp: number = nums[i - 1];\n    nums[i - 1] = nums[j];\n    nums[j] = temp;\n    j = nums.length - 1;\n    while (i < j) {\n        temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(nums.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpa5cxn1gl.js:32:12)\n    at Object.<anonymous> (/tmp/tmpa5cxn1gl.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let str: string = n.toString();\n    let arr: string[] = str.split('');\n    let arr2: number[] = [];\n    for (let i: number = 0; i < arr.length; i++) {\n        arr2.push(parseInt(arr[i]));\n    }\n    let arr3: number[] = arr2.slice();\n    arr3.sort(function (a, b) { return b - a });\n    let arr4: number[] = [];\n    for (let i: number = 0; i < arr3.length; i++) {\n        if (arr3[i] > arr2[i]) {\n            arr4.push(arr3[i]);\n            arr3.splice(i, 1);\n            break;\n        }\n    }\n    arr4 = arr4.concat(arr3);\n    let str2: string = arr4.join('');\n    if (str2 === str) {\n        return -1;\n    }\n    else {\n        return parseInt(str2);\n    }\n}\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456798));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "../../../../tmp/tmp9r2polax.ts(43,9): error TS1003: Identifier expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456798));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "../../../../tmp/tmp8vxcte2r.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmp8vxcte2r.ts(46,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits = n.toString().split('').map(Number);\n    let i = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpl4_7hbd8.js:32:12)\n    at Object.<anonymous> (/tmp/tmpl4_7hbd8.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits = n.toString().split('').map(Number);\n    let i = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i])\n        i--;\n    if (i <= 0)\n        return -1;\n    let j = digits.length - 1;\n    while (digits[j] <= digits[i - 1])\n        j--;\n    let temp = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4q5ef2h9.js:29:12)\n    at Object.<anonymous> (/tmp/tmp4q5ef2h9.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let nums = n.toString().split('');\n    let i = nums.length - 1;\n    while (i > 0 && nums[i - 1] >= nums[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = nums.length - 1;\n    while (nums[j] <= nums[i - 1]) {\n        j--;\n    }\n    let temp = nums[i - 1];\n    nums[i - 1] = nums[j];\n    nums[j] = temp;\n    j = nums.length - 1;\n    while (i < j) {\n        temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n        i++;\n        j--;\n    }\n    return nums.join('');\n}\n\nconsole.log(rearrange_bigger(12345));\nconsole.log(rearrange_bigger(12354));\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(1243));\nconsole.log(rearrange_bigger(534976));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "12354\n12435\n1243\n1324\n536479\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4_zv1bjw.js:37:12)\n    at Object.<anonymous> (/tmp/tmp4_zv1bjw.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let str = n.toString();\n    let arr = str.split('');\n    let arr2 = arr.slice();\n    let arr3 = arr.slice();\n    let arr4 = arr.slice();\n    let arr5 = arr.slice();\n    let arr6 = arr.slice();\n    let arr7 = arr.slice();\n    let arr8 = arr.slice();\n    let arr9 = arr.slice();\n    let arr10 = arr.slice();\n    let arr11 = arr.slice();\n    let arr12 = arr.slice();\n    let arr13 = arr.slice();\n    let arr14 = arr.slice();\n    let arr15 = arr.slice();\n    let arr16 = arr.slice();\n    let arr17 = arr.slice();\n    let arr18 = arr.slice();\n    let arr19 = arr.slice();\n    let arr20 = arr.slice();\n    let arr21 = arr.slice();\n    let arr22 = arr.slice();\n    let arr23 = arr.slice();\n    let arr24 = arr.slice();\n    let arr25 = arr.slice();\n    let arr26 = arr.slice();\n    let arr27 = arr.slice();\n    let arr28 = arr.slice();\n    let arr29 = arr.slice();\n    let arr30 = arr.slice();\n    let arr31 = arr.slice();\n    let arr32 = arr.slice();\n    let arr33 = arr.slice();\n    let arr34 = arr.slice();\n    let arr35 = arr.slice();\n    let arr36 = arr.slice();\n    let arr37 = arr.slice();\n    let arr38 = arr.slice();\n    let arr39 = arr.slice();\n    let arr40 = arr.slice();\n    let arr41 = arr.slice();\n    let arr42 = arr.slice();\n    let arr43 = arr.slice();\n    let arr44 = arr.slice();\n    let arr45 = arr.slice();\n    let arr46 = arr.slice();\n    let arr47 = arr.slice();\n    let arr48 = arr.slice();\n    let arr49 = arr.slice();\n    let arr50 = arr.slice();\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "../../../../tmp/tmpgrtmhay8.ts(66,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits = n.toString().split('');\n    let i = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk_4b_9ph.js:32:12)\n    at Object.<anonymous> (/tmp/tmpk_4b_9ph.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let num = n.toString();\n    let num_arr = num.split('');\n    let num_arr_sorted = num_arr.sort((a, b) => b - a);\n    let num_sorted = num_arr_sorted.join('');\n    if (num_sorted == num) {\n        return -1;\n    }\n    let num_arr_sorted_desc = num_arr.sort((a, b) => a - b);\n    let num_sorted_desc = num_arr_sorted_desc.join('');\n    let num_arr_sorted_desc_num = parseInt(num_sorted_desc);\n    let num_arr_sorted_num = parseInt(num_sorted);\n    let num_arr_num = parseInt(num);\n    if (num_arr_sorted_desc_num == num_arr_num) {\n        return -1;\n    }\n    let num_arr_sorted_desc_num_arr = num_arr_sorted_desc_num.toString().split('');\n    let num_arr_sorted_num_arr = num_arr_sorted_num.toString().split('');\n    let num_arr_num_arr = num_arr_num.toString().split('');\n    let num_arr_sorted_desc_num_arr_len = num_arr_sorted_desc_num_arr.length;\n    let num_arr_sorted_num_arr_len = num_arr_sorted_num_arr.length;\n    let num_arr_num_arr_len = num_arr_num_arr.length;\n    let num_arr_sorted_desc_num_arr_len_diff = num_arr_sorted_desc_num_arr_len - num_arr_num_arr_len;\n    let num_arr_sorted_num_arr_len_diff = num_arr_sorted_num_arr_len - num_arr_num_arr_len;\n    let num_arr_sorted_desc_num_arr_len_diff_arr = num_arr_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "../../../../tmp/tmp18v0kcxk.ts(38,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split(\"\");\n    let i = arr.length - 1;\n    while (i > 0 && arr[i] <= arr[i - 1]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(\"\"));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_mqd889f.js:32:12)\n    at Object.<anonymous> (/tmp/tmp_mqd889f.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "../../../../tmp/tmp6_jse1gc.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmp6_jse1gc.ts(47,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let num = n.toString().split('');\n    let i = num.length - 1;\n    while (i > 0 && num[i] <= num[i - 1]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = num.length - 1;\n    while (num[j] <= num[i - 1]) {\n        j--;\n    }\n    let temp = num[i - 1];\n    num[i - 1] = num[j];\n    num[j] = temp;\n    j = num.length - 1;\n    while (i < j) {\n        temp = num[i];\n        num[i] = num[j];\n        num[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(num.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpugixu754.js:32:12)\n    at Object.<anonymous> (/tmp/tmpugixu754.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let nums: number[] = n.toString().split('').map(Number);\n    let i: number = nums.length - 1;\n    while (i > 0 && nums[i - 1] >= nums[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = nums.length - 1;\n    while (nums[j] <= nums[i - 1]) {\n        j--;\n    }\n    let temp: number = nums[i - 1];\n    nums[i - 1] = nums[j];\n    nums[j] = temp;\n    j = nums.length - 1;\n    while (i < j) {\n        temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(nums.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpa5cxn1gl.js:32:12)\n    at Object.<anonymous> (/tmp/tmpa5cxn1gl.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('').map(Number);\n    let max = 0;\n    let index = 0;\n    for (let i = arr.length - 1; i > 0; i--) {\n        if (arr[i] > arr[i - 1]) {\n            max = arr[i];\n            index = i;\n            break;\n        }\n    }\n    if (max === 0) {\n        return -1;\n    }\n    let temp = arr[index - 1];\n    arr[index - 1] = arr[index];\n    arr[index] = temp;\n    return arr.join('');\n}\n\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456798));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "../../../../tmp/tmpeujpyhp_.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmpeujpyhp_.ts(43,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits = n.toString().split('');\n    let i = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk_4b_9ph.js:32:12)\n    at Object.<anonymous> (/tmp/tmpk_4b_9ph.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n  let arr = n.toString().split(\"\");\n  let i = arr.length - 1;\n  while (i > 0 && arr[i] <= arr[i - 1]) i--;\n  if (i <= 0) return -1;\n  let j = arr.length - 1;\n  while (arr[j] <= arr[i - 1]) j--;\n  let temp = arr[i - 1];\n  arr[i - 1] = arr[j];\n  arr[j] = temp;\n  j = arr.length - 1;\n  while (i < j) {\n    temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    i++;\n    j--;\n  }\n  return parseInt(arr.join(\"\"));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122866,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpqvcadm0u.js:29:12)\n    at Object.<anonymous> (/tmp/tmpqvcadm0u.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_arr = n.toString().split('');\n    let n_arr_sorted = n_arr.sort((a, b) => b - a);\n    let n_arr_sorted_str = n_arr_sorted.join('');\n    let n_arr_sorted_str_num = Number(n_arr_sorted_str);\n    if (n_arr_sorted_str_num === n) {\n        return -1;\n    }\n    let n_arr_sorted_str_num_str = n_arr_sorted_str_num.toString();\n    let n_arr_sorted_str_num_str_arr = n_arr_sorted_str_num_str.split('');\n    let n_arr_sorted_str_num_str_arr_sorted = n_arr_sorted_str_num_str_arr.sort((a, b) => a - b);\n    let n_arr_sorted_str_num_str_arr_sorted_str = n_arr_sorted_str_num_str_arr_sorted.join('');\n    let n_arr_sorted_str_num_str_arr_sorted_str_num = Number(n_arr_sorted_str_num_str_arr_sorted_str);\n    return n_arr_sorted_str_num_str_arr_sorted_str_num;\n}\nconsole.log(rearrange_bigger(12));\nconsole.log(rearrange_bigger(513));\nconsole.log(rearrange_bigger(2017));\nconsole.log(rearrange_bigger(414));\nconsole.log(rearrange_bigger(144));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "../../../../tmp/tmp3mx2884y.ts(4,45): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmp3mx2884y.ts(4,49): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmp3mx2884y.ts(12,91): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmp3mx2884y.ts(12,95): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_str = n.toString();\n    let n_arr = n_str.split(\"\");\n    let n_arr_sorted = n_arr.sort((a, b) => b - a);\n    let n_arr_sorted_str = n_arr_sorted.join(\"\");\n    if (n_str === n_arr_sorted_str) {\n        return -1;\n    }\n    let n_arr_sorted_num = parseInt(n_arr_sorted_str);\n    for (let i = n_arr_sorted_num; i > n; i--) {\n        if (i.toString().split(\"\").sort().join(\"\") === n_str) {\n            return i;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "../../../../tmp/tmpez7kmm_x.ts(5,45): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpez7kmm_x.ts(5,49): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_str = n.toString();\n    let n_arr = n_str.split(\"\");\n    let n_arr_int = n_arr.map(Number);\n    let n_arr_int_sorted = n_arr_int.slice().sort((a, b) => b - a);\n    let n_arr_int_sorted_str = n_arr_int_sorted.join(\"\");\n    let n_str_sorted = n_arr_int_sorted_str.toString();\n    if (n_str_sorted === n_str) {\n        return -1;\n    }\n    let n_arr_int_sorted_str_arr = n_arr_int_sorted_str.split(\"\");\n    let n_arr_int_sorted_str_arr_int = n_arr_int_sorted_str_arr.map(Number);\n    let n_arr_int_sorted_str_arr_int_sorted = n_arr_int_sorted_str_arr_int.slice().sort((a, b) => a - b);\n    let n_arr_int_sorted_str_arr_int_sorted_str = n_arr_int_sorted_str_arr_int_sorted.join(\"\");\n    let n_arr_int_sorted_str_arr_int_sorted_str_int = parseInt(n_arr_int_sorted_str_arr_int_sorted_str);\n    return n_arr_int_sorted_str_arr_int_sorted_str_int;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122870,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n12\n\nshould loosely deep-equal\n\n21\n    at test (/tmp/tmp9zy9jrl1.js:22:12)\n    at Object.<anonymous> (/tmp/tmp9zy9jrl1.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 12,\n  expected: 21,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits = n.toString().split('');\n    let i = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk_4b_9ph.js:32:12)\n    at Object.<anonymous> (/tmp/tmpk_4b_9ph.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr: number[] = n.toString().split('').map(Number);\n    let arr_sorted: number[] = arr.slice().sort((a, b) => b - a);\n    let arr_sorted_str: string = arr_sorted.join('');\n    let n_str: string = n.toString();\n    if (n_str === arr_sorted_str) {\n        return -1;\n    }\n    let arr_sorted_str_arr: number[] = arr_sorted_str.split('').map(Number);\n    let arr_sorted_str_arr_sorted: number[] = arr_sorted_str_arr.slice().sort((a, b) => a - b);\n    let arr_sorted_str_arr_sorted_str: string = arr_sorted_str_arr_sorted.join('');\n    let arr_sorted_str_arr_sorted_str_arr: number[] = arr_sorted_str_arr_sorted_str.split('').map(Number);\n    let arr_sorted_str_arr_sorted_str_arr_sorted: number[] = arr_sorted_str_arr_sorted_str_arr.slice().sort((a, b) => b - a);\n    let arr_sorted_str_arr_sorted_str_arr_sorted_str: string = arr_sorted_str_arr_sorted_str_arr_sorted.join('');\n    let arr_sorted_str_arr_sorted_str_arr_sorted_str_arr: number[] = arr_sorted_str_arr_sorted_str_arr_sorted_str.split('').map(Number);\n    let arr_sorted_str_arr_sorted_str_arr_sorted_str_arr_sorted: number[] = arr_sorted_str_arr_sorted_str_arr_sorted_str_arr.slice().sort((a, b) => a - b);\n    let arr_sorted_str_arr_sorted_str_arr_sorted_str_arr_s\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122870,
      "stdout": "../../../../tmp/tmpt6pdcizu.ts(30,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n  let arr = n.toString().split('');\n  let i = arr.length - 1;\n  while (i > 0 && arr[i - 1] >= arr[i]) {\n    i--;\n  }\n  if (i <= 0) {\n    return -1;\n  }\n  let j = arr.length - 1;\n  while (arr[j] <= arr[i - 1]) {\n    j--;\n  }\n  let temp = arr[i - 1];\n  arr[i - 1] = arr[j];\n  arr[j] = temp;\n  j = arr.length - 1;\n  while (i < j) {\n    temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    i++;\n    j--;\n  }\n  return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122870,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxd7o5wxo.js:32:12)\n    at Object.<anonymous> (/tmp/tmpxd7o5wxo.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let nums: number[] = n.toString().split('').map(Number);\n    let i: number = nums.length - 1;\n    while (i > 0 && nums[i - 1] >= nums[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = nums.length - 1;\n    while (nums[j] <= nums[i - 1]) {\n        j--;\n    }\n    let temp: number = nums[i - 1];\n    nums[i - 1] = nums[j];\n    nums[j] = temp;\n    j = nums.length - 1;\n    while (i < j) {\n        temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(nums.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpa5cxn1gl.js:32:12)\n    at Object.<anonymous> (/tmp/tmpa5cxn1gl.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(12));\nconsole.log(rearrange_bigger(2071));\nconsole.log(rearrange_bigger(9));\nconsole.log(rearrange_bigger(111));\nconsole.log(rearrange_bigger(531));\nconsole.log(rearrange_bigger(1234567890));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122870,
      "stdout": "1243\n-1\n536479\n21\n2107\n-1\n-1\n-1\n1234567908\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpgatpd4ra.js:41:12)\n    at Object.<anonymous> (/tmp/tmpgatpd4ra.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let num = n.toString().split('');\n    let i = num.length - 1;\n    while (i > 0 && num[i - 1] >= num[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = num.length - 1;\n    while (num[j] <= num[i - 1]) {\n        j--;\n    }\n    let temp = num[i - 1];\n    num[i - 1] = num[j];\n    num[j] = temp;\n    j = num.length - 1;\n    while (i < j) {\n        temp = num[i];\n        num[i] = num[j];\n        num[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(num.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0vpl4hp8.js:32:12)\n    at Object.<anonymous> (/tmp/tmp0vpl4hp8.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let num_str = n.toString();\n    let num_arr = num_str.split('');\n    let num_arr_sorted = num_arr.sort((a, b) => b - a);\n    let num_arr_sorted_str = num_arr_sorted.join('');\n    let num_arr_sorted_num = Number(num_arr_sorted_str);\n    if (num_arr_sorted_num === n) {\n        return -1;\n    }\n    let num_arr_sorted_num_str = num_arr_sorted_num.toString();\n    let num_arr_sorted_num_arr = num_arr_sorted_num_str.split('');\n    let num_arr_sorted_num_arr_sorted = num_arr_sorted_num_arr.sort((a, b) => a - b);\n    let num_arr_sorted_num_arr_sorted_str = num_arr_sorted_num_arr_sorted.join('');\n    let num_arr_sorted_num_arr_sorted_num = Number(num_arr_sorted_num_arr_sorted_str);\n    return num_arr_sorted_num_arr_sorted_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122870,
      "stdout": "../../../../tmp/tmpvkqr583p.ts(5,49): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpvkqr583p.ts(5,53): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpvkqr583p.ts(13,79): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpvkqr583p.ts(13,83): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n  let arr = n.toString().split('');\n  let i = arr.length - 1;\n  while (i > 0 && arr[i - 1] >= arr[i]) {\n    i--;\n  }\n  if (i <= 0) {\n    return -1;\n  }\n  let j = arr.length - 1;\n  while (arr[j] <= arr[i - 1]) {\n    j--;\n  }\n  let temp = arr[i - 1];\n  arr[i - 1] = arr[j];\n  arr[j] = temp;\n  j = arr.length - 1;\n  while (i < j) {\n    temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    i++;\n    j--;\n  }\n  return parseInt(arr.join(''));\n}\n\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122870,
      "stdout": "1243\n-1\n536479\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmppxv57knz.js:35:12)\n    at Object.<anonymous> (/tmp/tmppxv57knz.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let num = n.toString().split('');\n    let i = num.length - 1;\n    while (i > 0 && num[i - 1] >= num[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = num.length - 1;\n    while (num[j] <= num[i - 1]) {\n        j--;\n    }\n    let temp = num[i - 1];\n    num[i - 1] = num[j];\n    num[j] = temp;\n    j = num.length - 1;\n    while (i < j) {\n        temp = num[i];\n        num[i] = num[j];\n        num[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(num.join(''));\n}\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122870,
      "stdout": "1243\n-1\n536479\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxp4wskog.js:35:12)\n    at Object.<anonymous> (/tmp/tmpxp4wskog.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n  let arr = n.toString().split('');\n  let i = arr.length - 1;\n  while (i > 0 && arr[i - 1] >= arr[i]) {\n    i--;\n  }\n  if (i <= 0) {\n    return -1;\n  }\n  let j = arr.length - 1;\n  while (arr[j] <= arr[i - 1]) {\n    j--;\n  }\n  let temp = arr[i - 1];\n  arr[i - 1] = arr[j];\n  arr[j] = temp;\n  j = arr.length - 1;\n  while (i < j) {\n    temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    i++;\n    j--;\n  }\n  return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122870,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxd7o5wxo.js:32:12)\n    at Object.<anonymous> (/tmp/tmpxd7o5wxo.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_str = n.toString();\n    let n_arr = n_str.split('');\n    let n_arr_num = n_arr.map(Number);\n    let n_arr_num_sorted = n_arr_num.sort((a, b) => b - a);\n    let n_arr_num_sorted_str = n_arr_num_sorted.join('');\n    let n_arr_num_sorted_num = Number(n_arr_num_sorted_str);\n    if (n_arr_num_sorted_num > n) {\n        return n_arr_num_sorted_num;\n    } else {\n        return -1;\n    }\n}\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456798));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(12345\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122870,
      "stdout": "../../../../tmp/tmprrcr_1ez.ts(35,1): error TS1005: ',' expected.\n../../../../tmp/tmprrcr_1ez.ts(35,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_str: string = n.toString();\n    let n_arr: string[] = n_str.split('');\n    let n_arr_num: number[] = [];\n    let n_arr_num_sorted: number[] = [];\n    let n_arr_num_sorted_str: string = '';\n    let n_arr_num_sorted_num: number = 0;\n    let result: any = 0;\n\n    for (let i: number = 0; i < n_arr.length; i++) {\n        n_arr_num.push(parseInt(n_arr[i]));\n    }\n\n    n_arr_num_sorted = n_arr_num.sort(function (a, b) { return a - b });\n    n_arr_num_sorted_str = n_arr_num_sorted.join('');\n    n_arr_num_sorted_num = parseInt(n_arr_num_sorted_str);\n\n    if (n_arr_num_sorted_num > n) {\n        result = n_arr_num_sorted_num;\n    } else {\n        result = -1;\n    }\n\n    return result;\n}\n\nconsole.log(rearrange_bigger(12));\nconsole.log(rearrange_bigger(513));\nconsole.log(rearrange_bigger(2017));\nconsole.log(rearrange_bigger(414));\nconsole.log(rearrange_bigger(144));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(1234567890));\nconsole.log(rearrange_bigger(12345678901));\nconsole.log(rearrange_bigger(123456789012));\nconsole.log(rearrange_bigger(1234567890123));\nconsole.log(rearrange_bigger(12345678901234));\nconsole.log(rearrange_bigger(123456789012345));\nconsole.log(rearrange_bigger(1234567890123456));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122870,
      "stdout": "../../../../tmp/tmpmvtcnavk.ts(41,9): error TS1003: Identifier expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let num = n.toString().split('');\n    let i = num.length - 1;\n    while (i > 0 && num[i - 1] >= num[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = num.length - 1;\n    while (num[j] <= num[i - 1]) {\n        j--;\n    }\n    let temp = num[i - 1];\n    num[i - 1] = num[j];\n    num[j] = temp;\n    j = num.length - 1;\n    while (i < j) {\n        temp = num[i];\n        num[i] = num[j];\n        num[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(num.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0vpl4hp8.js:32:12)\n    at Object.<anonymous> (/tmp/tmp0vpl4hp8.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "../../../../tmp/tmpj6t8mp4v.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpj6t8mp4v.ts(48,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n  let str = n.toString();\n  let arr = str.split(\"\");\n  let arr2 = arr.slice();\n  let arr3 = arr.slice();\n  arr2.sort((a, b) => b - a);\n  if (arr.join(\"\") == arr2.join(\"\")) {\n    return -1;\n  }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] > arr[i - 1]) {\n      let temp = arr[i];\n      arr[i] = arr[i - 1];\n      arr[i - 1] = temp;\n      break;\n    }\n  }\n  let arr4 = arr.slice(arr.indexOf(arr[arr.length - 1]));\n  arr4.sort((a, b) => a - b);\n  arr3.splice(arr.indexOf(arr[arr.length - 1]));\n  return Number(arr3.join(\"\") + arr4.join(\"\"));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122870,
      "stdout": "../../../../tmp/tmptta414sg.ts(7,23): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmptta414sg.ts(7,27): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmptta414sg.ts(20,23): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmptta414sg.ts(20,27): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('').map(Number);\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return arr.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122871,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp84jkj2cp.js:32:12)\n    at Object.<anonymous> (/tmp/tmp84jkj2cp.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(5349\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122870,
      "stdout": "../../../../tmp/tmptc38_7ih.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmptc38_7ih.ts(47,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_str = n.toString();\n    let n_arr = n_str.split(\"\");\n    let n_arr_sorted = n_arr.sort((a, b) => b - a);\n    let n_arr_sorted_str = n_arr_sorted.join(\"\");\n    let n_bigger = parseInt(n_arr_sorted_str);\n    if (n_bigger > n) {\n        return n_bigger;\n    } else {\n        return -1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122870,
      "stdout": "../../../../tmp/tmp3nl36j4n.ts(5,45): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmp3nl36j4n.ts(5,49): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_str = n.toString();\n    let n_arr = n_str.split('');\n    let n_arr_num = n_arr.map(Number);\n    let n_arr_num_sorted = n_arr_num.sort((a, b) => b - a);\n    let n_arr_num_sorted_str = n_arr_num_sorted.join('');\n    let n_arr_num_sorted_num = parseInt(n_arr_num_sorted_str);\n    if (n_arr_num_sorted_num === n) {\n        return -1;\n    } else {\n        return n_arr_num_sorted_num;\n    }\n}\n\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456798));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122870,
      "stdout": "../../../../tmp/tmplokeau3a.ts(36,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr: number[] = n.toString().split('').map(Number);\n    let i: number = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp: number = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return arr.join('');\n}\nconsole.log(rearrange_bigger(12345));\nconsole.log(rearrange_bigger(12354));\nconsole.log(rearrange_bigger(12543));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456798));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearr\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122871,
      "stdout": "../../../../tmp/tmp49v6kqwq.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmp49v6kqwq.ts(46,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_str = n.toString();\n    let n_arr = n_str.split(\"\");\n    let n_arr_sorted = n_arr.sort();\n    let n_arr_sorted_str = n_arr_sorted.join(\"\");\n    let n_arr_sorted_str_num = parseInt(n_arr_sorted_str);\n    let n_arr_sorted_str_num_str = n_arr_sorted_str_num.toString();\n    let n_arr_sorted_str_num_str_arr = n_arr_sorted_str_num_str.split(\"\");\n    let n_arr_sorted_str_num_str_arr_reverse = n_arr_sorted_str_num_str_arr.reverse();\n    let n_arr_sorted_str_num_str_arr_reverse_str = n_arr_sorted_str_num_str_arr_reverse.join(\"\");\n    let n_arr_sorted_str_num_str_arr_reverse_str_num = parseInt(n_arr_sorted_str_num_str_arr_reverse_str);\n    if (n_arr_sorted_str_num_str_arr_reverse_str_num === n) {\n        return -1;\n    } else {\n        return n_arr_sorted_str_num_str_arr_reverse_str_num;\n    }\n}\nconsole.log(rearrange_bigger(123));\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(1243));\nconsole.log(rearrange_bigger(1235));\nconsole.log(rearrange_bigger(1230));\nconsole.log(rearrange_bigger(1203));\nconsole.log(rearrange_bigger(1023));\nconsole.log(rearrange_bigger(1302));\nconsole.log(rearrange_bigger(1320));\nconsole.log(rearrange_bigger(1325));\nconsole.log(rearrange_bigger(1352));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122871,
      "stdout": "321\n4321\n4321\n5321\n321\n321\n321\n321\n321\n5321\n5321\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpu8dhfbth.js:35:12)\n    at Object.<anonymous> (/tmp/tmpu8dhfbth.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('').map(Number);\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return arr.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122871,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp84jkj2cp.js:32:12)\n    at Object.<anonymous> (/tmp/tmp84jkj2cp.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let nums = n.toString().split('');\n    let i = nums.length - 1;\n    while (i > 0 && nums[i - 1] >= nums[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = nums.length - 1;\n    while (nums[j] <= nums[i - 1]) {\n        j--;\n    }\n    [nums[i - 1], nums[j]] = [nums[j], nums[i - 1]];\n    j = nums.length - 1;\n    while (i < j) {\n        [nums[i], nums[j]] = [nums[j], nums[i]];\n        i++;\n        j--;\n    }\n    return parseInt(nums.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122871,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpbn905w06.js:28:12)\n    at Object.<anonymous> (/tmp/tmpbn905w06.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let num: string = n.toString();\n    let num_arr: string[] = num.split(\"\");\n    let num_arr_sorted: string[] = num_arr.sort();\n    let num_arr_sorted_reverse: string[] = num_arr_sorted.reverse();\n    let num_arr_sorted_reverse_join: string = num_arr_sorted_reverse.join(\"\");\n    let num_arr_sorted_reverse_join_num: number = parseInt(num_arr_sorted_reverse_join);\n    if (n === num_arr_sorted_reverse_join_num) {\n        return -1;\n    } else {\n        return num_arr_sorted_reverse_join_num;\n    }\n}\n\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456798));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(re\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122871,
      "stdout": "../../../../tmp/tmpl58_krr1.ts(36,1): error TS1005: ',' expected.\n../../../../tmp/tmpl58_krr1.ts(36,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456798));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_big\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122870,
      "stdout": "../../../../tmp/tmpkp21oi7_.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpkp21oi7_.ts(47,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits = n.toString().split('');\n    let i = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk_4b_9ph.js:32:12)\n    at Object.<anonymous> (/tmp/tmpk_4b_9ph.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split(\"\").map(Number);\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(\"\"));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122871,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4tgcmzp9.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4tgcmzp9.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\nconsole.log(rearrange_bigger(12345));\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(1243));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(54312));\nconsole.log(rearrange_bigger(54312));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(543\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122871,
      "stdout": "../../../../tmp/tmp8bphhpj3.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmp8bphhpj3.ts(48,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let nums: number[] = n.toString().split(\"\").map(Number);\n    let i: number = nums.length - 1;\n    while (i > 0 && nums[i - 1] >= nums[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = nums.length - 1;\n    while (nums[j] <= nums[i - 1]) {\n        j--;\n    }\n    let temp: number = nums[i - 1];\n    nums[i - 1] = nums[j];\n    nums[j] = temp;\n    j = nums.length - 1;\n    while (i < j) {\n        temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n        i++;\n        j--;\n    }\n    return nums.join(\"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122871,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmper2t7hhf.js:32:12)\n    at Object.<anonymous> (/tmp/tmper2t7hhf.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n  let arr = n.toString().split('');\n  let i = arr.length - 1;\n  while (i > 0 && arr[i - 1] >= arr[i]) {\n    i--;\n  }\n  if (i <= 0) {\n    return -1;\n  }\n  let j = arr.length - 1;\n  while (arr[j] <= arr[i - 1]) {\n    j--;\n  }\n  let temp = arr[i - 1];\n  arr[i - 1] = arr[j];\n  arr[j] = temp;\n  j = arr.length - 1;\n  while (i < j) {\n    temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    i++;\n    j--;\n  }\n  return parseInt(arr.join(''));\n}\n\nconsole.log(rearrange_bigger(1234567890));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122871,
      "stdout": "1234567908\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpic3b3s93.js:33:12)\n    at Object.<anonymous> (/tmp/tmpic3b3s93.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split(\"\");\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(\"\"));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpek34s43m.js:32:12)\n    at Object.<anonymous> (/tmp/tmpek34s43m.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\nconsole.log(rearrange_bigger(1234567890));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(12345678));\nconsole.log(rearrange_bigger(1234567));\nconsole.log(rearrange_bigger(123456));\nconsole.log(rearrange_bigger(12345));\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(123));\nconsole.log(rearrange_bigger(12));\nconsole.log(rearrange_bigger(1));\nconsole.log(rearrange_bigger(0));\nconsole.log(rearrange_bigger(9876543210));\nconsole.log(rearrange_bigger(987654321));\nconsole.log(rearrange_bigger(98765432));\nconsole.log(rearrange_bigger(9876543));\nconsole.log(rearrange_bigger(987654));\nconsole.log(rearrange_bigger(98765));\nconsole.log(rearrange_bigger(9876));\nconsole.log(rearrange_bigger(987));\nconsole.log(re\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122859,
      "stdout": "../../../../tmp/tmpke6oxyh6.ts(49,1): error TS1005: ',' expected.\n../../../../tmp/tmpke6oxyh6.ts(49,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456798));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_big\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122870,
      "stdout": "../../../../tmp/tmpkp21oi7_.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmpkp21oi7_.ts(47,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split(\"\");\n    let arr2 = [];\n    let arr3 = [];\n    let arr4 = [];\n    let arr5 = [];\n    let arr6 = [];\n    let arr7 = [];\n    let arr8 = [];\n    let arr9 = [];\n    let arr10 = [];\n    let arr11 = [];\n    let arr12 = [];\n    let arr13 = [];\n    let arr14 = [];\n    let arr15 = [];\n    let arr16 = [];\n    let arr17 = [];\n    let arr18 = [];\n    let arr19 = [];\n    let arr20 = [];\n    let arr21 = [];\n    let arr22 = [];\n    let arr23 = [];\n    let arr24 = [];\n    let arr25 = [];\n    let arr26 = [];\n    let arr27 = [];\n    let arr28 = [];\n    let arr29 = [];\n    let arr30 = [];\n    let arr31 = [];\n    let arr32 = [];\n    let arr33 = [];\n    let arr34 = [];\n    let arr35 = [];\n    let arr36 = [];\n    let arr37 = [];\n    let arr38 = [];\n    let arr39 = [];\n    let arr40 = [];\n    let arr41 = [];\n    let arr42 = [];\n    let arr43 = [];\n    let arr44 = [];\n    let arr45 = [];\n    let arr46 = [];\n    let arr47 = [];\n    let arr48 = [];\n    let arr49 = [];\n    let arr50 = [];\n    let arr51 = [];\n    let arr52 = [];\n    let arr53 = [];\n    let arr54 = [];\n    let arr55 = [];\n    let arr56 = [];\n    let arr57 = [];\n    let arr58 = [];\n    let arr59 = [];\n    let arr60 = [];\n    let arr61 = [];\n    let arr62 = [];\n    let arr63 = [];\n    let arr64 = [];\n    let arr65 = [];\n    let arr66 = [];\n    let arr67 = [];\n    let arr68 = [];\n    let arr69 = [];\n    let arr70 = [];\n    let arr71 = [];\n    let arr72 = [];\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "../../../../tmp/tmp4iqcge0_.ts(87,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_str = n.toString();\n    let n_arr = n_str.split(\"\");\n    let n_arr_sorted = n_arr.sort((a, b) => b - a);\n    let n_arr_sorted_str = n_arr_sorted.join(\"\");\n    if (n_str === n_arr_sorted_str) {\n        return -1;\n    }\n    let n_arr_sorted_int = parseInt(n_arr_sorted_str);\n    let n_arr_sorted_int_str = n_arr_sorted_int.toString();\n    let n_arr_sorted_int_arr = n_arr_sorted_int_str.split(\"\");\n    let n_arr_sorted_int_arr_sorted = n_arr_sorted_int_arr.sort((a, b) => a - b);\n    let n_arr_sorted_int_arr_sorted_str = n_arr_sorted_int_arr_sorted.join(\"\");\n    let n_arr_sorted_int_arr_sorted_int = parseInt(n_arr_sorted_int_arr_sorted_str);\n    return n_arr_sorted_int_arr_sorted_int;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122872,
      "stdout": "../../../../tmp/tmp9ovoiiml.ts(5,45): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmp9ovoiiml.ts(5,49): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmp9ovoiiml.ts(13,75): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmp9ovoiiml.ts(13,79): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n  let arr = n.toString().split('');\n  let i = arr.length - 1;\n  while (i > 0 && arr[i - 1] >= arr[i]) {\n    i--;\n  }\n  if (i <= 0) {\n    return -1;\n  }\n  let j = arr.length - 1;\n  while (arr[j] <= arr[i - 1]) {\n    j--;\n  }\n  let temp = arr[i - 1];\n  arr[i - 1] = arr[j];\n  arr[j] = temp;\n  j = arr.length - 1;\n  while (i < j) {\n    temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n    i++;\n    j--;\n  }\n  return parseInt(arr.join(''));\n}\n\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(23456789));\nconsole.log(rearrange_bigger(98765432));\nconsole.log(rearrange_bigger(99999999));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122873,
      "stdout": "1243\n536479\n23456798\n-1\n-1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp1uvhqvg0.js:37:12)\n    at Object.<anonymous> (/tmp/tmp1uvhqvg0.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let nums = n.toString().split('');\n    let i = nums.length - 1;\n    while (i > 0 && nums[i - 1] >= nums[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = nums.length - 1;\n    while (nums[j] <= nums[i - 1]) {\n        j--;\n    }\n    let temp = nums[i - 1];\n    nums[i - 1] = nums[j];\n    nums[j] = temp;\n    j = nums.length - 1;\n    while (i < j) {\n        temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(nums.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122865,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdc17w5x1.js:32:12)\n    at Object.<anonymous> (/tmp/tmpdc17w5x1.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\nconsole.log(rearrange_bigger(12345));\nconsole.log(rearrange_bigger(12354));\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(1243));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(54312));\nconsole.log(rearrange_bigger(53412));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(54321));\nconsole.log(rearrange_bigger(54321));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122873,
      "stdout": "12354\n12435\n1243\n1324\n-1\n54321\n53421\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpgtamreow.js:51:12)\n    at Object.<anonymous> (/tmp/tmpgtamreow.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let arr2 = arr.slice();\n    let arr3 = arr.slice();\n    let arr4 = arr.slice();\n    let arr5 = arr.slice();\n    let arr6 = arr.slice();\n    let arr7 = arr.slice();\n    let arr8 = arr.slice();\n    let arr9 = arr.slice();\n    let arr10 = arr.slice();\n    let arr11 = arr.slice();\n    let arr12 = arr.slice();\n    let arr13 = arr.slice();\n    let arr14 = arr.slice();\n    let arr15 = arr.slice();\n    let arr16 = arr.slice();\n    let arr17 = arr.slice();\n    let arr18 = arr.slice();\n    let arr19 = arr.slice();\n    let arr20 = arr.slice();\n    let arr21 = arr.slice();\n    let arr22 = arr.slice();\n    let arr23 = arr.slice();\n    let arr24 = arr.slice();\n    let arr25 = arr.slice();\n    let arr26 = arr.slice();\n    let arr27 = arr.slice();\n    let arr28 = arr.slice();\n    let arr29 = arr.slice();\n    let arr30 = arr.slice();\n    let arr31 = arr.slice();\n    let arr32 = arr.slice();\n    let arr33 = arr.slice();\n    let arr34 = arr.slice();\n    let arr35 = arr.slice();\n    let arr36 = arr.slice();\n    let arr37 = arr.slice();\n    let arr38 = arr.slice();\n    let arr39 = arr.slice();\n    let arr40 = arr.slice();\n    let arr41 = arr.slice();\n    let arr42 = arr.slice();\n    let arr43 = arr.slice();\n    let arr44 = arr.slice();\n    let arr45 = arr.slice();\n    let arr46 = arr.slice();\n    let arr47 = arr.slice();\n    let arr48 = arr.slice();\n    let arr49 = arr.slice();\n    let arr50 = arr.slice();\n    let arr51 = arr.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "../../../../tmp/tmped31148j.ts(53,21): error TS1003: Identifier expected.\n../../../../tmp/tmped31148j.ts(65,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr: number[] = n.toString().split('').map(Number);\n    let i: number = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp: number = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return arr.join('');\n}\nconsole.log(rearrange_bigger(12345));\nconsole.log(rearrange_bigger(12354));\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(1243));\nconsole.log(rearrange_bigger(19000));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearrange_bigger(534976));\nconsole.log(rearr\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122873,
      "stdout": "../../../../tmp/tmp_3l_bjvx.ts(47,1): error TS1005: ',' expected.\n../../../../tmp/tmp_3l_bjvx.ts(47,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_str = n.toString();\n    let n_arr = n_str.split('');\n    let n_arr_num = n_arr.map(Number);\n    let n_arr_num_sorted = n_arr_num.sort((a, b) => b - a);\n    let n_arr_num_sorted_str = n_arr_num_sorted.join('');\n    let n_arr_num_sorted_num = parseInt(n_arr_num_sorted_str);\n    if (n_arr_num_sorted_num === n) {\n        return -1;\n    } else {\n        return n_arr_num_sorted_num;\n    }\n}\nconsole.log(rearrange_bigger(123));\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(1235));\nconsole.log(rearrange_bigger(1243));\nconsole.log(rearrange_bigger(1324));\nconsole.log(rearrange_bigger(1342));\nconsole.log(rearrange_bigger(1423));\nconsole.log(rearrange_bigger(1432));\nconsole.log(rearrange_bigger(2134));\nconsole.log(rearrange_bigger(2143));\nconsole.log(rearrange_bigger(2314));\nconsole.log(rearrange_bigger(2341));\nconsole.log(rearrange_bigger(2413));\nconsole.log(rearrange_bigger(2431));\nconsole.log(rearrange_bigger(3124));\nconsole.log(rearrange_bigger(3142));\nconsole.log(rearrange_bigger(3214));\nconsole.log(rearrange_bigger(3241));\nconsole.log(rearrange_bigger(3412));\nconsole.log(rearrange_bigger(3421));\nconsole.log(rearrange_bigger(4123));\nconsole.log(rearrange_bigger(4132));\nconsole.log(rearr\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122873,
      "stdout": "../../../../tmp/tmpq8i0xlbe.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmpq8i0xlbe.ts(38,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let nums: number[] = n.toString().split('').map(Number);\n    let i: number = nums.length - 1;\n    while (i > 0 && nums[i - 1] >= nums[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = nums.length - 1;\n    while (nums[j] <= nums[i - 1]) {\n        j--;\n    }\n    let temp: number = nums[i - 1];\n    nums[i - 1] = nums[j];\n    nums[j] = temp;\n    j = nums.length - 1;\n    while (i < j) {\n        temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(nums.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpa5cxn1gl.js:32:12)\n    at Object.<anonymous> (/tmp/tmpa5cxn1gl.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1665517259,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4wj0atas.js:32:12)\n    at Object.<anonymous> (/tmp/tmp4wj0atas.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let numArr = n.toString().split('');\n    let numArrSorted = numArr.sort((a, b) => b - a);\n    let numArrSortedStr = numArrSorted.join('');\n    let numArrSortedNum = parseInt(numArrSortedStr);\n    if (numArrSortedNum === n) {\n        return -1;\n    }\n    let numArrSortedNumStr = numArrSortedNum.toString();\n    let numArrSortedNumArr = numArrSortedNumStr.split('');\n    let numArrSortedNumArrSorted = numArrSortedNumArr.sort((a, b) => a - b);\n    let numArrSortedNumArrSortedStr = numArrSortedNumArrSorted.join('');\n    let numArrSortedNumArrSortedNum = parseInt(numArrSortedNumArrSortedStr);\n    return numArrSortedNumArrSortedNum;\n}\n\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456798));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(123456789));\nconsole.log(rearrange_bigger(12345\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122873,
      "stdout": "../../../../tmp/tmpzgnrscy_.ts(33,1): error TS1005: ',' expected.\n../../../../tmp/tmpzgnrscy_.ts(33,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return arr.join('');\n}\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122873,
      "stdout": "1243\n-1\n536479\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpn4tsj7b6.js:35:12)\n    at Object.<anonymous> (/tmp/tmpn4tsj7b6.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split(\"\");\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(\"\"));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpek34s43m.js:32:12)\n    at Object.<anonymous> (/tmp/tmpek34s43m.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let n_str = n.toString();\n    let n_arr = n_str.split('');\n    let n_arr_num = n_arr.map(Number);\n    let n_arr_num_sorted = n_arr_num.sort((a, b) => b - a);\n    let n_arr_num_sorted_str = n_arr_num_sorted.join('');\n    let n_arr_num_sorted_num = parseInt(n_arr_num_sorted_str);\n    if (n_arr_num_sorted_num > n) {\n        return n_arr_num_sorted_num;\n    } else {\n        return -1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122873,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfjsvxhwy.js:20:12)\n    at Object.<anonymous> (/tmp/tmpfjsvxhwy.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n  let digits = n.toString().split('');\n  let i = digits.length - 1;\n  while (i > 0 && digits[i - 1] >= digits[i]) {\n    i--;\n  }\n  if (i <= 0) {\n    return -1;\n  }\n  let j = digits.length - 1;\n  while (digits[j] <= digits[i - 1]) {\n    j--;\n  }\n  let temp = digits[i - 1];\n  digits[i - 1] = digits[j];\n  digits[j] = temp;\n  j = digits.length - 1;\n  while (i < j) {\n    temp = digits[i];\n    digits[i] = digits[j];\n    digits[j] = temp;\n    i++;\n    j--;\n  }\n  return parseInt(digits.join(''));\n}\n\nconsole.log(rearrange_bigger(123));\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(1243));\nconsole.log(rearrange_bigger(534976));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122873,
      "stdout": "132\n1243\n1324\n536479\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpurspdmer.js:36:12)\n    at Object.<anonymous> (/tmp/tmpurspdmer.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits = n.toString().split('');\n    let i = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk_4b_9ph.js:32:12)\n    at Object.<anonymous> (/tmp/tmpk_4b_9ph.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let num = n.toString().split('');\n    let i = num.length - 1;\n    while (i > 0 && num[i - 1] >= num[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = num.length - 1;\n    while (num[j] <= num[i - 1]) {\n        j--;\n    }\n    let temp = num[i - 1];\n    num[i - 1] = num[j];\n    num[j] = temp;\n    j = num.length - 1;\n    while (i < j) {\n        temp = num[i];\n        num[i] = num[j];\n        num[j] = temp;\n        i++;\n        j--;\n    }\n    return num.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122873,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7hoorwva.js:32:12)\n    at Object.<anonymous> (/tmp/tmp7hoorwva.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits = n.toString().split('');\n    let i = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpk_4b_9ph.js:32:12)\n    at Object.<anonymous> (/tmp/tmpk_4b_9ph.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let digits: number[] = n.toString().split('').map(Number);\n    let i: number = digits.length - 1;\n    while (i > 0 && digits[i - 1] >= digits[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j: number = digits.length - 1;\n    while (digits[j] <= digits[i - 1]) {\n        j--;\n    }\n    let temp: number = digits[i - 1];\n    digits[i - 1] = digits[j];\n    digits[j] = temp;\n    j = digits.length - 1;\n    while (i < j) {\n        temp = digits[i];\n        digits[i] = digits[j];\n        digits[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(digits.join(''));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp88gc3noz.js:32:12)\n    at Object.<anonymous> (/tmp/tmp88gc3noz.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to create the next bigger number by rearranging the digits of a given number.\nfunction rearrange_bigger(n: number): any {\n    let arr = n.toString().split('');\n    let i = arr.length - 1;\n    while (i > 0 && arr[i - 1] >= arr[i]) {\n        i--;\n    }\n    if (i <= 0) {\n        return -1;\n    }\n    let j = arr.length - 1;\n    while (arr[j] <= arr[i - 1]) {\n        j--;\n    }\n    let temp = arr[i - 1];\n    arr[i - 1] = arr[j];\n    arr[j] = temp;\n    j = arr.length - 1;\n    while (i < j) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j--;\n    }\n    return parseInt(arr.join(''));\n}\nconsole.log(rearrange_bigger(1234));\nconsole.log(rearrange_bigger(4321));\nconsole.log(rearrange_bigger(534976));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rearrange_bigger;\n  assert.deepEqual(candidate(12),21);\n  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(102),120);\n}\n\ntest();",
      "timestamp": 1666122860,
      "stdout": "1243\n-1\n536479\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpd7vodxx7.js:35:12)\n    at Object.<anonymous> (/tmp/tmpd7vodxx7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    }
  ]
}