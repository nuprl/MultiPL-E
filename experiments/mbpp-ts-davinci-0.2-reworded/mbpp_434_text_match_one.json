{
  "name": "mbpp_434_text_match_one",
  "language": "ts",
  "prompt": "//Write a function that matches a string that has an a followed by one or more b's.\nfunction text_match_one(text: string): boolean {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_434_text_match_one.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = text_match_one;\n  assert.deepEqual(candidate(\"ac\"),false);\n  assert.deepEqual(candidate(\"dc\"),false);\n  assert.deepEqual(candidate(\"abba\"),true);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n\nconsole.log(text_match_one(\"ac\"));\nconsole.log(text_match_one(\"abc\"));\nconsole.log(text_match_one(\"abbc\"));\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n\nconsole.log(text_match_one(\"abbc\"));\nconsole.log(text_match_one(\"abc\"));\nconsole.log(text_match_one(\"ab\"));\nconsole.log(text_match_one(\"a\"));\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n\nconsole.log(text_match_one(\"cab\"));\nconsole.log(text_match_one(\"ab\"));\nconsole.log(text_match_one(\"acb\"));\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regexp = /ab+/;\n    return regexp.test(text);\n}\n",
    "    return /ab+/.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    return /^ab+$/.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\nconsole.log(text_match_one(\"cab\"));\nconsole.log(text_match_one(\"ab\"));\nconsole.log(text_match_one(\"acb\"));\n",
    "    return /ab+/.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    return /ab+/.test(text);\n}\n",
    "    let regex = new RegExp(\"ab+\");\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regexp = /ab+/;\n    return regexp.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n\nconsole.log(text_match_one(\"abbc\"));\nconsole.log(text_match_one(\"abb\"));\nconsole.log(text_match_one(\"abc\"));\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    return /ab+/.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n\nconsole.log(text_match_one(\"abbc\"));\nconsole.log(text_match_one(\"abb\"));\nconsole.log(text_match_one(\"abc\"));\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let reg = /ab+/;\n    return reg.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    return /ab+/.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\nconsole.log(text_match_one(\"cab\"));\nconsole.log(text_match_one(\"ab\"));\nconsole.log(text_match_one(\"abb\"));\nconsole.log(text_match_one(\"abbb\"));\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    return /ab+/.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    return /ab+/.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n\nconsole.log(text_match_one(\"abbc\"));\nconsole.log(text_match_one(\"acb\"));\nconsole.log(text_match_one(\"aabbbbc\"));\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let pattern: RegExp = /ab+/;\n    return pattern.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let reg = /ab+/;\n    return reg.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n\nconsole.log(text_match_one(\"cab\"));\nconsole.log(text_match_one(\"ab\"));\nconsole.log(text_match_one(\"abbc\"));\nconsole.log(text_match_one(\"ac\"));\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regexp = /ab+/;\n    return regexp.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\nconsole.log(text_match_one(\"ab\"));\nconsole.log(text_match_one(\"abbbbbbbbbbbb\"));\nconsole.log(text_match_one(\"abbbbbbbbbbbba\"));\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    return /ab+/.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    return /ab+/.test(text);\n}\n",
    "    return /ab+/.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regExp = /ab+/;\n    return regExp.test(text);\n}\n",
    "  return /ab+/.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    return text.match(/ab+/g) ? true : false;\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "  let regex: RegExp = /ab+/;\n  return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    return /ab+/.test(text);\n}\nconsole.log(text_match_one(\"cabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb",
    "    let regex: RegExp = /ab+/;\n    return regex.test(text);\n}\n",
    "    return /ab+/.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n\nconsole.log(text_match_one(\"cab\"));\nconsole.log(text_match_one(\"ab\"));\nconsole.log(text_match_one(\"acb\"));\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    return /ab+/.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    return /ab+/.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    return text.match(/ab+/) ? true : false;\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    return /ab+/.test(text);\n}\n",
    "    return /ab+/.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n\nconsole.log(text_match_one(\"abb\"));\nconsole.log(text_match_one(\"ab\"));\nconsole.log(text_match_one(\"abc\"));\nconsole.log(text_match_one(\"abbc\"));\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n\nconsole.log(text_match_one(\"abbc\"));\nconsole.log(text_match_one(\"abc\"));\nconsole.log(text_match_one(\"ab\"));\nconsole.log(text_match_one(\"a\"));\nconsole.log(text_match_one(\"\"));\n",
    "    let regex: RegExp = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    return /ab+/.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    return /ab+/.test(text);\n}\n",
    "    return /^ab+$/.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex: RegExp = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    return text.match(/ab+/) ? true : false;\n}\n",
    "    return /ab+/.test(text);\n}\n",
    "    return /ab+/.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n\nconsole.log(text_match_one(\"abbc\"));\nconsole.log(text_match_one(\"acb\"));\nconsole.log(text_match_one(\"ab\"));\nconsole.log(text_match_one(\"a\"));\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n",
    "    return text.match(/ab+/) ? true : false;\n}\n",
    "    return /ab+/.test(text);\n}\n",
    "  let regex = /ab+/;\n  return regex.test(text);\n}\n",
    "    let regex = /ab+/;\n    return regex.test(text);\n}\n"
  ]
}