{
  "name": "mbpp_771_check_expression",
  "language": "ts",
  "prompt": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] == ')' && top != '(') {\n                return false;\n            }\n            if (exp[i] == '}' && top != '{') {\n                return false;\n            }\n            if (exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length != 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] === ')' && top !== '(') {\n                return false;\n            }\n            if (exp[i] === '}' && top !== '{') {\n                return false;\n            }\n            if (exp[i] === ']' && top !== '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] == ')' && top != '(') {\n                return false;\n            }\n            if (exp[i] == '}' && top != '{') {\n                return false;\n            }\n            if (exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let open: string[] = ['(', '{', '['];\n    let close: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open.indexOf(exp[i]) > -1) {\n            stack.push(exp[i]);\n        } else if (close.indexOf(exp[i]) > -1) {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (open.indexOf(top) !== close.indexOf(exp[i])) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            } else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            } else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if ((top === '(' && exp[i] !== ')') || (top === '{' && exp[i] !== '}') || (top === '[' && exp[i] !== ']')) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let open_brackets: string[] = [\"(\", \"{\", \"[\"];\n    let close_brackets: string[] = [\")\", \"}\", \"]\"];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.includes(exp[i])) {\n            stack.push(exp[i]);\n        } else if (close_brackets.includes(exp[i])) {\n            let index = close_brackets.indexOf(exp[i]);\n            if (stack.length == 0 || stack.pop() != open_brackets[index]) {\n                return false;\n            }\n        }\n    }\n    return stack.length == 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (exp[i] === ')' && stack[stack.length - 1] === '(') {\n                stack.pop();\n            } else if (exp[i] === '}' && stack[stack.length - 1] === '{') {\n                stack.pop();\n            } else if (exp[i] === ']' && stack[stack.length - 1] === '[') {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n            if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else {\n                let top = stack.pop();\n                if (top == '(' && exp[i] != ')') {\n                    return false;\n                }\n                else if (top == '{' && exp[i] != '}') {\n                    return false;\n                }\n                else if (top == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n  let stack: string[] = [];\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] === \"(\" || exp[i] === \"{\" || exp[i] === \"[\") {\n      stack.push(exp[i]);\n    } else if (exp[i] === \")\" || exp[i] === \"}\" || exp[i] === \"]\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (\n        (exp[i] === \")\" && stack[stack.length - 1] === \"(\") ||\n        (exp[i] === \"}\" && stack[stack.length - 1] === \"{\") ||\n        (exp[i] === \"]\" && stack[stack.length - 1] === \"[\")\n      ) {\n        stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n  if (stack.length === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else {\n                let top = stack.pop();\n                if (top == '(' && exp[i] != ')') {\n                    return false;\n                }\n                else if (top == '{' && exp[i] != '}') {\n                    return false;\n                }\n                else if (top == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.indexOf(exp[i]) > -1) {\n            stack.push(exp[i]);\n        } else if (close_brackets.indexOf(exp[i]) > -1) {\n            let top = stack.pop();\n            if (open_brackets.indexOf(top) !== close_brackets.indexOf(exp[i])) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] == ')' && top != '(') {\n                return false;\n            }\n            if (exp[i] == '}' && top != '{') {\n                return false;\n            }\n            if (exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        ']': '[',\n        '}': '{'\n    }\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '[' || exp[i] === '{') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === ']' || exp[i] === '}') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (stack[stack.length - 1] === map[exp[i]]) {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            } else if (top == '{' && exp[i] != '}') {\n                return false;\n            } else if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.includes(exp[i])) {\n            stack.push(exp[i]);\n        } else if (close_brackets.includes(exp[i])) {\n            let index = close_brackets.indexOf(exp[i]);\n            if (stack.length > 0 && stack[stack.length - 1] == open_brackets[index]) {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            }\n            else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            }\n            else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        '}': '{',\n        ')': '(',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (stack[stack.length - 1] === map[exp[i]]) {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let poped = stack.pop();\n            if (poped == '(' && exp[i] != ')') {\n                return false;\n            }\n            else if (poped == '{' && exp[i] != '}') {\n                return false;\n            }\n            else if (poped == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n  let stack: string[] = [];\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] === \"(\" || exp[i] === \"{\" || exp[i] === \"[\") {\n      stack.push(exp[i]);\n    } else if (exp[i] === \")\" || exp[i] === \"}\" || exp[i] === \"]\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      let top = stack.pop();\n      if (\n        (exp[i] === \")\" && top !== \"(\") ||\n        (exp[i] === \"}\" && top !== \"{\") ||\n        (exp[i] === \"]\" && top !== \"[\")\n      ) {\n        return false;\n      }\n    }\n  }\n  if (stack.length === 0) {\n    return true;\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n            if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length != 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: Map<string, string> = new Map();\n    map.set('(', ')');\n    map.set('{', '}');\n    map.set('[', ']');\n\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (map.get(top) != exp[i]) {\n                return false;\n            }\n        }\n    }\n    if (stack.length != 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else if (stack[stack.length - 1] == '(' && exp[i] == ')') {\n                stack.pop();\n            }\n            else if (stack[stack.length - 1] == '{' && exp[i] == '}') {\n                stack.pop();\n            }\n            else if (stack[stack.length - 1] == '[' && exp[i] == ']') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let open: string[] = ['(', '{', '['];\n    let close: string[] = [')', '}', ']'];\n    let map: Map<string, string> = new Map();\n    map.set('(', ')');\n    map.set('{', '}');\n    map.set('[', ']');\n    for (let i = 0; i < exp.length; i++) {\n        if (open.indexOf(exp[i]) > -1) {\n            stack.push(exp[i]);\n        } else if (close.indexOf(exp[i]) > -1) {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (map.get(top) !== exp[i]) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let last = stack.pop();\n            if (last === '(' && exp[i] !== ')') {\n                return false;\n            }\n            if (last === '{' && exp[i] !== '}') {\n                return false;\n            }\n            if (last === '[' && exp[i] !== ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length !== 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top === '(' && exp[i] !== ')') {\n                return false;\n            }\n            if (top === '{' && exp[i] !== '}') {\n                return false;\n            }\n            if (top === '[' && exp[i] !== ']') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: any = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (stack[stack.length - 1] === map[exp[i]]) {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n            if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let popped = stack.pop();\n            if (popped == '(' && exp[i] != ')') {\n                return false;\n            } else if (popped == '{' && exp[i] != '}') {\n                return false;\n            } else if (popped == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n  let stack: string[] = [];\n  let open_brackets: string[] = [\"(\", \"{\", \"[\"];\n  let close_brackets: string[] = [\")\", \"}\", \"]\"];\n  for (let i = 0; i < exp.length; i++) {\n    if (open_brackets.includes(exp[i])) {\n      stack.push(exp[i]);\n    } else if (close_brackets.includes(exp[i])) {\n      let index = close_brackets.indexOf(exp[i]);\n      if (stack.length == 0 || stack[stack.length - 1] != open_brackets[index]) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length == 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n  let stack: string[] = [];\n  let map: { [key: string]: string } = {\n    \")\": \"(\",\n    \"}\": \"{\",\n    \"]\": \"[\"\n  };\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] === \"(\" || exp[i] === \"{\" || exp[i] === \"[\") {\n      stack.push(exp[i]);\n    } else if (exp[i] === \")\" || exp[i] === \"}\" || exp[i] === \"]\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === map[exp[i]]) {\n        stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(check_expression('[()]{}{[()()]()}'));\nconsole.log(check_expression('[(])'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122796,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        '}': '{',\n        ']': '[',\n        ')': '('\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '{' || exp[i] === '[' || exp[i] === '(') {\n            stack.push(exp[i]);\n        } else if (exp[i] === '}' || exp[i] === ']' || exp[i] === ')') {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (stack[stack.length - 1] === map[exp[i]]) {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top === '(' && exp[i] !== ')') {\n                return false;\n            }\n            if (top === '{' && exp[i] !== '}') {\n                return false;\n            }\n            if (top === '[' && exp[i] !== ']') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let balanced: boolean = true;\n    let index: number = 0;\n    let symbol: string;\n    let top: string;\n\n    while (index < exp.length && balanced) {\n        symbol = exp[index];\n        if (symbol === '(' || symbol === '[' || symbol === '{') {\n            stack.push(symbol);\n        } else {\n            if (stack.length === 0) {\n                balanced = false;\n            } else {\n                top = stack.pop();\n                if (!((top === '(' && symbol === ')') || (top === '[' && symbol === ']') || (top === '{' && symbol === '}'))) {\n                    balanced = false;\n                }\n            }\n        }\n        index++;\n    }\n    if (balanced && stack.length === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: Map<string, string> = new Map();\n    map.set('{', '}');\n    map.set('(', ')');\n    map.set('[', ']');\n\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '{' || exp[i] === '(' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === '}' || exp[i] === ')' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let last = stack.pop();\n            if (map.get(last) !== exp[i]) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n  let stack: string[] = [];\n  let opening_brackets: string[] = [\"(\", \"[\", \"{\"];\n  let closing_brackets: string[] = [\")\", \"]\", \"}\"];\n  for (let i = 0; i < exp.length; i++) {\n    if (opening_brackets.includes(exp[i])) {\n      stack.push(exp[i]);\n    } else if (closing_brackets.includes(exp[i])) {\n      let index = closing_brackets.indexOf(exp[i]);\n      if (stack.length == 0 || stack[stack.length - 1] != opening_brackets[index]) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length == 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let last = stack.pop();\n            if (exp[i] === ')' && last !== '(') {\n                return false;\n            }\n            if (exp[i] === '}' && last !== '{') {\n                return false;\n            }\n            if (exp[i] === ']' && last !== '[') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n            if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length != 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let result: boolean = true;\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                result = false;\n                break;\n            }\n            let top: string = stack.pop();\n            if (exp[i] == ')' && top != '(') {\n                result = false;\n                break;\n            }\n            if (exp[i] == '}' && top != '{') {\n                result = false;\n                break;\n            }\n            if (exp[i] == ']' && top != '[') {\n                result = false;\n                break;\n            }\n        }\n    }\n    if (stack.length != 0) {\n        result = false;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n            if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length != 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let last = stack.pop();\n            if (exp[i] === ')' && last !== '(') {\n                return false;\n            }\n            if (exp[i] === '}' && last !== '{') {\n                return false;\n            }\n            if (exp[i] === ']' && last !== '[') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.includes(exp[i])) {\n            stack.push(exp[i]);\n        } else if (close_brackets.includes(exp[i])) {\n            let index = close_brackets.indexOf(exp[i]);\n            if (stack.length == 0 || stack.pop() != open_brackets[index]) {\n                return false;\n            }\n        }\n    }\n    return stack.length == 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        }\n        else {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (exp[i] === ')' && stack[stack.length - 1] === '(') {\n                stack.pop();\n            }\n            else if (exp[i] === '}' && stack[stack.length - 1] === '{') {\n                stack.pop();\n            }\n            else if (exp[i] === ']' && stack[stack.length - 1] === '[') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let open_brackets = ['(', '{', '['];\n    let close_brackets = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.indexOf(exp[i]) > -1) {\n            stack.push(exp[i]);\n        } else if (close_brackets.indexOf(exp[i]) > -1) {\n            if (stack.length === 0) {\n                return false;\n            }\n            let last_open_bracket = stack.pop();\n            if (open_brackets.indexOf(last_open_bracket) !== close_brackets.indexOf(exp[i])) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] == ')' && top != '(') {\n                return false;\n            }\n            if (exp[i] == '}' && top != '{') {\n                return false;\n            }\n            if (exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    return stack.length == 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        '}': '{',\n        ']': '[',\n        ')': '(',\n    };\n\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '[' || exp[i] === '{') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === ']' || exp[i] === '}') {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (stack[stack.length - 1] === map[exp[i]]) {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n  let stack: string[] = [];\n  let open: string[] = [\"(\", \"{\", \"[\"];\n  let close: string[] = [\")\", \"}\", \"]\"];\n  for (let i = 0; i < exp.length; i++) {\n    if (open.includes(exp[i])) {\n      stack.push(exp[i]);\n    } else if (close.includes(exp[i])) {\n      let index = close.indexOf(exp[i]);\n      if (stack.length == 0 || stack.pop() != open[index]) {\n        return false;\n      }\n    }\n  }\n  return stack.length == 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            }\n            else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            }\n            else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top === '(' && exp[i] !== ')') {\n                return false;\n            }\n            if (top === '{' && exp[i] !== '}') {\n                return false;\n            }\n            if (top === '[' && exp[i] !== ']') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let open: string[] = ['(', '{', '['];\n    let close: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open.includes(exp[i])) {\n            stack.push(exp[i]);\n        } else if (close.includes(exp[i])) {\n            let index = close.indexOf(exp[i]);\n            if (stack.length === 0 || stack.pop() !== open[index]) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n  let stack: string[] = [];\n  let map: { [key: string]: string } = {\n    \"{\": \"}\",\n    \"[\": \"]\",\n    \"(\": \")\"\n  };\n\n  for (let i = 0; i < exp.length; i++) {\n    //If the exp[i] is an opening bracket ( or { or [ then push it to stack\n    if (exp[i] === \"(\" || exp[i] === \"{\" || exp[i] === \"[\") {\n      stack.push(exp[i]);\n    } else {\n      //If exp[i] is a closing bracket ) or } or ] then pop from stack and if the popped character is the matching starting bracket then fine else parenthesis are not balanced\n      let last = stack.pop();\n      if (exp[i] !== map[last]) {\n        return false;\n      }\n    }\n  }\n  //After complete traversal, if there is some starting bracket left in stack then \u201cnot balanced\u201d\n  if (stack.length !== 0) {\n    return false;\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] === ')' && top !== '(') {\n                return false;\n            }\n            if (exp[i] === '}' && top !== '{') {\n                return false;\n            }\n            if (exp[i] === ']' && top !== '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let open: string[] = ['(', '{', '['];\n    let close: string[] = [')', '}', ']'];\n    let map: Map<string, string> = new Map();\n    map.set('(', ')');\n    map.set('{', '}');\n    map.set('[', ']');\n    for (let i = 0; i < exp.length; i++) {\n        if (open.includes(exp[i])) {\n            stack.push(exp[i]);\n        } else if (close.includes(exp[i])) {\n            if (map.get(stack[stack.length - 1]) === exp[i]) {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '[' || exp[i] === '{') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] === ')' || exp[i] === ']' || exp[i] === '}') {\n            if (stack.length === 0) {\n                return false;\n            }\n            else {\n                let top = stack.pop();\n                if (top === '(' && exp[i] !== ')') {\n                    return false;\n                }\n                else if (top === '[' && exp[i] !== ']') {\n                    return false;\n                }\n                else if (top === '{' && exp[i] !== '}') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            }\n            else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            }\n            else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length == 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let pop = stack.pop();\n            if (pop == '(' && exp[i] != ')') {\n                return false;\n            }\n            else if (pop == '{' && exp[i] != '}') {\n                return false;\n            }\n            else if (pop == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else if (stack[stack.length - 1] == '(' && exp[i] == ')') {\n                stack.pop();\n            }\n            else if (stack[stack.length - 1] == '{' && exp[i] == '}') {\n                stack.pop();\n            }\n            else if (stack[stack.length - 1] == '[' && exp[i] == ']') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || map[exp[i]] !== stack.pop()) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (exp[i] === ')' && stack[stack.length - 1] === '(') {\n                stack.pop();\n            } else if (exp[i] === '}' && stack[stack.length - 1] === '{') {\n                stack.pop();\n            } else if (exp[i] === ']' && stack[stack.length - 1] === '[') {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n  let stack: string[] = [];\n  let map: { [key: string]: string } = {\n    \"(\": \")\",\n    \"{\": \"}\",\n    \"[\": \"]\"\n  };\n\n  for (let i = 0; i < exp.length; i++) {\n    //If the exp[i] is an opening bracket, push it to stack\n    if (exp[i] === \"(\" || exp[i] === \"{\" || exp[i] === \"[\") {\n      stack.push(exp[i]);\n    }\n    //If exp[i] is a closing bracket\n    else {\n      //Pop the top element from stack, if it is non empty and the popped element is not the matching pair of exp[i], then return false\n      if (stack.length === 0 || map[stack.pop()] !== exp[i]) {\n        return false;\n      }\n    }\n  }\n  //If there is something left in expression then there is a starting bracket without a closing bracket\n  return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.indexOf(exp[i]) > -1) {\n            stack.push(exp[i]);\n        } else if (close_brackets.indexOf(exp[i]) > -1) {\n            let open_bracket = stack.pop();\n            if (open_brackets.indexOf(open_bracket) != close_brackets.indexOf(exp[i])) {\n                return false;\n            }\n        }\n    }\n    return stack.length == 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            }\n            else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            }\n            else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            else if (stack[stack.length - 1] === '(' && exp[i] === ')') {\n                stack.pop();\n            }\n            else if (stack[stack.length - 1] === '{' && exp[i] === '}') {\n                stack.pop();\n            }\n            else if (stack[stack.length - 1] === '[' && exp[i] === ']') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: any = {\n        '(': ')',\n        '{': '}',\n        '[': ']'\n    }\n\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else {\n            let last = stack.pop();\n\n            if (exp[i] !== map[last]) {\n                return false;\n            }\n        }\n    }\n    if (stack.length !== 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top === '(' && exp[i] !== ')') {\n                return false;\n            }\n            if (top === '{' && exp[i] !== '}') {\n                return false;\n            }\n            if (top === '[' && exp[i] !== ']') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] == ')' && top != '(') {\n                return false;\n            }\n            if (exp[i] == '}' && top != '{') {\n                return false;\n            }\n            if (exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            } else {\n                let poped = stack.pop();\n                if (poped === '(' && exp[i] !== ')') {\n                    return false;\n                } else if (poped === '{' && exp[i] !== '}') {\n                    return false;\n                } else if (poped === '[' && exp[i] !== ']') {\n                    return false;\n                }\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: Map<string, string> = new Map();\n    map.set('{', '}');\n    map.set('[', ']');\n    map.set('(', ')');\n    for (let i = 0; i < exp.length; i++) {\n        if (map.has(exp[i])) {\n            stack.push(exp[i]);\n        } else {\n            if (exp[i] !== map.get(stack.pop())) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        '}': '{',\n        ']': '[',\n        ')': '('\n    }\n\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '{' || exp[i] === '[' || exp[i] === '(') {\n            stack.push(exp[i]);\n        } else if (exp[i] === '}' || exp[i] === ']' || exp[i] === ')') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (map[exp[i]] !== top) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            }\n            else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            }\n            else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n  let stack: string[] = [];\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] == \"(\") {\n      stack.push(exp[i]);\n    } else if (exp[i] == \")\") {\n      if (stack.length == 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  if (stack.length == 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nconsole.log(check_expression(\"(a+b)\"));\nconsole.log(check_expression(\"(a+b\"));\nconsole.log(check_expression(\"a+b)\"));\nconsole.log(check_expression(\"(a+b))\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "true\nfalse\nfalse\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp5dk043e7.js:32:12)\n    at Object.<anonymous> (/tmp/tmp5dk043e7.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n  let stack: string[] = [];\n  let open: string[] = [\"(\", \"{\", \"[\"];\n  let close: string[] = [\")\", \"}\", \"]\"];\n  for (let i = 0; i < exp.length; i++) {\n    if (open.includes(exp[i])) {\n      stack.push(exp[i]);\n    } else if (close.includes(exp[i])) {\n      if (stack.length === 0) {\n        return false;\n      }\n      let top = stack.pop();\n      if (\n        (exp[i] === \")\" && top !== \"(\") ||\n        (exp[i] === \"}\" && top !== \"{\") ||\n        (exp[i] === \"]\" && top !== \"[\")\n      ) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}\n\nconsole.log(check_expression(\"{()}[]\"));\nconsole.log(check_expression(\"{()}[\"));\nconsole.log(check_expression(\"{()}[]]\"));\nconsole.log(check_expression(\"{()}[]]{\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "true\nfalse\nfalse\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.indexOf(exp[i]) != -1) {\n            stack.push(exp[i]);\n        } else if (close_brackets.indexOf(exp[i]) != -1) {\n            if (stack.length == 0) {\n                return false;\n            }\n            let open_bracket = stack.pop();\n            if (open_brackets.indexOf(open_bracket) != close_brackets.indexOf(exp[i])) {\n                return false;\n            }\n        }\n    }\n    if (stack.length != 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n  let stack: string[] = [];\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] === '(' || exp[i] === '[' || exp[i] === '{') {\n      stack.push(exp[i]);\n    } else if (exp[i] === ')' || exp[i] === ']' || exp[i] === '}') {\n      if (stack.length === 0) {\n        return false;\n      }\n      let last = stack.pop();\n      if (\n        (last === '(' && exp[i] !== ')') ||\n        (last === '[' && exp[i] !== ']') ||\n        (last === '{' && exp[i] !== '}')\n      ) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (stack[stack.length - 1] === map[exp[i]]) {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top === '(' && exp[i] !== ')') {\n                return false;\n            }\n            if (top === '{' && exp[i] !== '}') {\n                return false;\n            }\n            if (top === '[' && exp[i] !== ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    let bracket_pairs: string[] = ['()', '{}', '[]'];\n\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.includes(exp[i])) {\n            stack.push(exp[i]);\n        } else if (close_brackets.includes(exp[i])) {\n            if (stack.length === 0) {\n                return false;\n            }\n            let last_bracket: string = stack.pop();\n            if (!bracket_pairs.includes(last_bracket + exp[i])) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top === '(' && exp[i] !== ')') {\n                return false;\n            }\n            if (top === '{' && exp[i] !== '}') {\n                return false;\n            }\n            if (top === '[' && exp[i] !== ']') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let last_element = stack.pop();\n            if (exp[i] == ')' && last_element != '(') {\n                return false;\n            } else if (exp[i] == ']' && last_element != '[') {\n                return false;\n            } else if (exp[i] == '}' && last_element != '{') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top === '(' && exp[i] !== ')') {\n                return false;\n            }\n            if (top === '{' && exp[i] !== '}') {\n                return false;\n            }\n            if (top === '[' && exp[i] !== ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            }\n            else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            }\n            else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            } else if (top == '{' && exp[i] != '}') {\n                return false;\n            } else if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length > 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n  let stack: string[] = [];\n  let map: { [key: string]: string } = {\n    \"(\": \")\",\n    \"{\": \"}\",\n    \"[\": \"]\"\n  };\n\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] === \"(\" || exp[i] === \"{\" || exp[i] === \"[\") {\n      stack.push(exp[i]);\n    } else {\n      let last = stack.pop();\n      if (exp[i] !== map[last]) {\n        return false;\n      }\n    }\n  }\n  if (stack.length !== 0) {\n    return false;\n  }\n  return true;\n}\n\nconsole.log(check_expression(\"{()}[]\"));\nconsole.log(check_expression(\"{(})\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map = {\n        '(': ')',\n        '[': ']',\n        '{': '}'\n    }\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '[' || exp[i] === '{') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === ']' || exp[i] === '}') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let last = stack.pop();\n            if (exp[i] !== map[last]) {\n                return false;\n            }\n        }\n    }\n    if (stack.length !== 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] === ')' && top !== '(') {\n                return false;\n            } else if (exp[i] === '}' && top !== '{') {\n                return false;\n            } else if (exp[i] === ']' && top !== '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length > 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n  let stack: string[] = [];\n  let open_brackets: string[] = [\"(\", \"{\", \"[\"];\n  let close_brackets: string[] = [\")\", \"}\", \"]\"];\n  for (let i = 0; i < exp.length; i++) {\n    if (open_brackets.includes(exp[i])) {\n      stack.push(exp[i]);\n    } else if (close_brackets.includes(exp[i])) {\n      let index = close_brackets.indexOf(exp[i]);\n      if (stack.length == 0 || stack.pop() != open_brackets[index]) {\n        return false;\n      }\n    }\n  }\n  return stack.length == 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n            if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            }\n            else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            }\n            else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n  let stack: string[] = [];\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] == \"(\" || exp[i] == \"{\" || exp[i] == \"[\") {\n      stack.push(exp[i]);\n    } else if (exp[i] == \")\" || exp[i] == \"}\" || exp[i] == \"]\") {\n      if (stack.length == 0) {\n        return false;\n      }\n      let top: string = stack.pop();\n      if (\n        (top == \"(\" && exp[i] != \")\") ||\n        (top == \"{\" && exp[i] != \"}\") ||\n        (top == \"[\" && exp[i] != \"]\")\n      ) {\n        return false;\n      }\n    }\n  }\n  if (stack.length == 0) {\n    return true;\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let last = stack.pop();\n            if (last === '(' && exp[i] !== ')') {\n                return false;\n            } else if (last === '{' && exp[i] !== '}') {\n                return false;\n            } else if (last === '[' && exp[i] !== ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n  let stack: string[] = [];\n  let map: { [key: string]: string } = {\n    \"(\": \")\",\n    \"[\": \"]\",\n    \"{\": \"}\",\n  };\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] === \"(\" || exp[i] === \"[\" || exp[i] === \"{\") {\n      stack.push(exp[i]);\n    } else if (exp[i] === \")\" || exp[i] === \"]\" || exp[i] === \"}\") {\n      let last = stack.pop();\n      if (exp[i] !== map[last]) {\n        return false;\n      }\n    }\n  }\n  if (stack.length !== 0) {\n    return false;\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else if (stack[stack.length - 1] == '(' && exp[i] == ')' || stack[stack.length - 1] == '{' && exp[i] == '}' || stack[stack.length - 1] == '[' && exp[i] == ']') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    let map: Map<string, string> = new Map();\n    map.set('(', ')');\n    map.set('{', '}');\n    map.set('[', ']');\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.includes(exp[i])) {\n            stack.push(exp[i]);\n        }\n        else if (close_brackets.includes(exp[i])) {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (map.get(stack[stack.length - 1]) === exp[i]) {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    let is_balanced: boolean = true;\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.indexOf(exp[i]) > -1) {\n            stack.push(exp[i]);\n        } else if (close_brackets.indexOf(exp[i]) > -1) {\n            let open_bracket = stack.pop();\n            if (open_brackets.indexOf(open_bracket) != close_brackets.indexOf(exp[i])) {\n                is_balanced = false;\n                break;\n            }\n        }\n    }\n    return is_balanced;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n  let stack: string[] = [];\n  let open = ['(', '{', '['];\n  let close = [')', '}', ']'];\n  for (let i = 0; i < exp.length; i++) {\n    if (open.indexOf(exp[i]) !== -1) {\n      stack.push(exp[i]);\n    } else if (close.indexOf(exp[i]) !== -1) {\n      let index = close.indexOf(exp[i]);\n      if (stack.length === 0 || stack.pop() !== open[index]) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else {\n                let top = stack.pop();\n                if (top == '(' && exp[i] != ')') {\n                    return false;\n                }\n                else if (top == '{' && exp[i] != '}') {\n                    return false;\n                }\n                else if (top == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top === '(' && exp[i] !== ')') {\n                return false;\n            }\n            if (top === '{' && exp[i] !== '}') {\n                return false;\n            }\n            if (top === '[' && exp[i] !== ']') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: any = {\n        ')': '(',\n        ']': '[',\n        '}': '{'\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '[' || exp[i] === '{') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === ']' || exp[i] === '}') {\n            if (stack.length === 0 || map[exp[i]] !== stack[stack.length - 1]) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            } else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            } else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.indexOf(exp[i]) > -1) {\n            stack.push(exp[i]);\n        } else if (close_brackets.indexOf(exp[i]) > -1) {\n            if (stack.length == 0) {\n                return false;\n            }\n            let last_element = stack.pop();\n            if (open_brackets.indexOf(last_element) != close_brackets.indexOf(exp[i])) {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.indexOf(exp[i]) !== -1) {\n            stack.push(exp[i]);\n        } else if (close_brackets.indexOf(exp[i]) !== -1) {\n            if (stack.length === 0) {\n                return false;\n            }\n            let last_open_bracket = stack.pop();\n            if (open_brackets.indexOf(last_open_bracket) !== close_brackets.indexOf(exp[i])) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            } else if (top == '{' && exp[i] != '}') {\n                return false;\n            } else if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '[' || exp[i] === '{') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] === ')' || exp[i] === ']' || exp[i] === '}') {\n            if (stack.length === 0) {\n                return false;\n            }\n            else if (exp[i] === ')' && stack[stack.length - 1] === '(') {\n                stack.pop();\n            }\n            else if (exp[i] === ']' && stack[stack.length - 1] === '[') {\n                stack.pop();\n            }\n            else if (exp[i] === '}' && stack[stack.length - 1] === '{') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let poped = stack.pop();\n            if (poped == '(' && exp[i] != ')') {\n                return false;\n            } else if (poped == '{' && exp[i] != '}') {\n                return false;\n            } else if (poped == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        '}': '{',\n        ']': '[',\n        ')': '('\n    };\n\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '{' || exp[i] === '[' || exp[i] === '(') {\n            stack.push(exp[i]);\n        } else if (exp[i] === '}' || exp[i] === ']' || exp[i] === ')') {\n            if (stack.length === 0 || map[exp[i]] !== stack.pop()) {\n                return false;\n            }\n        }\n    }\n\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let poped = stack.pop();\n            if (poped === '(' && exp[i] !== ')') {\n                return false;\n            } else if (poped === '{' && exp[i] !== '}') {\n                return false;\n            } else if (poped === '[' && exp[i] !== ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length !== 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let poped = stack.pop();\n            if (exp[i] == ')' && poped != '(') {\n                return false;\n            }\n            if (exp[i] == '}' && poped != '{') {\n                return false;\n            }\n            if (exp[i] == ']' && poped != '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            else if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n            else if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] === ')' && top !== '(') {\n                return false;\n            }\n            if (exp[i] === '}' && top !== '{') {\n                return false;\n            }\n            if (exp[i] === ']' && top !== '[') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let last_element = stack.pop();\n            if (last_element == '(' && exp[i] != ')') {\n                return false;\n            } else if (last_element == '{' && exp[i] != '}') {\n                return false;\n            } else if (last_element == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(check_expression('[()]{}{[()()]()}'));\nconsole.log(check_expression('[(])'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n  let stack: string[] = [];\n  let balanced: boolean = true;\n  let index: number = 0;\n  let symbol: string;\n  let top: string;\n  while (index < exp.length && balanced) {\n    symbol = exp[index];\n    if (symbol === \"(\" || symbol === \"[\" || symbol === \"{\") {\n      stack.push(symbol);\n    } else {\n      if (stack.length === 0) {\n        balanced = false;\n      } else {\n        top = stack.pop();\n        if (\n          (top === \"(\" && symbol !== \")\") ||\n          (top === \"[\" && symbol !== \"]\") ||\n          (top === \"{\" && symbol !== \"}\")\n        ) {\n          balanced = false;\n        }\n      }\n    }\n    index++;\n  }\n  return balanced && stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else if (stack[stack.length - 1] == '(' && exp[i] == ')' || stack[stack.length - 1] == '{' && exp[i] == '}' || stack[stack.length - 1] == '[' && exp[i] == ']') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122808,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let open: string[] = ['(', '{', '['];\n    let close: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open.indexOf(exp[i]) > -1) {\n            stack.push(exp[i]);\n        } else if (close.indexOf(exp[i]) > -1) {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (open.indexOf(top) != close.indexOf(exp[i])) {\n                return false;\n            }\n        }\n    }\n    return stack.length == 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: Map<string, string> = new Map();\n    map.set(\"(\", \")\");\n    map.set(\"{\", \"}\");\n    map.set(\"[\", \"]\");\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == \"(\" || exp[i] == \"{\" || exp[i] == \"[\") {\n            stack.push(exp[i]);\n        } else {\n            let last = stack.pop();\n            if (exp[i] != map.get(last)) {\n                return false;\n            }\n        }\n    }\n    if (stack.length != 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top === '(' && exp[i] !== ')') {\n                return false;\n            } else if (top === '{' && exp[i] !== '}') {\n                return false;\n            } else if (top === '[' && exp[i] !== ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: any = {\n        '(': ')',\n        '{': '}',\n        '[': ']'\n    }\n\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else {\n            let last = stack.pop();\n\n            if (exp[i] !== map[last]) {\n                return false;\n            }\n        }\n    }\n\n    if (stack.length !== 0) {\n        return false;\n    }\n\n    return true;\n}\n\nconsole.log(check_expression('{()}[]'));\nconsole.log(check_expression('{()}['));\nconsole.log(check_expression('{()}[}'));\nconsole.log(check_expression('{()}[}]'));\nconsole.log(check_expression('{()}[}]{'));\nconsole.log(check_expression('{()}[}]{}'));\nconsole.log(check_expression('{()}[}]{}('));\nconsole.log(check_expression('{()}[}]{}()'));\nconsole.log(check_expression('{()}[}]{}()['));\nconsole.log(check_expression('{()}[}]{}()[]'));\nconsole.log(check_expression('{()}[}]{}()[]{'));\nconsole.log(check_expression('{()}[}]{}()[]{}'));\nconsole.log(check_expression('{()}[}]{}()[]{}('));\nconsole.log(check_expression('{()}[}]{}()[]{}()'));\nconsole.log(check_expression('{()}[}]{}()[]{}()['));\nconsole.log(check_expression('{()}[}]{}()[]{}()[]'));\nconsole.log(check_expression('{()}[}]{}()[]{\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "../../../../tmp/tmpyk0gu7nc.ts(45,45): error TS1002: Unterminated string literal.\n../../../../tmp/tmpyk0gu7nc.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmpyk0gu7nc.ts(46,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        ']': '[',\n        '}': '{'\n    }\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '[' || exp[i] === '{') {\n            stack.push(exp[i]);\n        } else {\n            let top = stack.pop();\n            if (top !== map[exp[i]]) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n  let stack: string[] = [];\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] == \"(\") {\n      stack.push(exp[i]);\n    } else if (exp[i] == \")\") {\n      if (stack.length == 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  if (stack.length == 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmphpbk30gy.js:28:12)\n    at Object.<anonymous> (/tmp/tmphpbk30gy.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] === ')' && top !== '(') {\n                return false;\n            }\n            if (exp[i] === '}' && top !== '{') {\n                return false;\n            }\n            if (exp[i] === ']' && top !== '[') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n  let stack: string[] = [];\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] === \"(\") {\n      stack.push(exp[i]);\n    } else if (exp[i] === \")\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  if (stack.length === 0) {\n    return true;\n  }\n  return false;\n}\n\nconsole.log(check_expression(\"(a+b)\"));\nconsole.log(check_expression(\"(a+b\"));\nconsole.log(check_expression(\"a+b)\"));\nconsole.log(check_expression(\"(a+b))\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "true\nfalse\nfalse\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpek0pi1lo.js:28:12)\n    at Object.<anonymous> (/tmp/tmpek0pi1lo.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.indexOf(exp[i]) > -1) {\n            stack.push(exp[i]);\n        } else if (close_brackets.indexOf(exp[i]) > -1) {\n            let open_bracket = open_brackets[close_brackets.indexOf(exp[i])];\n            if (stack.pop() !== open_bracket) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.includes(exp[i])) {\n            stack.push(exp[i]);\n        }\n        else if (close_brackets.includes(exp[i])) {\n            let index = close_brackets.indexOf(exp[i]);\n            if (stack.length == 0 || stack.pop() != open_brackets[index]) {\n                return false;\n            }\n        }\n    }\n    if (stack.length != 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122817,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            } else {\n                let top = stack.pop();\n                if (exp[i] == ')' && top != '(') {\n                    return false;\n                }\n                if (exp[i] == '}' && top != '{') {\n                    return false;\n                }\n                if (exp[i] == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122817,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let last = stack.pop();\n            if (exp[i] === ')' && last !== '(') {\n                return false;\n            }\n            if (exp[i] === '}' && last !== '{') {\n                return false;\n            }\n            if (exp[i] === ']' && last !== '[') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] == ')' && top != '(' || exp[i] == ']' && top != '[' || exp[i] == '}' && top != '{') {\n                return false;\n            }\n        }\n    }\n    return stack.length == 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if ((top == '(' && exp[i] != ')') || (top == '{' && exp[i] != '}') || (top == '[' && exp[i] != ']')) {\n                return false;\n            }\n        }\n    }\n    if (stack.length != 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] == ')' && top != '(') {\n                return false;\n            } else if (exp[i] == '}' && top != '{') {\n                return false;\n            } else if (exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            }\n            else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            }\n            else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.includes(exp[i])) {\n            stack.push(exp[i]);\n        } else if (close_brackets.includes(exp[i])) {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (open_brackets.indexOf(top) != close_brackets.indexOf(exp[i])) {\n                return false;\n            }\n        }\n    }\n    return stack.length == 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack = new Stack();\n    let balanced = true;\n    let index = 0;\n    let symbol: string;\n    let top: string;\n\n    while (index < exp.length && balanced) {\n        symbol = exp[index];\n        if (symbol === '(' || symbol === '[' || symbol === '{') {\n            stack.push(symbol);\n        } else {\n            if (stack.isEmpty()) {\n                balanced = false;\n            } else {\n                top = stack.pop();\n                if (!((top === '(' && symbol === ')') || (top === '[' && symbol === ']') || (top === '{' && symbol === '}'))) {\n                    balanced = false;\n                }\n            }\n        }\n        index++;\n    }\n    if (balanced && stack.isEmpty()) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122817,
      "stdout": "../../../../tmp/tmp9ugjxm9r.ts(3,21): error TS2552: Cannot find name 'Stack'. Did you mean 'stack'?\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: Map<string, string> = new Map();\n    map.set('(', ')');\n    map.set('{', '}');\n    map.set('[', ']');\n\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (map.get(top) != exp[i]) {\n                return false;\n            }\n        }\n    }\n    return stack.length == 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n  let stack: string[] = [];\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] === \"(\" || exp[i] === \"{\" || exp[i] === \"[\") {\n      stack.push(exp[i]);\n    } else if (exp[i] === \")\" || exp[i] === \"}\" || exp[i] === \"]\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      let last = stack.pop();\n      if (\n        (last === \"(\" && exp[i] !== \")\") ||\n        (last === \"{\" && exp[i] !== \"}\") ||\n        (last === \"[\" && exp[i] !== \"]\")\n      ) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let open: string[] = ['(', '{', '['];\n    let close: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open.includes(exp[i])) {\n            stack.push(exp[i]);\n        } else if (close.includes(exp[i])) {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (open.indexOf(top) !== close.indexOf(exp[i])) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n  let stack: string[] = [];\n  let map: { [key: string]: string } = {\n    \"}\": \"{\",\n    \"]\": \"[\",\n    \")\": \"(\"\n  };\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] === \"(\" || exp[i] === \"{\" || exp[i] === \"[\") {\n      stack.push(exp[i]);\n    } else if (exp[i] === \")\" || exp[i] === \"}\" || exp[i] === \"]\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === map[exp[i]]) {\n        stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (exp[i] === ')' && stack[stack.length - 1] === '(') {\n                stack.pop();\n            }\n            else if (exp[i] === '}' && stack[stack.length - 1] === '{') {\n                stack.pop();\n            }\n            else if (exp[i] === ']' && stack[stack.length - 1] === '[') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] == ')' && top != '(') {\n                return false;\n            } else if (exp[i] == '}' && top != '{') {\n                return false;\n            } else if (exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: any = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        \"(\": \")\",\n        \"{\": \"}\",\n        \"[\": \"]\"\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === \"(\" || exp[i] === \"{\" || exp[i] === \"[\") {\n            stack.push(exp[i]);\n        } else if (exp[i] === \")\" || exp[i] === \"}\" || exp[i] === \"]\") {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (map[stack[stack.length - 1]] === exp[i]) {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack = [];\n    let map = {\n        '(': ')',\n        '{': '}',\n        '[': ']'\n    }\n\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else {\n            let last = stack.pop();\n\n            if (exp[i] !== map[last]) {\n                return false;\n            }\n        }\n    }\n\n    if (stack.length !== 0) {\n        return false;\n    }\n\n    return true;\n}\n\nconsole.log(check_expression('{()}'));\nconsole.log(check_expression('{(})'));\nconsole.log(check_expression('{()}[]'));\nconsole.log(check_expression('{()}['));\nconsole.log(check_expression('{()}[{}]'));\nconsole.log(check_expression('{()}[{}]{}'));\nconsole.log(check_expression('{()}[{}]{}[]'));\nconsole.log(check_expression('{()}[{}]{}[]{}'));\nconsole.log(check_expression('{()}[{}]{}[]{}('));\nconsole.log(check_expression('{()}[{}]{}[]{}('));\nconsole.log(check_expression('{()}[{}]{}[]{}()'));\nconsole.log(check_expression('{()}[{}]{}[]{}()]'));\nconsole.log(check_expression('{()}[{}]{}[]{}()]{}'));\nconsole.log(check_expression('{()}[{}]{}[]{}()]{}['));\nconsole.log(check_expression('{()}[{}]{}[]{}()]{}[{}'));\nconsole.log(check_expression('{()}[{}]{}[]{}()]{}[{}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "../../../../tmp/tmp81_9m91p.ts(44,53): error TS1002: Unterminated string literal.\n../../../../tmp/tmp81_9m91p.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmp81_9m91p.ts(45,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top === '(' && exp[i] !== ')') {\n                return false;\n            }\n            if (top === '{' && exp[i] !== '}') {\n                return false;\n            }\n            if (top === '[' && exp[i] !== ']') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n  let stack: string[] = [];\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] == \"(\" || exp[i] == \"{\" || exp[i] == \"[\") {\n      stack.push(exp[i]);\n    } else if (exp[i] == \")\" || exp[i] == \"}\" || exp[i] == \"]\") {\n      if (stack.length == 0) {\n        return false;\n      }\n      let top = stack.pop();\n      if (\n        (top == \"(\" && exp[i] != \")\") ||\n        (top == \"{\" && exp[i] != \"}\") ||\n        (top == \"[\" && exp[i] != \"]\")\n      ) {\n        return false;\n      }\n    }\n  }\n  if (stack.length == 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] === ')' && top !== '(') {\n                return false;\n            } else if (exp[i] === '}' && top !== '{') {\n                return false;\n            } else if (exp[i] === ']' && top !== '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.indexOf(exp[i]) != -1) {\n            stack.push(exp[i]);\n        } else if (close_brackets.indexOf(exp[i]) != -1) {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (open_brackets.indexOf(top) != close_brackets.indexOf(exp[i])) {\n                return false;\n            }\n        }\n    }\n    return stack.length == 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else {\n                let top = stack.pop();\n                if (exp[i] == ')' && top != '(') {\n                    return false;\n                }\n                else if (exp[i] == '}' && top != '{') {\n                    return false;\n                }\n                else if (exp[i] == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.indexOf(exp[i]) > -1) {\n            stack.push(exp[i]);\n        } else if (close_brackets.indexOf(exp[i]) > -1) {\n            if (stack.length == 0) {\n                return false;\n            }\n            let open_bracket = stack.pop();\n            if (open_bracket == '(' && exp[i] != ')') {\n                return false;\n            } else if (open_bracket == '{' && exp[i] != '}') {\n                return false;\n            } else if (open_bracket == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length > 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n  let stack: string[] = [];\n  let map: { [key: string]: string } = {\n    \")\": \"(\",\n    \"}\": \"{\",\n    \"]\": \"[\"\n  };\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] === \"(\" || exp[i] === \"{\" || exp[i] === \"[\") {\n      stack.push(exp[i]);\n    } else if (exp[i] === \")\" || exp[i] === \"}\" || exp[i] === \"]\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === map[exp[i]]) {\n        stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            }\n            else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            }\n            else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')') {\n            if (stack.pop() != '(') {\n                return false;\n            }\n        } else if (exp[i] == ']') {\n            if (stack.pop() != '[') {\n                return false;\n            }\n        } else if (exp[i] == '}') {\n            if (stack.pop() != '{') {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    let map: Map<string, string> = new Map();\n    map.set('(', ')');\n    map.set('{', '}');\n    map.set('[', ']');\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.includes(exp[i])) {\n            stack.push(exp[i]);\n        }\n        else if (close_brackets.includes(exp[i])) {\n            if (stack.length === 0) {\n                return false;\n            }\n            else if (map.get(stack[stack.length - 1]) === exp[i]) {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            }\n            else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            }\n            else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n            if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length != 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] == ')' && top != '(') {\n                return false;\n            }\n            if (exp[i] == '}' && top != '{') {\n                return false;\n            }\n            if (exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length > 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122819,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: any = {\n        '(': ')',\n        '{': '}',\n        '[': ']'\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else {\n            let last = stack.pop();\n            if (exp[i] !== map[last]) {\n                return false;\n            }\n        }\n    }\n    if (stack.length !== 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (exp[i] === ')' && stack[stack.length - 1] === '(') {\n                stack.pop();\n            }\n            else if (exp[i] === '}' && stack[stack.length - 1] === '{') {\n                stack.pop();\n            }\n            else if (exp[i] === ']' && stack[stack.length - 1] === '[') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let open_brackets: string[] = [\"(\", \"{\", \"[\"];\n    let close_brackets: string[] = [\")\", \"}\", \"]\"];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.indexOf(exp[i]) !== -1) {\n            stack.push(exp[i]);\n        } else if (close_brackets.indexOf(exp[i]) !== -1) {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (open_brackets.indexOf(top) !== close_brackets.indexOf(exp[i])) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122802,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.indexOf(exp[i]) !== -1) {\n            stack.push(exp[i]);\n        }\n        else if (close_brackets.indexOf(exp[i]) !== -1) {\n            if (stack.length === 0) {\n                return false;\n            }\n            let last_bracket = stack.pop();\n            if (open_brackets.indexOf(last_bracket) !== close_brackets.indexOf(exp[i])) {\n                return false;\n            }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n  let stack: string[] = [];\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] === \"(\" || exp[i] === \"{\" || exp[i] === \"[\") {\n      stack.push(exp[i]);\n    } else if (exp[i] === \")\" || exp[i] === \"}\" || exp[i] === \"]\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      let top = stack.pop();\n      if (\n        (top === \"(\" && exp[i] !== \")\") ||\n        (top === \"{\" && exp[i] !== \"}\") ||\n        (top === \"[\" && exp[i] !== \"]\")\n      ) {\n        return false;\n      }\n    }\n  }\n  return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top === '(' && exp[i] !== ')') {\n                return false;\n            }\n            if (top === '{' && exp[i] !== '}') {\n                return false;\n            }\n            if (top === '[' && exp[i] !== ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let i: number = 0;\n    let len: number = exp.length;\n    while (i < len) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            }\n            else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            }\n            else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n        i++;\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')') {\n            if (stack.pop() !== '(') {\n                return false;\n            }\n        } else if (exp[i] === '}') {\n            if (stack.pop() !== '{') {\n                return false;\n            }\n        } else if (exp[i] === ']') {\n            if (stack.pop() !== '[') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let open: string[] = [\"(\", \"{\", \"[\"];\n    let close: string[] = [\")\", \"}\", \"]\"];\n    for (let i = 0; i < exp.length; i++) {\n        if (open.indexOf(exp[i]) > -1) {\n            stack.push(exp[i]);\n        } else if (close.indexOf(exp[i]) > -1) {\n            let open_index = open.indexOf(stack.pop());\n            let close_index = close.indexOf(exp[i]);\n            if (open_index !== close_index) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n            if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top === '(' && exp[i] !== ')') {\n                return false;\n            } else if (top === '{' && exp[i] !== '}') {\n                return false;\n            } else if (top === '[' && exp[i] !== ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length > 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let balanced: boolean = true;\n    let index: number = 0;\n    let symbol: string;\n    let top: string;\n\n    while (index < exp.length && balanced) {\n        symbol = exp[index];\n        if (is_open_symbol(symbol)) {\n            stack.push(symbol);\n        } else if (is_close_symbol(symbol)) {\n            if (stack.length === 0) {\n                balanced = false;\n            } else {\n                top = stack.pop();\n                if (!matches(top, symbol)) {\n                    balanced = false;\n                }\n            }\n        }\n        index++;\n    }\n    if (balanced && stack.length === 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "../../../../tmp/tmpetsfvle_.ts(11,13): error TS2304: Cannot find name 'is_open_symbol'.\n../../../../tmp/tmpetsfvle_.ts(13,20): error TS2304: Cannot find name 'is_close_symbol'.\n../../../../tmp/tmpetsfvle_.ts(18,22): error TS2304: Cannot find name 'matches'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top === '(' && exp[i] !== ')') {\n                return false;\n            } else if (top === '{' && exp[i] !== '}') {\n                return false;\n            } else if (top === '[' && exp[i] !== ']') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.indexOf(exp[i]) > -1) {\n            stack.push(exp[i]);\n        } else if (close_brackets.indexOf(exp[i]) > -1) {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top: string = stack.pop();\n            if (open_brackets.indexOf(top) != close_brackets.indexOf(exp[i])) {\n                return false;\n            }\n        }\n    }\n    if (stack.length > 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let last = stack.pop();\n            if (last == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (last == '{' && exp[i] != '}') {\n                return false;\n            }\n            if (last == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let open_brackets: string[] = ['{', '(', '['];\n    let close_brackets: string[] = ['}', ')', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.indexOf(exp[i]) !== -1) {\n            stack.push(exp[i]);\n        } else if (close_brackets.indexOf(exp[i]) !== -1) {\n            let open_bracket = stack.pop();\n            if (open_brackets.indexOf(open_bracket) !== close_brackets.indexOf(exp[i])) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '[' || exp[i] == '{') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == ']' || exp[i] == '}') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let last_element = stack.pop();\n            if (last_element == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (last_element == '[' && exp[i] != ']') {\n                return false;\n            }\n            if (last_element == '{' && exp[i] != '}') {\n                return false;\n            }\n        }\n    }\n    if (stack.length != 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n  let stack: string[] = [];\n  let map: { [key: string]: string } = {\n    \"(\": \")\",\n    \"{\": \"}\",\n    \"[\": \"]\"\n  };\n\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] === \"(\" || exp[i] === \"{\" || exp[i] === \"[\") {\n      stack.push(exp[i]);\n    } else {\n      let last = stack.pop();\n      if (exp[i] !== map[last]) {\n        return false;\n      }\n    }\n  }\n  if (stack.length !== 0) {\n    return false;\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else {\n                let top = stack.pop();\n                if (exp[i] == ')' && top != '(') {\n                    return false;\n                }\n                else if (exp[i] == '}' && top != '{') {\n                    return false;\n                }\n                else if (exp[i] == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else {\n                let poped_element = stack.pop();\n                if (exp[i] == ')' && poped_element != '(') {\n                    return false;\n                }\n                else if (exp[i] == '}' && poped_element != '{') {\n                    return false;\n                }\n                else if (exp[i] == ']' && poped_element != '[') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        \"{\": \"}\",\n        \"[\": \"]\",\n        \"(\": \")\"\n    };\n\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === \"(\" || exp[i] === \"{\" || exp[i] === \"[\") {\n            stack.push(exp[i]);\n        } else {\n            let last = stack.pop();\n            if (exp[i] !== map[last]) {\n                return false;\n            }\n        }\n    }\n    if (stack.length !== 0) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')') {\n            if (stack.length == 0) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpa2pwwnbc.js:24:12)\n    at Object.<anonymous> (/tmp/tmpa2pwwnbc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] == ')' && top != '(') {\n                return false;\n            }\n            if (exp[i] == '}' && top != '{') {\n                return false;\n            }\n            if (exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1665509938,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n            if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n\nconsole.log(check_expression('[{()}]'));\nconsole.log(check_expression('[{(}]'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122824,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let pop = stack.pop();\n            if (pop == '(' && exp[i] != ')') {\n                return false;\n            } else if (pop == '{' && exp[i] != '}') {\n                return false;\n            } else if (pop == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    return stack.length == 0;\n}\n\nconsole.log(check_expression('{()}[]'));\nconsole.log(check_expression('{()}['));\nconsole.log(check_expression('{()}[}'));\nconsole.log(check_expression('{()}[}]'));\nconsole.log(check_expression('{()}[}]{'));\nconsole.log(check_expression('{()}[}]{}'));\nconsole.log(check_expression('{()}[}]{}('));\nconsole.log(check_expression('{()}[}]{}()'));\nconsole.log(check_expression('{()}[}]{}()['));\nconsole.log(check_expression('{()}[}]{}()[]'));\nconsole.log(check_expression('{()}[}]{}()[]{'));\nconsole.log(check_expression('{()}[}]{}()[]{}'));\nconsole.log(check_expression('{()}[}]{}()[]{}('));\nconsole.log(check_expression('{()}[}]{}()[]{}()'));\nconsole.log(check_expression('{()}[}]{}()\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "../../../../tmp/tmp8i03w3k9.ts(38,42): error TS1002: Unterminated string literal.\n../../../../tmp/tmp8i03w3k9.ts(39,1): error TS1005: ',' expected.\n../../../../tmp/tmp8i03w3k9.ts(39,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: any = {\n        '(': ')',\n        '{': '}',\n        '[': ']'\n    }\n\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else {\n            let last = stack.pop();\n\n            if (exp[i] !== map[last]) {\n                return false;\n            }\n        }\n    }\n    if (stack.length !== 0) {\n        return false;\n    }\n    return true;\n}\n\nconsole.log(check_expression('{()}[]'));\nconsole.log(check_expression('{(})[]'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122824,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] === ')' && top !== '(') {\n                return false;\n            }\n            if (exp[i] === '}' && top !== '{') {\n                return false;\n            }\n            if (exp[i] === ']' && top !== '[') {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: Map<string, string> = new Map();\n    map.set('}', '{');\n    map.set(')', '(');\n    map.set(']', '[');\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '{' || exp[i] === '(' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === '}' || exp[i] === ')' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (stack[stack.length - 1] === map.get(exp[i])) {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    }\n\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (stack[stack.length - 1] === map[exp[i]]) {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122825,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] == ')') {\n                continue;\n            } else if (top == '{' && exp[i] == '}') {\n                continue;\n            } else if (top == '[' && exp[i] == ']') {\n                continue;\n            } else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(check_expression('[(a+b)*(c+d)]'));\nconsole.log(check_expression('[(a+b)*(c+d)]}'));\nconsole.log(check_expression('[(a+b)*(c+d)]'));\nconsole.log(check_expression('[(a+b)*(c+d)]'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
      "timestamp": 1666122825,
      "stdout": "true\nfalse\ntrue\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}