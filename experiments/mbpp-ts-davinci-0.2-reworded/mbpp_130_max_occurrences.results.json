{
  "name": "mbpp_130_max_occurrences",
  "language": "ts",
  "prompt": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let count = 0;\n    let item = 0;\n    let i = 0;\n    let j = 0;\n    for (i = 0; i < nums.length; i++) {\n        count = 0;\n        item = nums[i];\n        for (j = 0; j < nums.length; j++) {\n            if (item == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let count = 0;\n    let item = 0;\n    for (let i = 0; i < nums.length; i++) {\n        item = nums[i];\n        count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (item == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] === nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\nconsole.log(max_occurrences([1, 2, 3, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "../../../../tmp/tmp2d3z70ct.ts(21,1): error TS1005: ',' expected.\n../../../../tmp/tmp2d3z70ct.ts(21,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let count = 0;\n    let item = 0;\n    for (let i = 0; i < nums.length; i++) {\n        item = nums[i];\n        count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (item == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let num = nums[i];\n        if (counts[num] === undefined) {\n            counts[num] = 1;\n        } else {\n            counts[num] += 1;\n        }\n        if (counts[num] > max) {\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    let num = 0;\n    for (let i = 0; i < nums.length; i++) {\n        num = nums[i];\n        count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (num === nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = num;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = nums[0];\n    let counts: { [key: number]: number } = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (counts[nums[i]] === undefined) {\n            counts[nums[i]] = 1;\n        } else {\n            counts[nums[i]]++;\n        }\n        if (counts[nums[i]] > max) {\n            max = counts[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max_count = 0;\n    let max_item = 0;\n    let count = 0;\n    let item = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] === item) {\n            count++;\n        } else {\n            item = nums[i];\n            count = 1;\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp6gcpwb8m.js:26:12)\n    at Object.<anonymous> (/tmp/tmp6gcpwb8m.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = nums[0];\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let num = nums[i];\n        if (counts[num] === undefined) {\n            counts[num] = 1;\n        } else {\n            counts[num] += 1;\n        }\n        if (counts[num] > max) {\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    let num_count = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (num_count[nums[i]]) {\n            num_count[nums[i]] += 1;\n        } else {\n            num_count[nums[i]] = 1;\n        }\n    }\n    for (let key in num_count) {\n        if (num_count[key] > max) {\n            max = num_count[key];\n            max_num = key;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "../../../../tmp/tmpaeegykos.ts(17,13): error TS2322: Type 'string' is not assignable to type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let count = 0;\n    let item = 0;\n    for (let i = 0; i < nums.length; i++) {\n        item = nums[i];\n        count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (item === nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n  let max = 0;\n  let max_num = 0;\n  let num_count = {};\n  for (let i = 0; i < nums.length; i++) {\n    if (num_count[nums[i]]) {\n      num_count[nums[i]]++;\n    } else {\n      num_count[nums[i]] = 1;\n    }\n    if (num_count[nums[i]] > max) {\n      max = num_count[nums[i]];\n      max_num = nums[i];\n    }\n  }\n  return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let num_count = {};\n    for (let num of nums) {\n        if (num_count[num] === undefined) {\n            num_count[num] = 1;\n        } else {\n            num_count[num] += 1;\n        }\n        if (num_count[num] > max) {\n            max = num_count[num];\n            max_num = num;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\nconsole.log(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "../../../../tmp/tmp662rh9n3.ts(21,1): error TS1005: ',' expected.\n../../../../tmp/tmp662rh9n3.ts(21,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let count = 0;\n    let item = 0;\n    for (let i = 0; i < nums.length; i++) {\n        item = nums[i];\n        count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (item == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n  let max = 0;\n  let max_num = 0;\n  let counts = {};\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    counts[num] = counts[num] ? counts[num] + 1 : 1;\n    if (counts[num] > max) {\n      max = counts[num];\n      max_num = num;\n    }\n  }\n  return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max_count = 0;\n    let max_item = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let item = nums[i];\n        let count = counts[item] || 0;\n        counts[item] = count + 1;\n        if (counts[item] > max_count) {\n            max_count = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max_count = 0;\n    let max_item = 0;\n    let count = 0;\n    let item = 0;\n    for (let i = 0; i < nums.length; i++) {\n        count = 0;\n        item = nums[i];\n        for (let j = 0; j < nums.length; j++) {\n            if (item == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max_count = 0;\n    let max_item = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let item = nums[i];\n        if (counts[item] === undefined) {\n            counts[item] = 1;\n        } else {\n            counts[item]++;\n        }\n        if (counts[item] > max_count) {\n            max_count = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (counts[nums[i]] === undefined) {\n            counts[nums[i]] = 1;\n        } else {\n            counts[nums[i]] += 1;\n        }\n        if (counts[nums[i]] > max) {\n            max = counts[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max: number = 0;\n    let max_num: number = 0;\n    let num_counts: { [key: number]: number } = {};\n    for (let num of nums) {\n        if (num_counts[num] === undefined) {\n            num_counts[num] = 1;\n        } else {\n            num_counts[num]++;\n        }\n        if (num_counts[num] > max) {\n            max = num_counts[num];\n            max_num = num;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\nconsole.log(max_occurrences([1, 2, 3, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122529,
      "stdout": "../../../../tmp/tmpqtnny_g1.ts(21,1): error TS1005: ',' expected.\n../../../../tmp/tmpqtnny_g1.ts(21,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\nconsole.log(max_occurrences([1, 2, 3, 4, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122529,
      "stdout": "../../../../tmp/tmpo_abe9in.ts(21,1): error TS1005: ',' expected.\n../../../../tmp/tmpo_abe9in.ts(21,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let map = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        if (map.has(nums[i])) {\n            map.set(nums[i], map.get(nums[i]) + 1);\n        } else {\n            map.set(nums[i], 1);\n        }\n        if (map.get(nums[i]) > max) {\n            max = map.get(nums[i]);\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122529,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    let num_count = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (num_count[nums[i]]) {\n            num_count[nums[i]]++;\n        } else {\n            num_count[nums[i]] = 1;\n        }\n    }\n    for (let num in num_count) {\n        if (num_count[num] > max) {\n            max = num_count[num];\n            max_num = num;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122529,
      "stdout": "../../../../tmp/tmpk9lvjlqi.ts(17,13): error TS2322: Type 'string' is not assignable to type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max_count = 0;\n    let max_item = 0;\n    let counts: { [key: number]: number } = {};\n    for (let i = 0; i < nums.length; i++) {\n        let item = nums[i];\n        if (counts[item] === undefined) {\n            counts[item] = 1;\n        } else {\n            counts[item] += 1;\n        }\n        if (counts[item] > max_count) {\n            max_count = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let map = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        if (map.has(nums[i])) {\n            let count = map.get(nums[i]);\n            map.set(nums[i], count + 1);\n        } else {\n            map.set(nums[i], 1);\n        }\n    }\n    for (let [key, value] of map) {\n        if (value > max) {\n            max = value;\n            max_num = key;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\nconsole.log(max_occurrences([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122529,
      "stdout": "../../../../tmp/tmpikt33dak.ts(21,1): error TS1005: ',' expected.\n../../../../tmp/tmpikt33dak.ts(21,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_occurrences = 0;\n    let occurrences: { [key: number]: number } = {};\n\n    for (let i = 0; i < nums.length; i++) {\n        let num = nums[i];\n        occurrences[num] = occurrences[num] ? occurrences[num] + 1 : 1;\n        if (occurrences[num] > max_occurrences) {\n            max_occurrences = occurrences[num];\n            max = num;\n        }\n    }\n\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = null;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let num = nums[i];\n        if (counts[num] === undefined) {\n            counts[num] = 1;\n        } else {\n            counts[num] += 1;\n        }\n        if (counts[num] > max) {\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let num = nums[i];\n        if (counts[num] == undefined) {\n            counts[num] = 1;\n        } else {\n            counts[num] += 1;\n        }\n        if (counts[num] > max) {\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122529,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] === nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\nconsole.log(max_occurrences([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122529,
      "stdout": "../../../../tmp/tmppjzxvo5h.ts(21,1): error TS1005: ',' expected.\n../../../../tmp/tmppjzxvo5h.ts(21,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let nums_map = new Map();\n    let max_count = 0;\n    let max_num = 0;\n    for (let i = 0; i < nums.length; i++) {\n        let num = nums[i];\n        let count = nums_map.get(num) || 0;\n        count++;\n        nums_map.set(num, count);\n        if (count > max_count) {\n            max_count = count;\n            max_num = num;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let map = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        if (map.has(nums[i])) {\n            map.set(nums[i], map.get(nums[i]) + 1);\n        } else {\n            map.set(nums[i], 1);\n        }\n    }\n    for (let [key, value] of map) {\n        if (value > max) {\n            max = value;\n            max_num = key;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    let num_count = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (num_count[nums[i]] === undefined) {\n            num_count[nums[i]] = 1;\n        } else {\n            num_count[nums[i]] += 1;\n        }\n    }\n    for (let num in num_count) {\n        if (num_count[num] > max) {\n            max = num_count[num];\n            max_num = parseInt(num);\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp5elcj_t5.js:27:12)\n    at Object.<anonymous> (/tmp/tmp5elcj_t5.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let count = 0;\n    let item = 0;\n    for (let i = 0; i < nums.length; i++) {\n        item = nums[i];\n        count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (item == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let count = 0;\n    nums.sort();\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] == nums[i + 1]) {\n            count++;\n        } else {\n            if (max < count) {\n                max = count;\n                max_item = nums[i];\n            }\n            count = 0;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmph2uuxjwk.js:25:12)\n    at Object.<anonymous> (/tmp/tmph2uuxjwk.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = null;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let item = nums[i];\n        if (counts[item] === undefined) {\n            counts[item] = 0;\n        }\n        counts[item] += 1;\n        if (counts[item] > max) {\n            max = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max_count = 0;\n    let max_item = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let item = nums[i];\n        if (counts[item] === undefined) {\n            counts[item] = 1;\n        } else {\n            counts[item] += 1;\n        }\n        if (counts[item] > max_count) {\n            max_count = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\nconsole.log(max_occurrences([1, 2, 3, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122530,
      "stdout": "../../../../tmp/tmppp8_jqzg.ts(21,1): error TS1005: ',' expected.\n../../../../tmp/tmppp8_jqzg.ts(21,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] === nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let item = nums[i];\n        if (counts[item] === undefined) {\n            counts[item] = 1;\n        } else {\n            counts[item] += 1;\n        }\n        if (counts[item] > max) {\n            max = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n  let max = 0;\n  let max_num = 0;\n  let counts = {};\n  for (let i = 0; i < nums.length; i++) {\n    if (counts[nums[i]] === undefined) {\n      counts[nums[i]] = 1;\n    } else {\n      counts[nums[i]]++;\n    }\n    if (counts[nums[i]] > max) {\n      max = counts[nums[i]];\n      max_num = nums[i];\n    }\n  }\n  return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] === nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    let num_count = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (num_count[nums[i]]) {\n            num_count[nums[i]] += 1;\n        } else {\n            num_count[nums[i]] = 1;\n        }\n    }\n    for (let key in num_count) {\n        if (num_count[key] > max) {\n            max = num_count[key];\n            max_num = key;\n        }\n    }\n    return max_num;\n}\n\nconsole.log(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122532,
      "stdout": "../../../../tmp/tmpw7zsv5t0.ts(17,13): error TS2322: Type 'string' is not assignable to type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let occurrences = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (occurrences[nums[i]]) {\n            occurrences[nums[i]]++;\n        } else {\n            occurrences[nums[i]] = 1;\n        }\n    }\n    for (let key in occurrences) {\n        if (occurrences[key] > max) {\n            max = occurrences[key];\n            max_num = key;\n        }\n    }\n    return parseInt(max_num);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122532,
      "stdout": "../../../../tmp/tmpdq8609l5.ts(16,13): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpdq8609l5.ts(19,21): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let counts: { [key: number]: number } = {};\n    for (let i = 0; i < nums.length; i++) {\n        let num = nums[i];\n        counts[num] = counts[num] ? counts[num] + 1 : 1;\n    }\n    let max_count = 0;\n    let max_num = 0;\n    for (let num in counts) {\n        if (counts[num] > max_count) {\n            max_count = counts[num];\n            max_num = num;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122532,
      "stdout": "../../../../tmp/tmplwnp0dss.ts(13,13): error TS2322: Type 'string' is not assignable to type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\nconsole.log(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "../../../../tmp/tmp662rh9n3.ts(21,1): error TS1005: ',' expected.\n../../../../tmp/tmp662rh9n3.ts(21,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n  let max = 0;\n  let max_num = 0;\n  let count = 0;\n  let num_count = {};\n  for (let i = 0; i < nums.length; i++) {\n    if (num_count[nums[i]]) {\n      num_count[nums[i]] += 1;\n    } else {\n      num_count[nums[i]] = 1;\n    }\n  }\n  for (let num in num_count) {\n    if (num_count[num] > max) {\n      max = num_count[num];\n      max_num = num;\n    }\n  }\n  return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122532,
      "stdout": "../../../../tmp/tmprbq7jrfp.ts(17,7): error TS2322: Type 'string' is not assignable to type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] === nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (counts[nums[i]] === undefined) {\n            counts[nums[i]] = 1;\n        } else {\n            counts[nums[i]]++;\n        }\n        if (counts[nums[i]] > max) {\n            max = counts[nums[i]];\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let count = 0;\n    let item = 0;\n    for (let i = 0; i < nums.length; i++) {\n        item = nums[i];\n        count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (item == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max: number = 0;\n    let max_num: number = 0;\n    let count: number = 0;\n    let num: number = 0;\n    for (let i = 0; i < nums.length; i++) {\n        count = 0;\n        num = nums[i];\n        for (let j = 0; j < nums.length; j++) {\n            if (num === nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = num;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = nums[0];\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (counts[nums[i]] === undefined) {\n            counts[nums[i]] = 1;\n        } else {\n            counts[nums[i]] += 1;\n        }\n        if (counts[nums[i]] > max) {\n            max = counts[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let item = nums[i];\n        if (counts[item] === undefined) {\n            counts[item] = 1;\n        } else {\n            counts[item] += 1;\n        }\n        if (counts[item] > max) {\n            max = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let num = nums[i];\n        counts[num] = counts[num] ? counts[num] + 1 : 1;\n        if (counts[num] > max) {\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let count = 0;\n    let item = 0;\n    for (let i = 0; i < nums.length; i++) {\n        count = 0;\n        item = nums[i];\n        for (let j = 0; j < nums.length; j++) {\n            if (item === nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max_count = 0;\n    let max_item = 0;\n    let counts: { [key: number]: number } = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (counts[nums[i]] === undefined) {\n            counts[nums[i]] = 1;\n        } else {\n            counts[nums[i]] += 1;\n        }\n        if (counts[nums[i]] > max_count) {\n            max_count = counts[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let num_count = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (num_count[nums[i]]) {\n            num_count[nums[i]]++;\n        } else {\n            num_count[nums[i]] = 1;\n        }\n        if (num_count[nums[i]] > max) {\n            max = num_count[nums[i]];\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max_count: number = 0;\n    let max_item: number = 0;\n    let counts: { [key: number]: number } = {};\n\n    for (let i = 0; i < nums.length; i++) {\n        let item = nums[i];\n        if (counts[item] === undefined) {\n            counts[item] = 1;\n        } else {\n            counts[item] += 1;\n        }\n        if (counts[item] > max_count) {\n            max_count = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let counts = {};\n    for (let num of nums) {\n        if (counts[num] === undefined) {\n            counts[num] = 0;\n        }\n        counts[num]++;\n        if (counts[num] > max) {\n            max = counts[num];\n            max_num = num;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n  let max_count = 0;\n  let max_num = 0;\n  let counts: { [key: number]: number } = {};\n\n  for (let num of nums) {\n    counts[num] = counts[num] ? counts[num] + 1 : 1;\n    if (counts[num] > max_count) {\n      max_count = counts[num];\n      max_num = num;\n    }\n  }\n\n  return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let count = 0;\n    let item = 0;\n    for (let i = 0; i < nums.length; i++) {\n        item = nums[i];\n        count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (item === nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    let num_count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\nconsole.log(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122532,
      "stdout": "1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let occurrences = {};\n\n    for (let i = 0; i < nums.length; i++) {\n        if (occurrences[nums[i]] === undefined) {\n            occurrences[nums[i]] = 1;\n        } else {\n            occurrences[nums[i]] += 1;\n        }\n    }\n\n    for (let key in occurrences) {\n        if (occurrences[key] > max) {\n            max = occurrences[key];\n            max_num = key;\n        }\n    }\n\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122532,
      "stdout": "../../../../tmp/tmp6i4ach7m.ts(18,13): error TS2322: Type 'string' is not assignable to type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] === nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    let num_count = 0;\n    let nums_sorted = nums.sort();\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] == nums[i + 1]) {\n            count++;\n            if (count > max) {\n                max = count;\n                max_num = nums[i];\n            }\n        } else {\n            count = 0;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122533,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp3n3i_7ei.js:26:12)\n    at Object.<anonymous> (/tmp/tmp3n3i_7ei.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (counts[nums[i]] === undefined) {\n            counts[nums[i]] = 1;\n        } else {\n            counts[nums[i]] += 1;\n        }\n        if (counts[nums[i]] > max) {\n            max = counts[nums[i]];\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let map = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        if (map.has(nums[i])) {\n            map.set(nums[i], map.get(nums[i]) + 1);\n        } else {\n            map.set(nums[i], 1);\n        }\n    }\n    for (let [key, value] of map) {\n        if (value > max) {\n            max = value;\n            max_num = key;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n  let max = 0;\n  let max_num = 0;\n  let num_count = {};\n  for (let i = 0; i < nums.length; i++) {\n    if (num_count[nums[i]]) {\n      num_count[nums[i]]++;\n    } else {\n      num_count[nums[i]] = 1;\n    }\n    if (num_count[nums[i]] > max) {\n      max = num_count[nums[i]];\n      max_num = nums[i];\n    }\n  }\n  return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    let nums_sorted = nums.sort();\n    for (let i = 0; i < nums_sorted.length; i++) {\n        if (nums_sorted[i] === nums_sorted[i + 1]) {\n            count++;\n            if (count > max) {\n                max = count;\n                max_num = nums_sorted[i];\n            }\n        }\n        else {\n            count = 0;\n        }\n    }\n    return max_num;\n}\nconsole.log(max_occurrences([1, 2, 3, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122532,
      "stdout": "../../../../tmp/tmp03efndgq.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    let nums_sorted = nums.sort();\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] === nums[i + 1]) {\n            count++;\n        } else {\n            count = 0;\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122533,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp0reqp8g2.js:25:12)\n    at Object.<anonymous> (/tmp/tmp0reqp8g2.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (counts[nums[i]] === undefined) {\n            counts[nums[i]] = 1;\n        } else {\n            counts[nums[i]] += 1;\n        }\n        if (counts[nums[i]] > max) {\n            max = counts[nums[i]];\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let map = new Map();\n    let max = 0;\n    let max_num = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (map.has(nums[i])) {\n            map.set(nums[i], map.get(nums[i]) + 1);\n        } else {\n            map.set(nums[i], 1);\n        }\n    }\n    for (let [key, value] of map) {\n        if (value > max) {\n            max = value;\n            max_num = key;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max_count = 0;\n    let max_item = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let item = nums[i];\n        if (counts[item] === undefined) {\n            counts[item] = 1;\n        } else {\n            counts[item] += 1;\n        }\n        if (counts[item] > max_count) {\n            max_count = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    let nums_sorted = nums.sort();\n    for (let i = 0; i < nums_sorted.length; i++) {\n        if (nums_sorted[i] == nums_sorted[i + 1]) {\n            count++;\n        }\n        else {\n            count = 0;\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums_sorted[i];\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpnky1q628.js:25:12)\n    at Object.<anonymous> (/tmp/tmpnky1q628.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\nconsole.log(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "../../../../tmp/tmp662rh9n3.ts(21,1): error TS1005: ',' expected.\n../../../../tmp/tmp662rh9n3.ts(21,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\nconsole.log(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122534,
      "stdout": "../../../../tmp/tmp48vol90e.ts(21,1): error TS1005: ',' expected.\n../../../../tmp/tmp48vol90e.ts(21,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] === nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let num = nums[i];\n        if (counts[num] === undefined) {\n            counts[num] = 1;\n        } else {\n            counts[num]++;\n        }\n        if (counts[num] > max) {\n            max = counts[num];\n            max_num = num;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max_count = 0;\n    let max_item = 0;\n    let count = 0;\n    let item = 0;\n    for (let i = 0; i < nums.length; i++) {\n        item = nums[i];\n        count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (item === nums[j]) {\n                count++;\n            }\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    let num_map = new Map();\n\n    for (let i = 0; i < nums.length; i++) {\n        if (num_map.has(nums[i])) {\n            count = num_map.get(nums[i]) + 1;\n            num_map.set(nums[i], count);\n        } else {\n            num_map.set(nums[i], 1);\n        }\n    }\n\n    for (let [key, value] of num_map) {\n        if (value > max) {\n            max = value;\n            max_num = key;\n        }\n    }\n\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let num_counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (num_counts[nums[i]] === undefined) {\n            num_counts[nums[i]] = 1;\n        } else {\n            num_counts[nums[i]] += 1;\n        }\n        if (num_counts[nums[i]] > max) {\n            max = num_counts[nums[i]];\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max_count = 0;\n    let max_item = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let item = nums[i];\n        if (counts[item] == undefined) {\n            counts[item] = 1;\n        } else {\n            counts[item] += 1;\n        }\n        if (counts[item] > max_count) {\n            max_count = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let count = 0;\n    let item = 0;\n    for (let i = 0; i < nums.length; i++) {\n        item = nums[i];\n        count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (item == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max_count = 0;\n    let max_num = 0;\n    let counts: { [key: number]: number } = {};\n\n    for (let i = 0; i < nums.length; i++) {\n        if (counts[nums[i]]) {\n            counts[nums[i]]++;\n        } else {\n            counts[nums[i]] = 1;\n        }\n        if (counts[nums[i]] > max_count) {\n            max_count = counts[nums[i]];\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = null;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let item = nums[i];\n        if (counts[item] === undefined) {\n            counts[item] = 1;\n        } else {\n            counts[item] += 1;\n        }\n        if (counts[item] > max) {\n            max = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let map = new Map();\n    for (let num of nums) {\n        if (map.has(num)) {\n            map.set(num, map.get(num) + 1);\n        } else {\n            map.set(num, 1);\n        }\n    }\n    let max = 0;\n    let max_num = 0;\n    for (let [key, value] of map) {\n        if (value > max) {\n            max = value;\n            max_num = key;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\nconsole.log(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "../../../../tmp/tmp662rh9n3.ts(21,1): error TS1005: ',' expected.\n../../../../tmp/tmp662rh9n3.ts(21,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    let num = 0;\n    for (let i = 0; i < nums.length; i++) {\n        num = nums[i];\n        count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (num === nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = num;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max_count = 0;\n    let max_item = null;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let item = nums[i];\n        let count = (counts[item] || 0) + 1;\n        counts[item] = count;\n        if (count > max_count) {\n            max_count = count;\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max_count = 0;\n    let max_item = null;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let item = nums[i];\n        if (counts[item] === undefined) {\n            counts[item] = 1;\n        } else {\n            counts[item]++;\n        }\n        if (counts[item] > max_count) {\n            max_count = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n  let max = 0;\n  let max_num = 0;\n  let num_counts = {};\n  for (let num of nums) {\n    if (num_counts[num] === undefined) {\n      num_counts[num] = 1;\n    } else {\n      num_counts[num]++;\n    }\n    if (num_counts[num] > max) {\n      max = num_counts[num];\n      max_num = num;\n    }\n  }\n  return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = nums[0];\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_item = nums[i];\n        }\n        count = 0;\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let num_count = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (num_count[nums[i]]) {\n            num_count[nums[i]]++;\n        } else {\n            num_count[nums[i]] = 1;\n        }\n        if (num_count[nums[i]] > max) {\n            max = num_count[nums[i]];\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    let num_count = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (num_count[nums[i]]) {\n            num_count[nums[i]] += 1;\n        } else {\n            num_count[nums[i]] = 1;\n        }\n    }\n    for (let num in num_count) {\n        if (num_count[num] > max) {\n            max = num_count[num];\n            max_num = num;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122535,
      "stdout": "../../../../tmp/tmpb_ihdxge.ts(17,13): error TS2322: Type 'string' is not assignable to type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (counts[nums[i]] === undefined) {\n            counts[nums[i]] = 1;\n        } else {\n            counts[nums[i]] = counts[nums[i]] + 1;\n        }\n        if (counts[nums[i]] > max) {\n            max = counts[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    let count_num = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n                count_num = nums[i];\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = count_num;\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let counts: { [key: number]: number } = {};\n    for (let num of nums) {\n        if (counts[num] === undefined) {\n            counts[num] = 1;\n        } else {\n            counts[num]++;\n        }\n    }\n    let max_count = 0;\n    let max_num = 0;\n    for (let num in counts) {\n        if (counts[num] > max_count) {\n            max_count = counts[num];\n            max_num = parseInt(num);\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpp4azofvd.js:26:12)\n    at Object.<anonymous> (/tmp/tmpp4azofvd.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (counts[nums[i]]) {\n            counts[nums[i]]++;\n        } else {\n            counts[nums[i]] = 1;\n        }\n        if (counts[nums[i]] > max) {\n            max = counts[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    let num_counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (num_counts[nums[i]] === undefined) {\n            num_counts[nums[i]] = 1;\n        } else {\n            num_counts[nums[i]] += 1;\n        }\n    }\n    for (let num in num_counts) {\n        if (num_counts[num] > max) {\n            max = num_counts[num];\n            max_num = num;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122535,
      "stdout": "../../../../tmp/tmpjs68gxk3.ts(17,13): error TS2322: Type 'string' is not assignable to type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_occurrences = 0;\n    for (let i = 0; i < nums.length; i++) {\n        let occurrences = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] === nums[j]) {\n                occurrences++;\n            }\n        }\n        if (occurrences > max_occurrences) {\n            max_occurrences = occurrences;\n            max = nums[i];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_item = nums[i];\n        }\n        count = 0;\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max_count = 0;\n    let max_num = 0;\n    let counts: { [key: number]: number } = {};\n    for (let num of nums) {\n        if (counts[num] === undefined) {\n            counts[num] = 1;\n        } else {\n            counts[num]++;\n        }\n        if (counts[num] > max_count) {\n            max_count = counts[num];\n            max_num = num;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let count = 0;\n    let item = 0;\n    let i = 0;\n    let j = 0;\n    for (i = 0; i < nums.length; i++) {\n        item = nums[i];\n        count = 0;\n        for (j = 0; j < nums.length; j++) {\n            if (nums[j] == item) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    for (let i = 0; i < nums.length; i++) {\n        let count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] === nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max_count = 0;\n    let max_item = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let item = nums[i];\n        if (counts[item] === undefined) {\n            counts[item] = 1;\n        } else {\n            counts[item] += 1;\n        }\n        if (counts[item] > max_count) {\n            max_count = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let count = 0;\n    let item = 0;\n    for (let i = 0; i < nums.length; i++) {\n        item = nums[i];\n        count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (item === nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_item = nums[i];\n        }\n        count = 0;\n    }\n    return max_item;\n}\nconsole.log(max_occurrences([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122537,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let item = nums[i];\n        counts[item] = counts[item] ? counts[item] + 1 : 1;\n        if (counts[item] > max) {\n            max = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n  let max = 0;\n  let max_item = 0;\n  let count = 0;\n  let item = 0;\n  for (let i = 0; i < nums.length; i++) {\n    item = nums[i];\n    count = 0;\n    for (let j = 0; j < nums.length; j++) {\n      if (item === nums[j]) {\n        count++;\n      }\n    }\n    if (count > max) {\n      max = count;\n      max_item = item;\n    }\n  }\n  return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let count = 0;\n    let item = 0;\n    for (let i = 0; i < nums.length; i++) {\n        item = nums[i];\n        count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (item == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let num = nums[i];\n        if (counts[num] === undefined) {\n            counts[num] = 1;\n        } else {\n            counts[num]++;\n        }\n        if (counts[num] > max) {\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    let count_num = 0;\n    for (let i = 0; i < nums.length; i++) {\n        count_num = nums[i];\n        count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[j] == count_num) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = count_num;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max_occurrences = 0;\n    let max_num = 0;\n    let occurrences = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (occurrences[nums[i]]) {\n            occurrences[nums[i]]++;\n        } else {\n            occurrences[nums[i]] = 1;\n        }\n        if (occurrences[nums[i]] > max_occurrences) {\n            max_occurrences = occurrences[nums[i]];\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = null;\n    let occurrences = {};\n    for (let i = 0; i < nums.length; i++) {\n        let item = nums[i];\n        if (occurrences[item] === undefined) {\n            occurrences[item] = 1;\n        } else {\n            occurrences[item]++;\n        }\n        if (occurrences[item] > max) {\n            max = occurrences[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    let num = 0;\n    for (let i = 0; i < nums.length; i++) {\n        num = nums[i];\n        count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (num === nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = num;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let count = 0;\n    let item = 0;\n    for (let i = 0; i < nums.length; i++) {\n        item = nums[i];\n        count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (item == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max_count = 0;\n    let max_item = 0;\n    let item_count = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (item_count[nums[i]] === undefined) {\n            item_count[nums[i]] = 1;\n        } else {\n            item_count[nums[i]]++;\n        }\n        if (item_count[nums[i]] > max_count) {\n            max_count = item_count[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_item = nums[i];\n        }\n        count = 0;\n    }\n    return max_item;\n}\nconsole.log(max_occurrences([1, 2, 3, 1, 2, 3, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122538,
      "stdout": "../../../../tmp/tmpgd1cyf6z.ts(21,1): error TS1005: ',' expected.\n../../../../tmp/tmpgd1cyf6z.ts(21,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max_count = 0;\n    let max_item = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let num = nums[i];\n        if (counts[num] === undefined) {\n            counts[num] = 1;\n        } else {\n            counts[num] += 1;\n        }\n        if (counts[num] > max_count) {\n            max_count = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max_count = 0;\n    let max_item = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let num = nums[i];\n        if (counts[num] === undefined) {\n            counts[num] = 1;\n        } else {\n            counts[num] += 1;\n        }\n        if (counts[num] > max_count) {\n            max_count = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let num_counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (num_counts[nums[i]]) {\n            num_counts[nums[i]] += 1;\n        } else {\n            num_counts[nums[i]] = 1;\n        }\n        if (num_counts[nums[i]] > max) {\n            max = num_counts[nums[i]];\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (counts[nums[i]]) {\n            counts[nums[i]]++;\n        } else {\n            counts[nums[i]] = 1;\n        }\n        if (counts[nums[i]] > max) {\n            max = counts[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max_count = 0;\n    let max_item = 0;\n    let counts: { [key: number]: number } = {};\n    for (let i = 0; i < nums.length; i++) {\n        let num = nums[i];\n        if (counts[num] === undefined) {\n            counts[num] = 1;\n        } else {\n            counts[num]++;\n        }\n        if (counts[num] > max_count) {\n            max_count = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max_count = 0;\n    let max_item = 0;\n    let counts: { [key: number]: number } = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (counts[nums[i]] === undefined) {\n            counts[nums[i]] = 1;\n        } else {\n            counts[nums[i]] += 1;\n        }\n        if (counts[nums[i]] > max_count) {\n            max_count = counts[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\nconsole.log(max_occurrences([1, 2, 3, 4, 1, 2, 3, 1, 2, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122538,
      "stdout": "1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let count = 0;\n    let item = 0;\n    for (let i = 0; i < nums.length; i++) {\n        item = nums[i];\n        count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (item == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let num = nums[i];\n        if (counts[num] === undefined) {\n            counts[num] = 1;\n        } else {\n            counts[num] += 1;\n        }\n        if (counts[num] > max) {\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_item = nums[i];\n        }\n        count = 0;\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    let num_count = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (num_count[nums[i]]) {\n            num_count[nums[i]]++;\n        } else {\n            num_count[nums[i]] = 1;\n        }\n    }\n    for (let key in num_count) {\n        if (num_count[key] > max) {\n            max = num_count[key];\n            max_num = key;\n        }\n    }\n    return max_num;\n}\nconsole.log(max_occurrences([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122538,
      "stdout": "../../../../tmp/tmpq760k2la.ts(23,1): error TS1005: ',' expected.\n../../../../tmp/tmpq760k2la.ts(23,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\nconsole.log(max_occurrences([1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122538,
      "stdout": "../../../../tmp/tmp402kiblm.ts(21,1): error TS1005: ',' expected.\n../../../../tmp/tmp402kiblm.ts(21,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let map = new Map();\n    for (let num of nums) {\n        if (map.has(num)) {\n            map.set(num, map.get(num) + 1);\n        } else {\n            map.set(num, 1);\n        }\n    }\n    for (let [key, value] of map) {\n        if (value > max) {\n            max = value;\n            max_num = key;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122539,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\nconsole.log(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122538,
      "stdout": "../../../../tmp/tmph23jj7w8.ts(21,1): error TS1005: ',' expected.\n../../../../tmp/tmph23jj7w8.ts(21,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let map = new Map();\n    let max = 0;\n    let max_item = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (map.has(nums[i])) {\n            map.set(nums[i], map.get(nums[i]) + 1);\n        } else {\n            map.set(nums[i], 1);\n        }\n    }\n    for (let [key, value] of map) {\n        if (value > max) {\n            max = value;\n            max_item = key;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    let num_count = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (num_count[nums[i]] === undefined) {\n            num_count[nums[i]] = 1;\n        }\n        else {\n            num_count[nums[i]] += 1;\n        }\n    }\n    for (let i = 0; i < nums.length; i++) {\n        if (num_count[nums[i]] > max) {\n            max = num_count[nums[i]];\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (counts[nums[i]] === undefined) {\n            counts[nums[i]] = 1;\n        } else {\n            counts[nums[i]] += 1;\n        }\n        if (counts[nums[i]] > max) {\n            max = counts[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let counts: { [key: number]: number } = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (counts[nums[i]] === undefined) {\n            counts[nums[i]] = 1;\n        } else {\n            counts[nums[i]] += 1;\n        }\n        if (counts[nums[i]] > max) {\n            max = counts[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122538,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let item = nums[i];\n        if (counts[item] === undefined) {\n            counts[item] = 1;\n        } else {\n            counts[item] += 1;\n        }\n        if (counts[item] > max) {\n            max = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let item = nums[i];\n        if (counts[item] === undefined) {\n            counts[item] = 1;\n        } else {\n            counts[item] += 1;\n        }\n        if (counts[item] > max) {\n            max = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let counts = {};\n    for (let num of nums) {\n        if (counts[num] === undefined) {\n            counts[num] = 1;\n        } else {\n            counts[num]++;\n        }\n        if (counts[num] > max) {\n            max = counts[num];\n            max_num = num;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\nconsole.log(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "../../../../tmp/tmp662rh9n3.ts(21,1): error TS1005: ',' expected.\n../../../../tmp/tmp662rh9n3.ts(21,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let count = 0;\n    let max_count = 0;\n    let nums_sorted = nums.sort();\n    for (let i = 0; i < nums_sorted.length; i++) {\n        if (nums_sorted[i] === nums_sorted[i + 1]) {\n            count++;\n        } else {\n            count = 0;\n        }\n        if (count > max_count) {\n            max_count = count;\n            max = nums_sorted[i];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpxtgmc8z_.js:25:12)\n    at Object.<anonymous> (/tmp/tmpxtgmc8z_.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (counts[nums[i]]) {\n            counts[nums[i]]++;\n        } else {\n            counts[nums[i]] = 1;\n        }\n        if (counts[nums[i]] > max) {\n            max = counts[nums[i]];\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = nums[0];\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let item = nums[i];\n        if (counts[item] === undefined) {\n            counts[item] = 1;\n        } else {\n            counts[item] += 1;\n        }\n        if (counts[item] > max) {\n            max = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max_count = 0;\n    let max_item = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let item = nums[i];\n        if (counts[item] == undefined) {\n            counts[item] = 1;\n        } else {\n            counts[item] += 1;\n        }\n        if (counts[item] > max_count) {\n            max_count = counts[item];\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122535,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max: number = 0;\n    let max_item: number;\n    let count: number = 0;\n    let item: number;\n    for (let i = 0; i < nums.length; i++) {\n        item = nums[i];\n        count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (item == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (counts[nums[i]] === undefined) {\n            counts[nums[i]] = 1;\n        } else {\n            counts[nums[i]]++;\n        }\n        if (counts[nums[i]] > max) {\n            max = counts[nums[i]];\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    let nums_sorted = nums.sort();\n    for (let i = 0; i < nums_sorted.length; i++) {\n        if (nums_sorted[i] === nums_sorted[i + 1]) {\n            count++;\n        } else {\n            count = 0;\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums_sorted[i];\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp_2uwxsp6.js:25:12)\n    at Object.<anonymous> (/tmp/tmp_2uwxsp6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let count = 0;\n    let item = 0;\n    for (let i = 0; i < nums.length; i++) {\n        item = nums[i];\n        count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[j] == item) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_occurrences = 0;\n    let occurrences = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (occurrences[nums[i]]) {\n            occurrences[nums[i]]++;\n        } else {\n            occurrences[nums[i]] = 1;\n        }\n        if (occurrences[nums[i]] > max_occurrences) {\n            max_occurrences = occurrences[nums[i]];\n            max = nums[i];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122540,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n  let max = 0;\n  let max_num = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let count = 0;\n    for (let j = 0; j < nums.length; j++) {\n      if (nums[i] === nums[j]) {\n        count++;\n      }\n    }\n    if (count > max) {\n      max = count;\n      max_num = nums[i];\n    }\n  }\n  return max_num;\n}\n\nconsole.log(max_occurrences([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122541,
      "stdout": "1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let num = nums[i];\n        counts[num] = counts[num] ? counts[num] + 1 : 1;\n        if (counts[num] > max) {\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122532,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let occurrences = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (occurrences[nums[i]]) {\n            occurrences[nums[i]]++;\n        } else {\n            occurrences[nums[i]] = 1;\n        }\n        if (occurrences[nums[i]] > max) {\n            max = occurrences[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max_count = 0;\n    let max_item = null;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let num = nums[i];\n        if (counts[num] == null) {\n            counts[num] = 1;\n        } else {\n            counts[num]++;\n        }\n        if (counts[num] > max_count) {\n            max_count = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max_count = 0;\n    let max_item = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let item = nums[i];\n        let count = counts[item];\n        if (count === undefined) {\n            count = 0;\n        }\n        counts[item] = count + 1;\n        if (count + 1 > max_count) {\n            max_count = count + 1;\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = null;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let num = nums[i];\n        if (counts[num] === undefined) {\n            counts[num] = 1;\n        } else {\n            counts[num] += 1;\n        }\n        if (counts[num] > max) {\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    let num_count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122533,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    let num_counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (num_counts[nums[i]]) {\n            num_counts[nums[i]]++;\n        } else {\n            num_counts[nums[i]] = 1;\n        }\n    }\n    for (let num in num_counts) {\n        if (num_counts[num] > max) {\n            max = num_counts[num];\n            max_num = num;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122540,
      "stdout": "../../../../tmp/tmpg330jwea.ts(17,13): error TS2322: Type 'string' is not assignable to type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let map = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        if (map.has(nums[i])) {\n            map.set(nums[i], map.get(nums[i]) + 1);\n        }\n        else {\n            map.set(nums[i], 1);\n        }\n    }\n    for (let [key, value] of map) {\n        if (value > max) {\n            max = value;\n            max_num = key;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max_count = 0;\n    let max_item = 0;\n    let counts = new Map<number, number>();\n    for (let i = 0; i < nums.length; i++) {\n        let count = counts.get(nums[i]);\n        if (count === undefined) {\n            count = 0;\n        }\n        count++;\n        counts.set(nums[i], count);\n        if (count > max_count) {\n            max_count = count;\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let count = 0;\n    let item = 0;\n    for (let i = 0; i < nums.length; i++) {\n        item = nums[i];\n        count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (item === nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    let num_count = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (num_count[nums[i]]) {\n            num_count[nums[i]] += 1;\n        } else {\n            num_count[nums[i]] = 1;\n        }\n    }\n    for (let num in num_count) {\n        if (num_count[num] > max) {\n            max = num_count[num];\n            max_num = num;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122535,
      "stdout": "../../../../tmp/tmpb_ihdxge.ts(17,13): error TS2322: Type 'string' is not assignable to type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let counts: { [key: number]: number } = {};\n    for (let i = 0; i < nums.length; i++) {\n        let num = nums[i];\n        counts[num] = counts[num] ? counts[num] + 1 : 1;\n    }\n    let max = 0;\n    let max_num = 0;\n    for (let num in counts) {\n        if (counts[num] > max) {\n            max = counts[num];\n            max_num = num;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122541,
      "stdout": "../../../../tmp/tmp0xbokemh.ts(13,13): error TS2322: Type 'string' is not assignable to type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max_count = 0;\n    let max_item = 0;\n    let count = 0;\n    let item = 0;\n    nums.sort();\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] === nums[i + 1]) {\n            count++;\n            item = nums[i];\n        }\n        else {\n            count = 0;\n        }\n        if (count > max_count) {\n            max_count = count;\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp1sganbjo.js:27:12)\n    at Object.<anonymous> (/tmp/tmp1sganbjo.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    let num = 0;\n    for (let i = 0; i < nums.length; i++) {\n        num = nums[i];\n        count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (num === nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = num;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (counts[nums[i]] === undefined) {\n            counts[nums[i]] = 1;\n        } else {\n            counts[nums[i]] += 1;\n        }\n        if (counts[nums[i]] > max) {\n            max = counts[nums[i]];\n            max_item = nums[i];\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    for (let i = 0; i < nums.length; i++) {\n        let count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] === nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\nconsole.log(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122541,
      "stdout": "../../../../tmp/tmpry4klszm.ts(21,1): error TS1005: ',' expected.\n../../../../tmp/tmpry4klszm.ts(21,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        for (let j = 0; j < nums.length; j++) {\n            if (nums[i] == nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_num = nums[i];\n        }\n        count = 0;\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let map = new Map();\n    for (let i = 0; i < nums.length; i++) {\n        if (map.has(nums[i])) {\n            map.set(nums[i], map.get(nums[i]) + 1);\n        } else {\n            map.set(nums[i], 1);\n        }\n    }\n    for (let [key, value] of map) {\n        if (value > max) {\n            max = value;\n            max_num = key;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122530,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max_count = 0;\n    let max_num = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        if (counts[nums[i]] === undefined) {\n            counts[nums[i]] = 1;\n        } else {\n            counts[nums[i]]++;\n        }\n        if (counts[nums[i]] > max_count) {\n            max_count = counts[nums[i]];\n            max_num = nums[i];\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let counts = {};\n    for (let i = 0; i < nums.length; i++) {\n        let num = nums[i];\n        if (counts[num] === undefined) {\n            counts[num] = 1;\n        } else {\n            counts[num] += 1;\n        }\n        if (counts[num] > max) {\n            max = counts[num];\n            max_item = num;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_num = 0;\n    let num_counts = {};\n    for (let num of nums) {\n        if (num_counts[num] === undefined) {\n            num_counts[num] = 1;\n        } else {\n            num_counts[num]++;\n        }\n        if (num_counts[num] > max) {\n            max = num_counts[num];\n            max_num = num;\n        }\n    }\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max: number = 0;\n    let max_item: number = 0;\n    let count: number = 0;\n    let item: number = 0;\n    nums.sort();\n    for (let i = 0; i < nums.length; i++) {\n        if (item != nums[i]) {\n            item = nums[i];\n            count = 1;\n        } else {\n            count++;\n        }\n        if (count > max) {\n            max = count;\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmpatltywsg.js:27:12)\n    at Object.<anonymous> (/tmp/tmpatltywsg.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n    let max = 0;\n    let max_item = 0;\n    let count = 0;\n    let item = 0;\n    for (let i = 0; i < nums.length; i++) {\n        item = nums[i];\n        count = 0;\n        for (let j = 0; j < nums.length; j++) {\n            if (item === nums[j]) {\n                count++;\n            }\n        }\n        if (count > max) {\n            max = count;\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1665509930,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the item with maximum frequency in a given array.\nfunction max_occurrences(nums: number[]): number {\n  let max = 0;\n  let max_num = 0;\n  let count = 0;\n\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = 0; j < nums.length; j++) {\n      if (nums[i] == nums[j]) {\n        count++;\n      }\n    }\n    if (count > max) {\n      max = count;\n      max_num = nums[i];\n    }\n    count = 0;\n  }\n  return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_occurrences;\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);\n  assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);\n  assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);\n}\n\ntest();",
      "timestamp": 1666122541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}