{
  "name": "mbpp_71_comb_sort",
  "language": "ts",
  "prompt": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / shrink);\n        }\n        swapped = false;\n        for (let i = 0; gap + i < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        gap = Math.floor(gap / 1.3);\n        if (gap < 1) {\n            gap = 1;\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap <= 1) {\n            sorted = true;\n        }\n\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        gap = Math.floor(gap / 1.3);\n        if (gap < 1) {\n            gap = 1;\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        gap = Math.floor(gap / 1.25);\n        if (gap < 1) {\n            gap = 1;\n        }\n        let i = 0;\n        swapped = false;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n  let gap = nums.length;\n  let swapped = true;\n  while (gap > 1 || swapped) {\n    gap = Math.floor(gap / 1.3);\n    if (gap < 1) {\n      gap = 1;\n    }\n    swapped = false;\n    for (let i = 0; i + gap < nums.length; i++) {\n      if (nums[i] > nums[i + gap]) {\n        [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n        swapped = true;\n      }\n    }\n  }\n  return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n  let gap = nums.length;\n  let swapped = true;\n  while (gap > 1 || swapped) {\n    if (gap > 1) {\n      gap = Math.floor(gap / 1.3);\n    }\n    swapped = false;\n    for (let i = 0; i + gap < nums.length; i++) {\n      if (nums[i] > nums[i + gap]) {\n        [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n        swapped = true;\n      }\n    }\n  }\n  return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.25);\n        }\n        swapped = false;\n        for (let i = 0; gap + i < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\nconsole.log(comb_sort([1, 4, 2, 8, 345, 123, 43, 32, 5643, 63, 123, 43, 2, 55, 1, 234, 92]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "[\n    1,    1,   2,   2,   4,\n    8,   32,  43,  43,  55,\n   63,   92, 123, 123, 234,\n  345, 5643\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        gap = Math.floor(gap / 1.3);\n        if (gap < 1) {\n            gap = 1;\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n  let gap = nums.length;\n  let shrink = 1.3;\n  let swapped = false;\n  while (gap > 1 || swapped) {\n    if (gap > 1) {\n      gap = Math.floor(gap / shrink);\n    }\n    swapped = false;\n    let i = 0;\n    while (gap + i < nums.length) {\n      if (nums[i] - nums[i + gap] > 0) {\n        let t = nums[i];\n        nums[i] = nums[i + gap];\n        nums[i + gap] = t;\n        swapped = true;\n      }\n      i++;\n    }\n  }\n  return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        gap = Math.floor(gap / 1.3);\n        if (gap < 1) {\n            gap = 1;\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        gap = Math.floor(gap / 1.3);\n        if (gap < 1) {\n            gap = 1;\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.25);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        gap = Math.floor(gap / 1.3);\n        if (gap < 1) {\n            gap = 1;\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n  let gap = nums.length;\n  let swapped = true;\n  while (gap > 1 || swapped) {\n    if (gap > 1) {\n      gap = Math.floor(gap / 1.3);\n    }\n    swapped = false;\n    for (let i = 0; i + gap < nums.length; i++) {\n      if (nums[i] > nums[i + gap]) {\n        let temp = nums[i];\n        nums[i] = nums[i + gap];\n        nums[i + gap] = temp;\n        swapped = true;\n      }\n    }\n  }\n  return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n\n    while (gap > 1 || swapped) {\n        gap = Math.floor(gap / 1.3);\n        if (gap < 1) {\n            gap = 1;\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\nconsole.log(comb_sort([1, 4, 2, 8, 345, 123, 43, 32, 5643, 63, 123, 43, 2, 55, 1, 234, 92]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "[\n    1,    1,   2,   2,   4,\n    8,   32,  43,  43,  55,\n   63,   92, 123, 123, 234,\n  345, 5643\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        gap = Math.floor(gap / 1.3);\n        if (gap < 1) {\n            gap = 1;\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n  let gap = nums.length;\n  let shrink = 1.3;\n  let sorted = false;\n  while (!sorted) {\n    gap = Math.floor(gap / shrink);\n    if (gap > 1) {\n      sorted = false;\n    } else {\n      gap = 1;\n      sorted = true;\n    }\n    let i = 0;\n    while (i + gap < nums.length) {\n      if (nums[i] > nums[i + gap]) {\n        let temp = nums[i];\n        nums[i] = nums[i + gap];\n        nums[i + gap] = temp;\n        sorted = false;\n      }\n      i++;\n    }\n  }\n  return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n  let gap = nums.length;\n  let swapped = true;\n  while (gap > 1 || swapped) {\n    if (gap > 1) {\n      gap = Math.floor(gap / 1.247330950103979);\n    }\n    swapped = false;\n    let i = 0;\n    while (i + gap < nums.length) {\n      if (nums[i] > nums[i + gap]) {\n        let temp = nums[i];\n        nums[i] = nums[i + gap];\n        nums[i + gap] = temp;\n        swapped = true;\n      }\n      i++;\n    }\n  }\n  return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        for (let i = 0; gap + i < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.25);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.25);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n  let gap = nums.length;\n  let swapped = true;\n  while (gap > 1 || swapped) {\n    if (gap > 1) {\n      gap = Math.floor(gap / 1.25);\n    }\n    swapped = false;\n    for (let i = 0; i + gap < nums.length; i++) {\n      if (nums[i] > nums[i + gap]) {\n        [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n        swapped = true;\n      }\n    }\n  }\n  return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap: number = nums.length;\n    let shrink: number = 1.3;\n    let swapped: boolean = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / shrink);\n        }\n        swapped = false;\n        for (let i = 0; gap + i < nums.length; i++) {\n            if (nums[i] - nums[i + gap] > 0) {\n                let temp: number = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; gap + i < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        gap = Math.floor(gap / 1.3);\n        if (gap < 1) {\n            gap = 1;\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        for (let i = 0; gap + i < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        for (let i = 0; gap + i < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n  let gap = nums.length;\n  let swapped = true;\n  while (gap > 1 || swapped) {\n    if (gap > 1) {\n      gap = Math.floor(gap / 1.25);\n    }\n    swapped = false;\n    let i = 0;\n    while (i + gap < nums.length) {\n      if (nums[i] > nums[i + gap]) {\n        const temp = nums[i];\n        nums[i] = nums[i + gap];\n        nums[i + gap] = temp;\n        swapped = true;\n      }\n      i++;\n    }\n  }\n  return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n  let gap = nums.length;\n  let swapped = true;\n  while (gap > 1 || swapped) {\n    if (gap > 1) {\n      gap = Math.floor(gap / 1.3);\n    }\n    swapped = false;\n    for (let i = 0; i + gap < nums.length; i++) {\n      if (nums[i] > nums[i + gap]) {\n        [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n        swapped = true;\n      }\n    }\n  }\n  return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        for (let i = 0; gap + i < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n  let gap = nums.length;\n  let shrink = 1.3;\n  let sorted = false;\n  while (!sorted) {\n    gap = Math.floor(gap / shrink);\n    if (gap > 1) {\n      sorted = false;\n    } else {\n      gap = 1;\n      sorted = true;\n    }\n    let i = 0;\n    while (i + gap < nums.length) {\n      if (nums[i] > nums[i + gap]) {\n        let temp = nums[i];\n        nums[i] = nums[i + gap];\n        nums[i + gap] = temp;\n        sorted = false;\n      }\n      i++;\n    }\n  }\n  return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        gap = Math.floor(gap / 1.25);\n        if (gap < 1) {\n            gap = 1;\n        }\n        let i = 0;\n        swapped = false;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / shrink);\n        }\n        swapped = false;\n        let i = 0;\n        while (gap + i < nums.length) {\n            if (nums[i] - nums[i + gap] > 0) {\n                let t = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = t;\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124106,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / shrink);\n        }\n        swapped = false;\n        for (let i = 0; gap + i < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n  let gap = nums.length;\n  let shrink = 1.3;\n  let sorted = false;\n  while (!sorted) {\n    gap = Math.floor(gap / shrink);\n    if (gap > 1) {\n      sorted = false;\n    } else {\n      gap = 1;\n      sorted = true;\n    }\n    let i = 0;\n    while (i + gap < nums.length) {\n      if (nums[i] > nums[i + gap]) {\n        let temp = nums[i];\n        nums[i] = nums[i + gap];\n        nums[i + gap] = temp;\n        sorted = false;\n      }\n      i++;\n    }\n  }\n  return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                swap(nums, i, i + gap);\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124106,
      "stdout": "../../../../tmp/tmpv9_jtk88.ts(12,17): error TS2304: Cannot find name 'swap'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        gap = Math.floor(gap / 1.25);\n        if (gap < 1) {\n            gap = 1;\n        }\n        let i = 0;\n        swapped = false;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        gap = Math.floor(gap / 1.3);\n        if (gap < 1) {\n            gap = 1;\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        gap = Math.floor(gap / 1.3);\n        if (gap < 1) {\n            gap = 1;\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        gap = Math.floor(gap / 1.3);\n        if (gap < 1) {\n            gap = 1;\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.25);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        gap = Math.floor(gap / 1.3);\n        if (gap < 1) {\n            gap = 1;\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        for (let i = 0; gap + i < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124107,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n  let gap = nums.length;\n  let shrink = 1.3;\n  let sorted = false;\n  while (!sorted) {\n    gap = Math.floor(gap / shrink);\n    if (gap > 1) {\n      sorted = false;\n    } else {\n      gap = 1;\n      sorted = true;\n    }\n    let i = 0;\n    while (i + gap < nums.length) {\n      if (nums[i] > nums[i + gap]) {\n        let temp = nums[i];\n        nums[i] = nums[i + gap];\n        nums[i + gap] = temp;\n        sorted = false;\n      }\n      i++;\n    }\n  }\n  return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124106,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        gap = Math.floor(gap / 1.3);\n        if (gap < 1) {\n            gap = 1;\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / shrink);\n        }\n        swapped = false;\n        for (let i = 0; gap + i < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n  let gap = nums.length;\n  let swapped = true;\n  while (gap > 1 || swapped) {\n    if (gap > 1) {\n      gap = Math.floor(gap / 1.3);\n    }\n    swapped = false;\n    for (let i = 0; i + gap < nums.length; i++) {\n      if (nums[i] > nums[i + gap]) {\n        [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n        swapped = true;\n      }\n    }\n  }\n  return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n  let gap = nums.length;\n  let shrink = 1.3;\n  let sorted = false;\n  while (!sorted) {\n    gap = Math.floor(gap / shrink);\n    if (gap > 1) {\n      sorted = false;\n    } else {\n      gap = 1;\n      sorted = true;\n    }\n    let i = 0;\n    while (i + gap < nums.length) {\n      if (nums[i] > nums[i + gap]) {\n        let temp = nums[i];\n        nums[i] = nums[i + gap];\n        nums[i + gap] = temp;\n        sorted = false;\n      }\n      i++;\n    }\n  }\n  return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i < nums.length - gap; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124107,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124107,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n  let gap = nums.length;\n  let shrink = 1.3;\n  let sorted = false;\n  while (!sorted) {\n    gap = Math.floor(gap / shrink);\n    if (gap > 1) {\n      sorted = false;\n    } else {\n      gap = 1;\n      sorted = true;\n    }\n    let i = 0;\n    while (i + gap < nums.length) {\n      if (nums[i] > nums[i + gap]) {\n        let temp = nums[i];\n        nums[i] = nums[i + gap];\n        nums[i + gap] = temp;\n        sorted = false;\n      }\n      i++;\n    }\n  }\n  return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n  let gap = nums.length;\n  let swapped = true;\n  while (gap > 1 || swapped) {\n    if (gap > 1) {\n      gap = Math.floor(gap / 1.3);\n    }\n    swapped = false;\n    for (let i = 0; i + gap < nums.length; i++) {\n      if (nums[i] > nums[i + gap]) {\n        [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n        swapped = true;\n      }\n    }\n  }\n  return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.25);\n        }\n        swapped = false;\n        for (let i = 0; gap + i < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        let i = 0;\n        swapped = false;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124107,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.247330950103979);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124107,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                const temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let swapped = false;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / shrink);\n        }\n        swapped = false;\n        let i = 0;\n        while (gap + i < nums.length) {\n            if (nums[i] - nums[i + gap] > 0) {\n                let t = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = t;\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let shrink = 1.3;\n    let sorted = false;\n    while (!sorted) {\n        gap = Math.floor(gap / shrink);\n        if (gap > 1) {\n            sorted = false;\n        } else {\n            gap = 1;\n            sorted = true;\n        }\n        let i = 0;\n        while (i + gap < nums.length) {\n            if (nums[i] > nums[i + gap]) {\n                let temp = nums[i];\n                nums[i] = nums[i + gap];\n                nums[i + gap] = temp;\n                sorted = false;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.25);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1666124105,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        gap = Math.floor(gap / 1.3);\n        if (gap < 1) {\n            gap = 1;\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        if (gap > 1) {\n            gap = Math.floor(gap / 1.3);\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509768,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to sort an array of elements.\nfunction comb_sort(nums: number[]): number[] {\n    let gap = nums.length;\n    let swapped = true;\n    while (gap > 1 || swapped) {\n        gap = Math.floor(gap / 1.3);\n        if (gap < 1) {\n            gap = 1;\n        }\n        swapped = false;\n        for (let i = 0; i + gap < nums.length; i++) {\n            if (nums[i] > nums[i + gap]) {\n                [nums[i], nums[i + gap]] = [nums[i + gap], nums[i]];\n                swapped = true;\n            }\n        }\n    }\n    return nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = comb_sort;\n  assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);\n  assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);\n  assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);\n}\n\ntest();",
      "timestamp": 1665509769,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}