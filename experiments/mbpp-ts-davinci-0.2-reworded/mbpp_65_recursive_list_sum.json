{
  "name": "mbpp_65_recursive_list_sum",
  "language": "ts",
  "prompt": "//Write a function to flatten an array and sum all of its elements.\nfunction recursive_list_sum(data_list: number| number[][]): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_65_recursive_list_sum.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = recursive_list_sum;\n  assert.deepEqual(candidate([1, 2, [3, 4], [5, 6]]),21);\n  assert.deepEqual(candidate([7, 10, [15, 14], [19, 41]]),106);\n  assert.deepEqual(candidate([10, 20, [30, 40], [50, 60]]),210);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let sum: number = 0;\n    if (Array.isArray(data_list)) {\n        for (let i = 0; i < data_list.length; i++) {\n            sum += recursive_list_sum(data_list[i]);\n        }\n    } else {\n        sum += data_list;\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    if (Array.isArray(data_list)) {\n        for (let i = 0; i < data_list.length; i++) {\n            sum += recursive_list_sum(data_list[i]);\n        }\n    } else {\n        sum += data_list;\n    }\n    return sum;\n}\n",
    "    if (typeof data_list === 'number') {\n        return data_list;\n    }\n    else {\n        return data_list.reduce((acc, curr) => acc + recursive_list_sum(curr), 0);\n    }\n}\n\nconsole.log(recursive_list_sum([1, 2, [3, 4, [5, 6]]]));\n",
    "    let sum = 0;\n    if (Array.isArray(data_list)) {\n        for (let i = 0; i < data_list.length; i++) {\n            sum += recursive_list_sum(data_list[i]);\n        }\n    } else {\n        sum += data_list;\n    }\n    return sum;\n}\n\nconsole.log(recursive_list_sum([1, 2, [3, 4, [5, 6]]]));\n",
    "    if (typeof data_list === \"number\") {\n        return data_list;\n    }\n    else {\n        let sum: number = 0;\n        for (let i = 0; i < data_list.length; i++) {\n            sum += recursive_list_sum(data_list[i]);\n        }\n        return sum;\n    }\n}\n",
    "    if (Array.isArray(data_list)) {\n        let sum = 0;\n        for (let i = 0; i < data_list.length; i++) {\n            sum += recursive_list_sum(data_list[i]);\n        }\n        return sum;\n    } else {\n        return data_list;\n    }\n}\n\nconsole.log(recursive_list_sum([1, 2, [3, 4, [5, 6], 7], 8, 9]));\n",
    "    let sum = 0;\n    if (Array.isArray(data_list)) {\n        for (let i = 0; i < data_list.length; i++) {\n            sum += recursive_list_sum(data_list[i]);\n        }\n    } else {\n        sum += data_list;\n    }\n    return sum;\n}\n\nconsole.log(recursive_list_sum([1, 2, [3, 4], [5, 6]]));\n",
    "    let sum = 0;\n    if (typeof data_list === 'number') {\n        return data_list;\n    } else {\n        for (let i = 0; i < data_list.length; i++) {\n            sum += recursive_list_sum(data_list[i]);\n        }\n        return sum;\n    }\n}\n",
    "    if (typeof data_list === 'number') {\n        return data_list;\n    }\n    let sum = 0;\n    for (let i = 0; i < data_list.length; i++) {\n        sum += recursive_list_sum(data_list[i]);\n    }\n    return sum;\n}\n",
    "    let sum: number = 0;\n    if (typeof data_list === 'number') {\n        return data_list;\n    }\n    for (let i = 0; i < data_list.length; i++) {\n        sum += recursive_list_sum(data_list[i]);\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    if (Array.isArray(data_list)) {\n        for (let i = 0; i < data_list.length; i++) {\n            sum += recursive_list_sum(data_list[i]);\n        }\n    } else {\n        sum += data_list;\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    if (Array.isArray(data_list)) {\n        for (let i = 0; i < data_list.length; i++) {\n            sum += recursive_list_sum(data_list[i]);\n        }\n    } else {\n        sum += data_list;\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    if (Array.isArray(data_list)) {\n        for (let i = 0; i < data_list.length; i++) {\n            sum += recursive_list_sum(data_list[i]);\n        }\n    } else {\n        sum += data_list;\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    if(Array.isArray(data_list)){\n        for(let i = 0; i < data_list.length; i++){\n            sum += recursive_list_sum(data_list[i]);\n        }\n    }\n    else{\n        sum += data_list;\n    }\n    return sum;\n}\n",
    "    if (Array.isArray(data_list)) {\n        return data_list.reduce((acc, val) => acc + recursive_list_sum(val), 0);\n    } else {\n        return data_list;\n    }\n}\n\nconsole.log(recursive_list_sum([1, 2, [3, 4, [5, 6]]]));\n",
    "    let sum = 0;\n    for (let i = 0; i < data_list.length; i++) {\n        if (typeof data_list[i] === 'number') {\n            sum += data_list[i];\n        } else {\n            sum += recursive_list_sum(data_list[i]);\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < data_list.length; i++) {\n        if (typeof data_list[i] === 'number') {\n            sum += data_list[i];\n        } else {\n            sum += recursive_list_sum(data_list[i]);\n        }\n    }\n    return sum;\n}\n\nconsole.log(recursive_list_sum([1, 2, 3, 4, 5]));\nconsole.log(recursive_list_sum([1, 2, [3, 4, [5, 6]]]));\n",
    "    if (typeof data_list === \"number\") {\n        return data_list;\n    }\n    else {\n        return data_list.reduce((acc, val) => acc + recursive_list_sum(val), 0);\n    }\n}\n\nconsole.log(recursive_list_sum([1, 2, [3, 4, [5], 6], 7, 8]));\n",
    "    let sum: number = 0;\n    if (typeof data_list === 'number') {\n        return data_list;\n    } else {\n        for (let i = 0; i < data_list.length; i++) {\n            sum += recursive_list_sum(data_list[i]);\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < data_list.length; i++) {\n        if (Array.isArray(data_list[i])) {\n            sum += recursive_list_sum(data_list[i]);\n        } else {\n            sum += data_list[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(recursive_list_sum([1, 2, [3, 4], [5, 6]]));\n"
  ]
}