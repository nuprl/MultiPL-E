{
  "name": "mbpp_91_find_substring",
  "language": "ts",
  "prompt": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_91_find_substring.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n",
    "    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n",
    "    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'my'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'Trinity'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'name'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'hello'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'world'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'is'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'Trinity'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'Trinity'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'Trinity'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'Trinity'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'Trinity'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'Trinity'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'],",
    "    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n",
    "    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n",
    "    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n",
    "    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n",
    "    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n",
    "    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n",
    "    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n",
    "    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n",
    "    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nlet str1: string[] = [\"hello\", \"world\", \"hi\"];\nlet sub_str: string = \"hello\";\nconsole.log(find_substring(str1, sub_str));\n",
    "    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n",
    "    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n",
    "    let found: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\nconsole.log(find_substring([\"hello\", \"world\", \"lorem\", \"ipsum\"], \"ips\"));\n",
    "    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n",
    "    let flag: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            flag = true;\n            break;\n        }\n    }\n    return flag;\n}\n\nlet str1: string[] = [\"hello\", \"world\", \"hi\"];\nlet sub_str: string = \"hello\";\nconsole.log(find_substring(str1, sub_str));\n",
    "    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n",
    "    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n",
    "    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n"
  ]
}