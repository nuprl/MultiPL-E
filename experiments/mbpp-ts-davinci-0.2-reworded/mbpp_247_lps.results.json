{
  "name": "mbpp_247_lps",
  "language": "ts",
  "prompt": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const dp = Array(n).fill(null).map(() => Array(n).fill(0));\n\n    for (let i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n\n    for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n        for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n            if (str[startIndex] === str[endIndex]) {\n                dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n            } else {\n                dp[startIndex][endIndex] = Math.max(\n                    dp[startIndex + 1][endIndex],\n                    dp[startIndex][endIndex - 1]\n                );\n            }\n        }\n    }\n\n    return dp[0][n - 1];\n}\n\nconsole.log(lps('abdbca'));\nconsole.log(lps('cddpd'));\nconsole.log(lps('pqr'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let len = 2; len <= n; len++) {\n    for (let i = 0; i < n - len + 1; i++) {\n      const j = i + len - 1;\n      if (str[i] === str[j] && len === 2) {\n        dp[i][j] = 2;\n      } else if (str[i] === str[j]) {\n        dp[i][j] = dp[i + 1][j - 1] + 2;\n      } else {\n        dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"agbdba\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    dp[i][i] = 1;\n  }\n  for (let i = 2; i <= n; i++) {\n    for (let j = 0; j < n - i + 1; j++) {\n      const k = j + i - 1;\n      if (str[j] === str[k] && i === 2) {\n        dp[j][k] = 2;\n      } else if (str[j] === str[k]) {\n        dp[j][k] = dp[j + 1][k - 1] + 2;\n      } else {\n        dp[j][k] = Math.max(dp[j + 1][k], dp[j][k - 1]);\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(null)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"agbdba\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    dp[i][i] = 1;\n  }\n  for (let start = n - 1; start >= 0; start--) {\n    for (let end = start + 1; end < n; end++) {\n      if (str[start] === str[end]) {\n        dp[start][end] = 2 + dp[start + 1][end - 1];\n      } else {\n        dp[start][end] = Math.max(dp[start + 1][end], dp[start][end - 1]);\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const dp = Array.from(Array(n), () => Array(n).fill(0));\n\n    for (let i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n\n    for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n        for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n            if (str[startIndex] === str[endIndex]) {\n                dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n            } else {\n                dp[startIndex][endIndex] = Math.max(dp[startIndex + 1][endIndex], dp[startIndex][endIndex - 1]);\n            }\n        }\n    }\n\n    return dp[0][n - 1];\n}\n\nconsole.log(lps('abdbca'));\nconsole.log(lps('cddpd'));\nconsole.log(lps('pqr'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n  for (let cl = 2; cl <= n; cl++) {\n    for (let i = 0; i < n - cl + 1; i++) {\n      const j = i + cl - 1;\n      if (str[i] === str[j] && cl === 2) {\n        dp[i][j] = 2;\n      } else if (str[i] === str[j]) {\n        dp[i][j] = dp[i + 1][j - 1] + 2;\n      } else {\n        dp[i][j] = Math.max(dp[i][j - 1], dp[i + 1][j]);\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const dp = Array(n)\n        .fill(null)\n        .map(() => Array(n).fill(0));\n\n    for (let i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n\n    for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n        for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n            if (str[startIndex] === str[endIndex]) {\n                dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n            } else {\n                dp[startIndex][endIndex] = Math.max(\n                    dp[startIndex + 1][endIndex],\n                    dp[startIndex][endIndex - 1]\n                );\n            }\n        }\n    }\n\n    return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    let n = str.length;\n    let i, j, cl;\n    let L = Array(n).fill(Array(n).fill(0));\n\n    // Strings of length 1 are palindrome of lentgh 1\n    for (i = 0; i < n; i++)\n        L[i][i] = 1;\n\n    // Build the table. Note that the lower diagonal values of table are\n    // useless and not filled in the process. The values are filled in a\n    // manner similar to Matrix Chain Multiplication DP solution (See\n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/\n    // cl is length of substring\n    for (cl = 2; cl <= n; cl++) {\n        for (i = 0; i < n - cl + 1; i++) {\n            j = i + cl - 1;\n            if (str[i] == str[j] && cl == 2)\n                L[i][j] = 2;\n            else if (str[i] == str[j])\n                L[i][j] = L[i + 1][j - 1] + 2;\n            else\n                L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n        }\n    }\n\n    return L[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n11\n\nshould loosely deep-equal\n\n5\n    at test (/tmp/tmpmc1uv3eu.js:30:12)\n    at Object.<anonymous> (/tmp/tmpmc1uv3eu.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 11,\n  expected: 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"agbdba\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    dp[i][i] = 1;\n  }\n  for (let l = 2; l <= n; l++) {\n    for (let i = 0; i < n - l + 1; i++) {\n      const j = i + l - 1;\n      if (str[i] === str[j] && l === 2) {\n        dp[i][j] = 2;\n      } else if (str[i] === str[j]) {\n        dp[i][j] = dp[i + 1][j - 1] + 2;\n      } else {\n        dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const dp = Array(n).fill(null).map(() => Array(n).fill(0));\n\n    for (let i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n\n    for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n        for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n            if (str[startIndex] === str[endIndex]) {\n                dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n            } else {\n                dp[startIndex][endIndex] = Math.max(dp[startIndex + 1][endIndex], dp[startIndex][endIndex - 1]);\n            }\n        }\n    }\n\n    return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) dp[i][i] = 1;\n\n  for (let start = n - 1; start >= 0; start--) {\n    for (let end = start + 1; end < n; end++) {\n      if (str[start] === str[end]) {\n        dp[start][end] = dp[start + 1][end - 1] + 2;\n      } else {\n        dp[start][end] = Math.max(dp[start + 1][end], dp[start][end - 1]);\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const dp = Array(n).fill(null).map(() => Array(n).fill(0));\n\n    for (let i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n\n    for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n        for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n            if (str[startIndex] === str[endIndex]) {\n                dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n            } else {\n                dp[startIndex][endIndex] = Math.max(\n                    dp[startIndex + 1][endIndex],\n                    dp[startIndex][endIndex - 1]\n                );\n            }\n        }\n    }\n\n    return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  let n = str.length;\n  let i, j, cl;\n  let L = new Array(n);\n  for (i = 0; i < n; i++) {\n    L[i] = new Array(n);\n    L[i][i] = 1;\n  }\n\n  for (cl = 2; cl <= n; cl++) {\n    for (i = 0; i < n - cl + 1; i++) {\n      j = i + cl - 1;\n      if (str[i] == str[j] && cl == 2) L[i][j] = 2;\n      else if (str[i] == str[j]) L[i][j] = L[i + 1][j - 1] + 2;\n      else L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n    }\n  }\n\n  return L[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(null)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(null)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(null)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  let n = str.length;\n  let i, j, cl;\n  let L = new Array(n);\n  for (i = 0; i < n; i++) {\n    L[i] = new Array(n);\n    L[i][i] = 1;\n  }\n  for (cl = 2; cl <= n; cl++) {\n    for (i = 0; i < n - cl + 1; i++) {\n      j = i + cl - 1;\n      if (str[i] == str[j] && cl == 2) {\n        L[i][j] = 2;\n      } else if (str[i] == str[j]) {\n        L[i][j] = L[i + 1][j - 1] + 2;\n      } else {\n        L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n      }\n    }\n  }\n  return L[0][n - 1];\n}\n\nconsole.log(lps(\"GEEKSFORGEEKS\"));\nconsole.log(lps(\"BBABCBCAB\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "5\n7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  let n = str.length;\n  let i, j, cl;\n  let L = Array(n)\n    .fill(null)\n    .map(() => Array(n).fill(0));\n\n  // Strings of length 1 are palindrome of lentgh 1\n  for (i = 0; i < n; i++) L[i][i] = 1;\n\n  // Build the table. Note that the lower diagonal values of table are\n  // useless and not filled in the process. The values are filled in a\n  // manner similar to Matrix Chain Multiplication DP solution (See\n  // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/\n  // cl is length of substring\n  for (cl = 2; cl <= n; cl++) {\n    for (i = 0; i < n - cl + 1; i++) {\n      j = i + cl - 1;\n      if (str[i] === str[j] && cl === 2) L[i][j] = 2;\n      else if (str[i] === str[j]) L[i][j] = L[i + 1][j - 1] + 2;\n      else L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n    }\n  }\n\n  return L[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(null)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n  for (let start = n - 1; start >= 0; start--) {\n    for (let end = start + 1; end < n; end++) {\n      if (str[start] === str[end]) {\n        dp[start][end] = 2 + dp[start + 1][end - 1];\n      } else {\n        dp[start][end] = Math.max(dp[start + 1][end], dp[start][end - 1]);\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let start = n - 1; start >= 0; start--) {\n    for (let end = start + 1; end < n; end++) {\n      if (str[start] === str[end]) {\n        dp[start][end] = 2 + dp[start + 1][end - 1];\n      } else {\n        dp[start][end] = Math.max(dp[start + 1][end], dp[start][end - 1]);\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(null)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  let n = str.length;\n  let i, j, cl;\n  let L = Array(n)\n    .fill(null)\n    .map(() => Array(n).fill(0));\n\n  // Strings of length 1 are palindrome of lentgh 1\n  for (i = 0; i < n; i++) L[i][i] = 1;\n\n  // Build the table. Note that the lower\n  // diagonal values of table are\n  // useless and not filled in the process.\n  // The values are filled in a manner similar\n  //  to Matrix Chain Multiplication DP solution (See\n  // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/\n  // cl is length of substring\n  for (cl = 2; cl <= n; cl++) {\n    for (i = 0; i < n - cl + 1; i++) {\n      j = i + cl - 1;\n      if (str[i] == str[j] && cl == 2) L[i][j] = 2;\n      else if (str[i] == str[j]) L[i][j] = L[i + 1][j - 1] + 2;\n      else L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n    }\n  }\n\n  return L[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"agbdba\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    for (let i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n    for (let len = 2; len <= n; len++) {\n        for (let i = 0; i < n - len + 1; i++) {\n            let j = i + len - 1;\n            if (str[i] === str[j] && len === 2) {\n                dp[i][j] = 2;\n            } else if (str[i] === str[j]) {\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n            } else {\n                dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return dp[0][n - 1];\n}\n\nconsole.log(lps(\"agbdba\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const dp = Array(n)\n        .fill(null)\n        .map(() => Array(n).fill(0));\n\n    for (let i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n\n    for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n        for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n            if (str[startIndex] === str[endIndex]) {\n                dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n            } else {\n                dp[startIndex][endIndex] = Math.max(\n                    dp[startIndex + 1][endIndex],\n                    dp[startIndex][endIndex - 1]\n                );\n            }\n        }\n    }\n\n    return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  let n = str.length;\n  let i, j, cl;\n  let L = new Array(n);\n  for (i = 0; i < n; i++) {\n    L[i] = new Array(n);\n    for (j = 0; j < n; j++) {\n      L[i][j] = 0;\n    }\n  }\n\n  for (i = 0; i < n; i++) {\n    L[i][i] = 1;\n  }\n\n  for (cl = 2; cl <= n; cl++) {\n    for (i = 0; i < n - cl + 1; i++) {\n      j = i + cl - 1;\n      if (str[i] === str[j] && cl === 2) {\n        L[i][j] = 2;\n      } else if (str[i] === str[j]) {\n        L[i][j] = L[i + 1][j - 1] + 2;\n      } else {\n        L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n      }\n    }\n  }\n\n  return L[0][n - 1];\n}\n\nconsole.log(lps(\"GEEKS FOR GEEKS\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  let n = str.length;\n  let i, j, cl;\n  let L = new Array(n);\n  for (i = 0; i < n; i++) {\n    L[i] = new Array(n);\n    for (j = 0; j < n; j++) {\n      L[i][j] = 0;\n    }\n  }\n  for (i = 0; i < n; i++) {\n    L[i][i] = 1;\n  }\n  for (cl = 2; cl <= n; cl++) {\n    for (i = 0; i < n - cl + 1; i++) {\n      j = i + cl - 1;\n      if (str[i] === str[j] && cl === 2) {\n        L[i][j] = 2;\n      } else if (str[i] === str[j]) {\n        L[i][j] = L[i + 1][j - 1] + 2;\n      } else {\n        L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n      }\n    }\n  }\n  return L[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  let n = str.length;\n  let i, j, cl;\n  let L = new Array(n);\n  for (i = 0; i < n; i++) {\n    L[i] = new Array(n);\n    for (j = 0; j < n; j++) {\n      L[i][j] = 0;\n    }\n  }\n\n  // Strings of length 1 are palindrome of length 1\n  for (i = 0; i < n; i++) L[i][i] = 1;\n\n  // Build the table. Note that the lower diagonal values of table are\n  // useless and not filled in the process. The values are filled in a\n  // manner similar to Matrix Chain Multiplication DP solution (See\n  // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/\n  // cl is length of substring\n  for (cl = 2; cl <= n; cl++) {\n    for (i = 0; i < n - cl + 1; i++) {\n      j = i + cl - 1;\n      if (str[i] === str[j] && cl === 2) L[i][j] = 2;\n      else if (str[i] === str[j]) L[i][j] = L[i + 1][j - 1] + 2;\n      else L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n    }\n  }\n\n  return L[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(null)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  let n = str.length;\n  let i, j, cl;\n  let L = new Array(n);\n  for (i = 0; i < n; i++) {\n    L[i] = new Array(n);\n    L[i][i] = 1;\n  }\n  for (cl = 2; cl <= n; cl++) {\n    for (i = 0; i < n - cl + 1; i++) {\n      j = i + cl - 1;\n      if (str[i] === str[j] && cl === 2) {\n        L[i][j] = 2;\n      } else if (str[i] === str[j]) {\n        L[i][j] = L[i + 1][j - 1] + 2;\n      } else {\n        L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n      }\n    }\n  }\n  return L[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const dp = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        dp[i][i] = 1;\n    }\n    for (let i = n - 2; i >= 0; i--) {\n        for (let j = i + 1; j < n; j++) {\n            if (str[i] === str[j]) {\n                dp[i][j] = 2 + dp[i + 1][j - 1];\n            } else {\n                dp[i][j] = Math.max(dp[i][j - 1], dp[i + 1][j]);\n            }\n        }\n    }\n    return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const dp = Array(n).fill(null).map(() => Array(n).fill(0));\n\n    for (let i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n\n    for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n        for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n            if (str[startIndex] === str[endIndex]) {\n                dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n            } else {\n                dp[startIndex][endIndex] = Math.max(\n                    dp[startIndex + 1][endIndex],\n                    dp[startIndex][endIndex - 1]\n                );\n            }\n        }\n    }\n\n    return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"agbdba\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let l = 2; l <= n; l++) {\n    for (let i = 0; i < n - l + 1; i++) {\n      const j = i + l - 1;\n      if (str[i] === str[j] && l === 2) {\n        dp[i][j] = 2;\n      } else if (str[i] === str[j]) {\n        dp[i][j] = dp[i + 1][j - 1] + 2;\n      } else {\n        dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(null)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp: number[][] = Array.from({ length: n }, () =>\n    Array.from({ length: n }, () => 0)\n  );\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = dp[startIndex + 1][endIndex - 1] + 2;\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"agbdba\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp: number[][] = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"agbdba\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"agbdba\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        dp[i][i] = 1;\n    }\n    for (let i = n - 1; i >= 0; i--) {\n        for (let j = i + 1; j < n; j++) {\n            if (str[i] === str[j]) {\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n            } else {\n                dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  let n = str.length;\n  let i, j, cl;\n  let L = new Array(n);\n  for (i = 0; i < n; i++) {\n    L[i] = new Array(n);\n    L[i][i] = 1;\n  }\n  for (cl = 2; cl <= n; cl++) {\n    for (i = 0; i < n - cl + 1; i++) {\n      j = i + cl - 1;\n      if (str[i] == str[j] && cl == 2) {\n        L[i][j] = 2;\n      } else if (str[i] == str[j]) {\n        L[i][j] = L[i + 1][j - 1] + 2;\n      } else {\n        L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n      }\n    }\n  }\n  return L[0][n - 1];\n}\n\nconsole.log(lps(\"BBABCBCAB\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = new Array(n).fill(0).map(() => new Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let start = n - 1; start >= 0; start--) {\n    for (let end = start + 1; end < n; end++) {\n      if (str[start] === str[end]) {\n        dp[start][end] = 2 + dp[start + 1][end - 1];\n      } else {\n        dp[start][end] = Math.max(dp[start + 1][end], dp[start][end - 1]);\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"agbdba\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const dp = Array(n).fill(null).map(() => Array(n).fill(0));\n\n    for (let i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n\n    for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n        for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n            if (str[startIndex] === str[endIndex]) {\n                dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n            } else {\n                dp[startIndex][endIndex] = Math.max(dp[startIndex + 1][endIndex], dp[startIndex][endIndex - 1]);\n            }\n        }\n    }\n\n    return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"agbdba\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    let n = str.length;\n    let i, j, cl;\n    let L = new Array(n);\n    for (i = 0; i < n; i++) {\n        L[i] = new Array(n);\n    }\n\n    for (i = 0; i < n; i++) {\n        L[i][i] = 1;\n    }\n\n    for (cl = 2; cl <= n; cl++) {\n        for (i = 0; i < n - cl + 1; i++) {\n            j = i + cl - 1;\n            if (str[i] == str[j] && cl == 2) {\n                L[i][j] = 2;\n            } else if (str[i] == str[j]) {\n                L[i][j] = L[i + 1][j - 1] + 2;\n            } else {\n                L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n            }\n        }\n    }\n\n    return L[0][n - 1];\n}\n\nconsole.log(lps(\"GEEKS FOR GEEKS\"));\nconsole.log(lps(\"BBABCBCAB\"));\nconsole.log(lps(\"BBABCBCAB\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "7\n7\n7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n: number = str.length;\n  const dp: number[][] = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i: number = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let start: number = n - 1; start >= 0; start--) {\n    for (let end: number = start + 1; end < n; end++) {\n      if (str[start] === str[end]) {\n        dp[start][end] = 2 + dp[start + 1][end - 1];\n      } else {\n        dp[start][end] = Math.max(dp[start + 1][end], dp[start][end - 1]);\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124164,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  let n = str.length;\n  let i, j, cl;\n  let L = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  // Strings of length 1 are palindrome of lentgh 1\n  for (i = 0; i < n; i++) L[i][i] = 1;\n\n  // Build the table. Note that the lower diagonal values of table are\n  // useless and not filled in the process. The values are filled in a\n  // manner similar to Matrix Chain Multiplication DP solution (See\n  // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/\n  // cl is length of substring\n  for (cl = 2; cl <= n; cl++) {\n    for (i = 0; i < n - cl + 1; i++) {\n      j = i + cl - 1;\n      if (str[i] == str[j] && cl == 2) L[i][j] = 2;\n      else if (str[i] == str[j]) L[i][j] = L[i + 1][j - 1] + 2;\n      else L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n    }\n  }\n\n  return L[0][n - 1];\n}\n\nconsole.log(lps(\"BBABCBCAB\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  // Strings of length 1 are palindrome of lentgh 1\n  for (let i = 0; i < n; i++) dp[i][i] = 1;\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      // case 1: elements at the beginning and the end are the same\n      if (str[startIndex] === str[endIndex])\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      // case 2: skip one element either from the beginning or the end\n      else\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n  for (let cl = 2; cl <= n; cl++) {\n    for (let i = 0; i < n - cl + 1; i++) {\n      const j = i + cl - 1;\n      if (str[i] == str[j] && cl == 2) {\n        dp[i][j] = 2;\n      } else if (str[i] == str[j]) {\n        dp[i][j] = dp[i + 1][j - 1] + 2;\n      } else {\n        dp[i][j] = Math.max(dp[i][j - 1], dp[i + 1][j]);\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const dp = Array.from(Array(n), () => Array(n).fill(0));\n    for (let i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n    for (let start = n - 1; start >= 0; start--) {\n        for (let end = start + 1; end < n; end++) {\n            if (str[start] === str[end]) {\n                dp[start][end] = 2 + dp[start + 1][end - 1];\n            } else {\n                dp[start][end] = Math.max(dp[start + 1][end], dp[start][end - 1]);\n            }\n        }\n    }\n    return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const l = [];\n    for (let i = 0; i < n; i++) {\n        l[i] = [];\n        l[i][i] = 1;\n    }\n    for (let cl = 2; cl <= n; cl++) {\n        for (let i = 0; i < n - cl + 1; i++) {\n            const j = i + cl - 1;\n            if (str[i] === str[j] && cl === 2) {\n                l[i][j] = 2;\n            } else if (str[i] === str[j]) {\n                l[i][j] = l[i + 1][j - 1] + 2;\n            } else {\n                l[i][j] = Math.max(l[i][j - 1], l[i + 1][j]);\n            }\n        }\n    }\n    return l[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  let n = str.length;\n  let i, j, cl;\n  let L = Array(n)\n    .fill(null)\n    .map(() => Array(n).fill(0));\n\n  for (i = 0; i < n; i++) L[i][i] = 1;\n\n  for (cl = 2; cl <= n; cl++) {\n    for (i = 0; i < n - cl + 1; i++) {\n      j = i + cl - 1;\n      if (str[i] === str[j] && cl === 2) L[i][j] = 2;\n      else if (str[i] === str[j]) L[i][j] = L[i + 1][j - 1] + 2;\n      else L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n    }\n  }\n\n  return L[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n  for (let i = n - 1; i >= 0; i--) {\n    for (let j = i + 1; j < n; j++) {\n      if (str[i] === str[j]) {\n        dp[i][j] = dp[i + 1][j - 1] + 2;\n      } else {\n        dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const dp: number[][] = Array.from({ length: n }, () => Array(n).fill(0));\n    for (let i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n    for (let start = n - 1; start >= 0; start--) {\n        for (let end = start + 1; end < n; end++) {\n            if (str[start] === str[end]) {\n                dp[start][end] = 2 + dp[start + 1][end - 1];\n            } else {\n                dp[start][end] = Math.max(dp[start + 1][end], dp[start][end - 1]);\n            }\n        }\n    }\n    return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    dp[i][i] = 1;\n  }\n  for (let i = n - 1; i >= 0; i--) {\n    for (let j = i + 1; j < n; j++) {\n      if (str[i] === str[j]) {\n        dp[i][j] = 2 + dp[i + 1][j - 1];\n      } else {\n        dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    let n: number = str.length;\n    let i: number, j: number, cl: number;\n    let L: number[][] = [];\n    for (i = 0; i < n; i++) {\n        L[i] = [];\n        L[i][i] = 1;\n    }\n    for (cl = 2; cl <= n; cl++) {\n        for (i = 0; i < n - cl + 1; i++) {\n            j = i + cl - 1;\n            if (str.charAt(i) == str.charAt(j) && cl == 2) {\n                L[i][j] = 2;\n            } else if (str.charAt(i) == str.charAt(j)) {\n                L[i][j] = L[i + 1][j - 1] + 2;\n            } else {\n                L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n            }\n        }\n    }\n    return L[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp: number[][] = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n  for (let cl = 2; cl <= n; cl++) {\n    for (let i = 0; i < n - cl + 1; i++) {\n      const j = i + cl - 1;\n      if (str[i] === str[j] && cl === 2) {\n        dp[i][j] = 2;\n      } else if (str[i] === str[j]) {\n        dp[i][j] = dp[i + 1][j - 1] + 2;\n      } else {\n        dp[i][j] = Math.max(dp[i][j - 1], dp[i + 1][j]);\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  let n = str.length;\n  let i, j, cl;\n  let L = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  // Strings of length 1 are palindrome of length 1\n  for (i = 0; i < n; i++) L[i][i] = 1;\n\n  // Build the table. Note that the lower diagonal values of table are\n  // useless and not filled in the process. The values are filled in a\n  // manner similar to Matrix Chain Multiplication DP solution (See\n  // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/\n  // cl is length of substring\n  for (cl = 2; cl <= n; cl++) {\n    for (i = 0; i < n - cl + 1; i++) {\n      j = i + cl - 1;\n      if (str[i] == str[j] && cl == 2) L[i][j] = 2;\n      else if (str[i] == str[j]) L[i][j] = L[i + 1][j - 1] + 2;\n      else L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n    }\n  }\n\n  return L[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    dp[i][i] = 1;\n  }\n  for (let start = n - 1; start >= 0; start--) {\n    for (let end = start + 1; end < n; end++) {\n      if (str[start] === str[end]) {\n        dp[start][end] = 2 + dp[start + 1][end - 1];\n      } else {\n        dp[start][end] = Math.max(dp[start + 1][end], dp[start][end - 1]);\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const dp = Array(n).fill(null).map(() => Array(n).fill(0));\n\n    for (let i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n\n    for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n        for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n            if (str[startIndex] === str[endIndex]) {\n                dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n            } else {\n                dp[startIndex][endIndex] = Math.max(dp[startIndex + 1][endIndex], dp[startIndex][endIndex - 1]);\n            }\n        }\n    }\n\n    return dp[0][n - 1];\n}\n\nconsole.log(lps('agbdba'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124164,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(null)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const dp = Array(n).fill(null).map(() => Array(n).fill(0));\n\n    for (let i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n\n    for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n        for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n            if (str[startIndex] === str[endIndex]) {\n                dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n            } else {\n                dp[startIndex][endIndex] = Math.max(\n                    dp[startIndex + 1][endIndex],\n                    dp[startIndex][endIndex - 1]\n                );\n            }\n        }\n    }\n\n    return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        dp[i][i] = 1;\n    }\n    for (let len = 2; len <= n; len++) {\n        for (let i = 0; i < n - len + 1; i++) {\n            const j = i + len - 1;\n            if (str[i] === str[j] && len === 2) {\n                dp[i][j] = 2;\n            } else if (str[i] === str[j]) {\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n            } else {\n                dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n  for (let l = 2; l <= n; l++) {\n    for (let i = 0; i < n - l + 1; i++) {\n      const j = i + l - 1;\n      if (str[i] === str[j] && l === 2) {\n        dp[i][j] = 2;\n      } else if (str[i] === str[j]) {\n        dp[i][j] = dp[i + 1][j - 1] + 2;\n      } else {\n        dp[i][j] = Math.max(dp[i][j - 1], dp[i + 1][j]);\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  let n = str.length;\n  let i, j, cl;\n  let L = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  // Strings of length 1 are palindrome of lentgh 1\n  for (i = 0; i < n; i++) L[i][i] = 1;\n\n  // Build the table. Note that the lower diagonal values of table are\n  // useless and not filled in the process. The values are filled in a\n  // manner similar to Matrix Chain Multiplication DP solution (See\n  // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/\n  // cl is length of substring\n  for (cl = 2; cl <= n; cl++) {\n    for (i = 0; i < n - cl + 1; i++) {\n      j = i + cl - 1;\n      if (str[i] === str[j] && cl === 2) L[i][j] = 2;\n      else if (str[i] === str[j]) L[i][j] = L[i + 1][j - 1] + 2;\n      else L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n    }\n  }\n\n  return L[0][n - 1];\n}\n\nconsole.log(lps(\"BBABCBCAB\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const l = [];\n  for (let i = 0; i < n; i++) {\n    l[i] = [];\n    l[i][i] = 1;\n  }\n  for (let cl = 2; cl <= n; cl++) {\n    for (let i = 0; i < n - cl + 1; i++) {\n      const j = i + cl - 1;\n      if (str[i] === str[j] && cl === 2) {\n        l[i][j] = 2;\n      } else if (str[i] === str[j]) {\n        l[i][j] = l[i + 1][j - 1] + 2;\n      } else {\n        l[i][j] = Math.max(l[i][j - 1], l[i + 1][j]);\n      }\n    }\n  }\n  return l[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"agbdba\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  let n = str.length;\n  let i, j, cl;\n  let L = Array(n)\n    .fill(null)\n    .map(() => Array(n).fill(0));\n\n  // Strings of length 1 are palindrome of lentgh 1\n  for (i = 0; i < n; i++) L[i][i] = 1;\n\n  // Build the table. Note that the lower diagonal values of table are\n  // useless and not filled in the process. The values are filled in a\n  // manner similar to Matrix Chain Multiplication DP solution (See\n  // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/\n  // cl is length of substring\n  for (cl = 2; cl <= n; cl++) {\n    for (i = 0; i < n - cl + 1; i++) {\n      j = i + cl - 1;\n      if (str[i] === str[j] && cl === 2) L[i][j] = 2;\n      else if (str[i] === str[j]) L[i][j] = L[i + 1][j - 1] + 2;\n      else L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n    }\n  }\n\n  return L[0][n - 1];\n}\n\nconsole.log(lps(\"GEEKS FOR GEEKS\"));\nconsole.log(lps(\"BBABCBCAB\"));\nconsole.log(lps(\"BBABCBCAB\"));\nconsole.log(lps(\"BBABCBCAB\"));\nconsole.log(lps(\"BBABCBCAB\"));\nconsole.log(lps(\"BBABCBCAB\"));\nconsole.log(lps(\"BBABCBCAB\"));\nconsole.log(lps(\"BBABCBCAB\"));\nconsole.log(lps(\"BBABCBCAB\"));\nconsole.log(lps(\"BBABCBCAB\"));\nconsole.log(lps(\"BBABCBCAB\"));\nconsole.log(lps(\"BBABCBCAB\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124165,
      "stdout": "../../../../tmp/tmpfq9zwq6i.ts(40,27): error TS1002: Unterminated string literal.\n../../../../tmp/tmpfq9zwq6i.ts(41,1): error TS1005: ',' expected.\n../../../../tmp/tmpfq9zwq6i.ts(41,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n  for (let i = n - 1; i >= 0; i--) {\n    for (let j = i + 1; j < n; j++) {\n      if (str[i] === str[j]) {\n        dp[i][j] = 2 + dp[i + 1][j - 1];\n      } else {\n        dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(null)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    let n = str.length;\n    let i, j, cl;\n    let L = new Array(n);\n    for (i = 0; i < n; i++) {\n        L[i] = new Array(n);\n        for (j = 0; j < n; j++) {\n            L[i][j] = 0;\n        }\n    }\n    for (i = 0; i < n; i++) {\n        L[i][i] = 1;\n    }\n    for (cl = 2; cl <= n; cl++) {\n        for (i = 0; i < n - cl + 1; i++) {\n            j = i + cl - 1;\n            if (str[i] == str[j] && cl == 2) {\n                L[i][j] = 2;\n            } else if (str[i] == str[j]) {\n                L[i][j] = L[i + 1][j - 1] + 2;\n            } else {\n                L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n            }\n        }\n    }\n    return L[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    let n = str.length;\n    let i, j, cl;\n    let L = new Array(n);\n    for (i = 0; i < n; i++) {\n        L[i] = new Array(n);\n        L[i][i] = 1;\n    }\n    for (cl = 2; cl <= n; cl++) {\n        for (i = 0; i < n - cl + 1; i++) {\n            j = i + cl - 1;\n            if (str[i] == str[j] && cl == 2) {\n                L[i][j] = 2;\n            } else if (str[i] == str[j]) {\n                L[i][j] = L[i + 1][j - 1] + 2;\n            } else {\n                L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n            }\n        }\n    }\n    return L[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(null)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"agbdba\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const l = [];\n  for (let i = 0; i < n; i++) {\n    l[i] = [];\n    l[i][i] = 1;\n  }\n  for (let cl = 2; cl <= n; cl++) {\n    for (let i = 0; i < n - cl + 1; i++) {\n      const j = i + cl - 1;\n      if (str[i] === str[j] && cl === 2) {\n        l[i][j] = 2;\n      } else if (str[i] === str[j]) {\n        l[i][j] = l[i + 1][j - 1] + 2;\n      } else {\n        l[i][j] = Math.max(l[i][j - 1], l[i + 1][j]);\n      }\n    }\n  }\n  return l[0][n - 1];\n}\n\nconsole.log(lps(\"agbdba\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n  for (let l = 2; l <= n; l++) {\n    for (let i = 0; i < n - l + 1; i++) {\n      const j = i + l - 1;\n      if (str[i] === str[j] && l === 2) {\n        dp[i][j] = 2;\n      } else if (str[i] === str[j]) {\n        dp[i][j] = dp[i + 1][j - 1] + 2;\n      } else {\n        dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n  for (let i = n - 1; i >= 0; i--) {\n    for (let j = i + 1; j < n; j++) {\n      if (str[i] === str[j]) {\n        dp[i][j] = dp[i + 1][j - 1] + 2;\n      } else {\n        dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp: number[][] = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  // Strings of length 1 are palindrome of length 1\n  for (let i = 0; i < n; i++) dp[i][i] = 1;\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      // case 1: elements at the beginning and the end are the same\n      if (str[startIndex] === str[endIndex])\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      // case 2: skip one element either from the beginning or the end\n      else\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let i = n - 1; i >= 0; i--) {\n    for (let j = i + 1; j < n; j++) {\n      if (str[i] === str[j]) {\n        dp[i][j] = dp[i + 1][j - 1] + 2;\n      } else {\n        dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"agbdba\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  let n = str.length;\n  let i, j, cl;\n  let L = new Array(n);\n  for (i = 0; i < n; i++) {\n    L[i] = new Array(n);\n    L[i][i] = 1;\n  }\n  for (cl = 2; cl <= n; cl++) {\n    for (i = 0; i < n - cl + 1; i++) {\n      j = i + cl - 1;\n      if (str[i] == str[j] && cl == 2) {\n        L[i][j] = 2;\n      } else if (str[i] == str[j]) {\n        L[i][j] = L[i + 1][j - 1] + 2;\n      } else {\n        L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n      }\n    }\n  }\n  return L[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array.from(Array(n), () => Array(n).fill(0));\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"agbdba\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    dp[i][i] = 1;\n  }\n  for (let i = n - 2; i >= 0; i--) {\n    for (let j = i + 1; j < n; j++) {\n      if (str[i] === str[j]) {\n        dp[i][j] = 2 + dp[i + 1][j - 1];\n      } else {\n        dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n: number = str.length;\n  const dp: number[][] = [];\n\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let start = n - 1; start >= 0; start--) {\n    for (let end = start + 1; end < n; end++) {\n      if (str[start] === str[end]) {\n        dp[start][end] = 2 + dp[start + 1][end - 1];\n      } else {\n        dp[start][end] = Math.max(dp[start + 1][end], dp[start][end - 1]);\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"agbdba\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    for (let i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n    for (let l = 2; l <= n; l++) {\n        for (let i = 0; i < n - l + 1; i++) {\n            const j = i + l - 1;\n            if (str[i] === str[j] && l === 2) {\n                dp[i][j] = 2;\n            } else if (str[i] === str[j]) {\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n            } else {\n                dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"agbdba\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  let n = str.length;\n  let i, j, cl;\n  let L = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  // Strings of length 1 are palindrome of lentgh 1\n  for (i = 0; i < n; i++) L[i][i] = 1;\n\n  // Build the table. Note that the lower diagonal values of table are\n  // useless and not filled in the process. The values are filled in a\n  // manner similar to Matrix Chain Multiplication DP solution (See\n  // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/\n  // cl is length of substring\n  for (cl = 2; cl <= n; cl++) {\n    for (i = 0; i < n - cl + 1; i++) {\n      j = i + cl - 1;\n      if (str[i] === str[j] && cl === 2) L[i][j] = 2;\n      else if (str[i] === str[j]) L[i][j] = L[i + 1][j - 1] + 2;\n      else L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n    }\n  }\n\n  return L[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp: number[][] = Array.from(Array(n), () => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"agbdba\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    dp[i][i] = 1;\n  }\n  for (let i = n - 1; i >= 0; i--) {\n    for (let j = i + 1; j < n; j++) {\n      if (str[i] === str[j]) {\n        dp[i][j] = dp[i + 1][j - 1] + 2;\n      } else {\n        dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const dp = Array(n).fill(null).map(() => Array(n).fill(0));\n\n    for (let i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n\n    for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n        for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n            if (str[startIndex] === str[endIndex]) {\n                dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n            } else {\n                dp[startIndex][endIndex] = Math.max(dp[startIndex + 1][endIndex], dp[startIndex][endIndex - 1]);\n            }\n        }\n    }\n\n    return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(null)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(null)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    let n = str.length;\n    let i, j, cl;\n    let L = new Array(n);\n    for (i = 0; i < n; i++) {\n        L[i] = new Array(n);\n        L[i][i] = 1;\n    }\n    for (cl = 2; cl <= n; cl++) {\n        for (i = 0; i < n - cl + 1; i++) {\n            j = i + cl - 1;\n            if (str[i] == str[j] && cl == 2) {\n                L[i][j] = 2;\n            } else if (str[i] == str[j]) {\n                L[i][j] = L[i + 1][j - 1] + 2;\n            } else {\n                L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n            }\n        }\n    }\n    return L[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  let n = str.length;\n  let i, j, cl;\n  let L = new Array(n);\n  for (i = 0; i < n; i++) L[i] = new Array(n);\n\n  for (i = 0; i < n; i++) L[i][i] = 1;\n\n  for (cl = 2; cl <= n; cl++) {\n    for (i = 0; i < n - cl + 1; i++) {\n      j = i + cl - 1;\n      if (str[i] == str[j] && cl == 2) L[i][j] = 2;\n      else if (str[i] == str[j]) L[i][j] = L[i + 1][j - 1] + 2;\n      else L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n    }\n  }\n\n  return L[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(null)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  let n = str.length;\n  let i, j, cl;\n  let L = [];\n  for (i = 0; i < n; i++) {\n    L[i] = [];\n    L[i][i] = 1;\n  }\n  for (cl = 2; cl <= n; cl++) {\n    for (i = 0; i < n - cl + 1; i++) {\n      j = i + cl - 1;\n      if (str[i] === str[j] && cl === 2) {\n        L[i][j] = 2;\n      } else if (str[i] === str[j]) {\n        L[i][j] = L[i + 1][j - 1] + 2;\n      } else {\n        L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n      }\n    }\n  }\n  return L[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"agbdba\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = new Array(n);\n  for (let i = 0; i < n; i++) {\n    dp[i] = new Array(n).fill(0);\n  }\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(null)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let i = n - 1; i >= 0; i--) {\n    for (let j = i + 1; j < n; j++) {\n      if (str[i] === str[j]) {\n        dp[i][j] = 2 + dp[i + 1][j - 1];\n      } else {\n        dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124168,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"agbdba\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const dp = Array.from(Array(n), () => Array(n).fill(0));\n\n    for (let i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n\n    for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n        for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n            if (str[startIndex] === str[endIndex]) {\n                dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n            } else {\n                dp[startIndex][endIndex] = Math.max(dp[startIndex + 1][endIndex], dp[startIndex][endIndex - 1]);\n            }\n        }\n    }\n\n    return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124168,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(null)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"agbdba\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n  for (let k = 2; k <= n; k++) {\n    for (let i = 0; i < n - k + 1; i++) {\n      let j = i + k - 1;\n      if (str[i] === str[j] && k === 2) {\n        dp[i][j] = 2;\n      } else if (str[i] === str[j]) {\n        dp[i][j] = dp[i + 1][j - 1] + 2;\n      } else {\n        dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"agbdba\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    dp[i][i] = 1;\n  }\n  for (let i = n - 2; i >= 0; i--) {\n    for (let j = i + 1; j < n; j++) {\n      if (str[i] === str[j]) {\n        dp[i][j] = 2 + dp[i + 1][j - 1];\n      } else {\n        dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  let n = str.length;\n  let i, j, cl;\n  let L = [];\n  for (i = 0; i < n; i++) {\n    L[i] = [];\n    L[i][i] = 1;\n  }\n  for (cl = 2; cl <= n; cl++) {\n    for (i = 0; i < n - cl + 1; i++) {\n      j = i + cl - 1;\n      if (str[i] == str[j] && cl == 2) {\n        L[i][j] = 2;\n      } else if (str[i] == str[j]) {\n        L[i][j] = L[i + 1][j - 1] + 2;\n      } else {\n        L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n      }\n    }\n  }\n  return L[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  let n = str.length;\n  let i, j, cl;\n  let L = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  // Strings of length 1 are palindrome of length 1\n  for (i = 0; i < n; i++) L[i][i] = 1;\n\n  // Build the table. Note that the lower diagonal values of table are\n  // useless and not filled in the process. The values are filled in a\n  // manner similar to Matrix Chain Multiplication DP solution (See\n  // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/\n  // cl is length of substring\n  for (cl = 2; cl <= n; cl++) {\n    for (i = 0; i < n - cl + 1; i++) {\n      j = i + cl - 1;\n      if (str[i] == str[j] && cl == 2)\n        L[i][j] = 2;\n      else if (str[i] == str[j])\n        L[i][j] = L[i + 1][j - 1] + 2;\n      else\n        L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n    }\n  }\n\n  return L[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = new Array(n);\n  for (let i = 0; i < n; i++) {\n    dp[i] = new Array(n).fill(0);\n  }\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"agbdba\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const dp = Array(n)\n        .fill(null)\n        .map(() => Array(n).fill(0));\n\n    for (let i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n\n    for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n        for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n            if (str[startIndex] === str[endIndex]) {\n                dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n            } else {\n                dp[startIndex][endIndex] = Math.max(\n                    dp[startIndex + 1][endIndex],\n                    dp[startIndex][endIndex - 1]\n                );\n            }\n        }\n    }\n\n    return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"agbdba\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const dp = Array(n).fill(null).map(() => Array(n).fill(0));\n\n    for (let i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n\n    for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n        for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n            if (str[startIndex] === str[endIndex]) {\n                dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n            } else {\n                dp[startIndex][endIndex] = Math.max(dp[startIndex + 1][endIndex], dp[startIndex][endIndex - 1]);\n            }\n        }\n    }\n\n    return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n: number = str.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n  for (let len = 2; len <= n; len++) {\n    for (let i = 0; i < n - len + 1; i++) {\n      let j = i + len - 1;\n      if (str[i] === str[j] && len === 2) {\n        dp[i][j] = 2;\n      } else if (str[i] === str[j]) {\n        dp[i][j] = dp[i + 1][j - 1] + 2;\n      } else {\n        dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  let n = str.length;\n  let i, j, cl;\n  let L = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  // Strings of length 1 are palindrome of lentgh 1\n  for (i = 0; i < n; i++) L[i][i] = 1;\n\n  // Build the table. Note that the lower diagonal values of table are\n  // useless and not filled in the process. The values are filled in a\n  // manner similar to Matrix Chain Multiplication DP solution (See\n  // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/\n  // cl is length of substring\n  for (cl = 2; cl <= n; cl++) {\n    for (i = 0; i < n - cl + 1; i++) {\n      j = i + cl - 1;\n      if (str[i] === str[j] && cl === 2) L[i][j] = 2;\n      else if (str[i] === str[j]) L[i][j] = L[i + 1][j - 1] + 2;\n      else L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n    }\n  }\n\n  return L[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const dp = new Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(n).fill(0);\n    }\n\n    for (let i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n\n    for (let l = 2; l <= n; l++) {\n        for (let i = 0; i < n - l + 1; i++) {\n            const j = i + l - 1;\n            if (str[i] === str[j] && l === 2) {\n                dp[i][j] = 2;\n            } else if (str[i] === str[j]) {\n                dp[i][j] = dp[i + 1][j - 1] + 2;\n            } else {\n                dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n\n    return dp[0][n - 1];\n}\n\nconsole.log(lps(\"agbdba\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(null)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let l = 2; l <= n; l++) {\n    for (let i = 0; i < n - l + 1; i++) {\n      const j = i + l - 1;\n      if (str[i] === str[j] && l === 2) {\n        dp[i][j] = 2;\n      } else if (str[i] === str[j]) {\n        dp[i][j] = dp[i + 1][j - 1] + 2;\n      } else {\n        dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const dp = Array(n).fill(0).map(() => Array(n).fill(0));\n    for (let i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n    for (let start = n - 1; start >= 0; start--) {\n        for (let end = start + 1; end < n; end++) {\n            if (str[start] === str[end]) {\n                dp[start][end] = 2 + dp[start + 1][end - 1];\n            } else {\n                dp[start][end] = Math.max(dp[start + 1][end], dp[start][end - 1]);\n            }\n        }\n    }\n    return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp: number[][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let len = 2; len <= n; len++) {\n    for (let i = 0; i < n - len + 1; i++) {\n      const j = i + len - 1;\n      if (str[i] === str[j] && len === 2) {\n        dp[i][j] = 2;\n      } else if (str[i] === str[j]) {\n        dp[i][j] = dp[i + 1][j - 1] + 2;\n      } else {\n        dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array.from(Array(n), () => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const dp = Array(n).fill(null).map(() => Array(n).fill(0));\n\n    for (let i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n\n    for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n        for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n            if (str[startIndex] === str[endIndex]) {\n                dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n            } else {\n                dp[startIndex][endIndex] = Math.max(dp[startIndex + 1][endIndex], dp[startIndex][endIndex - 1]);\n            }\n        }\n    }\n\n    return dp[0][n - 1];\n}\n\nconsole.log(lps('abdbca'));\nconsole.log(lps('cddpd'));\nconsole.log(lps('pqr'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIdx = n - 1; startIdx >= 0; startIdx--) {\n    for (let endIdx = startIdx + 1; endIdx < n; endIdx++) {\n      if (str[startIdx] === str[endIdx]) {\n        dp[startIdx][endIdx] = 2 + dp[startIdx + 1][endIdx - 1];\n      } else {\n        dp[startIdx][endIdx] = Math.max(\n          dp[startIdx + 1][endIdx],\n          dp[startIdx][endIdx - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  let n = str.length;\n  let i, j, cl;\n  let L = new Array(n);\n  for (i = 0; i < n; i++) {\n    L[i] = new Array(n);\n    L[i][i] = 1;\n  }\n  for (cl = 2; cl <= n; cl++) {\n    for (i = 0; i < n - cl + 1; i++) {\n      j = i + cl - 1;\n      if (str[i] === str[j] && cl === 2) {\n        L[i][j] = 2;\n      } else if (str[i] === str[j]) {\n        L[i][j] = L[i + 1][j - 1] + 2;\n      } else {\n        L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n      }\n    }\n  }\n  return L[0][n - 1];\n}\n\nconsole.log(lps(\"GEEKSFORGEEKS\"));\nconsole.log(lps(\"BBABCBCAB\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "5\n7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  let n = str.length;\n  let i, j, cl;\n  let L = new Array(n);\n  for (i = 0; i < n; i++) L[i] = new Array(n);\n\n  // Strings of length 1 are palindrome of lentgh 1\n  for (i = 0; i < n; i++) L[i][i] = 1;\n\n  // Build the table. Note that the lower diagonal values of table are\n  // useless and not filled in the process. The values are filled in a\n  // manner similar to Matrix Chain Multiplication DP solution (See\n  // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/\n  // cl is length of substring\n  for (cl = 2; cl <= n; cl++) {\n    for (i = 0; i < n - cl + 1; i++) {\n      j = i + cl - 1;\n      if (str[i] == str[j] && cl == 2) L[i][j] = 2;\n      else if (str[i] == str[j]) L[i][j] = L[i + 1][j - 1] + 2;\n      else L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n    }\n  }\n\n  return L[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    let n = str.length;\n    let i, j, cl;\n    let L = Array(n).fill(0).map(() => Array(n).fill(0));\n\n    // Strings of length 1 are palindrome of lentgh 1\n    for (i = 0; i < n; i++)\n        L[i][i] = 1;\n\n    // Build the table. Note that the lower diagonal values of table are\n    // useless and not filled in the process. The values are filled in a\n    // manner similar to Matrix Chain Multiplication DP solution (See\n    // https://www.geeksforgeeks.org/dynamic-programming-set-8-matrix-chain-multiplication/\n    // cl is length of substring\n    for (cl = 2; cl <= n; cl++) {\n        for (i = 0; i < n - cl + 1; i++) {\n            j = i + cl - 1;\n            if (str[i] == str[j] && cl == 2)\n                L[i][j] = 2;\n            else if (str[i] == str[j])\n                L[i][j] = L[i + 1][j - 1] + 2;\n            else\n                L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n        }\n    }\n\n    return L[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  let n = str.length;\n  let i, j, cl;\n  let L = new Array(n);\n  for (i = 0; i < n; i++) {\n    L[i] = new Array(n);\n    L[i][i] = 1;\n  }\n  for (cl = 2; cl <= n; cl++) {\n    for (i = 0; i < n - cl + 1; i++) {\n      j = i + cl - 1;\n      if (str[i] === str[j] && cl === 2) {\n        L[i][j] = 2;\n      } else if (str[i] === str[j]) {\n        L[i][j] = L[i + 1][j - 1] + 2;\n      } else {\n        L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n      }\n    }\n  }\n  return L[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(null)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const L = [];\n    for (let i = 0; i < n; i++) {\n        L[i] = [];\n        for (let j = 0; j < n; j++) {\n            L[i][j] = 0;\n        }\n    }\n    for (let i = 0; i < n; i++) {\n        L[i][i] = 1;\n    }\n    for (let cl = 2; cl <= n; cl++) {\n        for (let i = 0; i < n - cl + 1; i++) {\n            const j = i + cl - 1;\n            if (str[i] === str[j] && cl === 2) {\n                L[i][j] = 2;\n            } else if (str[i] === str[j]) {\n                L[i][j] = L[i + 1][j - 1] + 2;\n            } else {\n                L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n            }\n        }\n    }\n    return L[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  let n = str.length;\n  let i, j, cl;\n  let L = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (i = 0; i < n; i++) L[i][i] = 1;\n\n  for (cl = 2; cl <= n; cl++) {\n    for (i = 0; i < n - cl + 1; i++) {\n      j = i + cl - 1;\n      if (str[i] === str[j] && cl === 2) L[i][j] = 2;\n      else if (str[i] === str[j]) L[i][j] = L[i + 1][j - 1] + 2;\n      else L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n    }\n  }\n\n  return L[0][n - 1];\n}\n\nconsole.log(lps(\"GEEKS FOR GEEKS\"));\nconsole.log(lps(\"BBABCBCAB\"));\nconsole.log(lps(\"BBABCBCAB\"));\nconsole.log(lps(\"BBABCBCAB\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "7\n7\n7\n7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        dp[i][i] = 1;\n    }\n    for (let i = n - 1; i >= 0; i--) {\n        for (let j = i + 1; j < n; j++) {\n            if (str[i] === str[j]) {\n                dp[i][j] = 2 + dp[i + 1][j - 1];\n            } else {\n                dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"agbdba\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(null)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  let n = str.length;\n  let i, j, cl;\n  let L = new Array(n);\n  for (i = 0; i < n; i++) {\n    L[i] = new Array(n);\n    L[i][i] = 1;\n  }\n\n  for (cl = 2; cl <= n; cl++) {\n    for (i = 0; i < n - cl + 1; i++) {\n      j = i + cl - 1;\n      if (str[i] === str[j] && cl === 2) {\n        L[i][j] = 2;\n      } else if (str[i] === str[j]) {\n        L[i][j] = L[i + 1][j - 1] + 2;\n      } else {\n        L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n      }\n    }\n  }\n\n  return L[0][n - 1];\n}\n\nconsole.log(lps(\"GEEKS FOR GEEKS\"));\nconsole.log(lps(\"BBABCBCAB\"));\nconsole.log(lps(\"BBABCBCAB\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "7\n7\n7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"agbdba\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    let n = str.length;\n    let i, j, cl;\n    let L = new Array(n);\n    for (i = 0; i < n; i++) {\n        L[i] = new Array(n);\n        L[i][i] = 1;\n    }\n\n    for (cl = 2; cl <= n; cl++) {\n        for (i = 0; i < n - cl + 1; i++) {\n            j = i + cl - 1;\n            if (str[i] == str[j] && cl == 2)\n                L[i][j] = 2;\n            else if (str[i] == str[j])\n                L[i][j] = L[i + 1][j - 1] + 2;\n            else\n                L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n        }\n    }\n\n    return L[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1665509690,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const dp = Array(n).fill(null).map(() => Array(n).fill(0));\n\n    for (let i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n\n    for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n        for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n            if (str[startIndex] === str[endIndex]) {\n                dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n            } else {\n                dp[startIndex][endIndex] = Math.max(dp[startIndex + 1][endIndex], dp[startIndex][endIndex - 1]);\n            }\n        }\n    }\n\n    return dp[0][n - 1];\n}\n\nconsole.log(lps('abdbca'));\nconsole.log(lps('cddpd'));\nconsole.log(lps('pqr'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  let n = str.length;\n  let i, j, cl;\n  let L = new Array(n);\n  for (i = 0; i < n; i++) {\n    L[i] = new Array(n);\n    L[i][i] = 1;\n  }\n  for (cl = 2; cl <= n; cl++) {\n    for (i = 0; i < n - cl + 1; i++) {\n      j = i + cl - 1;\n      if (str[i] === str[j] && cl === 2) {\n        L[i][j] = 2;\n      } else if (str[i] === str[j]) {\n        L[i][j] = L[i + 1][j - 1] + 2;\n      } else {\n        L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n      }\n    }\n  }\n  return L[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(null)\n    .map(() => Array(n).fill(0));\n\n  // Strings of length 1 are palindrome of length 1\n  for (let i = 0; i < n; i++) dp[i][i] = 1;\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      // case 1: elements at the beginning and the end are the same\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        // case 2: skip one element either from the beginning or the end\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const dp = Array(n).fill(null).map(() => Array(n).fill(0));\n\n    for (let i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n\n    for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n        for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n            if (str[startIndex] === str[endIndex]) {\n                dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n            } else {\n                dp[startIndex][endIndex] = Math.max(dp[startIndex + 1][endIndex], dp[startIndex][endIndex - 1]);\n            }\n        }\n    }\n\n    return dp[0][n - 1];\n}\n\nconsole.log(lps('abdbca'));\nconsole.log(lps('cddpd'));\nconsole.log(lps('pqr'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124169,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(0)\n    .map(() => Array(n).fill(0));\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n  return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n    const n = str.length;\n    const dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = 0;\n        }\n    }\n\n    for (let i = 0; i < n; i++) {\n        dp[i][i] = 1;\n    }\n\n    for (let i = 2; i <= n; i++) {\n        for (let j = 0; j < n - i + 1; j++) {\n            const k = j + i - 1;\n            if (str[j] === str[k] && i === 2) {\n                dp[j][k] = 2;\n            } else if (str[j] === str[k]) {\n                dp[j][k] = dp[j + 1][k - 1] + 2;\n            } else {\n                dp[j][k] = Math.max(dp[j][k - 1], dp[j + 1][k]);\n            }\n        }\n    }\n\n    return dp[0][n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124170,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the length of the longest palindromic subsequence in the given string.\nfunction lps(str: string): number {\n  const n = str.length;\n  const dp = Array(n)\n    .fill(null)\n    .map(() => Array(n).fill(0));\n\n  for (let i = 0; i < n; i++) {\n    dp[i][i] = 1;\n  }\n\n  for (let startIndex = n - 1; startIndex >= 0; startIndex--) {\n    for (let endIndex = startIndex + 1; endIndex < n; endIndex++) {\n      if (str[startIndex] === str[endIndex]) {\n        dp[startIndex][endIndex] = 2 + dp[startIndex + 1][endIndex - 1];\n      } else {\n        dp[startIndex][endIndex] = Math.max(\n          dp[startIndex + 1][endIndex],\n          dp[startIndex][endIndex - 1]\n        );\n      }\n    }\n  }\n\n  return dp[0][n - 1];\n}\n\nconsole.log(lps(\"abdbca\"));\nconsole.log(lps(\"cddpd\"));\nconsole.log(lps(\"pqr\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = lps;\n  assert.deepEqual(candidate(\"TENS FOR TENS\"),5);\n  assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);\n  assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "5\n3\n1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}