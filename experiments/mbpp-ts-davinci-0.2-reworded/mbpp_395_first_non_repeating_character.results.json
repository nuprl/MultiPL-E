{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "ts",
  "prompt": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str: string = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c: string = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abcdcd\"));\nconsole.log(first_non_repeating_character(\"abcdcde\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "a\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str: string = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c: string = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abcab\"));\nconsole.log(first_non_repeating_character(\"abab\"));\nconsole.log(first_non_repeating_character(\"aabbbc\"));\nconsole.log(first_non_repeating_character(\"aabbdbc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "c\nundefined\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    let ctr = 0;\n    let index: number | undefined;\n\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) == i) {\n            for (let j = 0; j < str.length; j++) {\n                if (str[i] == str[j]) {\n                    ctr += 1;\n                }\n            }\n            if (ctr < 2) {\n                index = i;\n                break;\n            }\n        }\n    }\n    return str[index];\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "undefined\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n'c'\n    at test (/tmp/tmpob346x3b.js:27:12)\n    at Object.<anonymous> (/tmp/tmpob346x3b.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'c',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str: string = str1;\n  for (let i = 0; i < str.length; i++) {\n    let c: string = str.charAt(i);\n    if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n      return c;\n    }\n  }\n  return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcd\"));\nconsole.log(first_non_repeating_character(\"aabbcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "undefined\na\nc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str: string = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c: string = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n  return undefined;\n}\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character(\"abcdcd\"));\nconsole.log(first_non_repeating_character(\"abcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "a\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcdcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdefghija\"));\nconsole.log(first_non_repeating_character(\"abcdefghijaa\"));\nconsole.log(first_non_repeating_character(\"abcdefghijaaa\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "a\nundefined\nb\nb\nb\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    let ctr: number = 0;\n    let char: string;\n    let charCount: number;\n    for (let i = 0; i < str.length; i++) {\n        charCount = 0;\n        for (let j = 0; j < str.length; j++) {\n            if (str[i] == str[j]) {\n                charCount++;\n            }\n        }\n        if (charCount < 2) {\n            ctr++;\n            char = str[i];\n            if (ctr == 2) {\n                return undefined;\n            }\n        }\n    }\n    return char;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n'a'\n    at test (/tmp/tmpwed_mipm.js:28:12)\n    at Object.<anonymous> (/tmp/tmpwed_mipm.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'a',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n  return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcdcd\"));\nconsole.log(first_non_repeating_character(\"abcd\"));\nconsole.log(first_non_repeating_character(\"abcda\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "a\na\nb\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str: string = str1;\n  let ctr: number = 0;\n  let count: number = 0;\n  let i: number = 0;\n  let index: number;\n  for (i = 0; i < str.length; i++) {\n    if (str.charAt(i) != \" \") {\n      ctr++;\n      index = i;\n    }\n  }\n  i = 0;\n  while (i < str.length) {\n    count = 0;\n    let j: number = 0;\n    while (j < str.length) {\n      if (i != j && str.charAt(i) == str.charAt(j)) {\n        count++;\n        break;\n      }\n      j++;\n    }\n    if (count == 0) {\n      return str.charAt(i);\n    }\n    i++;\n  }\n  return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"the quick brown fox jumps then quickly blow air\"));\nconsole.log(first_non_repeating_character(\"the quick brown fox jumps then quickly blow air\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "f\nf\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\nconsole.log(first_non_repeating_character('abcdef'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\nconsole.log(first_non_repeating_character('abcdef'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  let char;\n  let count;\n  for (let i = 0; i < str.length; i++) {\n    char = str[i];\n    count = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (char === str[j]) {\n        count++;\n      }\n    }\n    if (count < 2) {\n      return char;\n    }\n  }\n  return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  let count = 0;\n  let index = 0;\n  let i = 0;\n  let j = 0;\n  let temp = \"\";\n  for (i = 0; i < str.length; i++) {\n    temp = str[i];\n    count = 0;\n    for (j = 0; j < str.length; j++) {\n      if (temp == str[j]) {\n        count++;\n      }\n    }\n    if (count == 1) {\n      index = i;\n      break;\n    }\n  }\n  if (count == 1) {\n    return str[index];\n  } else {\n    return undefined;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abcdcd\"));\nconsole.log(first_non_repeating_character(\"abcdcde\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "a\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyz\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "undefined\nundefined\na\nundefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n  return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcdcd\"));\nconsole.log(first_non_repeating_character(\"abcd\"));\nconsole.log(first_non_repeating_character(\"aabbcc\"));\nconsole.log(first_non_repeating_character(\"aabbcc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "a\na\nundefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\nconsole.log(first_non_repeating_character(\"abcdcba\"));\nconsole.log(first_non_repeating_character(\"abcd\"));\nconsole.log(first_non_repeating_character(\"aabbdbc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "d\na\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  for (let i = 0; i < str1.length; i++) {\n    if (str1.indexOf(str1[i]) === str1.lastIndexOf(str1[i])) {\n      return str1[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abcdcd\"));\nconsole.log(first_non_repeating_character(\"abcd\"));\nconsole.log(first_non_repeating_character(\"aabbcc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "a\na\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\nconsole.log(first_non_repeating_character('abcdef'));\nconsole.log(first_non_repeating_character('hello world, eh?'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "e\na\nw\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  let count = 0;\n  let index = 0;\n  let char = \"\";\n  for (let i = 0; i < str.length; i++) {\n    for (let j = 0; j < str.length; j++) {\n      if (str[i] === str[j]) {\n        count++;\n      }\n    }\n    if (count < 2) {\n      char = str[i];\n      index = i;\n      break;\n    }\n    count = 0;\n  }\n  return char;\n}\n\nconsole.log(first_non_repeating_character(\"the quick brown fox jumps then quickly blow air\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "f\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmp_3rkwveh.js:26:12)\n    at Object.<anonymous> (/tmp/tmp_3rkwveh.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\nconsole.log(first_non_repeating_character('abcdef'));\nconsole.log(first_non_repeating_character('hello world, eh?'));\nconsole.log(first_non_repeating_character('sTreSS'));\nconsole.log(first_non_repeating_character('moonmen'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "e\na\nw\nt\ne\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    const str = str1.toLowerCase();\n    const counts: { [key: string]: number } = {};\n    for (let i = 0; i < str.length; i++) {\n        const char = str.charAt(i);\n        counts[char] = counts[char] ? counts[char] + 1 : 1;\n    }\n    for (let i = 0; i < str.length; i++) {\n        const char = str.charAt(i);\n        if (counts[char] === 1) {\n            return char;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  let ctr = 0;\n  let char = undefined;\n  let charCount = {};\n  for (let i = 0; i < str.length; i++) {\n    if (charCount[str[i]] === undefined) {\n      charCount[str[i]] = 1;\n    } else {\n      charCount[str[i]] += 1;\n    }\n  }\n  for (let j in charCount) {\n    if (charCount[j] === 1) {\n      ctr += 1;\n      char = j;\n      if (ctr === 1) {\n        break;\n      }\n    }\n  }\n  return char;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str: string = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c: string = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  const str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n  return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\nconsole.log(first_non_repeating_character('hello world, eh?'));\nconsole.log(first_non_repeating_character('sTreSS'));\nconsole.log(first_non_repeating_character('moonmen'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "e\nw\nt\ne\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let arr1: string[] = str1.split('');\n    let arr2: string[] = [];\n    let arr3: string[] = [];\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr2.indexOf(arr1[i]) === -1) {\n            arr2.push(arr1[i]);\n            arr3.push(1);\n        } else {\n            arr3[arr2.indexOf(arr1[i])]++;\n        }\n    }\n    return arr2[arr3.indexOf(1)];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "../../../../tmp/tmpgllzmbd7.ts(9,23): error TS2345: Argument of type '1' is not assignable to parameter of type 'string'.\n../../../../tmp/tmpgllzmbd7.ts(11,13): error TS2356: An arithmetic operand must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpgllzmbd7.ts(14,30): error TS2345: Argument of type '1' is not assignable to parameter of type 'string'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character(\"abcdcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdef\"));\nconsole.log(first_non_repeating_character(\"aabbcc\"));\nconsole.log(first_non_repeating_character(\"aabbccddeefghi\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "a\nundefined\na\nundefined\nf\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    let count = 0;\n    let index = 0;\n    let ch: string | undefined;\n    for (let i = 0; i < str.length; i++) {\n        count = 0;\n        for (let j = 0; j < str.length; j++) {\n            if (str[i] == str[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            ch = str[i];\n            index = i;\n            break;\n        }\n    }\n    return ch;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    let ctr = 0;\n    let index: number;\n    let nonRepeatedChar: string;\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str.charAt(i)) == str.lastIndexOf(str.charAt(i))) {\n            ctr++;\n            index = i;\n            nonRepeatedChar = str.charAt(i);\n        }\n    }\n    if (ctr == 1) {\n        return nonRepeatedChar;\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n'a'\n    at test (/tmp/tmpy_mhrt2a.js:23:12)\n    at Object.<anonymous> (/tmp/tmpy_mhrt2a.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'a',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n  return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    let ctr: number = 0;\n    let char: string;\n    for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) != ' ') {\n            ctr = 0;\n            for (let j = 0; j < str.length; j++) {\n                if (str.charAt(i) == str.charAt(j)) {\n                    ctr++;\n                }\n            }\n            if (ctr < 2) {\n                char = str.charAt(i);\n                return char;\n            }\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "e\ne\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str: string = str1;\n  for (let i = 0; i < str.length; i++) {\n    let c: string = str.charAt(i);\n    if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n      return c;\n    }\n  }\n  return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"the quick brown fox jumps then quickly blow air\"));\nconsole.log(first_non_repeating_character(\"abcdab\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "f\nc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str: string = str1;\n  for (let i = 0; i < str.length; i++) {\n    let c: string = str[i];\n    if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n      return c;\n    }\n  }\n  return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\nconsole.log(first_non_repeating_character('abcdef'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "e\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\nconsole.log(first_non_repeating_character(\"abcdab\"));\nconsole.log(first_non_repeating_character(\"abcdabc\"));\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdabcdabcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "c\nd\nundefined\nundefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  let ctr = 0;\n  let char = '';\n  let charCount = {};\n  for (let i = 0; i < str.length; i++) {\n    if (charCount[str[i]]) {\n      charCount[str[i]] += 1;\n    } else {\n      charCount[str[i]] = 1;\n    }\n  }\n  for (let j in charCount) {\n    if (charCount[j] == 1) {\n      ctr += 1;\n      char = j;\n      if (ctr == 1) {\n        break;\n      }\n    }\n  }\n  return ctr == 1 ? char : undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abcdcd\"));\nconsole.log(first_non_repeating_character(\"abcdcde\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "a\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str: string = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c: string = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  let count = 0;\n  let index = 0;\n  let char = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) == str.lastIndexOf(str[i])) {\n      count++;\n      char = str[i];\n      index = i;\n      break;\n    }\n  }\n  if (count == 0) {\n    return undefined;\n  } else {\n    return str1[index];\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  let ctr = 0;\n  let char: string | undefined;\n\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) == i) {\n      for (let j = 0; j < str.length; j++) {\n        if (str[i] == str[j]) {\n          ctr += 1;\n        }\n      }\n      if (ctr < 2) {\n        char = str[i];\n        break;\n      }\n    }\n  }\n  return char;\n}\n\nconsole.log(first_non_repeating_character(\"the quick brown fox jumps then quickly blow air\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "undefined\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n'c'\n    at test (/tmp/tmpzbggs9q_.js:27:12)\n    at Object.<anonymous> (/tmp/tmpzbggs9q_.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'c',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  let ctr = 0;\n  let char = undefined;\n\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      char = str[i];\n      break;\n    }\n  }\n  return char;\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    let ctr: number = 0;\n    let char: string;\n    let charCount: number;\n\n    for (let i = 0; i < str.length; i++) {\n        char = str[i];\n        charCount = 0;\n        for (let j = 0; j < str.length; j++) {\n            if (char === str[j]) {\n                charCount++;\n            }\n        }\n        if (charCount < 2) {\n            return char;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  const arr = str1.split('');\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(arr[i]) === arr.lastIndexOf(arr[i])) {\n      return arr[i];\n    }\n  }\n  return undefined;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abcdcd\"));\nconsole.log(first_non_repeating_character(\"abcd\"));\nconsole.log(first_non_repeating_character(\"aabbcc\"));\nconsole.log(first_non_repeating_character(\"aabbdbcc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "a\na\nundefined\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    let ctr: number = 0;\n    let index: number = 0;\n    let nonRepeatedChar: string | undefined;\n    for (let i = 0; i < str.length; i++) {\n        ctr = 0;\n        for (let j = 0; j < str.length; j++) {\n            if (i != j && str.charAt(i) == str.charAt(j)) {\n                ctr++;\n                break;\n            }\n        }\n        if (ctr == 0) {\n            index = i;\n            nonRepeatedChar = str.charAt(index);\n            break;\n        }\n    }\n    return nonRepeatedChar;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyziflskecznslkjfabe\"));\nconsole.log(first_non_repeating_character(\"bcccccccccccccyb\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyziflskecznslkjfabe\"));\nconsole.log(first_non_repeating_character(\"bcccccccccccccyb\"));\nconsole.log(first_non_repeating_character(\"bcccccccccccccyb\"));\nconsole.log(first_non_repeating_character(\"bcccccccccccccyb\"));\nconsole.log(first_non_repeating_character(\"bcccccccccccccyb\"));\nconsole.log(first_non_repeating_character(\"bcccccccccccccyb\"));\nconsole.log(first_non_repeating_character(\"bcccccccccccccyb\"));\nconsole.log(first_non_repeating_character(\"bcccccccccccccyb\"));\nconsole.log(first_non_repeating_character(\"bcccccccccccccyb\"));\nconsole.log(first_non_repeating_character(\"bcccccccccccccyb\"));\nconsole.log(first_non_repeating_character(\"bcccccccccccccyb\"));\nconsole.log(first_non_repeating_character(\"bcccccccccccccyb\"));\nconsole.log(first_non_repeating_character(\"bcccccccccc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "../../../../tmp/tmpx8sp_mga.ts(27,55): error TS1002: Unterminated string literal.\n../../../../tmp/tmpx8sp_mga.ts(28,1): error TS1005: ',' expected.\n../../../../tmp/tmpx8sp_mga.ts(28,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\nconsole.log(first_non_repeating_character('abcbad'));\nconsole.log(first_non_repeating_character('abcabcabc'));\nconsole.log(first_non_repeating_character('aabbcc'));\nconsole.log(first_non_repeating_character('aabbdbcc'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "e\nc\nundefined\nundefined\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\nconsole.log(first_non_repeating_character(\"abcdcd\"));\nconsole.log(first_non_repeating_character(\"abcd\"));\nconsole.log(first_non_repeating_character(\"aabbcc\"));\nconsole.log(first_non_repeating_character(\"aabbdbcc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "a\na\nundefined\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\nconsole.log(first_non_repeating_character(\"abcdcd\"));\nconsole.log(first_non_repeating_character(\"abcdcde\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "a\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\nconsole.log(first_non_repeating_character('abcdef'));\nconsole.log(first_non_repeating_character('hello world, eh?'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "e\na\nw\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str: string = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c: string = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "e\ne\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  let count = 0;\n  let index = 0;\n  let char = \"\";\n  for (let i = 0; i < str.length; i++) {\n    count = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[i] === str[j]) {\n        count++;\n      }\n    }\n    if (count < 2) {\n      char = str[i];\n      index = i;\n      break;\n    }\n  }\n  if (char === \"\") {\n    return undefined;\n  }\n  return str1[index];\n}\nconsole.log(first_non_repeating_character(\"abcdcd\"));\nconsole.log(first_non_repeating_character(\"abcd\"));\nconsole.log(first_non_repeating_character(\"aabbcc\"));\nconsole.log(first_non_repeating_character(\"aabbccddeefghh\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "a\na\nundefined\nf\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let chars: string[] = str1.split('');\n    let char: string;\n    for (let i = 0; i < chars.length; i++) {\n        char = chars[i];\n        if (chars.indexOf(char) == i && chars.indexOf(char, i + 1) == -1) {\n            return char;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let arr = str1.split('');\n  let result: string | undefined;\n  let ctr: number = 0;\n\n  for (let x = 0; x < arr.length; x++) {\n    ctr = 0;\n\n    for (let y = 0; y < arr.length; y++) {\n      if (arr[x] === arr[y]) {\n        ctr += 1;\n      }\n    }\n\n    if (ctr < 2) {\n      result = arr[x];\n      break;\n    }\n  }\n  return result;\n}\n\nconsole.log(first_non_repeating_character('the quick brown fox jumps then quickly blow air'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "f\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n  return undefined;\n}\nconsole.log(first_non_repeating_character(\"abcdab\"));\nconsole.log(first_non_repeating_character(\"abcdabc\"));\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123319,
      "stdout": "c\nd\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charAt(i);\n    if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n      return c;\n    }\n  }\n  return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyz\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"));\nconsole.log(first_non_repeating_character(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "undefined\nundefined\na\nundefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\nconsole.log(first_non_repeating_character('abcdef'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) == str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\nconsole.log(first_non_repeating_character('abcdef'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "e\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    let char: string | undefined;\n    let ctr: number[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (ctr[str.charCodeAt(i)] === undefined) {\n            ctr[str.charCodeAt(i)] = 1;\n        } else {\n            ctr[str.charCodeAt(i)] += 1;\n        }\n    }\n    for (let i = 0; i < str.length; i++) {\n        if (ctr[str.charCodeAt(i)] === 1) {\n            char = str[i];\n            break;\n        }\n    }\n    return char;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let char: string | undefined;\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      char = str[i];\n      break;\n    }\n  }\n  return char;\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "e\ne\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let char: string | undefined;\n  let str = str1.toLowerCase();\n\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      char = str[i];\n      break;\n    }\n  }\n  return char;\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let chars: string[] = str1.split('');\n    let char: string;\n    let charCount: number;\n    for (let i = 0; i < chars.length; i++) {\n        char = chars[i];\n        charCount = 0;\n        for (let j = 0; j < chars.length; j++) {\n            if (char == chars[j]) {\n                charCount += 1;\n            }\n        }\n        if (charCount < 2) {\n            return char;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let arr = str1.split('');\n    let result = arr.find(function (item, index, array) {\n        return array.indexOf(item) === array.lastIndexOf(item);\n    });\n    return result;\n}\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n  return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcdcd\"));\nconsole.log(first_non_repeating_character(\"abcd\"));\nconsole.log(first_non_repeating_character(\"aabbcc\"));\nconsole.log(first_non_repeating_character(\"aabbdbcc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "a\na\nundefined\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n  return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  for (let i = 0; i < str1.length; i++) {\n    const char = str1[i];\n    if (str1.indexOf(char) === i && str1.indexOf(char, i + 1) === -1) {\n      return char;\n    }\n  }\n  return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\nconsole.log(first_non_repeating_character(\"abcbad\"));\nconsole.log(first_non_repeating_character(\"abcabcabc\"));\nconsole.log(first_non_repeating_character(\"aabbcc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "e\nc\nundefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  let ctr = 0;\n  let char = '';\n\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      ctr++;\n      char = str[i];\n      break;\n    }\n  }\n  return ctr === 1 ? char : undefined;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    let ctr: number = 0;\n    let char: string;\n    let charCount: number;\n    for (let i = 0; i < str.length; i++) {\n        charCount = 0;\n        for (let j = 0; j < str.length; j++) {\n            if (str[i] == str[j]) {\n                charCount++;\n            }\n        }\n        if (charCount < 2) {\n            ctr++;\n            char = str[i];\n            if (ctr == 1) {\n                break;\n            }\n        }\n    }\n    return ctr == 1 ? char : undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abcdcd\"));\nconsole.log(first_non_repeating_character(\"abcdcde\"));\nconsole.log(first_non_repeating_character(\"abcdcdef\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "a\na\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let chars: string[] = str1.split(\"\");\n  for (let char of chars) {\n    if (str1.indexOf(char) == str1.lastIndexOf(char)) {\n      return char;\n    }\n  }\n  return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcdcd\"));\nconsole.log(first_non_repeating_character(\"abcd\"));\nconsole.log(first_non_repeating_character(\"aabbdbc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "a\na\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcd\"));\nconsole.log(first_non_repeating_character(\"aabbcc\"));\nconsole.log(first_non_repeating_character(\"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyy\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "undefined\na\nundefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str: string = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c: string = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcdcd\"));\nconsole.log(first_non_repeating_character(\"abcd\"));\nconsole.log(first_non_repeating_character(\"aabbcd\"));\nconsole.log(first_non_repeating_character(\"aabbdb\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "a\na\nc\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n  return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcdcd\"));\nconsole.log(first_non_repeating_character(\"abcdcde\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "a\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    let ctr: number = 0;\n    let char: string;\n    let charCount: number;\n    for (let i = 0; i < str.length; i++) {\n        charCount = 0;\n        for (let j = 0; j < str.length; j++) {\n            if (str[i] === str[j]) {\n                charCount++;\n            }\n        }\n        if (charCount < 2) {\n            ctr++;\n            char = str[i];\n            if (ctr === 1) {\n                break;\n            }\n        }\n    }\n    return ctr === 1 ? char : undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let char: string | undefined;\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            char = str[i];\n            break;\n        }\n    }\n    return char;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdabcdabcd\"));\nconsole.log(first_non_repeating_character(\"abcdeabcd\"));\nconsole.log(first_non_repeating_character(\"abcdeabcdabcde\"));\nconsole.log(first_non_repeating_character(\"abcdeabcdabcdeabcd\"));\nconsole.log(first_non_repeating_character(\"abcdeabcdabcdeabcde\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "undefined\nundefined\ne\nundefined\nundefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    let ctr = 0;\n    let index: number;\n    let nonRepeated: string | undefined;\n\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) == str.lastIndexOf(str[i])) {\n            nonRepeated = str[i];\n            index = i;\n            ctr += 1;\n            break;\n        }\n    }\n    if (ctr == 0) {\n        return undefined;\n    } else {\n        return nonRepeated;\n    }\n}\n\nconsole.log(first_non_repeating_character(\"the quick brown fox jumps then quickly blow air\"));\nconsole.log(first_non_repeating_character(\"the quick brown fox jumps then quickly blow air\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123322,
      "stdout": "f\nf\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let len: number = str1.length;\n    let char: string;\n    let charCount: number;\n    for (let i = 0; i < len; i++) {\n        char = str1[i];\n        charCount = 0;\n        for (let j = 0; j < len; j++) {\n            if (str1[j] === char) {\n                charCount++;\n            }\n        }\n        if (charCount < 2) {\n            return char;\n        }\n    }\n    return undefined;\n}\nconsole.log(first_non_repeating_character(\"the quick brown fox jumps then quickly blow air\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123322,
      "stdout": "f\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    let char: string | undefined;\n    let ctr: number[] = [];\n    for (let i = 0; i < str.length; i++) {\n        if (ctr[str.charCodeAt(i)] === undefined) {\n            ctr[str.charCodeAt(i)] = 1;\n        } else {\n            ctr[str.charCodeAt(i)] += 1;\n        }\n    }\n    for (let i = 0; i < ctr.length; i++) {\n        if (ctr[i] === 1) {\n            char = String.fromCharCode(i);\n            break;\n        }\n    }\n    return char;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    let ctr: number = 0;\n    let char: string;\n    let count: number = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) != ' ') {\n            ctr++;\n            char = str.charAt(i);\n            count = 0;\n            for (let j = 0; j < str.length; j++) {\n                if (str.charAt(j) == char) {\n                    count++;\n                }\n            }\n            if (count < 2) {\n                return char;\n            }\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  let ctr = 0;\n  let char = \"\";\n  let charCount = {};\n  for (let i = 0; i < str.length; i++) {\n    if (charCount[str[i]]) {\n      charCount[str[i]] += 1;\n    } else {\n      charCount[str[i]] = 1;\n    }\n  }\n  for (let j in charCount) {\n    if (charCount[j] == 1) {\n      char = j;\n      break;\n    }\n  }\n  return char;\n}\n\nconsole.log(first_non_repeating_character(\"the quick brown fox jumps then quickly blow air\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123322,
      "stdout": "f\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\nundefined\n    at test (/tmp/tmpzvtogwt_.js:27:12)\n    at Object.<anonymous> (/tmp/tmpzvtogwt_.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: undefined,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    const str: string = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123322,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abcdcd\"));\nconsole.log(first_non_repeating_character(\"abcdcde\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "a\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let arr = str1.split(\"\");\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(arr[i]) === arr.lastIndexOf(arr[i])) {\n      return arr[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abcdcd\"));\nconsole.log(first_non_repeating_character(\"abcd\"));\nconsole.log(first_non_repeating_character(\"aabbdbc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123322,
      "stdout": "a\na\nd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let chars: string[] = str1.split('');\n    let char: string;\n    let charCount: number;\n    for (let i = 0; i < chars.length; i++) {\n        char = chars[i];\n        charCount = 0;\n        for (let j = 0; j < chars.length; j++) {\n            if (char === chars[j]) {\n                charCount++;\n            }\n        }\n        if (charCount < 2) {\n            return char;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let chars: string[] = str1.split('');\n    let char: string;\n    let charCount: number;\n    for (let i = 0; i < chars.length; i++) {\n        char = chars[i];\n        charCount = 0;\n        for (let j = 0; j < chars.length; j++) {\n            if (char == chars[j]) {\n                charCount++;\n            }\n        }\n        if (charCount < 2) {\n            return char;\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  let char: string | undefined;\n  let ctr = 0;\n\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) == i) {\n      for (let j = 0; j < str.length; j++) {\n        if (str[i] == str[j]) {\n          ctr += 1;\n        }\n      }\n      if (ctr < 2) {\n        char = str[i];\n        break;\n      }\n    }\n  }\n  return char;\n}\n\nconsole.log(first_non_repeating_character(\"the quick brown fox jumps then quickly blow air\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123322,
      "stdout": "undefined\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\nshould loosely deep-equal\n\n'c'\n    at test (/tmp/tmpnfybbvmj.js:27:12)\n    at Object.<anonymous> (/tmp/tmpnfybbvmj.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'c',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charAt(i);\n    if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n      return c;\n    }\n  }\n  return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n  return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcdcd\"));\nconsole.log(first_non_repeating_character(\"abcdcde\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123322,
      "stdout": "a\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let char of str) {\n        if (str.indexOf(char) === str.lastIndexOf(char)) {\n            return char;\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character(\"abcdcd\"));\nconsole.log(first_non_repeating_character(\"abcd\"));\nconsole.log(first_non_repeating_character(\"aabbcc\"));\nconsole.log(first_non_repeating_character(\"aabbccddeeff\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123322,
      "stdout": "a\na\nundefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\nconsole.log(first_non_repeating_character(\"abcdcd\"));\nconsole.log(first_non_repeating_character(\"abcd\"));\nconsole.log(first_non_repeating_character(\"aabbcc\"));\nconsole.log(first_non_repeating_character(\"aabbccddeeff\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123322,
      "stdout": "a\na\nundefined\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str: string = str1;\n  for (let i = 0; i < str.length; i++) {\n    let c: string = str.charAt(i);\n    if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n      return c;\n    }\n  }\n  return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123322,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n  let str = str1.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n      return str[i];\n    }\n  }\n}\n\nconsole.log(first_non_repeating_character(\"abacddbec\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\nconsole.log(first_non_repeating_character('abacddbec'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "e\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let arr: string[] = str1.split('');\n    let result: string | undefined;\n    for (let i = 0; i < arr.length; i++) {\n        let count = 0;\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count == 1) {\n            result = arr[i];\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(first_non_repeating_character('the quick brown fox jumps then quickly blow air'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123322,
      "stdout": "f\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str: string = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c: string = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1.toLowerCase();\n    for (let i = 0; i < str.length; i++) {\n        if (str.indexOf(str[i]) === str.lastIndexOf(str[i])) {\n            return str[i];\n        }\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1665517388,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the first non-repeated character in a given string.\nfunction first_non_repeating_character(str1: string): string | undefined {\n    let str = str1;\n    for (let i = 0; i < str.length; i++) {\n        let c = str.charAt(i);\n        if (str.indexOf(c) == i && str.indexOf(c, i + 1) == -1) {\n            return c;\n        }\n    }\n    return undefined;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = first_non_repeating_character;\n  assert.deepEqual(candidate(\"abcabc\"),undefined);\n  assert.deepEqual(candidate(\"abc\"),\"a\");\n  assert.deepEqual(candidate(\"ababc\"),\"c\");\n}\n\ntest();",
      "timestamp": 1666123317,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}