{
  "name": "mbpp_119_search",
  "language": "ts",
  "prompt": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low < high) {\n    let mid = Math.floor((low + high) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        low = mid + 2;\n      } else {\n        high = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return arr[low];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        end = mid - 1;\n      } else {\n        start = mid + 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp43i0dm38.js:36:12)\n    at Object.<anonymous> (/tmp/tmp43i0dm38.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\nconsole.log(search([1, 1, 2, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 7]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 8, 8]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8]));\nconsole.log(search([1, 1, 2, 2, 3,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "../../../../tmp/tmpx6pbsopu.ts(37,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    } else if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 1;\n      } else {\n        start = mid + 1;\n      }\n    }\n  }\n  return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpewv50apu.js:35:12)\n    at Object.<anonymous> (/tmp/tmpewv50apu.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  let mid = Math.floor((low + high) / 2);\n\n  while (low < high) {\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        low = mid + 2;\n      } else {\n        high = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n    mid = Math.floor((low + high) / 2);\n  }\n  return arr[mid];\n}\n\nconsole.log(search([1, 1, 2, 4, 4, 5, 5, 6, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        low = mid + 2;\n      } else {\n        high = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return arr[low];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517427,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        left = mid + 2;\n      } else {\n        right = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        left = mid + 1;\n      } else {\n        right = mid - 1;\n      }\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    } else if (arr[mid] === arr[mid - 1]) {\n      if ((mid - 1) % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if ((mid + 1) % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "-1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpayc43w4o.js:33:12)\n    at Object.<anonymous> (/tmp/tmpayc43w4o.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 4, 4, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "2\n3\n5\n-1\n6\n-1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517427,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    } else if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n\n  while (left < right) {\n    const mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\nconsole.log(search([1, 1, 2, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 7]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 7]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "../../../../tmp/tmpmgntoz4h.ts(38,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n\n  while (left < right) {\n    const mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        mid = Math.floor((low + high) / 2);\n        if (mid === 0 || arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] === arr[mid - 1]) {\n            if (mid % 2 === 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 === 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let lo = 0;\n  let hi = arr.length - 1;\n\n  while (lo < hi) {\n    let mid = Math.floor((lo + hi) / 2);\n    if (mid % 2 === 1) mid--;\n    if (arr[mid] === arr[mid + 1]) lo = mid + 2;\n    else hi = mid;\n  }\n\n  return arr[lo];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        left = mid + 2;\n      } else {\n        right = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        left = mid + 1;\n      } else {\n        right = mid - 1;\n      }\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[start];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 == 0) {\n      if (arr[mid] == arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] == arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        low = mid + 2;\n      } else {\n        high = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return arr[low];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517427,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n\n  while (low <= high) {\n    const mid = Math.floor((low + high) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        low = mid + 2;\n      } else {\n        high = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return arr[low];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517427,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                low = mid + 2;\n            } else {\n                high = mid;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return arr[low];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (arr[mid] === arr[mid - 1]) {\n            if (mid % 2 === 0) {\n                end = mid - 2;\n            } else {\n                start = mid + 1;\n            }\n        } else if (arr[mid] === arr[mid + 1]) {\n            if (mid % 2 === 0) {\n                start = mid + 2;\n            } else {\n                end = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low < high) {\n    let mid = Math.floor((low + high) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        low = mid + 2;\n      } else {\n        high = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return arr[low];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        end = mid - 1;\n      } else {\n        start = mid + 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65, 65]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65, 65, 66]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65, 65, 66, 66]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65, 65, 66, 66, 67]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65, 65, 66, 66, 67, 67]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65, 65, 66, 66, 67, 67, 68]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65, 65, 66, 66, 67, 67, 68,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "../../../../tmp/tmpopki46sy.ts(36,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let left = 0;\n    let right = arr.length - 1;\n    while (left < right) {\n        let mid = Math.floor((left + right) / 2);\n        if (mid % 2 === 0) {\n            if (arr[mid] === arr[mid + 1]) {\n                left = mid + 2;\n            } else {\n                right = mid;\n            }\n        } else {\n            if (arr[mid] === arr[mid - 1]) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n    }\n    return arr[left];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517427,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  let mid = 0;\n  while (start <= end) {\n    mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[mid];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517427,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        low = mid + 2;\n      } else {\n        high = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return arr[low];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517427,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid + 1] && arr[mid] !== arr[mid - 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                start = mid + 2;\n            } else {\n                end = mid;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return arr[start];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    const mid = Math.floor((start + end) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 1;\n      } else {\n        start = mid + 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65, 65, 66]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65, 65, 66, 66]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "1\n1\n1\n1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpugysz5wg.js:39:12)\n    at Object.<anonymous> (/tmp/tmpugysz5wg.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 4, 4, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "2\n3\n5\n-1\n6\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65, 65]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65, 65, 66]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65, 65, 66, 66]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "4\n-1\n65\n66\n-1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let left = 0;\n    let right = arr.length - 1;\n    while (left < right) {\n        let mid = Math.floor((left + right) / 2);\n        if (arr[mid] === arr[mid - 1]) {\n            if (mid % 2 === 0) {\n                right = mid - 2;\n            } else {\n                left = mid + 1;\n            }\n        } else if (arr[mid] === arr[mid + 1]) {\n            if (mid % 2 === 0) {\n                left = mid + 2;\n            } else {\n                right = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        low = mid + 2;\n      } else {\n        high = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return arr[low];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        low = mid + 2;\n      } else {\n        high = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return arr[low];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517427,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517427,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  let mid = Math.floor((start + end) / 2);\n\n  while (start < end) {\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n    mid = Math.floor((start + end) / 2);\n  }\n  return arr[mid];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        low = mid + 2;\n      } else {\n        high = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return arr[low];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 1;\n      } else {\n        start = mid + 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpz45ed3rj.js:36:12)\n    at Object.<anonymous> (/tmp/tmpz45ed3rj.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    const mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  let mid = 0;\n  while (low <= high) {\n    mid = Math.floor((low + high) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        high = mid - 2;\n      } else {\n        low = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        low = mid + 2;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        low = mid + 2;\n      } else {\n        high = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return arr[low];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517427,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123318,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    } else if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123319,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123318,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    const mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123319,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123319,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    } else if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 1;\n      } else {\n        start = mid + 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123319,
      "stdout": "1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpl111vkdg.js:33:12)\n    at Object.<anonymous> (/tmp/tmpl111vkdg.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    } else if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3]));\nconsole.log(search([1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 2, 2]));\nconsole.log(search([1, 1, 2]));\nconsole.log(search([1, 1]));\nconsole.log(search([1]));\nconsole.log(search\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123319,
      "stdout": "../../../../tmp/tmptit48i60.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmptit48i60.ts(43,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123319,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        end = mid - 1;\n      } else {\n        start = mid + 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp43i0dm38.js:36:12)\n    at Object.<anonymous> (/tmp/tmp43i0dm38.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\nconsole.log(search([1, 1, 2, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 7]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 8, 8]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8]));\nconsole.log(search([1, 1, 2, 2, 3,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "../../../../tmp/tmpx6pbsopu.ts(37,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123318,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    } else if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let left = 0;\n    let right = arr.length - 1;\n    while (left < right) {\n        let mid = Math.floor((left + right) / 2);\n        if (arr[mid] == arr[mid - 1]) {\n            if ((mid - left) % 2 == 0) {\n                right = mid - 2;\n            } else {\n                left = mid + 1;\n            }\n        } else if (arr[mid] == arr[mid + 1]) {\n            if ((right - mid) % 2 == 0) {\n                left = mid + 2;\n            } else {\n                right = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123319,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    const mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123319,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123319,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        end = mid - 1;\n      } else {\n        start = mid + 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp43i0dm38.js:36:12)\n    at Object.<anonymous> (/tmp/tmp43i0dm38.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517427,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  let mid = Math.floor((start + end) / 2);\n  while (start <= end) {\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n    mid = Math.floor((start + end) / 2);\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123319,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123318,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    } else if (arr[mid] === arr[mid - 1]) {\n      if ((mid - 1) % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if ((mid + 1) % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "-1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpayc43w4o.js:33:12)\n    at Object.<anonymous> (/tmp/tmpayc43w4o.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123318,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid + 1] && arr[mid] !== arr[mid - 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123318,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        low = mid + 2;\n      } else {\n        high = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return arr[low];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 4, 4, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9, 9]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123334,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        mid = Math.floor((low + high) / 2);\n        if (mid == 0 || mid == arr.length - 1) {\n            return arr[mid];\n        }\n        if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n            return arr[mid];\n        }\n        if (arr[mid] == arr[mid - 1]) {\n            if (mid % 2 == 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else {\n            if (mid % 2 == 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123319,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    }\n    if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 4, 4, 5, 5, 6, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123319,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  let mid = 0;\n  while (low <= high) {\n    mid = Math.floor((low + high) / 2);\n    if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n      return arr[mid];\n    } else if (arr[mid] == arr[mid - 1]) {\n      if (mid % 2 == 0) {\n        high = mid - 2;\n      } else {\n        low = mid + 1;\n      }\n    } else if (arr[mid] == arr[mid + 1]) {\n      if (mid % 2 == 0) {\n        low = mid + 2;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123319,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        low = mid + 2;\n      } else {\n        high = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return arr[low];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low < high) {\n    let mid = Math.floor((low + high) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        high = mid - 2;\n      } else {\n        low = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        low = mid + 2;\n      } else {\n        high = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[low];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123319,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    const mid = Math.floor((start + end) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  let mid = 0;\n  while (start <= end) {\n    mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[mid];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\nconsole.log(search([1, 1, 2, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 8]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123321,
      "stdout": "../../../../tmp/tmphz4dizp6.ts(36,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517427,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517427,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 4, 4, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9]));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123321,
      "stdout": "../../../../tmp/tmpfbvps1_n.ts(37,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    const mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123319,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 4, 4, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]));\nconsole.log(search\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123321,
      "stdout": "../../../../tmp/tmp_u5m9uxp.ts(44,1): error TS1005: ',' expected.\n../../../../tmp/tmp_u5m9uxp.ts(44,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    const mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if ((mid - left) % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if ((right - mid) % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\nconsole.log(search([1, 1, 2, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8]));\nconsole.log(search([1, 1, 2, 2,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123321,
      "stdout": "../../../../tmp/tmpqdrcco7q.ts(37,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (mid % 2 === 0) {\n            if (arr[mid] === arr[mid + 1]) {\n                start = mid + 2;\n            } else {\n                end = mid;\n            }\n        } else {\n            if (arr[mid] === arr[mid - 1]) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return arr[start];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        left = mid + 2;\n      } else {\n        right = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        left = mid + 1;\n      } else {\n        right = mid - 1;\n      }\n    }\n  }\n\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123322,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        end = mid - 1;\n      } else {\n        start = mid + 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp43i0dm38.js:36:12)\n    at Object.<anonymous> (/tmp/tmp43i0dm38.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517427,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        end = mid - 1;\n      } else {\n        start = mid + 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123322,
      "stdout": "1\n1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpfi1y3qus.js:37:12)\n    at Object.<anonymous> (/tmp/tmpfi1y3qus.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123322,
      "stdout": "2\n-1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        low = mid + 2;\n      } else {\n        high = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return arr[low];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517427,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 1;\n      } else {\n        start = mid + 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123322,
      "stdout": "1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp9_bgvuq7.js:33:12)\n    at Object.<anonymous> (/tmp/tmp9_bgvuq7.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    } else if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123322,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  if (arr.length === 1) return arr[0];\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 4, 4, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123322,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (arr[mid] === arr[mid - 1]) {\n            if (mid % 2 === 0) {\n                high = mid - 2;\n            } else {\n                low = mid + 1;\n            }\n        } else if (arr[mid] === arr[mid + 1]) {\n            if (mid % 2 === 0) {\n                low = mid + 2;\n            } else {\n                high = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\nconsole.log(search([1, 1, 2, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123322,
      "stdout": "4\n2\n3\n6\n-1\n7\n-1\n8\n-1\n9\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    const mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123319,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    const mid = Math.floor((start + end) / 2);\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    } else if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        end = mid - 1;\n      } else {\n        start = mid + 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123322,
      "stdout": "-1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp2n4_fo9e.js:33:12)\n    at Object.<anonymous> (/tmp/tmp2n4_fo9e.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    const mid = Math.floor((low + high) / 2);\n    if (mid === 0 || arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        high = mid - 2;\n      } else {\n        low = mid + 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        low = mid + 2;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 4, 4, 5, 5, 6, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123322,
      "stdout": "2\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  let mid = 0;\n  while (low <= high) {\n    mid = Math.floor((low + high) / 2);\n    if (mid == 0 || mid == arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1]) {\n      return arr[mid];\n    } else if (arr[mid] == arr[mid - 1]) {\n      if (mid % 2 == 0) {\n        high = mid - 2;\n      } else {\n        low = mid + 1;\n      }\n    } else if (arr[mid] == arr[mid + 1]) {\n      if (mid % 2 == 0) {\n        low = mid + 2;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123322,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123318,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        left = mid + 2;\n      } else {\n        right = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        left = mid + 1;\n      } else {\n        right = mid - 1;\n      }\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        left = mid + 2;\n      } else {\n        right = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        left = mid + 1;\n      } else {\n        right = mid - 1;\n      }\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    } else if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3]));\nconsole.log(search([1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 2, 2]));\nconsole.log(search([1, 1, 2]));\nconsole.log(search([1, 1]));\nconsole.log(search([1]));\nconsole.log(search\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123319,
      "stdout": "../../../../tmp/tmptit48i60.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmptit48i60.ts(43,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517427,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (mid % 2 === 0) {\n            if (arr[mid] === arr[mid + 1]) {\n                start = mid + 2;\n            } else {\n                end = mid;\n            }\n        } else {\n            if (arr[mid] === arr[mid - 1]) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123337,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    let mid = Math.floor((start + end) / 2);\n    while (start < end) {\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                start = mid + 2;\n            } else {\n                end = mid;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    return arr[mid];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123324,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        end = mid - 1;\n      } else {\n        start = mid + 1;\n      }\n    }\n  }\n\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123324,
      "stdout": "1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp_r_ligyb.js:36:12)\n    at Object.<anonymous> (/tmp/tmp_r_ligyb.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (mid % 2 === 0) {\n            if (arr[mid] === arr[mid + 1]) {\n                low = mid + 2;\n            } else {\n                high = mid;\n            }\n        } else {\n            if (arr[mid] === arr[mid - 1]) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return arr[low];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123338,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    }\n    if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123324,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 1;\n      } else {\n        start = mid + 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\nconsole.log(search([1, 1, 2, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 4, 4, 5, 5, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8])\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123324,
      "stdout": "../../../../tmp/tmp3mig6nf4.ts(39,1): error TS1005: ',' expected.\n../../../../tmp/tmp3mig6nf4.ts(39,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n    if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 1;\n      } else {\n        start = mid + 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65, 65]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3]));\nconsole.log(search([1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 2, 2]));\nconsole.log(search([1, 1, 2]));\nconsole.log(search([1, 1]));\nconsole.log(search([1]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123324,
      "stdout": "1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpx1irh6ik.js:48:12)\n    at Object.<anonymous> (/tmp/tmpx1irh6ik.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  let mid = Math.floor((start + end) / 2);\n\n  while (start < end) {\n    if (mid % 2 == 0) {\n      if (arr[mid] == arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] == arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n    mid = Math.floor((start + end) / 2);\n  }\n  return arr[mid];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123324,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        low = mid + 2;\n      } else {\n        high = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return arr[low];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517427,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    } else if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123322,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123318,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (mid % 2 == 0) {\n      if (arr[mid] == arr[mid + 1]) {\n        low = mid + 2;\n      } else {\n        high = mid;\n      }\n    } else {\n      if (arr[mid] == arr[mid - 1]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return arr[low];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    if (arr.length === 1) {\n        return arr[0];\n    }\n    let left = 0;\n    let right = arr.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (mid % 2 === 0) {\n            if (arr[mid] === arr[mid + 1]) {\n                left = mid + 2;\n            } else {\n                right = mid;\n            }\n        } else {\n            if (arr[mid] === arr[mid - 1]) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n    }\n    return arr[left];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (mid % 2 === 0) {\n            if (arr[mid] === arr[mid + 1]) {\n                start = mid + 2;\n            } else {\n                end = mid;\n            }\n        } else {\n            if (arr[mid] === arr[mid - 1]) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123337,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 == 0) {\n      if (arr[mid] == arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] == arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    const mid = Math.floor((left + right) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        left = mid + 2;\n      } else {\n        right = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        left = mid + 1;\n      } else {\n        right = mid - 1;\n      }\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123324,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123318,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 1;\n      } else {\n        start = mid + 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpz45ed3rj.js:36:12)\n    at Object.<anonymous> (/tmp/tmpz45ed3rj.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        low = mid + 2;\n      } else {\n        high = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return arr[low];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 4, 4, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123325,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        low = mid + 2;\n      } else {\n        high = mid;\n      }\n    } else if (arr[mid] === arr[mid - 1]) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n  }\n  return arr[low];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        low = mid + 2;\n      } else {\n        high = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return arr[low];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517427,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123326,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                low = mid + 2;\n            } else {\n                high = mid;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return arr[low];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123341,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\nconsole.log(search([1, 1, 2, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3]));\nconsole.log(search([1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 2, 2]));\nconsole.log(search([1, 1, 2]));\nconsole.log(search([1, 1]));\nconsole.log(search([1]));\nconsole.log(search([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123326,
      "stdout": "4\n2\n3\n6\nundefined\n5\nundefined\n4\nundefined\n3\nundefined\n2\nundefined\n1\nundefined\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        end = mid - 1;\n      } else {\n        start = mid + 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp43i0dm38.js:36:12)\n    at Object.<anonymous> (/tmp/tmp43i0dm38.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    } else if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123326,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        low = mid + 2;\n      } else {\n        high = mid;\n      }\n    } else if (mid % 2 === 1) {\n      if (arr[mid] === arr[mid - 1]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return arr[low];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123341,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    const mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123319,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65, 65]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65, 65, 66]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65, 65, 66, 66]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65, 65, 66, 66, 67]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 50, 50, 65, 65, 66, 66, 67, 67]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "4\n-1\n65\n66\n-1\n67\n-1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        low = mid + 2;\n      } else {\n        high = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return arr[low];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517427,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  let mid = Math.floor((start + end) / 2);\n  while (start <= end) {\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n    mid = Math.floor((start + end) / 2);\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\nconsole.log(search([1, 1, 2, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]));\nconsole.log(search([1, 1, 2, 2, 3, 3,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "../../../../tmp/tmp6zlsfmsd.ts(38,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        low = mid + 2;\n      } else {\n        high = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return arr[low];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517427,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    const mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if ((mid - 1) % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123327,
      "stdout": "-1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely deep-equal\n\n8\n    at test (/tmp/tmp6yy4_i5l.js:37:12)\n    at Object.<anonymous> (/tmp/tmp6yy4_i5l.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                start = mid + 2;\n            } else {\n                end = mid;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123343,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517427,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        low = mid + 2;\n      } else {\n        high = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return arr[low];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        end = mid - 1;\n      } else {\n        start = mid + 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp43i0dm38.js:36:12)\n    at Object.<anonymous> (/tmp/tmp43i0dm38.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    } else if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123329,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    const mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123329,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                start = mid + 2;\n            } else {\n                end = mid;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return arr[start];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    const mid = Math.floor((start + end) / 2);\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123329,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (mid % 2 == 0) {\n            if (arr[mid] == arr[mid + 1]) {\n                low = mid + 2;\n            } else {\n                high = mid;\n            }\n        } else {\n            if (arr[mid] == arr[mid - 1]) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return arr[low];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        low = mid + 2;\n      } else {\n        high = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n  }\n  return arr[low];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123344,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    const mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    const mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4]));\nconsole.log(search([1, 1, 2, 2, 3, 3]));\nconsole.log(search([1, 1, 2, 2, 3]));\nconsole.log(search([1, 1, 2, 2]));\nconsole.log(search([1, 1, 2]));\nconsole.log(search([1, 1]));\nconsole.log(search([1]));\nconsole.log(search([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "2\n-1\n6\n-1\n5\n-1\n4\n-1\n3\n-1\n2\n1\n1\n-1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 == 0) {\n      if (arr[mid] == arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] == arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  let mid = 0;\n  while (start <= end) {\n    mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        end = mid - 1;\n      } else {\n        start = mid + 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpgfjzz28s.js:37:12)\n    at Object.<anonymous> (/tmp/tmpgfjzz28s.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123318,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517427,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    } else if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 4, 4, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]));\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "3\n5\n-1\n6\n-1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let left = 0;\n  let right = arr.length - 1;\n  while (left < right) {\n    let mid = Math.floor((left + right) / 2);\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        right = mid - 2;\n      } else {\n        left = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        left = mid + 2;\n      } else {\n        right = mid - 1;\n      }\n    } else {\n      return arr[mid];\n    }\n  }\n  return arr[left];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123316,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517427,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (mid % 2 === 0) {\n            if (arr[mid] === arr[mid + 1]) {\n                start = mid + 2;\n            } else {\n                end = mid;\n            }\n        } else {\n            if (arr[mid] === arr[mid - 1]) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return arr[start];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123336,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid % 2 === 0) {\n      if (arr[mid] === arr[mid + 1]) {\n        start = mid + 2;\n      } else {\n        end = mid;\n      }\n    } else {\n      if (arr[mid] === arr[mid - 1]) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123331,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        end = mid - 1;\n      } else {\n        start = mid + 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp43i0dm38.js:36:12)\n    at Object.<anonymous> (/tmp/tmp43i0dm38.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        end = mid - 1;\n      } else {\n        start = mid + 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmp43i0dm38.js:36:12)\n    at Object.<anonymous> (/tmp/tmp43i0dm38.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    } else if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return arr[start];\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123332,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    }\n    if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    }\n    if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1666123324,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the element that appears only once in a sorted array.\nfunction search(arr: number[]): number {\n  let start = 0;\n  let end = arr.length - 1;\n  while (start <= end) {\n    let mid = Math.floor((start + end) / 2);\n    if (mid === 0 || mid === arr.length - 1) {\n      return arr[mid];\n    }\n    if (arr[mid] !== arr[mid - 1] && arr[mid] !== arr[mid + 1]) {\n      return arr[mid];\n    } else if (arr[mid] === arr[mid - 1]) {\n      if (mid % 2 === 0) {\n        end = mid - 2;\n      } else {\n        start = mid + 1;\n      }\n    } else if (arr[mid] === arr[mid + 1]) {\n      if (mid % 2 === 0) {\n        start = mid + 2;\n      } else {\n        end = mid - 1;\n      }\n    }\n  }\n  return -1;\n}\n\nconsole.log(search([1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = search;\n  assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);\n  assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);\n}\n\ntest();",
      "timestamp": 1665517412,
      "stdout": "4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}