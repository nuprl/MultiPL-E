{
  "name": "mbpp_95_Find_Min_Length",
  "language": "ts",
  "prompt": "//Write a tsthon function to find the length of the smallest array in an array of arrays.\nfunction Find_Min_Length(lst: number[][]): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_95_Find_Min_Length.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Min_Length;\n  assert.deepEqual(candidate([[1], [1, 2]]),1);\n  assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);\n  assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let min_length = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n",
    "    var min: number = lst[0].length;\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n",
    "    let min_length: number = lst[0].length;\n    for (let i: number = 1; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n",
    "    let min_length = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n",
    "    let min = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n",
    "    let min = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n",
    "    let min = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n",
    "    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n",
    "    let min_length: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n",
    "    let min_length: number = lst[0].length;\n    for (let i: number = 1; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n",
    "    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n",
    "    let min = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n",
    "    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n",
    "    let min_length: number = lst[0].length;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n",
    "    let min: number = lst[0].length;\n    for (let i = 1; i < lst.length; i++) {\n        if (min > lst[i].length) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n",
    "    let min = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n",
    "    let min_length: number = lst[0].length;\n    for (let i: number = 1; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n",
    "    let min_length = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n",
    "    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n",
    "    let min: number = lst[0].length;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length < min) {\n            min = lst[i].length;\n        }\n    }\n    return min;\n}\n"
  ]
}