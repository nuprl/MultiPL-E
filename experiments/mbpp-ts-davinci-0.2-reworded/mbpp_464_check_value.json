{
  "name": "mbpp_464_check_value",
  "language": "ts",
  "prompt": "//Write a function to check if all values are same in an object.\nfunction check_value(dict: {[key: string]: number}, n: number): boolean {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_464_check_value.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_value;\n  assert.deepEqual(candidate({\"Cierra Vega\": 12, \"Alden Cantrell\": 12, \"Kierra Gentry\": 12, \"Pierre Cox\": 12}, 10),false);\n  assert.deepEqual(candidate({\"Cierra Vega\": 12, \"Alden Cantrell\": 12, \"Kierra Gentry\": 12, \"Pierre Cox\": 12}, 12),true);\n  assert.deepEqual(candidate({\"Cierra Vega\": 12, \"Alden Cantrell\": 12, \"Kierra Gentry\": 12, \"Pierre Cox\": 12}, 5),false);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    for (let key in dict) {\n        if (dict[key] !== n) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    for (let key in dict) {\n        if (dict[key] != n) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    for (let key in dict) {\n        if (dict[key] != n) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    for (let key in dict) {\n        if (dict[key] !== n) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    for (let key in dict) {\n        if (dict[key] != n) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    for (let key in dict) {\n        if (dict[key] !== n) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    for (let key in dict) {\n        if (dict[key] != n) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    for (let key in dict) {\n        if (dict[key] !== n) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    for (let key in dict) {\n        if (dict[key] !== n) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    for (let key in dict) {\n        if (dict[key] != n) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    for (let key in dict) {\n        if (dict[key] != n) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    for (let key in dict) {\n        if (dict[key] != n) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    for (let key in dict) {\n        if (dict[key] != n) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    for(let key in dict) {\n        if(dict[key] !== n) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    for (let key in dict) {\n        if (dict[key] !== n) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(check_value({a: 1, b: 1, c: 1}, 1));\nconsole.log(check_value({a: 1, b: 1, c: 1}, 2));\nconsole.log(check_value({a: 1, b: 1, c: 2}, 1));\n",
    "    for (let key in dict) {\n        if (dict[key] != n) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    for (let key in dict) {\n        if (dict[key] != n) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    for (let key in dict) {\n        if (dict[key] !== n) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    for (let key in dict) {\n        if (dict[key] != n) {\n            return false;\n        }\n    }\n    return true;\n}\n",
    "    for (let key in dict) {\n        if (dict[key] != n) {\n            return false;\n        }\n    }\n    return true;\n}\n"
  ]
}