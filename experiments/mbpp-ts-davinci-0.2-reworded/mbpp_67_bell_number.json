{
  "name": "mbpp_67_bell_number",
  "language": "ts",
  "prompt": "//Write a function to find the number of ways to partition a set of Bell numbers.\nfunction bell_number(n: number): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_67_bell_number.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bell_number;\n  assert.deepEqual(candidate(2),2);\n  assert.deepEqual(candidate(10),115975);\n  assert.deepEqual(candidate(56),6775685320645824322581483068371419745979053216268760300);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [bell[i - 1][i - 1]];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] + (j > 0 ? bell[i][j - 1] : 0));\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [...Array(n + 1)].map(() => [...Array(n + 1)].map(() => 0));\n    bell[0][0] = 1;\n    for (let i = 1; i <= n; i++) {\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j < i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    if (n < 0) {\n        return 0;\n    }\n    if (n === 0) {\n        return 1;\n    }\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += bell_number(i) * bell_number(n - 1 - i);\n    }\n    return sum;\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "  let bell = [[1]];\n  for (let i = 1; i <= n; i++) {\n    bell[i] = [];\n    for (let j = 0; j < i; j++) {\n      bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n    }\n  }\n  return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            if (j === 0) {\n                bell[i][j] = bell[i - 1].reduce((a, b) => a + b);\n            } else {\n                bell[i][j] = bell[i - 1][j - 1];\n            }\n        }\n    }\n    return bell[n].reduce((a, b) => a + b);\n}\n",
    "    var bell = [[1]];\n    for (var i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (var j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "  let bell = [1];\n  for (let i = 1; i <= n; i++) {\n    let s = 0;\n    for (let j = 0; j < i; j++) {\n      s += bell[j] * bell[i - 1 - j];\n    }\n    bell.push(s);\n  }\n  return bell[n];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell[i][j] = (j > 0 ? bell[i - 1][j - 1] : 0) + (j < i ? bell[i - 1][j] : 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell_triangle = [[1], [1, 1]];\n    for (let i = 2; i <= n; i++) {\n        bell_triangle[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell_triangle[i][j] = bell_triangle[i - 1][j - 1] + bell_triangle[i][j - 1];\n        }\n    }\n    return bell_triangle[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] + bell[i][j - 1]) % 100000;\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] + bell[i][j - 1]) % 1000000007;\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "  let bell = [[1]];\n  for (let i = 1; i <= n; i++) {\n    bell[i] = [];\n    for (let j = 0; j <= i; j++) {\n      bell[i][j] =\n        (bell[i - 1][j - 1] || 0) +\n        (bell[i][j - 1] || 0) +\n        (bell[i - 1][j] || 0);\n    }\n  }\n  return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [...Array(n + 1)].map(() => Array(n + 1).fill(0));\n    bell[0][0] = 1;\n    for (let i = 1; i <= n; i++) {\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell: number[][] = [];\n    bell[0] = [1];\n    bell[1] = [1, 1];\n    for (let i = 2; i <= n; i++) {\n        bell[i] = [1];\n        for (let j = 1; j < i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n        bell[i][i] = 1;\n    }\n    return bell[n][n - 1];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell: number[][] = [];\n    bell[0] = [1];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell[i][j] = (j > 0 ? bell[i - 1][j - 1] : 0) + (bell[i - 1][j] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell: number[][] = [];\n    bell[0] = [1];\n    bell[1] = [1, 1];\n    for (let i = 2; i <= n; i++) {\n        bell[i] = [1];\n        for (let j = 1; j < i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n        bell[i][i] = 1;\n    }\n    return bell[n][n - 1];\n}\n",
    "    let bell: number[][] = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "  let bell = [[1]];\n  for (let i = 1; i <= n; i++) {\n    bell[i] = [];\n    bell[i][0] = bell[i - 1][i - 1];\n    for (let j = 1; j <= i; j++) {\n      bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n    }\n  }\n  return bell[n][0];\n}\n",
    "    let bell: number[][] = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j < i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "\tlet bell = [[1]];\n\tfor (let i = 1; i <= n; i++) {\n\t\tbell[i] = [];\n\t\tbell[i][0] = bell[i - 1][i - 1];\n\t\tfor (let j = 1; j <= i; j++) {\n\t\t\tbell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n\t\t}\n\t}\n\treturn bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell: number[][] = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] + bell[i][j - 1]);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell: number[][] = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] + bell[i][j - 1])\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j < i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell: number[][] = [];\n    bell[0] = [1];\n    bell[1] = [1, 1];\n    for (let i = 2; i <= n; i++) {\n        bell[i] = [1];\n        for (let j = 1; j < i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n        bell[i][i] = 1;\n    }\n    return bell[n][n - 1];\n}\n",
    "    let bell: number[][] = [];\n    bell[0] = [1];\n    bell[1] = [1, 1];\n    for (let i = 2; i <= n; i++) {\n        bell[i] = [1];\n        for (let j = 1; j < i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n        bell[i][i] = 1;\n    }\n    return bell[n][n - 1];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell[i][j] = (j === 0) ? bell[i - 1][i - 1] : bell[i][j - 1] + bell[i - 1][j - 1];\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j < i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "  let bell = [[1]];\n  for (let i = 1; i <= n; i++) {\n    bell[i] = [];\n    for (let j = 0; j <= i; j++) {\n      if (j === 0) {\n        bell[i][j] = bell[i - 1].reduce((a, b) => a + b);\n      } else {\n        bell[i][j] = bell[i - 1][j - 1];\n      }\n    }\n  }\n  return bell[n].reduce((a, b) => a + b);\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] + bell[i][j - 1]) % 1000000007;\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell: number[][] = [];\n    bell[0] = [1];\n    bell[1] = [1, 1];\n    for (let i = 2; i <= n; i++) {\n        bell[i] = [1];\n        for (let j = 1; j < i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n        bell[i][i] = 1;\n    }\n    return bell[n][n - 1];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell[i][j] = (j > 0 ? bell[i - 1][j - 1] : 0) + (bell[i - 1][j] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] + bell[i][j - 1]) % 1000000007;\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "  let bell = [[1]];\n  for (let i = 1; i <= n; i++) {\n    bell[i] = [];\n    bell[i][0] = bell[i - 1][i - 1];\n    for (let j = 1; j <= i; j++) {\n      bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n    }\n  }\n  return bell[n][0];\n}\n",
    "    let bell: number[][] = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] + bell[i][j - 1]);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell.push([]);\n        for (let j = 0; j < i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j < i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j < i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j < i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell: number[][] = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] + bell[i][j - 1]) % 1000000007;\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] + bell[i][j - 1]) % 1000000007;\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [bell[i - 1][i - 1]];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell: number[][] = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] + bell[i][j - 1]);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] + bell[i][j - 1]) % 1000000007;\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell: number[][] = [];\n    bell[0] = [1];\n    bell[1] = [1, 1];\n\n    for (let i = 2; i <= n; i++) {\n        bell[i] = [1];\n        for (let j = 1; j < i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n        bell[i][i] = 1;\n    }\n    return bell[n][n - 1];\n}\n",
    "  let bell = [[1]];\n  for (let i = 1; i <= n; i++) {\n    bell[i] = [];\n    for (let j = 0; j <= i; j++) {\n      if (j === 0) {\n        bell[i][j] = bell[i - 1].reduce((a, b) => a + b, 0);\n      } else {\n        bell[i][j] = bell[i - 1][j - 1];\n      }\n    }\n  }\n  return bell[n].reduce((a, b) => a + b, 0);\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] || 0;\n            bell[i][j] += (bell[i - 1][j] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j < i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell: number[][] = [];\n    bell[0] = [1];\n    bell[1] = [1, 1];\n    for (let i = 2; i <= n; i++) {\n        bell[i] = [1];\n        for (let j = 1; j < i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n        bell[i][i] = 1;\n    }\n    return bell[n][n - 1];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j < i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] + bell[i][j - 1]) % 1000000007;\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j < i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell: number[][] = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    if (n < 0) {\n        return 0;\n    }\n    if (n == 0) {\n        return 1;\n    }\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += bell_number(i) * bell_number(n - 1 - i);\n    }\n    return sum;\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "  let bell = [[1]];\n  for (let i = 1; i <= n; i++) {\n    bell[i] = [];\n    for (let j = 0; j < i; j++) {\n      bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n    }\n  }\n  return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] + bell[i][j - 1]) % 1000000007;\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell: number[][] = [];\n    bell[0] = [1];\n    bell[1] = [1, 1];\n    for (let i = 2; i <= n; i++) {\n        bell[i] = [bell[i - 1][0]];\n        for (let j = 1; j < i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n        bell[i].push(1);\n    }\n    return bell[n][n - 1];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell_triangle = [[1], [1, 1]];\n    for (let i = 2; i <= n; i++) {\n        bell_triangle[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell_triangle[i][j] = (j === 0 ? 0 : bell_triangle[i - 1][j - 1]) + (j === i ? 0 : bell_triangle[i][j - 1]);\n        }\n    }\n    return bell_triangle[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j < i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j < i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j < i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell: number[][] = [];\n    bell[0] = [1];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [bell[i - 1][i - 1]];\n        for (let j = 1; j < i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n        bell[i][i] = bell[i][i - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j <= i; j++) {\n            if (j == 0) {\n                bell[i][j] = bell[i - 1].reduce((a, b) => a + b);\n            } else {\n                bell[i][j] = bell[i - 1][j - 1];\n            }\n        }\n    }\n    return bell[n].reduce((a, b) => a + b);\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++)\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n    }\n    return bell[n][0];\n}\n",
    "    let bell: number[][] = [];\n    bell[0] = [1];\n    bell[1] = [1, 1];\n    for (let i: number = 2; i <= n; i++) {\n        bell[i] = [1];\n        for (let j: number = 1; j <= i - 1; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n        bell[i][i] = 1;\n    }\n    return bell[n][n - 1];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell: number[][] = [];\n    bell[0] = [1];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        for (let j = 0; j < i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n",
    "    let bell_triangle = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell_triangle.push([]);\n        for (let j = 0; j <= i; j++) {\n            let sum = 0;\n            if (j > 0) {\n                sum += bell_triangle[i - 1][j - 1];\n            }\n            if (j < i) {\n                sum += bell_triangle[i][j - 1];\n            }\n            bell_triangle[i].push(sum);\n        }\n    }\n    return bell_triangle[n][0];\n}\n",
    "    let bell = [[1]];\n    for (let i = 1; i <= n; i++) {\n        bell[i] = [];\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = (bell[i - 1][j - 1] || 0) + (bell[i][j - 1] || 0);\n        }\n    }\n    return bell[n][0];\n}\n"
  ]
}