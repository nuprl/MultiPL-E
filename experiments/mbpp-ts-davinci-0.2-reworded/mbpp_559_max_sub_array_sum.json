{
  "name": "mbpp_559_max_sub_array_sum",
  "language": "ts",
  "prompt": "//Write a function to find the sum of the largest contiguous subarray in the given array.\nfunction max_sub_array_sum(a: number[], size: number): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sub_array_sum;\n  assert.deepEqual(candidate([-2, -3, 4, -1, -2, 1, 5, -3], 8),7);\n  assert.deepEqual(candidate([-3, -4, 5, -2, -3, 2, 6, -4], 8),8);\n  assert.deepEqual(candidate([-4, -5, 6, -3, -4, 3, 7, -5], 8),10);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let max_so_far = Number.MIN_SAFE_INTEGER,\n        max_ending_here = 0;\n\n    for (let i = 0; i < size; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n    }\n    return max_so_far;\n}\n",
    "    let max_so_far = Number.MIN_SAFE_INTEGER,\n        max_ending_here = 0;\n\n    for (let i = 0; i < size; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n    }\n    return max_so_far;\n}\n",
    "    let max_so_far = 0,\n        max_ending_here = 0;\n\n    for (let i = 0; i < size; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        /* Do not compare for all elements. Compare only    \n           when  max_ending_here > 0 */\n        else if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;\n}\n",
    "    let max_so_far = 0,\n        max_ending_here = 0;\n\n    for (let i = 0; i < size; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        /* Do not compare for all elements. Compare only    \n           when  max_ending_here > 0 */\n        else if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;\n}\n",
    "  let max_so_far = 0,\n    max_ending_here = 0;\n\n  for (let i = 0; i < size; i++) {\n    max_ending_here = max_ending_here + a[i];\n    if (max_ending_here < 0) max_ending_here = 0;\n    /* Do not compare for all elements. Compare only    \n       when  max_ending_here > 0 */\n    else if (max_so_far < max_ending_here)\n      max_so_far = max_ending_here;\n  }\n  return max_so_far;\n}\n",
    "    let max_so_far = 0, max_ending_here = 0;\n\n    for (let i = 0; i < size; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        /* Do not compare for all elements. Compare only    \n           when  max_ending_here > 0 */\n        else if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;\n}\n",
    "    let max_so_far = Number.MIN_SAFE_INTEGER,\n        max_ending_here = 0;\n\n    for (let i = 0; i < size; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n    }\n    return max_so_far;\n}\n\nconsole.log(max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8));\n",
    "    let max_so_far = 0,\n        max_ending_here = 0;\n\n    for (let i = 0; i < size; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        /* Do not compare for all elements. Compare only    \n           when  max_ending_here > 0 */\n        else if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;\n}\n",
    "    let max_so_far = Number.MIN_SAFE_INTEGER,\n        max_ending_here = 0;\n\n    for (let i = 0; i < size; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n    }\n    return max_so_far;\n}\n",
    "    let max_so_far = Number.MIN_SAFE_INTEGER,\n        max_ending_here = 0;\n\n    for (let i = 0; i < size; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n    }\n    return max_so_far;\n}\n",
    "    let max_so_far = Number.MIN_SAFE_INTEGER,\n        max_ending_here = 0;\n\n    for (let i = 0; i < size; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n    }\n    return max_so_far;\n}\n",
    "    let max_so_far = 0,\n        max_ending_here = 0;\n\n    for (let i = 0; i < size; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        /* Do not compare for all elements. Compare only    \n           when  max_ending_here > 0 */\n        else if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;\n}\n",
    "    let max_so_far = 0,\n        max_ending_here = 0;\n\n    for (let i = 0; i < size; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        /* Do not compare for all elements. Compare only    \n           when  max_ending_here > 0 */\n        else if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;\n}\n",
    "    let max_so_far = Number.MIN_SAFE_INTEGER,\n        max_ending_here = 0;\n\n    for (let i = 0; i < size; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n    }\n    return max_so_far;\n}\n",
    "    let max_so_far = 0,\n        max_ending_here = 0;\n\n    for (let i = 0; i < size; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        /* Do not compare for all elements. Compare only    \n           when  max_ending_here > 0 */\n        else if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;\n}\n",
    "  let max_so_far = 0,\n    max_ending_here = 0;\n\n  for (let i = 0; i < size; i++) {\n    max_ending_here = max_ending_here + a[i];\n    if (max_ending_here < 0) max_ending_here = 0;\n    /* Do not compare for all elements. Compare only    \n       when  max_ending_here > 0 */\n    else if (max_so_far < max_ending_here)\n      max_so_far = max_ending_here;\n  }\n  return max_so_far;\n}\n",
    "    let max_so_far = 0,\n        max_ending_here = 0;\n\n    for (let i = 0; i < size; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        /* Do not compare for all elements. Compare only    \n        when  max_ending_here > 0 */\n        else if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;\n}\n",
    "    let max_so_far = Number.MIN_SAFE_INTEGER,\n        max_ending_here = 0;\n\n    for (let i = 0; i < size; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n    }\n    return max_so_far;\n}\n",
    "    let max_so_far = 0, max_ending_here = 0;\n\n    for (let i = 0; i < size; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        /* Do not compare for all elements. Compare only    \n           when  max_ending_here > 0 */\n        else if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;\n}\n",
    "    let max_so_far = 0,\n        max_ending_here = 0;\n\n    for (let i = 0; i < size; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        /* Do not compare for all elements. Compare only    \n           when  max_ending_here > 0 */\n        else if (max_so_far < max_ending_here)\n            max_so_far = max_ending_here;\n    }\n    return max_so_far;\n}\n"
  ]
}