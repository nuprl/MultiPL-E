{
  "name": "mbpp_447_cube_nums",
  "language": "ts",
  "prompt": "//Write a function to find cubes of individual elements in an array.\nfunction cube_nums(nums: number[]): number[] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = cube_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n  assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);\n  assert.deepEqual(candidate([12, 15]),[1728, 3375]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    return nums.map(function (num) {\n        return num ** 3;\n    });\n}\n\nconsole.log(cube_nums([1, 2, 3]));\n",
    "    return nums.map(function (num) {\n        return num ** 3;\n    });\n}\n\nconsole.log(cube_nums([1, 2, 3]));\n",
    "    return nums.map(num => num ** 3);\n}\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n",
    "    return nums.map(x => x * x * x);\n}\n",
    "    return nums.map(x => x * x * x);\n}\n",
    "    return nums.map(num => num ** 3);\n}\n",
    "    return nums.map(num => num ** 3);\n}\n",
    "    var cubes: number[] = [];\n    for (var i = 0; i < nums.length; i++) {\n        cubes.push(nums[i] * nums[i] * nums[i]);\n    }\n    return cubes;\n}\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n",
    "    return nums.map(num => Math.pow(num, 3));\n}\n",
    "    return nums.map(num => num * num * num);\n}\n\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n",
    "    return nums.map(n => n * n * n);\n}\n",
    "    return nums.map(num => num ** 3);\n}\n",
    "    return nums.map(n => n ** 3);\n}\n",
    "    return nums.map(x => x * x * x);\n}\n",
    "    return nums.map(num => num ** 3);\n}\nconsole.log(cube_nums([1, 2, 3, 4, 5]));\n",
    "    return nums.map(num => Math.pow(num, 3));\n}\n",
    "    return nums.map(n => n ** 3);\n}\n",
    "    return nums.map(num => Math.pow(num, 3));\n}\n",
    "    return nums.map(n => n ** 3);\n}\n",
    "    return nums.map(num => num ** 3);\n}\n"
  ]
}