{
  "name": "mbpp_412_remove_odd",
  "language": "ts",
  "prompt": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var l1: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            l1.push(l[i]);\n        }\n    }\n    return l1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(function (num) {\n        return num % 2 == 0;\n    });\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var l2: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            l2.push(l[i]);\n        }\n    }\n    return l2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var l2: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            l2.push(l[i]);\n        }\n    }\n    return l2;\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let result = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(function (num) {\n        return num % 2 == 0;\n    });\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var even: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            even.push(l[i]);\n        }\n    }\n    return even;\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let even_array: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            even_array.push(l[i]);\n        }\n    }\n    return even_array;\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(function (n) {\n        return n % 2 == 0;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var l2: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            l2.push(l[i]);\n        }\n    }\n    return l2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let even: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            even.push(l[i]);\n        }\n    }\n    return even;\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var evens = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            evens.push(l[i]);\n        }\n    }\n    return evens;\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let evens: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            evens.push(l[i]);\n        }\n    }\n    return evens;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(function (num) {\n        return num % 2 == 0;\n    });\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let l1: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            l1.push(l[i]);\n        }\n    }\n    return l1;\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123061,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var l2: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            l2.push(l[i]);\n        }\n    }\n    return l2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var l1: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            l1.push(l[i]);\n        }\n    }\n    return l1;\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let even: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            even.push(l[i]);\n        }\n    }\n    return even;\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(function (num) {\n        return num % 2 == 0;\n    });\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var evens = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            evens.push(l[i]);\n        }\n    }\n    return evens;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let l2: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            l2.push(l[i]);\n        }\n    }\n    return l2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let even: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            even.push(l[i]);\n        }\n    }\n    return even;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var l1: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            l1.push(l[i]);\n        }\n    }\n    return l1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let even_list: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            even_list.push(l[i]);\n        }\n    }\n    return even_list;\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var l2: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            l2.push(l[i]);\n        }\n    }\n    return l2;\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123061,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let l2: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            l2.push(l[i]);\n        }\n    }\n    return l2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var l1: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            l1.push(l[i]);\n        }\n    }\n    return l1;\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var res: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            res.push(l[i]);\n        }\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 === 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let arr = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            arr.push(l[i]);\n        }\n    }\n    return arr;\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let new_list: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            new_list.push(l[i]);\n        }\n    }\n    return new_list;\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123061,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let even: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            even.push(l[i]);\n        }\n    }\n    return even;\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var l1: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            l1.push(l[i]);\n        }\n    }\n    return l1;\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var l1: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            l1.push(l[i]);\n        }\n    }\n    return l1;\n}\nvar l: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(remove_odd(l));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "[ 2, 4, 6, 8 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let evens: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            evens.push(l[i]);\n        }\n    }\n    return evens;\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var l1: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            l1.push(l[i]);\n        }\n    }\n    return l1;\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123061,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let l2: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            l2.push(l[i]);\n        }\n    }\n    return l2;\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var l1: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            l1.push(l[i]);\n        }\n    }\n    return l1;\n}\nvar l: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(remove_odd(l));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var result: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123063,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 === 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var new_list: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            new_list.push(l[i]);\n        }\n    }\n    return new_list;\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123063,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 === 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var result = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123063,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var even_list: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            even_list.push(l[i]);\n        }\n    }\n    return even_list;\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123063,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(function (num) {\n        return num % 2 == 0;\n    });\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123061,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let new_list: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            new_list.push(l[i]);\n        }\n    }\n    return new_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(function (n) {\n        return n % 2 == 0;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123061,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var l2: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            l2.push(l[i]);\n        }\n    }\n    return l2;\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(function (n) {\n        return n % 2 == 0;\n    });\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123063,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(function (num) {\n        return num % 2 == 0;\n    });\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let evens: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            evens.push(l[i]);\n        }\n    }\n    return evens;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(function (num) {\n        return num % 2 == 0;\n    });\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let l2: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            l2.push(l[i]);\n        }\n    }\n    return l2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var result: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var l1: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            l1.push(l[i]);\n        }\n    }\n    return l1;\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(function(num) {\n        return num % 2 == 0;\n    });\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123063,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 === 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let new_list: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            new_list.push(l[i]);\n        }\n    }\n    return new_list;\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var l2: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            l2.push(l[i]);\n        }\n    }\n    return l2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(function (value) {\n        return value % 2 == 0;\n    });\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123063,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var even: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            even.push(l[i]);\n        }\n    }\n    return even;\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123063,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(function (x) { return x % 2 == 0; });\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123063,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123061,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var l1: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            l1.push(l[i]);\n        }\n    }\n    return l1;\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(function (x) {\n        return x % 2 == 0;\n    });\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123063,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var new_list: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            new_list.push(l[i]);\n        }\n    }\n    return new_list;\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123063,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var new_list: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            new_list.push(l[i]);\n        }\n    }\n    return new_list;\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123063,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(function (num) {\n        return num % 2 == 0;\n    });\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(function (value) {\n        return value % 2 == 0;\n    });\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123063,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let result = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123063,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(function (num) {\n        return num % 2 == 0;\n    });\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var l2: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            l2.push(l[i]);\n        }\n    }\n    return l2;\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123061,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(function (num) {\n        return num % 2 == 0;\n    });\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var even: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            even.push(l[i]);\n        }\n    }\n    return even;\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(function (x) { return x % 2 == 0; });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(function (num) {\n        return num % 2 == 0;\n    });\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let i: number = 0;\n    let j: number = 0;\n    let n: number = l.length;\n    let res: number[] = [];\n    for (i = 0; i < n; i++) {\n        if (l[i] % 2 == 0) {\n            res[j] = l[i];\n            j++;\n        }\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var l1: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            l1.push(l[i]);\n        }\n    }\n    return l1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(function (x) { return x % 2 == 0 });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var l1: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            l1.push(l[i]);\n        }\n    }\n    return l1;\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(function (x) {\n        return x % 2 == 0;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var l1: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            l1.push(l[i]);\n        }\n    }\n    return l1;\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(function (num) {\n        return num % 2 == 0;\n    });\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(function (x) { return x % 2 == 0 });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123063,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(function (x) { return x % 2 == 0 });\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123063,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    var result = [];\n    for (var i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123063,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(function (n) {\n        return n % 2 == 0;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(function (x) { return x % 2 == 0 });\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123063,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let l1: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            l1.push(l[i]);\n        }\n    }\n    return l1;\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123063,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let even: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            even.push(l[i]);\n        }\n    }\n    return even;\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let even_list: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            even_list.push(l[i]);\n        }\n    }\n    return even_list;\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(x => x % 2 == 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let result = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1665510307,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    return l.filter(function (num) {\n        return num % 2 == 0;\n    });\n}\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123063,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let new_list: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            new_list.push(l[i]);\n        }\n    }\n    return new_list;\n}\n\nconsole.log(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove odd numbers from a given array.\nfunction remove_odd(l: number[]): number[] {\n    let l2: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            l2.push(l[i]);\n        }\n    }\n    return l2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_odd;\n  assert.deepEqual(candidate([1, 2, 3]),[2]);\n  assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);\n  assert.deepEqual(candidate([10, 20, 3]),[10, 20]);\n}\n\ntest();",
      "timestamp": 1666123060,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}