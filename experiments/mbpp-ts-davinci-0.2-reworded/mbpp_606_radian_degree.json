{
  "name": "mbpp_606_radian_degree",
  "language": "ts",
  "prompt": "//Write a function to convert degrees to radians.\nfunction radian_degree(degree: number): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_606_radian_degree.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = radian_degree;\n  assert.deepEqual(candidate(90),1.5707963267948966);\n  assert.deepEqual(candidate(60),1.0471975511965976);\n  assert.deepEqual(candidate(120),2.0943951023931953);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "  return (degree * Math.PI) / 180;\n}\n",
    "  return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "  return (degree * Math.PI) / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "  return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "  return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "  return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    let radian: number = degree * Math.PI / 180;\n    return radian;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n\nconsole.log(radian_degree(180));\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\nconsole.log(radian_degree(180));\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * (Math.PI / 180);\n}\n",
    "    return degree * Math.PI / 180;\n}\n",
    "    return degree * (Math.PI / 180);\n}\n\nconsole.log(radian_degree(180));\n"
  ]
}