{
  "name": "mbpp_749_sort_numeric_strings",
  "language": "ts",
  "prompt": "//Write a function to sort a given array of strings of numbers numerically. https://www.geeksforgeeks.org/tsthon-sort-numeric-strings-in-a-array/\nfunction sort_numeric_strings(nums_str: string[]): number[] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_749_sort_numeric_strings.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numeric_strings;\n  assert.deepEqual(candidate([\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"]),[-500, -12, 0, 4, 7, 12, 45, 100, 200]);\n  assert.deepEqual(candidate([\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"]),[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]);\n  assert.deepEqual(candidate([\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"]),[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    return nums_str.map(Number).sort((a, b) => a - b);\n}\n",
    "  return nums_str.sort((a, b) => Number(a) - Number(b));\n}\n",
    "    return nums_str.map(Number).sort((a, b) => a - b);\n}\n",
    "    let nums: number[] = [];\n    for (let i = 0; i < nums_str.length; i++) {\n        nums.push(parseInt(nums_str[i]));\n    }\n    nums.sort((a, b) => a - b);\n    return nums;\n}\n",
    "    return nums_str.map(x => parseInt(x)).sort((a, b) => a - b);\n}\n",
    "    let nums: number[] = [];\n    for (let i = 0; i < nums_str.length; i++) {\n        nums.push(parseInt(nums_str[i]));\n    }\n    nums.sort((a, b) => a - b);\n    return nums;\n}\n",
    "    return nums_str.map(Number).sort((a, b) => a - b);\n}\n",
    "    let nums: number[] = nums_str.map(num_str => parseInt(num_str));\n    nums.sort((a, b) => a - b);\n    return nums;\n}\n",
    "    return nums_str.map(Number).sort((a, b) => a - b);\n}\n",
    "    return nums_str.map(Number).sort((a, b) => a - b);\n}\n",
    "    return nums_str.map(Number).sort((a, b) => a - b);\n}\n",
    "  return nums_str.map(Number).sort((a, b) => a - b);\n}\n",
    "    return nums_str.sort((a, b) => {\n        return parseInt(a) - parseInt(b);\n    });\n}\n",
    "    return nums_str.map(Number).sort((a, b) => a - b);\n}\n",
    "    let nums: number[] = nums_str.map(Number);\n    nums.sort((a, b) => a - b);\n    return nums;\n}\n",
    "    return nums_str.map(Number).sort((a, b) => a - b);\n}\n",
    "    let nums: number[] = [];\n    for (let i = 0; i < nums_str.length; i++) {\n        nums.push(parseInt(nums_str[i]));\n    }\n    nums.sort((a, b) => a - b);\n    return nums;\n}\n",
    "    return nums_str.map(Number).sort((a, b) => a - b);\n}\n",
    "    return nums_str.map(Number).sort((a, b) => a - b);\n}\n",
    "    return nums_str.map(Number).sort((a, b) => a - b);\n}\n"
  ]
}