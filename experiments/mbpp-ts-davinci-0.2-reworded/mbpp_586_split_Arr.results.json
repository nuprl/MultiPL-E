{
  "name": "mbpp_586_split_Arr",
  "language": "ts",
  "prompt": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1: number[] = l.slice(0, n);\n    let arr2: number[] = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr = l.splice(n);\n    return newArr.concat(l);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let last = l.slice(n);\n    return last.concat(first);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr: number[] = [];\n    for (let i = n; i < l.length; i++) {\n        newArr.push(l[i]);\n    }\n    for (let i = 0; i < n; i++) {\n        newArr.push(l[i]);\n    }\n    return newArr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            newArr.push(l[i]);\n        } else {\n            l.push(l[i]);\n        }\n    }\n    return l;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 197860345\n#\n#\n#\n#FailureMessage Object: 0x7ffe846b9650\n 1: 0x2acfccd3b727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2acfcd8d028e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2acfcd20af8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2acfcd39c760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2acfcd3a40cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2acfcd58e7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2acfcceed7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "exit_code": -5,
      "status": "Exception"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.splice(0, n);\n    return l.concat(arr);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr = l.splice(n);\n    return newArr.concat(l);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n  let newArr = l.splice(0, n);\n  return l.concat(newArr);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = [];\n    for (let i = n; i < l.length; i++) {\n        arr.push(l[i]);\n    }\n    for (let i = 0; i < n; i++) {\n        arr.push(l[i]);\n    }\n    return arr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.splice(0, n);\n    return l.concat(arr);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n  let newArr = l.splice(0, n);\n  return l.concat(newArr);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n  let first = l.slice(0, n);\n  let second = l.slice(n);\n  return second.concat(first);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 3, 4, 5, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1: number[] = l.slice(0, n);\n    let arr2: number[] = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n  let first = l.slice(0, n);\n  let second = l.slice(n);\n  return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr = l.splice(0, n);\n    let newArr2 = l.concat(newArr);\n    return newArr2;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.splice(0, n);\n    let second = l.splice(n);\n    return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  52,\n  36,\n  12,\n  10\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmpv3d7432n.js:10:12)\n    at Object.<anonymous> (/tmp/tmpv3d7432n.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 52, 36, 12, 10 ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n  let first: number[] = l.slice(0, n);\n  let second: number[] = l.slice(n);\n  return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1: number[] = l.slice(0, n);\n    let arr2: number[] = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr = l.splice(n);\n    return newArr.concat(l);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr: number[] = [];\n    for (let i = n; i < l.length; i++) {\n        newArr.push(l[i]);\n    }\n    for (let i = 0; i < n; i++) {\n        newArr.push(l[i]);\n    }\n    return newArr;\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let last = l.slice(n);\n    return last.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr: number[] = [];\n    for (let i = n; i < l.length; i++) {\n        newArr.push(l[i]);\n    }\n    for (let i = 0; i < n; i++) {\n        newArr.push(l[i]);\n    }\n    return newArr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 3, 4, 5, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n  let first = l.slice(0, n);\n  let second = l.slice(n);\n  return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.splice(0, n);\n    return l.concat(arr);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let a = l.splice(0, n);\n    return l.concat(a);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.splice(0, n);\n    return l.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.splice(0, n);\n    return l.concat(firstPart);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr: number[] = [];\n    for (let i = n; i < l.length; i++) {\n        newArr.push(l[i]);\n    }\n    for (let i = 0; i < n; i++) {\n        newArr.push(l[i]);\n    }\n    return newArr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first_part = l.splice(0, n);\n    return l.concat(first_part);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1: number[] = l.slice(0, n);\n    let arr2: number[] = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr: number[] = [];\n    for (let i = n; i < l.length; i++) {\n        newArr.push(l[i]);\n    }\n    for (let i = 0; i < n; i++) {\n        newArr.push(l[i]);\n    }\n    return newArr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr = l.slice(n);\n    let newArr2 = l.slice(0, n);\n    return newArr.concat(newArr2);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122407,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart: number[] = l.splice(0, n);\n    l.push(...firstPart);\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.splice(0, n);\n    return l.concat(arr);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122407,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1: number[] = [];\n    let arr2: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            arr1.push(l[i]);\n        } else {\n            arr2.push(l[i]);\n        }\n    }\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122407,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    let arr3 = arr2.concat(arr1);\n    return arr3;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122407,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122407,
      "stdout": "[ 3, 4, 5, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr: number[] = [];\n    for (let i = n; i < l.length; i++) {\n        newArr.push(l[i]);\n    }\n    for (let i = 0; i < n; i++) {\n        newArr.push(l[i]);\n    }\n    return newArr;\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    let arr3 = arr2.concat(arr1);\n    return arr3;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122407,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n  let newArr = l.splice(0, n);\n  return l.concat(newArr);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122407,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1: number[] = l.splice(0, n);\n    let arr2: number[] = l.concat(arr1);\n    return arr2;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122407,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1: number[] = l.slice(0, n);\n    let arr2: number[] = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let l1 = l.slice(0, n);\n    let l2 = l.slice(n, l.length);\n    return l2.concat(l1);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122407,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr: number[] = [];\n    for (let i = n; i < l.length; i++) {\n        newArr.push(l[i]);\n    }\n    for (let i = 0; i < n; i++) {\n        newArr.push(l[i]);\n    }\n    return newArr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122407,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            newArr.push(l[i]);\n        }\n        else {\n            l.push(l[i]);\n        }\n    }\n    return l;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 195652814\n#\n#\n#\n#FailureMessage Object: 0x7ffccadf57c0\n 1: 0x2b383f7e5727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b384037a28e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b383fcb4f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b383fe46760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b383fe4e0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b38400387db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b383f9977f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "exit_code": -5,
      "status": "Exception"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr = l.splice(n);\n    return newArr.concat(l);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122407,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr = l.splice(0, n);\n    return l.concat(newArr);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122407,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n, l.length);\n    return second.concat(first);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122407,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first_part = l.slice(0, n);\n    let second_part = l.slice(n, l.length);\n    return second_part.concat(first_part);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122407,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    let arr3 = arr2.concat(arr1);\n    return arr3;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122407,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    let newArr = secondPart.concat(firstPart);\n    return newArr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122407,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let l1: number[] = l.slice(0, n);\n    let l2: number[] = l.slice(n);\n    return l2.concat(l1);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122407,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let l1 = l.slice(0, n);\n    let l2 = l.slice(n, l.length);\n    return l2.concat(l1);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122407,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.splice(0, n);\n    return l.concat(firstPart);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122407,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.splice(0, n);\n    let secondPart = l.splice(n);\n    return secondPart.concat(firstPart);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122407,
      "stdout": "[ 1, 2, 3 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  52,\n  36,\n  12,\n  10\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmp8ll94auz.js:11:12)\n    at Object.<anonymous> (/tmp/tmp8ll94auz.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 52, 36, 12, 10 ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122407,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n, l.length);\n    let newArr = second.concat(first);\n    return newArr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122407,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            newArr.push(l[i]);\n        } else {\n            l.push(l[i]);\n        }\n    }\n    return l;\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122409,
      "stdout": "",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 197860345\n#\n#\n#\n#FailureMessage Object: 0x7ffe6d4c8e70\n 1: 0x2ace693c4727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2ace69f5928e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2ace69893f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2ace69a25760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2ace69a2d0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2ace69c177db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2ace695767f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "exit_code": -5,
      "status": "Exception"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 3, 4, 5, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.splice(0, n);\n    return l.concat(firstPart);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first: number[] = l.slice(0, n);\n    let second: number[] = l.slice(n);\n    return second.concat(first);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122409,
      "stdout": "[ 3, 4, 5, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr = l.splice(n);\n    return newArr.concat(l);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n  let firstPart = l.slice(0, n);\n  let secondPart = l.slice(n);\n  return secondPart.concat(firstPart);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122410,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    let newArr = second.concat(first);\n    return newArr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n  let arr1 = l.slice(0, n);\n  let arr2 = l.slice(n);\n  return arr2.concat(arr1);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122410,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.splice(0, n);\n    return l.concat(arr);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first_part: number[] = l.slice(0, n);\n    let second_part: number[] = l.slice(n);\n    return second_part.concat(first_part);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122410,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.splice(0, n);\n    let arr2 = l.concat(arr1);\n    return arr2;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122410,
      "stdout": "[ 3, 4, 5, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122410,
      "stdout": "[ 3, 4, 5, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr: number[] = [];\n    for (let i = n; i < l.length; i++) {\n        newArr.push(l[i]);\n    }\n    for (let i = 0; i < n; i++) {\n        newArr.push(l[i]);\n    }\n    return newArr;\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1: number[] = l.slice(0, n);\n    let arr2: number[] = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr: number[] = [];\n    for (let i = n; i < l.length; i++) {\n        newArr.push(l[i]);\n    }\n    for (let i = 0; i < n; i++) {\n        newArr.push(l[i]);\n    }\n    return newArr;\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122410,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 3, 4, 5, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1: number[] = l.slice(0, n);\n    let arr2: number[] = l.slice(n);\n    return arr2.concat(arr1);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122410,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.splice(0, n);\n    l.push(...arr);\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first_part = l.slice(0, n);\n    let second_part = l.slice(n);\n    return second_part.concat(first_part);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122410,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122407,
      "stdout": "[ 3, 4, 5, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr = l.slice(n);\n    let newArr2 = l.slice(0, n);\n    return newArr.concat(newArr2);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122410,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1: number[] = l.slice(0, n);\n    let arr2: number[] = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.splice(0, n);\n    let secondPart = l;\n    return secondPart.concat(firstPart);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122410,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.splice(0, n);\n    return l.concat(arr);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 3, 4, 5, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1: number[] = l.slice(0, n);\n    let arr2: number[] = l.slice(n, l.length);\n    let arr3: number[] = arr2.concat(arr1);\n    return arr3;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122410,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 3, 4, 5, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr: number[] = [];\n    for (let i = n; i < l.length; i++) {\n        newArr.push(l[i]);\n    }\n    for (let i = 0; i < n; i++) {\n        newArr.push(l[i]);\n    }\n    return newArr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.splice(0, n);\n    return l.concat(arr);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first_Part = l.slice(0, n);\n    let second_Part = l.slice(n);\n    return second_Part.concat(first_Part);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first_part = l.slice(0, n);\n    let second_part = l.slice(n);\n    return second_part.concat(first_part);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122410,
      "stdout": "[ 3, 4, 5, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr = l.splice(0, n);\n    l.push(...newArr);\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122410,
      "stdout": "[ 3, 4, 5, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122410,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart: number[] = l.splice(0, n);\n    let secondPart: number[] = l;\n    let newArr: number[] = secondPart.concat(firstPart);\n    return newArr;\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122410,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122410,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            newArr.push(l[i]);\n        }\n        else {\n            l.push(l[i]);\n        }\n    }\n    return newArr;\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122413,
      "stdout": "",
      "stderr": "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error 197860345\n#\n#\n#\n#FailureMessage Object: 0x7ffe9d3a4e10\n 1: 0x2b11d5193727  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b11d5d2828e V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 3: 0x2b11d5662f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 4: 0x2b11d57f4760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 5: 0x2b11d57fc0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 6: 0x2b11d59e67db v8::internal::Runtime_GrowArrayElements(int, unsigned long*, v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 7: 0x2b11d53457f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n",
      "exit_code": -5,
      "status": "Exception"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122407,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first: number[] = l.slice(0, n);\n    let second: number[] = l.slice(n);\n    return second.concat(first);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.splice(0, n);\n    return l.concat(first);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n  let first = l.slice(0, n);\n  let second = l.slice(n);\n  return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "[ 3, 4, 5, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n  let arr1: number[] = [];\n  let arr2: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i < n) {\n      arr1.push(l[i]);\n    } else {\n      arr2.push(l[i]);\n    }\n  }\n  return arr2.concat(arr1);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122412,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n  let firstPart = l.splice(0, n);\n  let secondPart = l;\n  return secondPart.concat(firstPart);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122412,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart: number[] = l.slice(0, n);\n    let secondPart: number[] = l.slice(n);\n    return secondPart.concat(firstPart);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122412,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.slice(0, n);\n    let secondPart = l.slice(n);\n    return secondPart.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr = l.slice(n);\n    let firstArr = l.slice(0, n);\n    return newArr.concat(firstArr);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122412,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let last = l.slice(n);\n    return last.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122412,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n  let newArr = l.splice(0, n);\n  return l.concat(newArr);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first: number[] = l.slice(0, n);\n    let second: number[] = l.slice(n);\n    return second.concat(first);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122412,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.splice(0, n);\n    let arr2 = l.splice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122412,
      "stdout": "[ 5, 6, 1, 2 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  52,\n  36,\n  12,\n  10\n]\n\nshould loosely deep-equal\n\n[\n  5,\n  6,\n  52,\n  36,\n  12,\n  10\n]\n    at test (/tmp/tmptb2r_1h6.js:11:12)\n    at Object.<anonymous> (/tmp/tmptb2r_1h6.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 52, 36, 12, 10 ],\n  expected: [ 5, 6, 52, 36, 12, 10 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let newArr: number[] = [];\n    let firstPart: number[] = [];\n    let secondPart: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (i < n) {\n            firstPart.push(l[i]);\n        } else {\n            secondPart.push(l[i]);\n        }\n    }\n    newArr = secondPart.concat(firstPart);\n    return newArr;\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122412,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first: number[] = l.slice(0, n);\n    let second: number[] = l.slice(n);\n    return second.concat(first);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first: number[] = l.slice(0, n);\n    let second: number[] = l.slice(n);\n    return second.concat(first);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122411,
      "stdout": "[ 4, 5, 6, 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr1 = l.slice(0, n);\n    let arr2 = l.slice(n);\n    return arr2.concat(arr1);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let arr = l.splice(0, n);\n    return l.concat(arr);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let last = l.slice(n);\n    return last.concat(first);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122412,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let firstPart = l.splice(0, n);\n    return l.concat(firstPart);\n}\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122404,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n, l.length);\n    return second.concat(first);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1666122407,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\nconsole.log(split_Arr([1, 2, 3, 4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "[ 3, 4, 5, 6, 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to split an array at the nth eelment and add the first part to the end.\nfunction split_Arr(l: number[], n: number): number[] {\n    let first = l.slice(0, n);\n    let second = l.slice(n);\n    return second.concat(first);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_Arr;\n  assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);\n  assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);\n}\n\ntest();",
      "timestamp": 1665510007,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}