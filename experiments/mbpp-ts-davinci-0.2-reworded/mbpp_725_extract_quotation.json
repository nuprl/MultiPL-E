{
  "name": "mbpp_725_extract_quotation",
  "language": "ts",
  "prompt": "//Write a function to extract values between quotation marks \" \" of the given string.\nfunction extract_quotation(text1: string): any {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_725_extract_quotation.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_quotation;\n  assert.deepEqual(candidate(\"Cortex \"A53\" Based \"multi\" tasking \"Processor\"\"),[\"A53\", \"multi\", \"Processor\"]);\n  assert.deepEqual(candidate(\"Cast your \"favorite\" entertainment \"apps\"\"),[\"favorite\", \"apps\"]);\n  assert.deepEqual(candidate(\"Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support\"),[\"4k Ultra HD\", \"HDR 10\"]);\n  assert.deepEqual(candidate(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\"),[]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let text2: string = \"\";\n    let text3: string = \"\";\n    let text4: string = \"\";\n    let text5: string = \"\";\n    let text6: string = \"\";\n    let text7: string = \"\";\n    let text8: string = \"\";\n    let text9: string = \"\";\n    let text10: string = \"\";\n    let text11: string = \"\";\n    let text12: string = \"\";\n    let text13: string = \"\";\n    let text14: string = \"\";\n    let text15: string = \"\";\n    let text16: string = \"\";\n    let text17: string = \"\";\n    let text18: string = \"\";\n    let text19: string = \"\";\n    let text20: string = \"\";\n    let text21: string = \"\";\n    let text22: string = \"\";\n    let text23: string = \"\";\n    let text24: string = \"\";\n    let text25: string = \"\";\n    let text26: string = \"\";\n    let text27: string = \"\";\n    let text28: string = \"\";\n    let text29: string = \"\";\n    let text30: string = \"\";\n    let text31: string = \"\";\n    let text32: string = \"\";\n    let text33: string = \"\";\n    let text34: string = \"\";\n    let text35: string = \"\";\n    let text36: string = \"\";\n    let text37: string = \"\";\n    let text38: string = \"\";\n    let text39: string = \"\";\n    let text40: string = \"\";\n    let text41: string = \"\";\n    let text42: string = \"\";\n    let text43: string = \"\";\n    let text44: string = \"\";\n    let text45: string = \"\";\n    let text46: string = \"\";\n    let text47: string = \"\";\n    let text48: string = \"\";\n    let text49: string = \"\";\n    let text50: string = \"\";\n    let text51: string = \"\";\n    let text52: string = \"\";\n   ",
    "    let result = text1.match(/\"(.*?)\"/g);\n    return result;\n}\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\n",
    "    let result = text1.match(/\"(.*?)\"/g);\n    return result;\n}\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\n",
    "    let result: string[] = [];\n    let regex = /\"(.*?)\"/g;\n    let match: any;\n    while (match = regex.exec(text1)) {\n        result.push(match[1]);\n    }\n    return result;\n}\n\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\nconsole.log(extract_quotation('\"PHP\", \"JavaScript\"'));\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\nconsole.log(extract_quotation('\"PHP\", \"JavaScript\"'));\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\nconsole.log(extract_quotation('\"PHP\", \"JavaScript\"'));\n",
    "    let result: string[] = [];\n    let regex = /\"(.*?)\"/g;\n    let match: any;\n    while (match = regex.exec(text1)) {\n        result.push(match[1]);\n    }\n    return result;\n}\n\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\nconsole.log(extract_quotation('\"PHP\", \"JavaScript\"'));\n",
    "    let result: string = \"\";\n    let text: string = \"\";\n    let flag: boolean = false;\n    for (let i: number = 0; i < text1.length; i++) {\n        if (text1[i] === \"\\\"\") {\n            flag = !flag;\n            if (!flag) {\n                result += text + \" \";\n                text = \"\";\n            }\n        } else {\n            if (flag) {\n                text += text1[i];\n            }\n        }\n    }\n    return result;\n}\n",
    "    let result: string[] = [];\n    let regex = /\"(.*?)\"/g;\n    let match: any;\n    while (match = regex.exec(text1)) {\n        result.push(match[1]);\n    }\n    return result;\n}\n\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\nconsole.log(extract_quotation('\"PHP\", \"JavaScript\"'));\n",
    "    let text = text1.split(\" \");\n    let result = [];\n    for (let i = 0; i < text.length; i++) {\n        if (text[i].charAt(0) === \"\\\"\" && text[i].charAt(text[i].length - 1) === \"\\\"\") {\n            result.push(text[i].substring(1, text[i].length - 1));\n        }\n    }\n    return result;\n}\n",
    "    let result: string[] = [];\n    let regex = /\"(.*?)\"/g;\n    let match: any;\n    while (match = regex.exec(text1)) {\n        result.push(match[1]);\n    }\n    return result;\n}\n\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\n",
    "    let result = text1.match(/\"(.*?)\"/g);\n    return result;\n}\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\nconsole.log(extract_quotation('\"PHP\", \"JavaScript\"'));\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\n",
    "    let text2: string = \"\";\n    let text3: string = \"\";\n    let text4: string = \"\";\n    let text5: string = \"\";\n    let text6: string = \"\";\n    let text7: string = \"\";\n    let text8: string = \"\";\n    let text9: string = \"\";\n    let text10: string = \"\";\n    let text11: string = \"\";\n    let text12: string = \"\";\n    let text13: string = \"\";\n    let text14: string = \"\";\n    let text15: string = \"\";\n    let text16: string = \"\";\n    let text17: string = \"\";\n    let text18: string = \"\";\n    let text19: string = \"\";\n    let text20: string = \"\";\n    let text21: string = \"\";\n    let text22: string = \"\";\n    let text23: string = \"\";\n    let text24: string = \"\";\n    let text25: string = \"\";\n    let text26: string = \"\";\n    let text27: string = \"\";\n    let text28: string = \"\";\n    let text29: string = \"\";\n    let text30: string = \"\";\n    let text31: string = \"\";\n    let text32: string = \"\";\n    let text33: string = \"\";\n    let text34: string = \"\";\n    let text35: string = \"\";\n    let text36: string = \"\";\n    let text37: string = \"\";\n    let text38: string = \"\";\n    let text39: string = \"\";\n    let text40: string = \"\";\n    let text41: string = \"\";\n    let text42: string = \"\";\n    let text43: string = \"\";\n    let text44: string = \"\";\n    let text45: string = \"\";\n    let text46: string = \"\";\n    let text47: string = \"\";\n    let text48: string = \"\";\n    let text49: string = \"\";\n    let text50: string = \"\";\n    let text51: string = \"\";\n    let text52: string = \"\";\n   ",
    "    let result: string[] = [];\n    let index: number = 0;\n    let start: number = 0;\n    let end: number = 0;\n    while (index < text1.length) {\n        if (text1[index] === '\"') {\n            if (start === 0) {\n                start = index;\n            } else {\n                end = index;\n                result.push(text1.substring(start + 1, end));\n                start = 0;\n            }\n        }\n        index++;\n    }\n    return result;\n}\n",
    "    let result: string[] = [];\n    let text: string = text1;\n    let start: number = 0;\n    let end: number = 0;\n    let i: number = 0;\n    while (i < text.length) {\n        if (text[i] == '\"') {\n            start = i;\n            i++;\n            while (text[i] != '\"') {\n                i++;\n            }\n            end = i;\n            result.push(text.substring(start + 1, end));\n        }\n        i++;\n    }\n    return result;\n}\n",
    "    let result: string[] = [];\n    let regex: RegExp = /\"(.*?)\"/g;\n    let match: RegExpExecArray;\n    while (match = regex.exec(text1)) {\n        result.push(match[1]);\n    }\n    return result;\n}\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\n",
    "    let text2 = text1.split('');\n    let text3 = [];\n    let text4 = [];\n    for (let i = 0; i < text2.length; i++) {\n        if (text2[i] === '\"') {\n            text3.push(i);\n        }\n    }\n    for (let i = 0; i < text3.length; i++) {\n        if (i % 2 === 0) {\n            text4.push(text1.slice(text3[i] + 1, text3[i + 1]));\n        }\n    }\n    return text4;\n}\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\n",
    "    let result: string[] = [];\n    let regex = /\"(.*?)\"/g;\n    let match: any;\n    while (match = regex.exec(text1)) {\n        result.push(match[1]);\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let regex = /\"(.*?)\"/g;\n    let match: any;\n    while (match = regex.exec(text1)) {\n        result.push(match[1]);\n    }\n    return result;\n}\n\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\nconsole.log(extract_quotation('\"PHP\", \"JavaScript\"'));\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"Java",
    "    let regex = /\"(.*?)\"/g;\n    let result = text1.match(regex);\n    return result;\n}\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\n",
    "    let result: string[] = [];\n    let regex = /\"([^\"]*)\"/g;\n    let match: any;\n    while (match = regex.exec(text1)) {\n        result.push(match[1]);\n    }\n    return result;\n}\nconsole.log(extract_quotation('\"Python\", \"PHP\", \"JavaScript\"'));\n",
    "    let result: string[] = [];\n    let index: number = 0;\n    let index2: number = 0;\n    let index3: number = 0;\n    let index4: number = 0;\n    let index5: number = 0;\n    let index6: number = 0;\n    let index7: number = 0;\n    let index8: number = 0;\n    let index9: number = 0;\n    let index10: number = 0;\n    let index11: number = 0;\n    let index12: number = 0;\n    let index13: number = 0;\n    let index14: number = 0;\n    let index15: number = 0;\n    let index16: number = 0;\n    let index17: number = 0;\n    let index18: number = 0;\n    let index19: number = 0;\n    let index20: number = 0;\n    let index21: number = 0;\n    let index22: number = 0;\n    let index23: number = 0;\n    let index24: number = 0;\n    let index25: number = 0;\n    let index26: number = 0;\n    let index27: number = 0;\n    let index28: number = 0;\n    let index29: number = 0;\n    let index30: number = 0;\n    let index31: number = 0;\n    let index32: number = 0;\n    let index33: number = 0;\n    let index34: number = 0;\n    let index35: number = 0;\n    let index36: number = 0;\n    let index37: number = 0;\n    let index38: number = 0;\n    let index39: number = 0;\n    let index40: number = 0;\n    let index41: number = 0;\n    let index42: number = 0;\n    let index43: number = 0;\n    let index44: number = 0;\n    let index45: number = 0;\n    let index46: number = 0;\n    let index47: number = 0;\n    let index48: number = 0;\n    let index49: number = 0;\n    let index50: number = 0;\n    let index"
  ]
}