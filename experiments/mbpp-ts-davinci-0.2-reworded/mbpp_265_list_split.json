{
  "name": "mbpp_265_list_split",
  "language": "ts",
  "prompt": "//Write a function that takes in an array and an integer n and splits an array for every nth element, returning an array of the resulting arrays.\nfunction list_split(S: any, step: number): any {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = list_split;\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"], 3),[[\"a\", \"d\", \"g\", \"j\", \"m\"], [\"b\", \"e\", \"h\", \"k\", \"n\"], [\"c\", \"f\", \"i\", \"l\"]]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3),[[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]]);\n  assert.deepEqual(candidate([\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"], 2),[[\"python\", \"C\", \"DBMS\"], [\"java\", \"C++\", \"SQL\"]]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        temp.push(S[i]);\n        if ((i + 1) % step == 0) {\n            result.push(temp);\n            temp = [];\n        }\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    var result: any = [];\n    for (var i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let i: number = 0;\n    while (i < S.length) {\n        result.push(S.slice(i, i + step));\n        i += step;\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let i: number = 0;\n    while (i < S.length) {\n        result.push(S.slice(i, i + step));\n        i += step;\n    }\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    let count: number = 0;\n    for (let i = 0; i < S.length; i++) {\n        if (count < step) {\n            temp.push(S[i]);\n            count++;\n        } else {\n            result.push(temp);\n            temp = [];\n            temp.push(S[i]);\n            count = 1;\n        }\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "  let result: any = [];\n  for (let i = 0; i < S.length; i += step) {\n    result.push(S.slice(i, i + step));\n  }\n  return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    var result = [];\n    for (var i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    var result = [];\n    for (var i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result = [];\n    let i = 0;\n    while (i < S.length) {\n        result.push(S.slice(i, i + step));\n        i += step;\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    let i: number = 0;\n    while (i < S.length) {\n        result.push(S.slice(i, i + step));\n        i += step;\n    }\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n\nconsole.log(list_split([1, 2, 3, 4, 5, 6], 2));\nconsole.log(list_split([1, 2, 3, 4, 5, 6], 3));\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        temp.push(S[i]);\n        if ((i + 1) % step === 0) {\n            result.push(temp);\n            temp = [];\n        }\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result = [];\n    let i = 0;\n    while (i < S.length) {\n        result.push(S.slice(i, i + step));\n        i += step;\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        temp.push(S[i]);\n        if ((i + 1) % step === 0) {\n            result.push(temp);\n            temp = [];\n        }\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any[] = [];\n    let temp: any[] = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        temp.push(S[i]);\n        if ((i + 1) % step == 0) {\n            result.push(temp);\n            temp = [];\n        }\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\nconsole.log(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2));\nconsole.log(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3));\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\nconsole.log(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2));\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\nconsole.log(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2));\nconsole.log(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3));\nconsole.log(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4));\nconsole.log(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5));\nconsole.log(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6));\nconsole.log(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7));\nconsole.log(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8));\nconsole.log(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9));\nconsole.log(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10));\nconsole.log(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11));\nconsole.log(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 12));\nconsole.log(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 13));\nconsole.log(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 14));\nconsole.log(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 15));\nconsole.log(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        temp.push(S[i]);\n        if ((i + 1) % step == 0) {\n            result.push(temp);\n            temp = [];\n        }\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    let i = 0;\n    while (i < S.length) {\n        result.push(S.slice(i, i + step));\n        i += step;\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        temp.push(S[i]);\n        if ((i + 1) % step === 0) {\n            result.push(temp);\n            temp = [];\n        }\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let arr = [];\n    for (let i = 0; i < S.length; i += step) {\n        arr.push(S.slice(i, i + step));\n    }\n    return arr;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let i: number = 0;\n    while (i < S.length) {\n        result.push(S.slice(i, i + step));\n        i += step;\n    }\n    return result;\n}\n",
    "    let arr = [];\n    for (let i = 0; i < S.length; i += step) {\n        arr.push(S.slice(i, i + step));\n    }\n    return arr;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\nconsole.log(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 2));\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    let i = 0;\n    while (i < S.length) {\n        result.push(S.slice(i, i + step));\n        i += step;\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "  let result = [];\n  let temp = [];\n  for (let i = 0; i < S.length; i++) {\n    if (i % step === 0 && i !== 0) {\n      result.push(temp);\n      temp = [];\n    }\n    temp.push(S[i]);\n  }\n  result.push(temp);\n  return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    var result = [];\n    for (var i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0) {\n            temp = [];\n            temp.push(S[i]);\n            result.push(temp);\n        }\n        else {\n            temp.push(S[i]);\n        }\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step == 0 && i != 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        temp.push(S[i]);\n        if ((i + 1) % step == 0) {\n            result.push(temp);\n            temp = [];\n        }\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n",
    "    let result = [];\n    let temp = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n",
    "    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < S.length; i++) {\n        if (i % step === 0 && i !== 0) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(S[i]);\n    }\n    result.push(temp);\n    return result;\n}\n",
    "    let result = [];\n    for (let i = 0; i < S.length; i += step) {\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n"
  ]
}