{
  "name": "mbpp_786_right_insertion",
  "language": "ts",
  "prompt": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left < right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] <= x) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp55w3uhgz.js:19:12)\n    at Object.<anonymous> (/tmp/tmp55w3uhgz.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] == x) {\n            return mid;\n        }\n        if (a[mid] > x) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l < r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpqzaiowzh.js:19:12)\n    at Object.<anonymous> (/tmp/tmpqzaiowzh.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0, r = a.length - 1;\n    while (l < r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] > x) {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    if (a[l] > x) {\n        return l;\n    } else {\n        return l + 1;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] > x) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let i = 0;\n    while (i < a.length && a[i] <= x) {\n        i++;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        }\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let low = 0;\n    let high = a.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        mid = Math.floor((low + high) / 2);\n        if (a[mid] === x) {\n            return mid;\n        }\n        else if (a[mid] < x) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let low = 0;\n    let high = a.length - 1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (x < a[mid]) {\n            high = mid - 1;\n        } else if (x > a[mid]) {\n            low = mid + 1;\n        } else {\n            return mid;\n        }\n    }\n    return low;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = l + Math.floor((r - l) / 2);\n        if (a[m] === x) {\n            return m;\n        } else if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let low = 0;\n    let high = a.length - 1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (x < a[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return low;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let low = 0;\n    let high = a.length - 1;\n    let mid;\n\n    while (low <= high) {\n        mid = Math.floor((low + high) / 2);\n        if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length;\n    while (left < right) {\n        let mid = Math.floor((left + right) / 2);\n        if (x < a[mid]) {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let low = 0;\n    let high = a.length - 1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let i = 0;\n    while (i < a.length && a[i] < x) {\n        i++;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] === x) {\n            return m;\n        } else if (a[m] > x) {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] == x) {\n            return mid;\n        }\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    let mid;\n    while (left <= right) {\n        mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        }\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l < r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp3iy7su3v.js:19:12)\n    at Object.<anonymous> (/tmp/tmp3iy7su3v.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    let mid = 0;\n    while (left <= right) {\n        mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let i = 0;\n    let j = a.length - 1;\n    while (i <= j) {\n        let m = Math.floor((i + j) / 2);\n        if (a[m] === x) {\n            return m;\n        }\n        if (a[m] < x) {\n            i = m + 1;\n        } else {\n            j = m - 1;\n        }\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid + 1;\n        } else if (a[mid] > x) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0, r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length;\n    while (left < right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] <= x) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n  let low = 0;\n  let high = a.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (x < a[mid]) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  return low;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let i = 0;\n    let j = a.length - 1;\n    while (i <= j) {\n        let m = Math.floor((i + j) / 2);\n        if (a[m] <= x) {\n            i = m + 1;\n        } else {\n            j = m - 1;\n        }\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let low = 0;\n    let high = a.length - 1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (x < a[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return low;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0, r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] === x) {\n            return m + 1;\n        } else if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let i = 0;\n    let j = a.length - 1;\n    while (i <= j) {\n        let k = Math.floor((i + j) / 2);\n        if (a[k] < x) {\n            i = k + 1;\n        } else {\n            j = k - 1;\n        }\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] > x) {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] <= x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0, r = a.length - 1;\n    while (l < r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpf09bgola.js:18:12)\n    at Object.<anonymous> (/tmp/tmpf09bgola.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = l + Math.floor((r - l) / 2);\n        if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    let mid = 0;\n    while (left <= right) {\n        mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        }\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    if (a[mid] < x) {\n        return mid + 1;\n    }\n    return mid;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let low = 0;\n    let high = a.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        mid = Math.floor((low + high) / 2);\n        if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    let mid = 0;\n    while (left <= right) {\n        mid = Math.floor((left + right) / 2);\n        if (x < a[mid]) {\n            right = mid - 1;\n        } else if (x > a[mid]) {\n            left = mid + 1;\n        } else {\n            return mid;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length;\n    while (left < right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] <= x) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0, r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        }\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let i = 0;\n    while (i < a.length && a[i] < x) {\n        i++;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left < right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp96p1ksb5.js:19:12)\n    at Object.<anonymous> (/tmp/tmp96p1ksb5.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let i = 0;\n    while (i < a.length && a[i] < x) {\n        i++;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let i = 0;\n    while (i < a.length && a[i] < x) {\n        i++;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let start = 0;\n    let end = a.length - 1;\n    let mid = 0;\n    while (start <= end) {\n        mid = Math.floor((start + end) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] > x) {\n            end = mid - 1;\n        } else {\n            start = mid + 1;\n        }\n    }\n    return start;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let low = 0;\n    let high = a.length - 1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (a[mid] <= x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let low = 0;\n    let high = a.length - 1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let lo = 0;\n    let hi = a.length - 1;\n    while (lo <= hi) {\n        let mid = Math.floor((lo + hi) / 2);\n        if (a[mid] < x) {\n            lo = mid + 1;\n        } else {\n            hi = mid - 1;\n        }\n    }\n    return lo;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let low = 0;\n    let high = a.length - 1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (a[mid] < x) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    let m = 0;\n    while (l <= r) {\n        m = Math.floor((l + r) / 2);\n        if (a[m] === x) {\n            return m;\n        }\n        if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        }\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length;\n    while (left < right) {\n        let mid = Math.floor((left + right) / 2);\n        if (x < a[mid]) {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let i = 0;\n    while (i < a.length && a[i] < x) {\n        i++;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left < right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp96p1ksb5.js:19:12)\n    at Object.<anonymous> (/tmp/tmp96p1ksb5.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left: number = 0;\n    let right: number = a.length - 1;\n    let mid: number;\n    while (left <= right) {\n        mid = Math.floor((left + right) / 2);\n        if (x < a[mid]) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length;\n    while (l < r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    let m = 0;\n    while (l <= r) {\n        m = Math.floor((l + r) / 2);\n        if (a[m] === x) {\n            return m;\n        } else if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let i = 0;\n    while (i < a.length && a[i] < x) {\n        i++;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left < right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] <= x) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp55w3uhgz.js:19:12)\n    at Object.<anonymous> (/tmp/tmp55w3uhgz.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let start = 0;\n    let end = a.length - 1;\n    let mid = Math.floor((start + end) / 2);\n    while (start <= end) {\n        if (a[mid] < x) {\n            start = mid + 1;\n        } else {\n            end = mid - 1;\n        }\n        mid = Math.floor((start + end) / 2);\n    }\n    return start;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let low = 0;\n    let high = a.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        mid = Math.floor((low + high) / 2);\n        if (a[mid] === x) {\n            return mid;\n        }\n        if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0, r = a.length - 1;\n    while (l < r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] < x) l = m + 1;\n        else r = m;\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp9g32a2w4.js:16:12)\n    at Object.<anonymous> (/tmp/tmp9g32a2w4.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    let mid = 0;\n    while (left <= right) {\n        mid = Math.floor((left + right) / 2);\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length;\n    while (left < right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] <= x) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] == x) {\n            return m;\n        } else if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    let mid;\n    while (left < right) {\n        mid = Math.floor((left + right) / 2);\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpz9w_u35j.js:20:12)\n    at Object.<anonymous> (/tmp/tmpz9w_u35j.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let low = 0;\n    let high = a.length - 1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left < right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp96p1ksb5.js:19:12)\n    at Object.<anonymous> (/tmp/tmp96p1ksb5.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length;\n    while (l < r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length;\n    while (left < right) {\n        const mid = Math.floor((left + right) / 2);\n        if (a[mid] <= x) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length;\n    while (left < right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0, r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] > x) {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left < right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp96p1ksb5.js:19:12)\n    at Object.<anonymous> (/tmp/tmp96p1ksb5.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] > x) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0, r = a.length;\n    while (l < r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0, r = a.length - 1;\n    while (l < r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpd0go63ws.js:18:12)\n    at Object.<anonymous> (/tmp/tmpd0go63ws.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length;\n    while (l < r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0, r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left < right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp96p1ksb5.js:19:12)\n    at Object.<anonymous> (/tmp/tmp96p1ksb5.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let low = 0;\n    let high = a.length - 1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let i = 0;\n    while (i < a.length && a[i] < x) {\n        i++;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    let mid = 0;\n    while (left <= right) {\n        mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        }\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0, r = a.length - 1;\n    while (l < r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpf09bgola.js:18:12)\n    at Object.<anonymous> (/tmp/tmpf09bgola.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] === x) {\n            return m + 1;\n        } else if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let low = 0;\n    let high = a.length - 1;\n    let mid;\n    while (low <= high) {\n        mid = Math.floor((low + high) / 2);\n        if (x < a[mid]) {\n            high = mid - 1;\n        } else if (x > a[mid]) {\n            low = mid + 1;\n        } else {\n            return mid;\n        }\n    }\n    return low;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (x < a[mid]) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] > x) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    let mid = 0;\n    while (left <= right) {\n        mid = Math.floor((left + right) / 2);\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        }\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let i = 0;\n    while (i < a.length && a[i] < x) {\n        i++;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length;\n    while (l < r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        }\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let i = 0;\n    while (i < a.length && a[i] < x) {\n        i++;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] <= x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0, r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let low = 0;\n    let high = a.length - 1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] <= x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0, r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123306,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left < right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] > x) {\n            right = mid;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmps0ombi1x.js:19:12)\n    at Object.<anonymous> (/tmp/tmps0ombi1x.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (x < a[mid]) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let i = 0;\n    while (i < a.length && a[i] < x) {\n        i++;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] > x) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    let mid = 0;\n    while (left <= right) {\n        mid = Math.floor((left + right) / 2);\n        if (a[mid] <= x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    let mid;\n    while (left <= right) {\n        mid = Math.floor((left + right) / 2);\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] <= x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let low = 0, high = a.length - 1;\n    while (low <= high) {\n        let mid = low + Math.floor((high - low) / 2);\n        if (x < a[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return low;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l < r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpqzaiowzh.js:19:12)\n    at Object.<anonymous> (/tmp/tmpqzaiowzh.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let i = 0;\n    while (i < a.length && a[i] < x) {\n        i++;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] > x) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    let mid;\n    while (left <= right) {\n        mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n  let l = 0;\n  let r = a.length - 1;\n  while (l <= r) {\n    const m = Math.floor((l + r) / 2);\n    if (a[m] <= x) {\n      l = m + 1;\n    } else {\n      r = m - 1;\n    }\n  }\n  return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        }\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    let mid = 0;\n\n    while (left <= right) {\n        mid = Math.floor((left + right) / 2);\n        if (x < a[mid]) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0, right = a.length - 1;\n    while (left <= right) {\n        let mid = left + Math.floor((right - left) / 2);\n        if (a[mid] <= x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] <= x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0, r = a.length;\n    while (l < r) {\n        let m = (l + r) >> 1;\n        if (a[m] <= x) l = m + 1;\n        else r = m;\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] > x) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l < r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp3iy7su3v.js:19:12)\n    at Object.<anonymous> (/tmp/tmp3iy7su3v.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    let mid;\n    while (left <= right) {\n        mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0, r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    let mid;\n    while (left <= right) {\n        mid = Math.floor((left + right) / 2);\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0, r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0, r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        }\n        else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] == x) {\n            return m + 1;\n        }\n        if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] > x) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l < r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp3iy7su3v.js:19:12)\n    at Object.<anonymous> (/tmp/tmp3iy7su3v.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let low = 0;\n    let high = a.length - 1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let low = 0;\n    let high = a.length - 1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (a[mid] < x) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return low;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let i = 0;\n    while (i < a.length && a[i] < x) {\n        i++;\n    }\n    return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] <= x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1665517471,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    while (left < right) {\n        let mid = Math.floor((left + right) / 2);\n        if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp96p1ksb5.js:19:12)\n    at Object.<anonymous> (/tmp/tmp96p1ksb5.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let l = 0;\n    let r = a.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        if (a[m] < x) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to locate the right insertion point for a specified value in sorted order.\nfunction right_insertion(a: number[], x: number): number {\n    let left = 0;\n    let right = a.length - 1;\n    let mid = Math.floor((left + right) / 2);\n    while (left <= right) {\n        if (a[mid] === x) {\n            return mid;\n        } else if (a[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n        mid = Math.floor((left + right) / 2);\n    }\n    return left;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_insertion;\n  assert.deepEqual(candidate([1, 2, 4, 5], 6),4);\n  assert.deepEqual(candidate([1, 2, 4, 5], 3),2);\n  assert.deepEqual(candidate([1, 2, 4, 5], 7),4);\n}\n\ntest();",
      "timestamp": 1666123307,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}