{
  "name": "mbpp_619_move_num",
  "language": "ts",
  "prompt": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result: string = \"\";\n    let nums: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            result += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return result + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let char_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return char_arr.join(\"\") + num_arr.join(\"\");\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let chars = test_str.match(/\\D+/g);\n    let result = \"\";\n    if (nums != null) {\n        result = chars.join(\"\") + nums.join(\"\");\n    } else {\n        result = test_str;\n    }\n    return result;\n}\n\nconsole.log(move_num(\"abc123\"));\nconsole.log(move_num(\"abc\"));\nconsole.log(move_num(\"123\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "abc123\nabc\n",
      "stderr": "/tmp/tmpoxijo3bu.js:7\n        result = chars.join(\"\") + nums.join(\"\");\n                       ^\n\nTypeError: Cannot read properties of null (reading 'join')\n    at move_num (/tmp/tmpoxijo3bu.js:7:24)\n    at Object.<anonymous> (/tmp/tmpoxijo3bu.js:16:13)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\nconsole.log(move_num(\"test1ng-Leet=code-Q!\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "testng-Leet=code-Q!1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string[] = [];\n    let chars: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars.push(test_str[i]);\n        } else {\n            nums.push(test_str[i]);\n        }\n    }\n    return chars.join(\"\") + nums.join(\"\");\n}\n\nconsole.log(move_num(\"abc123\"));\nconsole.log(move_num(\"abc123xyz\"));\nconsole.log(move_num(\"abcdef\"));\nconsole.log(move_num(\"123456\"));\nconsole.log(move_num(\"\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "abc123\nabcxyz123\nabcdef\n123456\n\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: number[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (Number(test_str[i])) {\n            num_arr.push(Number(test_str[i]));\n        } else {\n            str_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join('') + num_arr.join('');\n}\n\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "abcd1234\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Iloveyouthree000thousand1143553'\n\nshould loosely deep-equal\n\n'Iloveyouthreethousand1143553000'\n    at test (/tmp/tmpw_imh4bw.js:19:12)\n    at Object.<anonymous> (/tmp/tmpw_imh4bw.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Iloveyouthree000thousand1143553',\n  expected: 'Iloveyouthreethousand1143553000',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "../../../../tmp/tmpn9crnc0s.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result: string = \"\";\n    let nums: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            result += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return result + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let str = test_str.match(/[a-zA-Z]+/g);\n    if (nums == null) {\n        return str.join(\"\");\n    }\n    if (str == null) {\n        return nums.join(\"\");\n    }\n    return str.join(\"\") + nums.join(\"\");\n}\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a10b20c30d40\"));\nconsole.log(move_num(\"12345\"));\nconsole.log(move_num(\"abcdef\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "abcd1234\nabcd10203040\n12345\nabcdef\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let letters: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            letters += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return letters + nums;\n}\n\nconsole.log(move_num(\"a1b2c3\"));\nconsole.log(move_num(\"a10b20c30\"));\nconsole.log(move_num(\"abc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "abc123\nabc102030\nabc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let char_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "../../../../tmp/tmpzxh5dxma.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n  let nums: string = \"\";\n  let letters: string = \"\";\n  for (let i = 0; i < test_str.length; i++) {\n    if (isNaN(parseInt(test_str[i]))) {\n      letters += test_str[i];\n    } else {\n      nums += test_str[i];\n    }\n  }\n  return letters + nums;\n}\n\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str: string = \"\";\n    let num: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str += test_str[i];\n        } else {\n            num += test_str[i];\n        }\n    }\n    return str + num;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let str = test_str.match(/\\D+/g);\n    return str.join('') + nums.join('');\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a10b20c30d40\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "abcd1234\nabcd10203040\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str = test_str.split(\"\");\n    let num = [];\n    let letter = [];\n    for (let i = 0; i < str.length; i++) {\n        if (isNaN(parseInt(str[i]))) {\n            letter.push(str[i]);\n        } else {\n            num.push(str[i]);\n        }\n    }\n    return letter.join(\"\") + num.join(\"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let char_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num(\"a1b2c3\"));\nconsole.log(move_num(\"a10b20c30\"));\nconsole.log(move_num(\"abc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "../../../../tmp/tmpe_77y2gc.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join('') + num_arr.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            nums += test_str[i];\n        } else {\n            str += test_str[i];\n        }\n    }\n    return str + nums;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n            num_str += test_str[i];\n        } else {\n            char_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n  let nums: string = \"\";\n  let str: string = \"\";\n  for (let i = 0; i < test_str.length; i++) {\n    if (isNaN(test_str[i])) {\n      str += test_str[i];\n    } else {\n      nums += test_str[i];\n    }\n  }\n  return str + nums;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "../../../../tmp/tmpljmuoa6v.ts(6,15): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join('') + num_arr.join('');\n}\n\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return str + num_str;\n}\n\nconsole.log(move_num(\"abcd1234\"));\nconsole.log(move_num(\"abcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "../../../../tmp/tmprmkynof0.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result: string = \"\";\n    let nums: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            result += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return result + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n            num_str += test_str[i];\n        } else {\n            char_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "../../../../tmp/tmpm2rcj2xy.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "../../../../tmp/tmpn9crnc0s.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str_arr = test_str.split('');\n    let num_arr = [];\n    let letter_arr = [];\n    for (let i = 0; i < str_arr.length; i++) {\n        if (str_arr[i] >= '0' && str_arr[i] <= '9') {\n            num_arr.push(str_arr[i]);\n        } else {\n            letter_arr.push(str_arr[i]);\n        }\n    }\n    return letter_arr.join('') + num_arr.join('');\n}\n\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let str: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            str += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return str + nums;\n}\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "../../../../tmp/tmpfau1ozcn.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let alpha_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            alpha_str += test_str[i];\n        }\n    }\n    return alpha_str + num_str;\n}\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string[] = [];\n    let chars: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars.push(test_str[i]);\n        } else {\n            nums.push(test_str[i]);\n        }\n    }\n    return chars.join('') + nums.join('');\n}\n\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let char_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num: string = \"\";\n    let str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str += test_str[i];\n        } else {\n            num += test_str[i];\n        }\n    }\n    return str + num;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return str + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let chars = test_str.match(/[a-zA-Z]+/g);\n    if (nums == null) {\n        return test_str;\n    }\n    if (chars == null) {\n        return test_str;\n    }\n    let result = chars.join(\"\") + nums.join(\"\");\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let char_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return char_arr.join('') + num_arr.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n  let nums: string = \"\";\n  let str: string = \"\";\n  for (let i = 0; i < test_str.length; i++) {\n    if (isNaN(parseInt(test_str[i]))) {\n      str += test_str[i];\n    } else {\n      nums += test_str[i];\n    }\n  }\n  return str + nums;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str: string = \"\";\n    let str_str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return str_str + num_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let new_str = \"\";\n    let num_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            new_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return new_str + num_str;\n}\nconsole.log(move_num(\"abc123\"));\nconsole.log(move_num(\"abc123xyz\"));\nconsole.log(move_num(\"abcdef\"));\nconsole.log(move_num(\"123456\"));\nconsole.log(move_num(\"\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "../../../../tmp/tmp6tyyshrt.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str: string = \"\";\n    let char_str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_str += test_str[i];\n        } else {\n            char_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "abcd1234\nabcdefghij12345678910\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n            nums += test_str[i];\n        } else {\n            chars += test_str[i];\n        }\n    }\n    return chars + nums;\n}\nconsole.log(move_num(\"abcd1234\"));\nconsole.log(move_num(\"abcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "abcd1234\nabcd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result: string = \"\";\n    let num: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            result += test_str[i];\n        } else {\n            num += test_str[i];\n        }\n    }\n    return result + num;\n}\n\nconsole.log(move_num(\"abc123\"));\nconsole.log(move_num(\"abc123xyz\"));\nconsole.log(move_num(\"abcdef\"));\nconsole.log(move_num(\"123456\"));\nconsole.log(move_num(\"\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122840,
      "stdout": "abc123\nabcxyz123\nabcdef\n123456\n\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = '';\n    let str: string = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            nums += test_str[i];\n        } else {\n            str += test_str[i];\n        }\n    }\n    return str + nums;\n}\n\nconsole.log(move_num(\"a1b2c3\"));\nconsole.log(move_num(\"a10b20c30\"));\nconsole.log(move_num(\"abc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122841,
      "stdout": "abc123\nabc102030\nabc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n  let result = \"\";\n  let nums = \"\";\n  for (let i = 0; i < test_str.length; i++) {\n    if (isNaN(test_str[i])) {\n      result += test_str[i];\n    } else {\n      nums += test_str[i];\n    }\n  }\n  return result + nums;\n}\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122841,
      "stdout": "../../../../tmp/tmpge0jsx1z.ts(6,15): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str = test_str.split('');\n    let nums = [];\n    let chars = [];\n    for (let i = 0; i < str.length; i++) {\n        if (isNaN(parseInt(str[i]))) {\n            chars.push(str[i]);\n        } else {\n            nums.push(str[i]);\n        }\n    }\n    return chars.join('') + nums.join('');\n}\n\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122841,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str = \"\";\n    let num = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str += test_str[i];\n        } else {\n            num += test_str[i];\n        }\n    }\n    return str + num;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122841,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result: string = \"\";\n    let nums: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            result += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return result + nums;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26A27B28C29D30E31F32G33H34I35J36K37L38M39N40O41P42Q43R44S45T46U47V48W49X50Y51Z52\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26A27B28C29D30E31F32G33H34I35J36K37L38M39N40O41P42Q43R44S45T46U47V48W49X50Y51Z52a53b54c55d56e57f58g59h60i61j62k63l64m65n66o67p68q69r70s71t72u73v74w75x76y77z78\"));\nconsole.log(move_num(\"a1b2c\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122841,
      "stdout": "../../../../tmp/tmps7xqfi1u.ts(20,28): error TS1002: Unterminated string literal.\n../../../../tmp/tmps7xqfi1u.ts(21,1): error TS1005: ',' expected.\n../../../../tmp/tmps7xqfi1u.ts(21,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: number[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(parseInt(test_str[i]));\n        }\n    }\n    return str_arr.join('') + num_arr.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122841,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return str + num_str;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122841,
      "stdout": "../../../../tmp/tmp46do9giu.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: number[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(parseInt(test_str[i]));\n        }\n    }\n    return str_arr.join('') + num_arr.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122841,
      "stdout": "../../../../tmp/tmpq35c6rsg.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join(\"\") + num_arr.join(\"\");\n}\n\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122841,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: number[] = [];\n    let str_arr: string[] = [];\n    let result: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(parseInt(test_str[i]));\n        }\n    }\n    result = str_arr.join(\"\") + num_arr.join(\"\");\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122841,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str: string = \"\";\n    let char_str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num(\"a1b2c3\"));\nconsole.log(move_num(\"a10b20c30\"));\nconsole.log(move_num(\"abc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122841,
      "stdout": "abc123\nabc102030\nabc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122841,
      "stdout": "../../../../tmp/tmpk7wv7oaz.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: number[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(parseInt(test_str[i]));\n        }\n    }\n    return str_arr.join('') + num_arr.join('');\n}\n\nconsole.log(move_num('abc123'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122841,
      "stdout": "abc123\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num: string = '';\n    let str: string = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str += test_str[i];\n        } else {\n            num += test_str[i];\n        }\n    }\n    return str + num;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122841,
      "stdout": "abcd1234\nabcdefghij123456789\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    let result: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    result = str_arr.join(\"\") + num_arr.join(\"\");\n    return result;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122841,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str_arr = test_str.split(\"\");\n    let num_arr = [];\n    let char_arr = [];\n    for (let i = 0; i < str_arr.length; i++) {\n        if (isNaN(parseInt(str_arr[i]))) {\n            char_arr.push(str_arr[i]);\n        } else {\n            num_arr.push(str_arr[i]);\n        }\n    }\n    return char_arr.join(\"\") + num_arr.join(\"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122841,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let chars = test_str.match(/[a-zA-Z]+/g);\n    return chars.join('') + nums.join('');\n}\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122841,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str_arr = test_str.split('');\n    let num_arr = [];\n    let char_arr = [];\n    for (let i = 0; i < str_arr.length; i++) {\n        if (str_arr[i].match(/[0-9]/)) {\n            num_arr.push(str_arr[i]);\n        } else {\n            char_arr.push(str_arr[i]);\n        }\n    }\n    return char_arr.join('') + num_arr.join('');\n}\n\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122841,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= '0' && test_str[i] <= '9') {\n            num_arr.push(test_str[i]);\n        } else {\n            str_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join('') + num_arr.join('');\n}\nconsole.log(move_num('abc123'));\nconsole.log(move_num('abc123xyz'));\nconsole.log(move_num('abcdef'));\nconsole.log(move_num('123456'));\nconsole.log(move_num('0'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122841,
      "stdout": "abc123\nabcxyz123\nabcdef\n123456\n0\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "../../../../tmp/tmpm2rcj2xy.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n            nums += test_str[i];\n        } else {\n            chars += test_str[i];\n        }\n    }\n    return chars + nums;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122841,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result: string = \"\";\n    let nums: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            result += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return result + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let char_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num('abc123'));\nconsole.log(move_num('abc123xyz'));\nconsole.log(move_num('abcdef'));\nconsole.log(move_num('123456'));\nconsole.log(move_num('0'));\nconsole.log(move_num('a'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122841,
      "stdout": "abc123\nabcxyz123\nabcdef\n123456\n0\na\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join('') + num_arr.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: number[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(Number(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(Number(test_str[i]));\n        }\n    }\n    return str_arr.join('') + num_arr.join('');\n}\n\nconsole.log(move_num(\"a1b2c3\"));\nconsole.log(move_num(\"a10b20c30\"));\nconsole.log(move_num(\"abc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122841,
      "stdout": "abc123\nabc102030\nabc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\nconsole.log(move_num(\"a1b2c3\"));\nconsole.log(move_num(\"a10b20c30\"));\nconsole.log(move_num(\"abc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122843,
      "stdout": "abc123\nabc102030\nabc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let new_str = '';\n    let num_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            new_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return new_str + num_str;\n}\n\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122843,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str_arr = test_str.split('');\n    let num_arr = [];\n    let char_arr = [];\n    for (let i = 0; i < str_arr.length; i++) {\n        if (isNaN(parseInt(str_arr[i]))) {\n            char_arr.push(str_arr[i]);\n        } else {\n            num_arr.push(str_arr[i]);\n        }\n    }\n    return char_arr.join('') + num_arr.join('');\n}\nconsole.log(move_num('a1b2c3'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122843,
      "stdout": "abc123\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122844,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = test_str.match(/\\d+/g);\n    let str_arr: string[] = test_str.match(/\\D+/g);\n    return str_arr.join('') + num_arr.join('');\n}\n\nconsole.log(move_num(\"a1b2c3\"));\nconsole.log(move_num(\"a10b20c30\"));\nconsole.log(move_num(\"abc\"));\nconsole.log(move_num(\"123\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122844,
      "stdout": "abc123\nabc102030\n",
      "stderr": "/tmp/tmpe9rqm8uj.js:5\n    return str_arr.join('') + num_arr.join('');\n                                      ^\n\nTypeError: Cannot read properties of null (reading 'join')\n    at move_num (/tmp/tmpe9rqm8uj.js:5:39)\n    at Object.<anonymous> (/tmp/tmpe9rqm8uj.js:9:13)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n  let result = \"\";\n  let nums = \"\";\n  for (let i = 0; i < test_str.length; i++) {\n    if (isNaN(test_str[i])) {\n      result += test_str[i];\n    } else {\n      nums += test_str[i];\n    }\n  }\n  return result + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122843,
      "stdout": "../../../../tmp/tmpx_e39o69.ts(6,15): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n            num_str += test_str[i];\n        } else {\n            str += test_str[i];\n        }\n    }\n    return str + num_str;\n}\n\nconsole.log(move_num(\"abcd1234\"));\nconsole.log(move_num(\"abcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122844,
      "stdout": "abcd1234\nabcd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let str = test_str.match(/\\D+/g);\n    return str.join(\"\") + nums.join(\"\");\n}\nconsole.log(move_num(\"abc123\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122844,
      "stdout": "abc123\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num(\"abcd1234\"));\nconsole.log(move_num(\"abcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122844,
      "stdout": "../../../../tmp/tmpifu76jd0.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(Number(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join('') + num_arr.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n            num_str += test_str[i];\n        } else {\n            char_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122844,
      "stdout": "abcd1234\nabcdefghij12345678910\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122844,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return str + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let letter_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            letter_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return letter_str + num_str;\n}\nconsole.log(move_num('abc123'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122844,
      "stdout": "../../../../tmp/tmpo4v7yy0x.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr = [];\n    let str_arr = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join('') + num_arr.join('');\n}\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122844,
      "stdout": "../../../../tmp/tmp9d9m1wvv.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let str = test_str.match(/[a-zA-Z]+/g);\n    return str.join('') + nums.join('');\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122844,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let new_str = \"\";\n    let num_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            new_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return new_str + num_str;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122844,
      "stdout": "../../../../tmp/tmpj25u66rn.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "../../../../tmp/tmpm2rcj2xy.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result: string = \"\";\n    let num: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            result += test_str[i];\n        } else {\n            num += test_str[i];\n        }\n    }\n    return result + num;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122844,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr = test_str.match(/\\d/g);\n    let str_arr = test_str.match(/[a-zA-Z]/g);\n    return str_arr.join('') + num_arr.join('');\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122844,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join('') + num_arr.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join('') + num_arr.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str = \"\";\n    let num = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str += test_str[i];\n        } else {\n            num += test_str[i];\n        }\n    }\n    return str + num;\n}\n\nconsole.log(move_num(\"abcd1234\"));\nconsole.log(move_num(\"abcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122844,
      "stdout": "abcd1234\nabcd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n  let nums: string = \"\";\n  let str: string = \"\";\n  for (let i = 0; i < test_str.length; i++) {\n    if (isNaN(parseInt(test_str[i]))) {\n      str += test_str[i];\n    } else {\n      nums += test_str[i];\n    }\n  }\n  return str + nums;\n}\n\nconsole.log(move_num(\"a1b2c3\"));\nconsole.log(move_num(\"a10b20c30\"));\nconsole.log(move_num(\"abc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122844,
      "stdout": "abc123\nabc102030\nabc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n  let nums: string = \"\";\n  let str: string = \"\";\n  for (let i = 0; i < test_str.length; i++) {\n    if (isNaN(parseInt(test_str[i]))) {\n      str += test_str[i];\n    } else {\n      nums += test_str[i];\n    }\n  }\n  return str + nums;\n}\nconsole.log(move_num(\"a1b2c3\"));\nconsole.log(move_num(\"a10b20c30\"));\nconsole.log(move_num(\"abc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122844,
      "stdout": "abc123\nabc102030\nabc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n  let nums = test_str.match(/\\d+/g);\n  let chars = test_str.match(/[a-zA-Z]+/g);\n  return chars.join(\"\") + nums.join(\"\");\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a10b20c30d40\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122844,
      "stdout": "abcd1234\nabcd10203040\nabcdefghij12345678910\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr = test_str.match(/\\d/g);\n    let str_arr = test_str.match(/[a-zA-Z]/g);\n    return str_arr.join('') + num_arr.join('');\n}\nconsole.log(move_num(\"a1b2c3d4e5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122844,
      "stdout": "abcde12345\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "../../../../tmp/tmpn9crnc0s.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(Number(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join('') + num_arr.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122844,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n  let str = test_str.split(\"\");\n  let nums = [];\n  let letters = [];\n  for (let i = 0; i < str.length; i++) {\n    if (parseInt(str[i]) >= 0) {\n      nums.push(str[i]);\n    } else {\n      letters.push(str[i]);\n    }\n  }\n  return letters.concat(nums).join(\"\");\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122846,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let letter_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            letter_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return letter_str + num_str;\n}\n\nconsole.log(move_num('abcd1234'));\nconsole.log(move_num('abcd'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122846,
      "stdout": "abcd1234\nabcd\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str = test_str.split('');\n    let nums = [];\n    let chars = [];\n    for (let i = 0; i < str.length; i++) {\n        if (isNaN(parseInt(str[i]))) {\n            chars.push(str[i]);\n        } else {\n            nums.push(str[i]);\n        }\n    }\n    return chars.concat(nums).join('');\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122846,
      "stdout": "abcd1234\nabcdefghij12345678910\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n            nums += test_str[i];\n        } else {\n            chars += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j0\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122846,
      "stdout": "abcd1234\nabcdefghij1234567890\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(Number(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join('') + num_arr.join('');\n}\n\nconsole.log(move_num('a1b2c3'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122847,
      "stdout": "abc123\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n            nums += test_str[i];\n        } else {\n            str += test_str[i];\n        }\n    }\n    return str + nums;\n}\n\nconsole.log(move_num(\"abcd1234xyz\"));\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122846,
      "stdout": "abcdxyz1234\nabcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let str = test_str.replace(/\\d+/g, \"\");\n    return str + nums;\n}\nconsole.log(move_num(\"abc123\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122846,
      "stdout": "abc123\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Iloveyouthreethousand1,143,55,3000'\n\nshould loosely deep-equal\n\n'Iloveyouthreethousand1143553000'\n    at test (/tmp/tmps2p_lf6c.js:11:12)\n    at Object.<anonymous> (/tmp/tmps2p_lf6c.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Iloveyouthreethousand1,143,55,3000',\n  expected: 'Iloveyouthreethousand1143553000',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: number[] = [];\n    let str_arr: string[] = [];\n    let result: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(Number(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(Number(test_str[i]));\n        }\n    }\n    for (let i = 0; i < str_arr.length; i++) {\n        result += str_arr[i];\n    }\n    for (let i = 0; i < num_arr.length; i++) {\n        result += num_arr[i];\n    }\n    return result;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122847,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = [];\n    let chars = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            chars.push(test_str[i]);\n        } else {\n            nums.push(test_str[i]);\n        }\n    }\n    return chars.join('') + nums.join('');\n}\n\nconsole.log(move_num(\"abcd1234\"));\nconsole.log(move_num(\"abcd\"));\nconsole.log(move_num(\"1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122846,
      "stdout": "../../../../tmp/tmp8kudkagq.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let str = test_str.match(/[a-zA-Z]+/g);\n    let result = str.join('') + nums.join('');\n    return result;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122846,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str_arr = test_str.split(\"\");\n    let num_arr = [];\n    let char_arr = [];\n    for (let i = 0; i < str_arr.length; i++) {\n        if (isNaN(parseInt(str_arr[i]))) {\n            char_arr.push(str_arr[i]);\n        } else {\n            num_arr.push(str_arr[i]);\n        }\n    }\n    return char_arr.join(\"\") + num_arr.join(\"\");\n}\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122847,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr = test_str.match(/\\d+/g);\n    let str_arr = test_str.match(/[a-zA-Z]+/g);\n    let result = \"\";\n    if (num_arr) {\n        result = str_arr.join(\"\") + num_arr.join(\"\");\n    } else {\n        result = str_arr.join(\"\");\n    }\n    return result;\n}\n\nconsole.log(move_num(\"abc123\"));\nconsole.log(move_num(\"abc\"));\nconsole.log(move_num(\"123\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122847,
      "stdout": "abc123\nabc\n",
      "stderr": "/tmp/tmpuh2_lgnz.js:7\n        result = str_arr.join(\"\") + num_arr.join(\"\");\n                         ^\n\nTypeError: Cannot read properties of null (reading 'join')\n    at move_num (/tmp/tmpuh2_lgnz.js:7:26)\n    at Object.<anonymous> (/tmp/tmpuh2_lgnz.js:16:13)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return str + num_str;\n}\n\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122847,
      "stdout": "../../../../tmp/tmp7i_g82i9.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let letters: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            letters += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return letters + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122847,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122847,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let new_str: string = \"\";\n    let num_str: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            new_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return new_str + num_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122847,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let char_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num('abcd1234'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122847,
      "stdout": "../../../../tmp/tmp3gu0vw4q.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122841,
      "stdout": "../../../../tmp/tmpk7wv7oaz.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n  let num_str = \"\";\n  let str_str = \"\";\n  for (let i = 0; i < test_str.length; i++) {\n    if (isNaN(test_str[i])) {\n      str_str += test_str[i];\n    } else {\n      num_str += test_str[i];\n    }\n  }\n  return str_str + num_str;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122847,
      "stdout": "../../../../tmp/tmpbbi5pmzm.ts(6,15): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str: string = \"\";\n    let char_str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n            num_str += test_str[i];\n        } else {\n            char_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122847,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let new_str = \"\";\n    let num_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            new_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return new_str + num_str;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122844,
      "stdout": "../../../../tmp/tmpj25u66rn.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join(\"\") + num_arr.join(\"\");\n}\n\nconsole.log(move_num(\"a1b2c3\"));\nconsole.log(move_num(\"a10b20c30\"));\nconsole.log(move_num(\"abc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122847,
      "stdout": "abc123\nabc102030\nabc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str = test_str.split(\"\");\n    let nums = [];\n    let letters = [];\n    for (let i = 0; i < str.length; i++) {\n        if (isNaN(parseInt(str[i]))) {\n            letters.push(str[i]);\n        } else {\n            nums.push(str[i]);\n        }\n    }\n    return letters.join(\"\") + nums.join(\"\");\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a1b2c3d4e5f6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122847,
      "stdout": "abcd1234\nabcdef123456\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let str = test_str.replace(/\\d+/g, \"\");\n    return str + nums;\n}\n\nconsole.log(move_num(\"abc123\"));\nconsole.log(move_num(\"abc123xyz\"));\nconsole.log(move_num(\"abcdef\"));\nconsole.log(move_num(\"123456\"));\nconsole.log(move_num(\"0\"));\nconsole.log(move_num(\"\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122847,
      "stdout": "abc123\nabcxyz123\nabcdefnull\n123456\n0\nnull\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Iloveyouthreethousand1,143,55,3000'\n\nshould loosely deep-equal\n\n'Iloveyouthreethousand1143553000'\n    at test (/tmp/tmp10ho6tsu.js:16:12)\n    at Object.<anonymous> (/tmp/tmp10ho6tsu.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Iloveyouthreethousand1,143,55,3000',\n  expected: 'Iloveyouthreethousand1143553000',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let str = test_str.replace(/\\d+/g, '');\n    return str + nums;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122848,
      "stdout": "abcd1,2,3,4\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Iloveyouthreethousand1,143,55,3000'\n\nshould loosely deep-equal\n\n'Iloveyouthreethousand1143553000'\n    at test (/tmp/tmpakx_cl4p.js:11:12)\n    at Object.<anonymous> (/tmp/tmpakx_cl4p.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Iloveyouthreethousand1,143,55,3000',\n  expected: 'Iloveyouthreethousand1143553000',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let chars = test_str.match(/\\D+/g);\n    return chars.join('') + nums.join('');\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a10b20c30d40\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122849,
      "stdout": "abcd1234\nabcd10203040\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str_arr: string[] = test_str.split(\"\");\n    let num_arr: string[] = [];\n    let str_arr_new: string[] = [];\n    for (let i = 0; i < str_arr.length; i++) {\n        if (isNaN(parseInt(str_arr[i]))) {\n            str_arr_new.push(str_arr[i]);\n        } else {\n            num_arr.push(str_arr[i]);\n        }\n    }\n    return str_arr_new.join(\"\") + num_arr.join(\"\");\n}\n\nconsole.log(move_num(\"abc123\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122848,
      "stdout": "abc123\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let letters = test_str.match(/[a-zA-Z]+/g);\n    return letters.join('') + nums.join('');\n}\nconsole.log(move_num(\"abcd1234xyz\"));\nconsole.log(move_num(\"abcd\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122849,
      "stdout": "abcdxyz1234\n",
      "stderr": "/tmp/tmp5u8not0p.js:5\n    return letters.join('') + nums.join('');\n                                   ^\n\nTypeError: Cannot read properties of null (reading 'join')\n    at move_num (/tmp/tmp5u8not0p.js:5:36)\n    at Object.<anonymous> (/tmp/tmp5u8not0p.js:8:13)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let str = test_str.replace(/\\d+/g, '');\n    return str + nums;\n}\nconsole.log(move_num(\"a1b2c3\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122849,
      "stdout": "abc1,2,3\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Iloveyouthreethousand1,143,55,3000'\n\nshould loosely deep-equal\n\n'Iloveyouthreethousand1143553000'\n    at test (/tmp/tmpp5m43w0x.js:11:12)\n    at Object.<anonymous> (/tmp/tmpp5m43w0x.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Iloveyouthreethousand1,143,55,3000',\n  expected: 'Iloveyouthreethousand1143553000',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    let result: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(Number(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    result = str_arr.join(\"\") + num_arr.join(\"\");\n    return result;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122849,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let new_str = \"\";\n    let num_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            new_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return new_str + num_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122849,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n  let nums = test_str.match(/\\d+/g);\n  let chars = test_str.match(/[a-zA-Z]+/g);\n  return chars.join(\"\") + nums.join(\"\");\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122849,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let char_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\nconsole.log(move_num('a1b2c3'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122849,
      "stdout": "abc123\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str_arr: string[] = test_str.split(\"\");\n    let num_arr: string[] = [];\n    let result_arr: string[] = [];\n    for (let i = 0; i < str_arr.length; i++) {\n        if (isNaN(Number(str_arr[i]))) {\n            result_arr.push(str_arr[i]);\n        } else {\n            num_arr.push(str_arr[i]);\n        }\n    }\n    return result_arr.join(\"\") + num_arr.join(\"\");\n}\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a12b34c56d78\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122849,
      "stdout": "abcd1234\nabcd12345678\nabcdefghij12345678910\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "../../../../tmp/tmpn9crnc0s.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let char_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "../../../../tmp/tmpzxh5dxma.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            str += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return str + nums;\n}\nconsole.log(move_num(\"a1b2c3\"));\nconsole.log(move_num(\"a10b20c30\"));\nconsole.log(move_num(\"abc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122849,
      "stdout": "../../../../tmp/tmpqx2jyeys.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let alpha_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n            num_str += test_str[i];\n        } else {\n            alpha_str += test_str[i];\n        }\n    }\n    return alpha_str + num_str;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10k11l12m13n14o15p16q17r18s19t20u21v22w23x24y25z26\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122849,
      "stdout": "abcd1234\nabcdefghijklmnopqrstuvwxyz1234567891011121314151617181920212223242526\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result: string = \"\";\n    let num: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            result += test_str[i];\n        } else {\n            num += test_str[i];\n        }\n    }\n    return result + num;\n}\nconsole.log(move_num(\"abcd1234xyz\"));\nconsole.log(move_num(\"abcdxyz\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "abcdxyz1234\nabcdxyz\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n            num_str += test_str[i];\n        } else {\n            str += test_str[i];\n        }\n    }\n    return str + num_str;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "../../../../tmp/tmpn9crnc0s.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string[] = [];\n    let chars: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars.push(test_str[i]);\n        } else {\n            nums.push(test_str[i]);\n        }\n    }\n    return chars.join('') + nums.join('');\n}\nconsole.log(move_num(\"a1b2c3\"));\nconsole.log(move_num(\"a10b20c30\"));\nconsole.log(move_num(\"abc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "abc123\nabc102030\nabc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result: string = \"\";\n    let num: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            result += test_str[i];\n        } else {\n            num += test_str[i];\n        }\n    }\n    return result + num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n            nums += test_str[i];\n        } else {\n            chars += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "abcd1234\nabcdefghij12345678910\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n            num_str += test_str[i];\n        } else {\n            char_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d/g);\n    let str = test_str.replace(/\\d/g, '');\n    return str + nums.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n  let nums = test_str.match(/\\d+/g);\n  let chars = test_str.match(/[a-zA-Z]+/g);\n  return chars.join(\"\") + nums.join(\"\");\n}\n\nconsole.log(move_num(\"abc123\"));\nconsole.log(move_num(\"abc123xyz\"));\nconsole.log(move_num(\"abcdef\"));\nconsole.log(move_num(\"123456\"));\nconsole.log(move_num(\"\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "abc123\nabcxyz123\n",
      "stderr": "/tmp/tmpkc3zab8v.js:5\n    return chars.join(\"\") + nums.join(\"\");\n                                 ^\n\nTypeError: Cannot read properties of null (reading 'join')\n    at move_num (/tmp/tmpkc3zab8v.js:5:34)\n    at Object.<anonymous> (/tmp/tmpkc3zab8v.js:9:13)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join(\"\") + num_arr.join(\"\");\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result: string = \"\";\n    let nums: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            result += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return result + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let alpha_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            alpha_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return alpha_str + num_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string[] = [];\n    let chars: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars.push(test_str[i]);\n        } else {\n            nums.push(test_str[i]);\n        }\n    }\n    return chars.join('') + nums.join('');\n}\n\nconsole.log(move_num(\"abcd1234\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: number[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (Number(test_str[i])) {\n            num_arr.push(Number(test_str[i]));\n        } else {\n            str_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join(\"\") + num_arr.join(\"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122850,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Iloveyouthree000thousand1143553'\n\nshould loosely deep-equal\n\n'Iloveyouthreethousand1143553000'\n    at test (/tmp/tmp5gc60mvm.js:18:12)\n    at Object.<anonymous> (/tmp/tmp5gc60mvm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Iloveyouthree000thousand1143553',\n  expected: 'Iloveyouthreethousand1143553000',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = test_str.match(/\\d+/g);\n    let num_str_len = num_str.length;\n    let num_str_pos = test_str.indexOf(num_str[0]);\n    let new_str = test_str.slice(0, num_str_pos);\n    let new_str_len = new_str.length;\n    let new_str_pos = test_str.indexOf(new_str[0]);\n    let num_str_end = test_str.slice(num_str_pos + num_str_len);\n    let new_str_end = test_str.slice(new_str_pos + new_str_len);\n    return new_str_end + num_str_end;\n}\nconsole.log(move_num(\"abc123def\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122851,
      "stdout": "123def23def\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1love143you55three3000thousande143you55three3000thousand'\n\nshould loosely deep-equal\n\n'Iloveyouthreethousand1143553000'\n    at test (/tmp/tmpigrc7y8n.js:17:12)\n    at Object.<anonymous> (/tmp/tmpigrc7y8n.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1love143you55three3000thousande143you55three3000thousand',\n  expected: 'Iloveyouthreethousand1143553000',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: number[] = [];\n    let str_arr: string[] = [];\n    let result: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(parseInt(test_str[i]));\n        }\n    }\n    for (let i = 0; i < str_arr.length; i++) {\n        result += str_arr[i];\n    }\n    for (let i = 0; i < num_arr.length; i++) {\n        result += num_arr[i];\n    }\n    return result;\n}\nconsole.log(move_num(\"a1b2c3\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122851,
      "stdout": "abc123\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: number[] = [];\n    let str_arr: string[] = [];\n    let result: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(parseInt(test_str[i]));\n        }\n    }\n    for (let i = 0; i < str_arr.length; i++) {\n        result += str_arr[i];\n    }\n    for (let i = 0; i < num_arr.length; i++) {\n        result += num_arr[i];\n    }\n    return result;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\nconsole.log(move_num(\"a1b2c3\"));\nconsole.log(move_num(\"a10b20c30\"));\nconsole.log(move_num(\"abc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "abc123\nabc102030\nabc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let letters: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            letters += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return letters + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    let result: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    result = str_arr.join(\"\") + num_arr.join(\"\");\n    return result;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122841,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n  let new_str: string = \"\";\n  let num_str: string = \"\";\n  for (let i = 0; i < test_str.length; i++) {\n    if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n      num_str += test_str[i];\n    } else {\n      new_str += test_str[i];\n    }\n  }\n  return new_str + num_str;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str_arr = test_str.split('');\n    let num_arr = [];\n    let char_arr = [];\n    for (let i = 0; i < str_arr.length; i++) {\n        if (isNaN(parseInt(str_arr[i]))) {\n            char_arr.push(str_arr[i]);\n        } else {\n            num_arr.push(str_arr[i]);\n        }\n    }\n    return char_arr.join('') + num_arr.join('');\n}\n\nconsole.log(move_num('abc123'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "abc123\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str = test_str.split('');\n    let num = [];\n    let result = [];\n    for (let i = 0; i < str.length; i++) {\n        if (Number(str[i])) {\n            num.push(str[i]);\n        } else {\n            result.push(str[i]);\n        }\n    }\n    return result.join('') + num.join('');\n}\nconsole.log(move_num(\"a1b2c3\"));\nconsole.log(move_num(\"a10b20c30\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "abc123\na0b0c0123\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Iloveyouthree000thousand1143553'\n\nshould loosely deep-equal\n\n'Iloveyouthreethousand1143553000'\n    at test (/tmp/tmpvzqfa8tm.js:21:12)\n    at Object.<anonymous> (/tmp/tmpvzqfa8tm.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Iloveyouthree000thousand1143553',\n  expected: 'Iloveyouthreethousand1143553000',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9j10\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "abcd1234\nabcdefghij12345678910\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let char_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let char_arr: string[] = [];\n    let result: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    result = char_arr.join(\"\") + num_arr.join(\"\");\n    return result;\n}\n\nconsole.log(move_num(\"a1b2c3\"));\nconsole.log(move_num(\"a10b20c30\"));\nconsole.log(move_num(\"abc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "abc123\nabc102030\nabc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num: string = \"\";\n    let str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str += test_str[i];\n        } else {\n            num += test_str[i];\n        }\n    }\n    return str + num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let str: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return str + nums;\n}\nconsole.log(move_num(\"a1b2c3\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "abc123\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    let result: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str.charCodeAt(i) >= 48 && test_str.charCodeAt(i) <= 57) {\n            num_arr.push(test_str[i]);\n        } else {\n            str_arr.push(test_str[i]);\n        }\n    }\n    result = str_arr.join(\"\") + num_arr.join(\"\");\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122853,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    var num_str: string = \"\";\n    var other_str: string = \"\";\n    for (var i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            other_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return other_str + num_str;\n}\nconsole.log(move_num(\"a1b2c3d4e5f6g7h8i9\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122853,
      "stdout": "abcdefghi123456789\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let alpha_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i].match(/[0-9]/)) {\n            num_str += test_str[i];\n        } else {\n            alpha_str += test_str[i];\n        }\n    }\n    return alpha_str + num_str;\n}\n\nconsole.log(move_num('abc123'));\nconsole.log(move_num('abc123xyz'));\nconsole.log(move_num('abcdef'));\nconsole.log(move_num('123456'));\nconsole.log(move_num('0'));\nconsole.log(move_num('abc'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122853,
      "stdout": "abc123\nabcxyz123\nabcdef\n123456\n0\nabc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result: string = \"\";\n    let num: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            result += test_str[i];\n        } else {\n            num += test_str[i];\n        }\n    }\n    return result + num;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str: string = \"\";\n    let num: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str += test_str[i];\n        } else {\n            num += test_str[i];\n        }\n    }\n    return str + num;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122853,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result = \"\";\n    let nums = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            result += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return result + nums;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122853,
      "stdout": "../../../../tmp/tmpkxsqprou.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let str = test_str.split('');\n    let nums = [];\n    let letters = [];\n    for (let i = 0; i < str.length; i++) {\n        if (isNaN(str[i])) {\n            letters.push(str[i]);\n        } else {\n            nums.push(str[i]);\n        }\n    }\n    return letters.join('') + nums.join('');\n}\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122852,
      "stdout": "../../../../tmp/tmpu37jt_j8.ts(7,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122853,
      "stdout": "../../../../tmp/tmp491bcddz.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result = '';\n    let nums = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            result += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return result + nums;\n}\n\nconsole.log(move_num(\"abcd123\"));\nconsole.log(move_num(\"abcd\"));\nconsole.log(move_num(\"123\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122853,
      "stdout": "../../../../tmp/tmpy3eymfee.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: string[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return str_arr.join(\"\") + num_arr.join(\"\");\n}\n\nconsole.log(move_num(\"a1b2c3\"));\nconsole.log(move_num(\"a10b20c30\"));\nconsole.log(move_num(\"abc\"));\nconsole.log(move_num(\"123\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122853,
      "stdout": "abc123\nabc102030\nabc\n123\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num(\"a1b2c3\"));\nconsole.log(move_num(\"a10b20c30\"));\nconsole.log(move_num(\"abc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122854,
      "stdout": "abc123\nabc102030\nabc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return str + nums;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122854,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr = [];\n    let char_arr = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_arr.push(test_str[i]);\n        } else {\n            num_arr.push(test_str[i]);\n        }\n    }\n    return char_arr.join('') + num_arr.join('');\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122854,
      "stdout": "../../../../tmp/tmp6h95_ac4.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    let res: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    res = chars + nums;\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            chars += test_str[i];\n        } else {\n            nums += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122838,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n  let nums = test_str.match(/\\d+/g);\n  let chars = test_str.match(/[a-zA-Z]+/g);\n  return chars.join(\"\") + nums.join(\"\");\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122854,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n  let nums = test_str.match(/[0-9]/g);\n  let chars = test_str.match(/[a-z]/gi);\n  return chars.join(\"\") + nums.join(\"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_arr: number[] = [];\n    let str_arr: string[] = [];\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            str_arr.push(test_str[i]);\n        } else {\n            num_arr.push(parseInt(test_str[i]));\n        }\n    }\n    return str_arr.join(\"\") + num_arr.join(\"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let str = test_str.replace(/\\d+/g, '');\n    return str + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122854,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Iloveyouthreethousand1,143,55,3000'\n\nshould loosely deep-equal\n\n'Iloveyouthreethousand1143553000'\n    at test (/tmp/tmppdc29p9j.js:10:12)\n    at Object.<anonymous> (/tmp/tmppdc29p9j.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Iloveyouthreethousand1,143,55,3000',\n  expected: 'Iloveyouthreethousand1143553000',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num: string = \"\";\n    let str: string = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n            num += test_str[i];\n        } else {\n            str += test_str[i];\n        }\n    }\n    return str + num;\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122854,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let new_str = \"\";\n    let num_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            new_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return new_str + num_str;\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122844,
      "stdout": "../../../../tmp/tmpj25u66rn.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let chars = test_str.match(/\\D+/g);\n    return chars.join('') + nums.join('');\n}\n\nconsole.log(move_num(\"a1b2c3d4\"));\nconsole.log(move_num(\"a10b20c30d40\"));\nconsole.log(move_num(\"a10b20c30d40xyz\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122854,
      "stdout": "abcd1234\nabcd10203040\nabcdxyz10203040\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums: string = \"\";\n    let chars: string = \"\";\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n            nums += test_str[i];\n        } else {\n            chars += test_str[i];\n        }\n    }\n    return chars + nums;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122854,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let char_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\nconsole.log(move_num('a1b2c3'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122854,
      "stdout": "../../../../tmp/tmpmu_rq2yg.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= \"0\" && test_str[i] <= \"9\") {\n            num_str += test_str[i];\n        } else {\n            char_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\nconsole.log(move_num(\"abcd1234xyz\"));\nconsole.log(move_num(\"abcdxyz\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122855,
      "stdout": "abcdxyz1234\nabcdxyz\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let result: string = '';\n    let num: string = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(parseInt(test_str[i]))) {\n            result += test_str[i];\n        } else {\n            num += test_str[i];\n        }\n    }\n    return result + num;\n}\n\nconsole.log(move_num('a1b2c3d4'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122855,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = \"\";\n    let char_str = \"\";\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1665510019,
      "stdout": "../../../../tmp/tmpn9crnc0s.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let nums = test_str.match(/\\d+/g);\n    let letters = test_str.match(/[a-zA-Z]+/g);\n    return letters.join('') + nums.join('');\n}\nconsole.log(move_num(\"a1b2c3d4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122855,
      "stdout": "abcd1234\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to move all the numbers to the end of the given string.\nfunction move_num(test_str: string): string {\n    let num_str = '';\n    let char_str = '';\n    for (let i = 0; i < test_str.length; i++) {\n        if (isNaN(test_str[i])) {\n            char_str += test_str[i];\n        } else {\n            num_str += test_str[i];\n        }\n    }\n    return char_str + num_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_num;\n  assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");\n  assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");\n  assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");\n}\n\ntest();",
      "timestamp": 1666122854,
      "stdout": "../../../../tmp/tmpw1t1o9le.ts(6,19): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}