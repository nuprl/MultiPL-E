{
  "name": "mbpp_802_count_rotation",
  "language": "ts",
  "prompt": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let n = arr.length;\n    let low = 0;\n    let high = n - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = low + Math.floor((high - low) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let count = 0;\n    for (let i = 0; i < arr.length - 1; i++) {\n        if (arr[i] > arr[i + 1]) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpisfl1vzy.js:14:12)\n    at Object.<anonymous> (/tmp/tmpisfl1vzy.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let n = arr.length;\n    let low = 0;\n    let high = n - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let min = arr[0];\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            min_index = i;\n        }\n    }\n    return min_index;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpaizvyqed.js:16:12)\n    at Object.<anonymous> (/tmp/tmpaizvyqed.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let min = arr[0];\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            min_index = i;\n        }\n    }\n    return min_index;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpaizvyqed.js:16:12)\n    at Object.<anonymous> (/tmp/tmpaizvyqed.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        }\n        else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        }\n        else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let n = arr.length;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = low + Math.floor((high - low) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let n = arr.length;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = low + Math.floor((high - low) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let n = arr.length;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let n = arr.length;\n\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let n = arr.length;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let n = arr.length;\n    let low = 0;\n    let high = n - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low < high) {\n        let mid = Math.floor((low + high) / 2);\n        if (mid < high && arr[mid] > arr[mid + 1]) {\n            return mid + 1;\n        }\n        if (mid > low && arr[mid] < arr[mid - 1]) {\n            return mid;\n        }\n        if (arr[low] > arr[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmp7wozi_4u.js:25:12)\n    at Object.<anonymous> (/tmp/tmp7wozi_4u.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    if (arr[low] <= arr[high]) {\n      return low;\n    }\n    let mid = Math.floor((low + high) / 2);\n    let next = (mid + 1) % arr.length;\n    let prev = (mid + arr.length - 1) % arr.length;\n    if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n      return mid;\n    } else if (arr[mid] <= arr[high]) {\n      high = mid - 1;\n    } else if (arr[mid] >= arr[low]) {\n      low = mid + 1;\n    }\n  }\n  return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n  let n = arr.length;\n  let low = 0;\n  let high = n - 1;\n  while (low <= high) {\n    if (arr[low] <= arr[high]) {\n      return low;\n    }\n    let mid = Math.floor((low + high) / 2);\n    let next = (mid + 1) % n;\n    let prev = (mid + n - 1) % n;\n    if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n      return mid;\n    } else if (arr[mid] <= arr[high]) {\n      high = mid - 1;\n    } else if (arr[mid] >= arr[low]) {\n      low = mid + 1;\n    }\n  }\n  return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > arr[i + 1]) {\n            count = i + 1;\n            break;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    let mid = 0;\n    while (start <= end) {\n        if (arr[start] <= arr[end]) {\n            return start;\n        }\n        mid = Math.floor((start + end) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[end]) {\n            end = mid - 1;\n        } else if (arr[mid] >= arr[start]) {\n            start = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123995,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low < high) {\n        mid = Math.floor((low + high) / 2);\n        if (arr[mid] > arr[high]) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpc_gqp5yz.js:20:12)\n    at Object.<anonymous> (/tmp/tmpc_gqp5yz.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = low + Math.floor((high - low) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > arr[i + 1]) {\n            count = i + 1;\n            break;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > arr[i + 1]) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmp3at8zfvk.js:14:12)\n    at Object.<anonymous> (/tmp/tmp3at8zfvk.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let min = arr[0];\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            min_index = i;\n        }\n    }\n    return min_index;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpaizvyqed.js:16:12)\n    at Object.<anonymous> (/tmp/tmpaizvyqed.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    let n = arr.length;\n    let next = 0;\n    let prev = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        next = (mid + 1) % n;\n        prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123995,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let n = arr.length;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let n = arr.length;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let count = 0;\n    for (let i = 0; i < arr.length - 1; i++) {\n        if (arr[i] > arr[i + 1]) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpisfl1vzy.js:14:12)\n    at Object.<anonymous> (/tmp/tmpisfl1vzy.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > arr[i + 1]) {\n            count = i + 1;\n            break;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > arr[i + 1]) {\n            count = i + 1;\n            break;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let n = arr.length;\n    let low = 0;\n    let high = n - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = (low + high) / 2;\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123995,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let n = arr.length;\n    let low = 0;\n    let high = n - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123995,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let n = arr.length;\n    let low = 0;\n    let high = n - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let min = arr[0];\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            min_index = i;\n        }\n    }\n    return min_index;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpaizvyqed.js:16:12)\n    at Object.<anonymous> (/tmp/tmpaizvyqed.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let n = arr.length;\n\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123995,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low < high) {\n        mid = Math.floor((low + high) / 2);\n        if (arr[mid] > arr[high]) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpc_gqp5yz.js:20:12)\n    at Object.<anonymous> (/tmp/tmpc_gqp5yz.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let n = arr.length;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low < high) {\n        let mid = Math.floor((low + high) / 2);\n        if (arr[mid] < arr[high]) {\n            high = mid;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return low;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpg0yx5lfr.js:19:12)\n    at Object.<anonymous> (/tmp/tmpg0yx5lfr.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let min = arr[0];\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            min_index = i;\n        }\n    }\n    return min_index;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpaizvyqed.js:16:12)\n    at Object.<anonymous> (/tmp/tmpaizvyqed.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n  let count = 0;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] > arr[i + 1]) {\n      count++;\n    }\n  }\n  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpob3iy7tu.js:14:12)\n    at Object.<anonymous> (/tmp/tmpob3iy7tu.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let n = arr.length;\n\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123995,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let count = 0;\n    let min = arr[0];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            count = i;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmp9ixx54fb.js:16:12)\n    at Object.<anonymous> (/tmp/tmp9ixx54fb.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let count = 0;\n    let n = arr.length;\n    for (let i = 0; i < n - 1; i++) {\n        if (arr[i] > arr[i + 1]) {\n            count = i + 1;\n            break;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    let mid = 0;\n    while (start <= end) {\n        mid = Math.floor((start + end) / 2);\n        if (arr[mid] > arr[mid + 1]) {\n            return mid + 1;\n        }\n        if (arr[mid] < arr[mid - 1]) {\n            return mid;\n        }\n        if (arr[start] <= arr[mid]) {\n            start = mid + 1;\n        } else {\n            end = mid - 1;\n        }\n    }\n    return 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmps964zv92.js:26:12)\n    at Object.<anonymous> (/tmp/tmps964zv92.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low < high) {\n        let mid = Math.floor((low + high) / 2);\n        if (mid < high && arr[mid] > arr[mid + 1]) {\n            return mid + 1;\n        }\n        if (mid > low && arr[mid] < arr[mid - 1]) {\n            return mid;\n        }\n        if (arr[low] > arr[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n    }\n    return 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmp7wozi_4u.js:25:12)\n    at Object.<anonymous> (/tmp/tmp7wozi_4u.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid - 1 + arr.length) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123995,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    if (arr[low] <= arr[high]) {\n      return low;\n    }\n    let mid = Math.floor((low + high) / 2);\n    let next = (mid + 1) % arr.length;\n    let prev = (mid + arr.length - 1) % arr.length;\n    if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n      return mid;\n    } else if (arr[mid] <= arr[high]) {\n      high = mid - 1;\n    } else if (arr[mid] >= arr[low]) {\n      low = mid + 1;\n    }\n  }\n  return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        }\n        else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        }\n        else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123995,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        }\n        else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        }\n        else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123995,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let min = arr[0];\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            min_index = i;\n        }\n    }\n    return min_index;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpaizvyqed.js:16:12)\n    at Object.<anonymous> (/tmp/tmpaizvyqed.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let n = arr.length;\n    let low = 0;\n    let high = n - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = low + Math.floor((high - low) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123995,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let n = arr.length;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low < high) {\n        let mid = Math.floor((low + high) / 2);\n        if (mid < high && arr[mid] > arr[mid + 1]) {\n            return mid + 1;\n        }\n        if (mid > low && arr[mid] < arr[mid - 1]) {\n            return mid;\n        }\n        if (arr[low] < arr[mid]) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpeo5osrcx.js:25:12)\n    at Object.<anonymous> (/tmp/tmpeo5osrcx.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid - 1 + arr.length) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123995,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  let mid = 0;\n\n  while (low <= high) {\n    if (arr[low] <= arr[high]) {\n      return low;\n    }\n\n    mid = Math.floor((low + high) / 2);\n    let next = (mid + 1) % arr.length;\n    let prev = (mid + arr.length - 1) % arr.length;\n\n    if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n      return mid;\n    } else if (arr[mid] <= arr[high]) {\n      high = mid - 1;\n    } else if (arr[mid] >= arr[low]) {\n      low = mid + 1;\n    }\n  }\n  return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123995,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        }\n        else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        }\n        else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123995,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > arr[i + 1]) {\n            count = i + 1;\n            break;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let n = arr.length;\n    let low = 0;\n    let high = n - 1;\n    let mid = 0;\n\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123995,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let n = arr.length;\n    let low = 0;\n    let high = n - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123995,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let min = arr[0];\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            min_index = i;\n        }\n    }\n    return min_index;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpaizvyqed.js:16:12)\n    at Object.<anonymous> (/tmp/tmpaizvyqed.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = low + Math.floor((high - low) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let min = arr[0];\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            min_index = i;\n        }\n    }\n    return min_index;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpaizvyqed.js:16:12)\n    at Object.<anonymous> (/tmp/tmpaizvyqed.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0, high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) return low;\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) return mid;\n        else if (arr[mid] <= arr[high]) high = mid - 1;\n        else if (arr[mid] >= arr[low]) low = mid + 1;\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123995,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let min = arr[0];\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            min_index = i;\n        }\n    }\n    return min_index;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpaizvyqed.js:16:12)\n    at Object.<anonymous> (/tmp/tmpaizvyqed.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low < high) {\n    let mid = Math.floor((low + high) / 2);\n    if (arr[mid] > arr[high]) {\n      low = mid + 1;\n    } else {\n      high = mid;\n    }\n  }\n  return low;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpzmrs3g2z.js:19:12)\n    at Object.<anonymous> (/tmp/tmpzmrs3g2z.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let start = 0;\n    let end = arr.length - 1;\n    let mid = 0;\n    while (start <= end) {\n        if (arr[start] <= arr[end]) {\n            return start;\n        }\n        mid = Math.floor((start + end) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[end]) {\n            end = mid - 1;\n        } else if (arr[mid] >= arr[start]) {\n            start = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123995,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let n = arr.length;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let n = arr.length;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    if (arr[low] <= arr[high]) {\n      return low;\n    }\n    let mid = Math.floor((low + high) / 2);\n    let next = (mid + 1) % arr.length;\n    let prev = (mid + arr.length - 1) % arr.length;\n    if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n      return mid;\n    } else if (arr[mid] <= arr[high]) {\n      high = mid - 1;\n    } else if (arr[mid] >= arr[low]) {\n      low = mid + 1;\n    }\n  }\n  return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low < high) {\n        if (arr[low] < arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123995,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let count = 0;\n    let min = arr[0];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            count = i;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmp9ixx54fb.js:16:12)\n    at Object.<anonymous> (/tmp/tmp9ixx54fb.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low < high) {\n        let mid = Math.floor((low + high) / 2);\n        if (arr[mid] > arr[high]) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmppxbgs__s.js:19:12)\n    at Object.<anonymous> (/tmp/tmppxbgs__s.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let n = arr.length;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let min = arr[0];\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            min_index = i;\n        }\n    }\n    return min_index;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpaizvyqed.js:16:12)\n    at Object.<anonymous> (/tmp/tmpaizvyqed.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  let n = arr.length;\n  while (low <= high) {\n    if (arr[low] <= arr[high]) {\n      return low;\n    }\n    let mid = Math.floor((low + high) / 2);\n    let next = (mid + 1) % n;\n    let prev = (mid + n - 1) % n;\n    if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n      return mid;\n    } else if (arr[mid] <= arr[high]) {\n      high = mid - 1;\n    } else if (arr[mid] >= arr[low]) {\n      low = mid + 1;\n    }\n  }\n  return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123997,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let count = 0;\n    let max = arr[0];\n    for (let i = 0; i < arr.length; i++) {\n        if (max > arr[i]) {\n            count = i;\n            break;\n        }\n        max = arr[i];\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let min = arr[0];\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (min > arr[i]) {\n            min = arr[i];\n            min_index = i;\n        }\n    }\n    return min_index;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpfjeqw7ot.js:16:12)\n    at Object.<anonymous> (/tmp/tmpfjeqw7ot.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let min = arr[0];\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (min > arr[i]) {\n            min = arr[i];\n            min_index = i;\n        }\n    }\n    return min_index;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpfjeqw7ot.js:16:12)\n    at Object.<anonymous> (/tmp/tmpfjeqw7ot.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    if (arr[low] <= arr[high]) {\n      return low;\n    }\n    let mid = Math.floor((low + high) / 2);\n    let next = (mid + 1) % arr.length;\n    let prev = (mid + arr.length - 1) % arr.length;\n    if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n      return mid;\n    } else if (arr[mid] <= arr[high]) {\n      high = mid - 1;\n    } else if (arr[mid] >= arr[low]) {\n      low = mid + 1;\n    }\n  }\n  return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low < high) {\n    let mid = Math.floor((low + high) / 2);\n    if (arr[mid] > arr[high]) {\n      low = mid + 1;\n    } else {\n      high = mid;\n    }\n  }\n  return low;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpzmrs3g2z.js:19:12)\n    at Object.<anonymous> (/tmp/tmpzmrs3g2z.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let n = arr.length;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let n = arr.length;\n    let low = 0;\n    let high = n - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low < high) {\n        let mid = Math.floor((low + high) / 2);\n        if (arr[mid] > arr[high]) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmppxbgs__s.js:19:12)\n    at Object.<anonymous> (/tmp/tmppxbgs__s.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let n = arr.length;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  let n = arr.length;\n  while (low <= high) {\n    if (arr[low] <= arr[high]) {\n      return low;\n    }\n    let mid = Math.floor((low + high) / 2);\n    let next = (mid + 1) % n;\n    let prev = (mid + n - 1) % n;\n    if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n      return mid;\n    } else if (arr[mid] <= arr[high]) {\n      high = mid - 1;\n    } else if (arr[mid] >= arr[low]) {\n      low = mid + 1;\n    }\n  }\n  return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123997,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  let n = arr.length;\n  while (low <= high) {\n    if (arr[low] <= arr[high]) {\n      return low;\n    }\n    let mid = Math.floor((low + high) / 2);\n    let next = (mid + 1) % n;\n    let prev = (mid + n - 1) % n;\n    if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n      return mid;\n    } else if (arr[mid] <= arr[high]) {\n      high = mid - 1;\n    } else if (arr[mid] >= arr[low]) {\n      low = mid + 1;\n    }\n  }\n  return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123997,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > arr[i + 1]) {\n            count = i + 1;\n            break;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low < high) {\n        mid = Math.floor((low + high) / 2);\n        if (arr[mid] > arr[high]) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n}\n\nconsole.log(count_rotation([15, 18, 2, 3, 6, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "2\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpq51psqm4.js:21:12)\n    at Object.<anonymous> (/tmp/tmpq51psqm4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let n = arr.length;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let n = arr.length;\n    let low = 0;\n    let high = n - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low < high) {\n        mid = Math.floor((low + high) / 2);\n        if (arr[mid] > arr[high]) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpc_gqp5yz.js:20:12)\n    at Object.<anonymous> (/tmp/tmpc_gqp5yz.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let count = 0;\n    for (let i = 0; i < arr.length - 1; i++) {\n        if (arr[i] > arr[i + 1]) {\n            count = i + 1;\n            break;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low < high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123998,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        }\n        if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        }\n        if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123997,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0, high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        }\n        else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        }\n        else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123997,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let min = arr[0];\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (min > arr[i]) {\n            min = arr[i];\n            min_index = i;\n        }\n    }\n    return min_index;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpfjeqw7ot.js:16:12)\n    at Object.<anonymous> (/tmp/tmpfjeqw7ot.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let min = arr[0];\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (min > arr[i]) {\n            min = arr[i];\n            count = i;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpzuy20aya.js:16:12)\n    at Object.<anonymous> (/tmp/tmpzuy20aya.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > arr[i + 1]) {\n            count = i + 1;\n            break;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let min = arr[0];\n    let min_index = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            min_index = i;\n        }\n    }\n    return min_index;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmp80wg2tmh.js:16:12)\n    at Object.<anonymous> (/tmp/tmp80wg2tmh.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  let n = arr.length;\n\n  while (low <= high) {\n    if (arr[low] <= arr[high]) {\n      return low;\n    }\n\n    let mid = Math.floor((low + high) / 2);\n    let next = (mid + 1) % n;\n    let prev = (mid + n - 1) % n;\n\n    if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n      return mid;\n    } else if (arr[mid] <= arr[high]) {\n      high = mid - 1;\n    } else if (arr[mid] >= arr[low]) {\n      low = mid + 1;\n    }\n  }\n  return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123999,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let n = arr.length;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let count = 0;\n    let i = 0;\n    while (i < arr.length) {\n        if (arr[i] > arr[i + 1]) {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpcyjkxqdk.js:16:12)\n    at Object.<anonymous> (/tmp/tmpcyjkxqdk.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let min = arr[0];\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            min_index = i;\n        }\n    }\n    return min_index;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpaizvyqed.js:16:12)\n    at Object.<anonymous> (/tmp/tmpaizvyqed.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low < high) {\n        let mid = Math.floor((low + high) / 2);\n        if (arr[mid] > arr[high]) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmppxbgs__s.js:19:12)\n    at Object.<anonymous> (/tmp/tmppxbgs__s.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  let mid = 0;\n  while (low <= high) {\n    if (arr[low] <= arr[high]) {\n      return low;\n    }\n    mid = Math.floor((low + high) / 2);\n    let next = (mid + 1) % arr.length;\n    let prev = (mid + arr.length - 1) % arr.length;\n    if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n      return mid;\n    } else if (arr[mid] <= arr[high]) {\n      high = mid - 1;\n    } else if (arr[mid] >= arr[low]) {\n      low = mid + 1;\n    }\n  }\n  return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666124000,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let min = arr[0];\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            min_index = i;\n        }\n    }\n    return min_index;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpaizvyqed.js:16:12)\n    at Object.<anonymous> (/tmp/tmpaizvyqed.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let n = arr.length;\n    let low = 0;\n    let high = n - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0, high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        }\n        else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        }\n        else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123997,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let n = arr.length;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > arr[i + 1]) {\n            count = i + 1;\n            break;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let n = arr.length;\n    let low = 0;\n    let high = n - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let count = 0;\n    let min = arr[0];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            count = i;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmp9ixx54fb.js:16:12)\n    at Object.<anonymous> (/tmp/tmp9ixx54fb.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  let mid = 0;\n  while (low <= high) {\n    if (arr[low] <= arr[high]) {\n      return low;\n    }\n    mid = Math.floor((low + high) / 2);\n    let next = (mid + 1) % arr.length;\n    let prev = (mid - 1 + arr.length) % arr.length;\n    if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n      return mid;\n    } else if (arr[mid] <= arr[high]) {\n      high = mid - 1;\n    } else if (arr[mid] >= arr[low]) {\n      low = mid + 1;\n    }\n  }\n  return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666124000,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let min = arr[0];\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            min_index = i;\n        }\n    }\n    return min_index;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpaizvyqed.js:16:12)\n    at Object.<anonymous> (/tmp/tmpaizvyqed.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > arr[i + 1]) {\n            count = i + 1;\n            break;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let n = arr.length;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let n = arr.length;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low < high) {\n        if (arr[low] < arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123995,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low < high) {\n        let mid = Math.floor((low + high) / 2);\n        if (arr[mid] > arr[high]) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return low;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123982,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmppxbgs__s.js:19:12)\n    at Object.<anonymous> (/tmp/tmppxbgs__s.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let min = arr[0];\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            min_index = i;\n        }\n    }\n    return min_index;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpaizvyqed.js:16:12)\n    at Object.<anonymous> (/tmp/tmpaizvyqed.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n  let min = arr[0];\n  let min_index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      min_index = i;\n    }\n  }\n  return min_index;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123985,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpixsggrng.js:16:12)\n    at Object.<anonymous> (/tmp/tmpixsggrng.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > arr[i + 1]) {\n            count = i + 1;\n            break;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let n = arr.length;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let n = arr.length;\n    let low = 0;\n    let high = n - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let n = arr.length;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let n = arr.length;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    let n = arr.length;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666124001,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let min = arr[0];\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            min_index = i;\n        }\n    }\n    return min_index;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpaizvyqed.js:16:12)\n    at Object.<anonymous> (/tmp/tmpaizvyqed.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        }\n        else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        }\n        else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123995,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let n = arr.length;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid - 1 + arr.length) % arr.length;\n\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666124001,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid - 1 + arr.length) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123995,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    let mid = 0;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n  let low = 0;\n  let high = arr.length - 1;\n  let mid = 0;\n  while (low <= high) {\n    if (arr[low] <= arr[high]) {\n      return low;\n    }\n    mid = Math.floor((low + high) / 2);\n    let next = (mid + 1) % arr.length;\n    let prev = (mid + arr.length - 1) % arr.length;\n    if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n      return mid;\n    } else if (arr[mid] <= arr[high]) {\n      high = mid - 1;\n    } else if (arr[mid] >= arr[low]) {\n      low = mid + 1;\n    }\n  }\n  return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666124000,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > arr[i + 1]) {\n            count = i + 1;\n            break;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let n = arr.length;\n    let low = 0, high = n - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % n;\n        let prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1666124002,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let low = 0;\n    let high = arr.length - 1;\n    while (low <= high) {\n        if (arr[low] <= arr[high]) {\n            return low;\n        }\n        let mid = Math.floor((low + high) / 2);\n        let next = (mid + 1) % arr.length;\n        let prev = (mid + arr.length - 1) % arr.length;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) {\n            return mid;\n        } else if (arr[mid] <= arr[high]) {\n            high = mid - 1;\n        } else if (arr[mid] >= arr[low]) {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunction count_rotation(arr: number[]): number {\n    let min = arr[0];\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            min_index = i;\n        }\n    }\n    return min_index;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_rotation;\n  assert.deepEqual(candidate([3, 2, 1]),1);\n  assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);\n  assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);\n  assert.deepEqual(candidate([1, 2, 3]),0);\n  assert.deepEqual(candidate([1, 3, 2]),2);\n}\n\ntest();",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpaizvyqed.js:16:12)\n    at Object.<anonymous> (/tmp/tmpaizvyqed.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    }
  ]
}