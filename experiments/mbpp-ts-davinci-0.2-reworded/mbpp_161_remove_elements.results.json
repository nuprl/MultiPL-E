{
  "name": "mbpp_161_remove_elements",
  "language": "ts",
  "prompt": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_161_remove_elements.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n[ 1 ]\n[ 1 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let list3: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            list3.push(list1[i]);\n        }\n    }\n    return list3;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                list1.splice(i, 1);\n            }\n        }\n    }\n    return list1;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) === -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) === -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                list1.splice(i, 1);\n            }\n        }\n    }\n    return list1;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) === -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) === -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) === -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], []));\nconsole.log(remove_elements([], [1, 2, 3, 4, 5]));\nconsole.log(remove_elements([], []));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n[]\n[ 1, 2, 3, 4, 5 ]\n[]\n[]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(item => !list2.includes(item));\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    var list3: number[] = [];\n    for (var i = 0; i < list1.length; i++) {\n        var is_found: boolean = false;\n        for (var j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                is_found = true;\n                break;\n            }\n        }\n        if (!is_found) {\n            list3.push(list1[i]);\n        }\n    }\n    return list3;\n}\n\nconsole.log(remove_elements([2, 3, 4, 5, 6, 7, 8], [2, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 3, 7, 8 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (!list2.includes(list1[i])) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) === -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 1, 5 ]\n[ 1 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 5]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 5]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 1, 3, 4 ]\n[ 1, 4 ]\n[ 1 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                list1.splice(i, 1);\n            }\n        }\n    }\n    return list1;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 5]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 5]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 1, 3, 4 ]\n[ 1, 4 ]\n[ 1 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [1, 2, 3]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], []));\nconsole.log(remove_elements([], [1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 4, 5 ]\n[]\n[ 1, 2, 3, 4, 5 ]\n[]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) === -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 5]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 5]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 1, 3, 4 ]\n[ 1, 4 ]\n[ 1 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 5]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 5]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 1, 3, 4 ]\n[ 1, 4 ]\n[ 1 ]\n[ 1 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(item => !list2.includes(item));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        let is_present: boolean = false;\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                is_present = true;\n                break;\n            }\n        }\n        if (!is_present) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(remove_elements([2, 4, 6, 8, 10], [1, 3, 5, 7, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 1, 3, 5 ]\n[ 2, 4, 6, 8, 10 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) === -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 1, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [1, 2, 3, 4]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[]\n[ 5 ]\n[]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) === -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [6, 7, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 1, 5 ]\n[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) === -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let newList: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            newList.push(list1[i]);\n        }\n    }\n    return newList;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(remove_elements([2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 1, 5 ]\n[]\n[ 1, 2, 3, 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([2, 3, 4, 5], [2, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 5]));\nconsole.log(remove_elements([2, 3, 4, 5], [1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 1, 3, 4 ]\n[]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([2, 3, 4, 5], [2, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) === -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 4, 6, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) < 0) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) === -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) === -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        let is_present: boolean = false;\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                is_present = true;\n                break;\n            }\n        }\n        if (!is_present) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n  let result: number[] = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (list2.indexOf(list1[i]) === -1) {\n      result.push(list1[i]);\n    }\n  }\n  return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n[ 1 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        let is_present = false;\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                is_present = true;\n                break;\n            }\n        }\n        if (!is_present) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let newList: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            newList.push(list1[i]);\n        }\n    }\n    return newList;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 3, 4 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) === -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 5]));\nconsole.log(remove_elements([2, 3, 4, 5], [2, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 3, 4 ]\n[ 3, 4 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let list3: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            list3.push(list1[i]);\n        }\n    }\n    return list3;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let newList: number[] = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            newList.push(list1[i]);\n        }\n    }\n    return newList;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                list1.splice(i, 1);\n                i--;\n            }\n        }\n    }\n    return list1;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) === -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) === -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(element => !list2.includes(element));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) === -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => list2.indexOf(x) < 0);\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(item => !list2.includes(item));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) === -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(remove_elements([2, 3, 4, 5], [5, 6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n[ 2, 3, 4 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let list3: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            list3.push(list1[i]);\n        }\n    }\n    return list3;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n[ 1 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(function (num) {\n        return list2.indexOf(num) == -1;\n    });\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let newList: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) === -1) {\n            newList.push(list1[i]);\n        }\n    }\n    return newList;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) === -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(value => !list2.includes(value));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124272,
      "stdout": "[ 1, 3, 5 ]\n[ 1 ]\n[ 1 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n  return list1.filter(x => !list2.includes(x));\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124272,
      "stdout": "[ 1, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n  return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124272,
      "stdout": "[ 1, 5 ]\n[ 1 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let list3: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            list3.push(list1[i]);\n        }\n    }\n    return list3;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124272,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) < 0) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124273,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) === -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([2, 3, 4, 5], [2, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124273,
      "stdout": "[ 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], []));\nconsole.log(remove_elements([], [2, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124273,
      "stdout": "[ 1, 3, 5 ]\n[ 1 ]\n[]\n[ 1, 2, 3, 4, 5 ]\n[]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124273,
      "stdout": "[ 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) === -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124273,
      "stdout": "[ 1, 3, 4 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                list1.splice(i, 1);\n                i--;\n                break;\n            }\n        }\n    }\n    return list1;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124273,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(function (element) {\n        return list2.indexOf(element) === -1;\n    });\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124273,
      "stdout": "[ 1, 3, 4 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([2, 3, 4, 5], [2, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124273,
      "stdout": "[ 3, 4 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([2, 3, 4, 5], [2, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124273,
      "stdout": "[ 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                list1.splice(i, 1);\n            }\n        }\n    }\n    return list1;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) === -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124273,
      "stdout": "[ 1, 2 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let newList: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            newList.push(list1[i]);\n        }\n    }\n    return newList;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        let is_present: boolean = false;\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                is_present = true;\n                break;\n            }\n        }\n        if (!is_present) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) === -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124273,
      "stdout": "[ 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 3, 4 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(item => list2.indexOf(item) === -1);\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124273,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        let is_present: boolean = false;\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                is_present = true;\n                break;\n            }\n        }\n        if (!is_present) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([2, 3, 4, 5], [2, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124273,
      "stdout": "[ 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 5]));\nconsole.log(remove_elements([12, 34, 11, 9, 3], [11, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124273,
      "stdout": "[ 1, 3, 5 ]\n[ 1, 4 ]\n[ 12, 34, 9 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) === -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124273,
      "stdout": "[ 1, 2, 3, 4 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    for (let i = 0; i < list2.length; i++) {\n        for (let j = 0; j < list1.length; j++) {\n            if (list2[i] == list1[j]) {\n                list1.splice(j, 1);\n            }\n        }\n    }\n    return list1;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124273,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) === -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) === -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([2, 3, 4, 5], [2, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124273,
      "stdout": "[ 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) === -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 5]));\nconsole.log(remove_elements([2, 3, 4, 5], [1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124273,
      "stdout": "[ 1, 3, 4 ]\n[]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 4]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124273,
      "stdout": "[ 1, 3, 5 ]\n[ 1 ]\n[ 1 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([2, 3, 4, 5], [2, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124273,
      "stdout": "[ 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        let is_present: boolean = false;\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                is_present = true;\n                break;\n            }\n        }\n        if (!is_present) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124269,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [1, 2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124274,
      "stdout": "[ 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                list1.splice(i, 1);\n            }\n        }\n    }\n    return list1;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 4, 6, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124274,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 1, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) === -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([2, 3, 4, 5], [2, 4]));\nconsole.log(remove_elements([2, 3, 4, 5], [2, 3, 4, 5]));\nconsole.log(remove_elements([12, 3, 4, 5, 11], [2, 4, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124274,
      "stdout": "[ 3, 5 ]\n[]\n[ 3, 5, 11 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(item => !list2.includes(item));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124274,
      "stdout": "[ 1, 3, 4 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (!list2.includes(list1[i])) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124275,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    return list1.filter(x => !list2.includes(x));\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "[ 4, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) < 0) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124270,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124274,
      "stdout": "[ 1, 5 ]\n[ 1, 4 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124274,
      "stdout": "[ 1, 5 ]\n[ 1 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124274,
      "stdout": "[ 1, 3, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i]) == -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1665509748,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        let flag = true;\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] == list2[j]) {\n                flag = false;\n                break;\n            }\n        }\n        if (flag) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124275,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove all elements from a given array present in another array.\nfunction remove_elements(list1: number[], list2: number[]): number[] {\n  for (let i = 0; i < list1.length; i++) {\n    for (let j = 0; j < list2.length; j++) {\n      if (list1[i] == list2[j]) {\n        list1.splice(i, 1);\n      }\n    }\n  }\n  return list1;\n}\nconsole.log(remove_elements([1, 2, 3, 4, 5], [2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_elements;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);\n}\n\ntest();",
      "timestamp": 1666124275,
      "stdout": "[ 1, 5 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}