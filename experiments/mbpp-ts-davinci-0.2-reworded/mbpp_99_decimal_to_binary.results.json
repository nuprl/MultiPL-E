{
  "name": "mbpp_99_decimal_to_binary",
  "language": "ts",
  "prompt": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    return n.toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    return n.toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = \"\";\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n  let result: string = \"\";\n  while (n > 0) {\n    result = (n % 2).toString() + result;\n    n = Math.floor(n / 2);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n  let binary = '';\n  while (n > 0) {\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n  let result = \"\";\n  while (n > 0) {\n    result = (n % 2).toString() + result;\n    n = Math.floor(n / 2);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = \"\";\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    let remainder: number;\n    let quotient: number = n;\n    while (quotient > 0) {\n        remainder = quotient % 2;\n        quotient = Math.floor(quotient / 2);\n        result = remainder.toString() + result;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result: string = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result: string = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    return n.toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result: string = \"\";\n    while (n > 0) {\n        result = (n % 2).toString() + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result: string = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = \"\";\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary: string = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result: string = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = \"\";\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n  let result = \"\";\n  while (n > 0) {\n    result = (n % 2) + result;\n    n = Math.floor(n / 2);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n  let result = \"\";\n  while (n > 0) {\n    result = (n % 2) + result;\n    n = Math.floor(n / 2);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2).toString() + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    if (n === 0) {\n        return '0';\n    }\n    let result = '';\n    while (n > 0) {\n        result = (n % 2).toString() + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary: string = \"\";\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result: string = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result: string = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result: string = \"\";\n    while (n > 0) {\n        result = (n % 2).toString() + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n  let binary = '';\n  while (n > 0) {\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n  let result = \"\";\n  while (n > 0) {\n    result = (n % 2).toString() + result;\n    n = Math.floor(n / 2);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = \"\";\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary: string = \"\";\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary: string = \"\";\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    return n.toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary: string = \"\";\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = \"\";\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n  let binary = '';\n  while (n > 0) {\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result: string = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result: string = '';\n    while (n > 0) {\n        result = (n % 2).toString() + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result: string = \"\";\n    while (n > 0) {\n        result = (n % 2).toString() + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    return n.toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n  let result = \"\";\n  while (n > 0) {\n    result = (n % 2).toString() + result;\n    n = Math.floor(n / 2);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    return n.toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result: string = \"\";\n    while (n > 0) {\n        result = (n % 2).toString() + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n  let result = \"\";\n  while (n > 0) {\n    result = (n % 2) + result;\n    n = Math.floor(n / 2);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary: string = '';\n    let remainder: number;\n    while (n > 0) {\n        remainder = n % 2;\n        n = Math.floor(n / 2);\n        binary = remainder + binary;\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n  let result = \"\";\n  while (n > 0) {\n    result = (n % 2) + result;\n    n = Math.floor(n / 2);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = \"\";\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    return n.toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result: string = \"\";\n    while (n > 0) {\n        result = (n % 2).toString() + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n  let bin = \"\";\n  while (n > 0) {\n    bin = (n % 2) + bin;\n    n = Math.floor(n / 2);\n  }\n  return bin;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary: string = '';\n    while (n > 0) {\n        binary = n % 2 + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n  let result = '';\n  while (n > 0) {\n    result = (n % 2) + result;\n    n = Math.floor(n / 2);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    return n.toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary: string = \"\";\n    let remainder: number;\n    while (n > 0) {\n        remainder = n % 2;\n        n = Math.floor(n / 2);\n        binary = remainder + binary;\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n  let binary = '';\n  while (n > 0) {\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result: string = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n  let result = \"\";\n  while (n > 0) {\n    result = (n % 2) + result;\n    n = Math.floor(n / 2);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = \"\";\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result: string = '';\n    while (n > 0) {\n        result = (n % 2).toString() + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = \"\";\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = \"\";\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary: string = \"\";\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2).toString() + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = \"\";\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result: string = \"\";\n    while (n > 0) {\n        result = (n % 2).toString() + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = \"\";\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = \"\";\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = \"\";\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary: string = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result: string = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary: string = \"\";\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n  let binary = '';\n  while (n > 0) {\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result: string = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary: string = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    return n.toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n  let result = '';\n  while (n > 0) {\n    result = (n % 2) + result;\n    n = Math.floor(n / 2);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary: string = \"\";\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = \"\";\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary: string = \"\";\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result: string = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2).toString() + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result: string = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    return n.toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = \"\";\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n  let result = \"\";\n  while (n > 0) {\n    result = (n % 2) + result;\n    n = Math.floor(n / 2);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result: string = \"\";\n    while (n > 0) {\n        result = (n % 2).toString() + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = \"\";\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result: string = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = \"\";\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n  let binary = '';\n  while (n > 0) {\n    binary = (n % 2) + binary;\n    n = Math.floor(n / 2);\n  }\n  return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result: string = \"\";\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary: string = \"\";\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary: string = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = \"\";\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let bin = '';\n    while (n > 0) {\n        bin = (n % 2) + bin;\n        n = Math.floor(n / 2);\n    }\n    return bin;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let binary = '';\n    while (n > 0) {\n        binary = (n % 2) + binary;\n        n = Math.floor(n / 2);\n    }\n    return binary;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result = '';\n    while (n > 0) {\n        result = (n % 2) + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nfunction decimal_to_binary(n: number): string {\n    let result: string = '';\n    while (n > 0) {\n        result = (n % 2).toString() + result;\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(8),\"1000\");\n  assert.deepEqual(candidate(18),\"10010\");\n  assert.deepEqual(candidate(7),\"111\");\n}\n\ntest();",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}