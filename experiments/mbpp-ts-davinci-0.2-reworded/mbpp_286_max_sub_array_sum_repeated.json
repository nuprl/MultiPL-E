{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "ts",
  "prompt": "//Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nfunction max_sub_array_sum_repeated(a: number[], n: number, k: number): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_sub_array_sum_repeated;\n  assert.deepEqual(candidate([10, 20, -30, -1], 4, 3),30);\n  assert.deepEqual(candidate([-1, 10, 20], 3, 2),59);\n  assert.deepEqual(candidate([-1, -2, -3], 3, 3),-1);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let max_sum = 0;\n    let max_so_far = 0;\n    let i: number;\n    let j: number;\n    let sum: number;\n    for (i = 0; i < k; i++) {\n        sum = 0;\n        for (j = 0; j < n; j++) {\n            sum += a[j];\n            if (sum > max_so_far) {\n                max_so_far = sum;\n            }\n            if (sum < 0) {\n                sum = 0;\n            }\n        }\n    }\n    return max_so_far;\n}\n",
    "    let max_sum = 0;\n    let max_sum_so_far = 0;\n    let max_element = 0;\n    let sum_of_all_elements = 0;\n    let sum_of_all_elements_so_far = 0;\n    let sum_of_all_elements_so_far_negative = 0;\n    let sum_of_all_elements_negative = 0;\n    let sum_of_all_elements_negative_so_far = 0;\n    let sum_of_all_elements_negative_so_far_negative = 0;\n    let sum_of_all_elements_negative_negative = 0;\n    let sum_of_all_elements_negative_negative_so_far = 0;\n    let sum_of_all_elements_negative_negative_so_far_negative = 0;\n    let sum_of_all_elements_negative_negative_negative = 0;\n    let sum_of_all_elements_negative_negative_negative_so_far = 0;\n    let sum_of_all_elements_negative_negative_negative_so_far_negative = 0;\n    let sum_of_all_elements_negative_negative_negative_negative = 0;\n    let sum_of_all_elements_negative_negative_negative_negative_so_far = 0;\n    let sum_of_all_elements_negative_negative_negative_negative_so_far_negative = 0;\n    let sum_of_all_elements_negative_negative_negative_negative_negative = 0;\n    let sum_of_all_elements_negative_negative_negative_negative_negative_so_far = 0;\n    let sum_of_all_elements_negative_negative_negative_negative_negative_so_far_negative = 0;\n    let sum_of_all_elements_negative_negative_negative_negative_negative_negative = 0;\n    let sum_of_all_elements_negative_negative_negative_negative_negative_negative_so_far = 0;\n    let sum_of_all_elements_negative_negative_negative_negative_negative_negative",
    "    let max_sum = 0;\n    let max_so_far = 0;\n    let max_ending_here = 0;\n    let i: number;\n    for (i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_so_far;\n    let sum = 0;\n    for (i = 0; i < n; i++) {\n        sum = sum + a[i];\n        a[i] = -a[i];\n    }\n    max_so_far = 0;\n    max_ending_here = 0;\n    for (i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_sum = max_sum + max_so_far;\n    if (sum < 0) {\n        max_sum = Math.max(max_sum, sum * k);\n    } else {\n        max_sum = Math.max(max_sum, sum * (k - 2) + max_so_far);\n    }\n    return max_sum;\n}\n",
    "    let max_sum = 0;\n    let curr_sum = 0;\n    for (let i = 0; i < n; i++) {\n        curr_sum += a[i];\n    }\n    max_sum = curr_sum;\n    for (let i = 0; i < n; i++) {\n        curr_sum += (a[i] * (k - 1));\n        max_sum = Math.max(max_sum, curr_sum);\n    }\n    return max_sum;\n}\n",
    "    let max_sum = 0;\n    let max_so_far = 0;\n    let max_ending_here = 0;\n    let i = 0;\n    let j = 0;\n    while (i < n * k) {\n        max_ending_here += a[i % n];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n            j = i + 1;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n            max_sum = max_so_far;\n        }\n        i++;\n    }\n    return max_sum;\n}\n",
    "    let max_sum = 0;\n    let max_ending_here = 0;\n    let max_so_far = 0;\n    let start = 0;\n    let end = 0;\n    let s = 0;\n\n    for (let i = 0; i < k; i++) {\n        max_ending_here = 0;\n        for (let j = 0; j < n; j++) {\n            max_ending_here += a[j];\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n                start = s;\n                end = j;\n            }\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n                s = j + 1;\n            }\n        }\n    }\n    return max_so_far;\n}\n",
    "    let max_so_far = 0;\n    let max_ending_here = 0;\n    let max_element = Number.MIN_SAFE_INTEGER;\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        max_element = Math.max(max_element, a[i]);\n        sum += a[i];\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    if (max_element < 0) {\n        return max_element;\n    }\n    let max_sum = max_so_far;\n    let max_prefix_sum = 0;\n    let max_suffix_sum = 0;\n    let curr_prefix_sum = 0;\n    let curr_suffix_sum = 0;\n    for (let i = 0; i < n; i++) {\n        curr_prefix_sum += a[i];\n        max_prefix_sum = Math.max(max_prefix_sum, curr_prefix_sum);\n    }\n    for (let i = n - 1; i >= 0; i--) {\n        curr_suffix_sum += a[i];\n        max_suffix_sum = Math.max(max_suffix_sum, curr_suffix_sum);\n    }\n    let ans = Math.max(max_so_far, max_prefix_sum + max_suffix_sum + (k - 2) * sum);\n    return ans;\n}\n",
    "    let max_so_far: number = 0, max_ending_here: number = 0;\n    for (let i: number = 0; i < k; i++) {\n        for (let j: number = 0; j < n; j++) {\n            max_ending_here = max_ending_here + a[j];\n            if (max_so_far < max_ending_here)\n                max_so_far = max_ending_here;\n            if (max_ending_here < 0)\n                max_ending_here = 0;\n        }\n    }\n    return max_so_far;\n}\n",
    "    let max_sum = 0;\n    let max_ending_here = 0;\n    let max_so_far = 0;\n    let start = 0;\n    let end = 0;\n    let s = 0;\n    for (let i = 0; i < n * k; i++) {\n        max_ending_here = max_ending_here + a[i % n];\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    for (let i = start; i <= end; i++) {\n        max_sum = max_sum + a[i % n];\n    }\n    return max_sum;\n}\n",
    "    let max_sum = 0;\n    let max_ending_here = 0;\n    let max_so_far = 0;\n\n    for (let i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    let max_wrap = 0;\n    for (let i = 0; i < n; i++) {\n        max_wrap += a[i];\n        a[i] = -a[i];\n    }\n\n    max_ending_here = 0;\n    for (let i = 0; i < n; i++) {\n        max_ending_here = max_ending_here + a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    max_wrap = max_wrap + max_ending_here;\n\n    if (k == 1) {\n        return max_so_far;\n    }\n\n    return Math.max(max_so_far, max_wrap);\n}\n",
    "    let max_sum = 0;\n    let max_sum_so_far = 0;\n    let max_element = -Infinity;\n    let sum_of_all_elements = 0;\n    for (let i = 0; i < n; i++) {\n        max_sum_so_far += a[i];\n        max_element = Math.max(max_element, a[i]);\n        sum_of_all_elements += a[i];\n    }\n    max_sum_so_far = Math.max(max_sum_so_far, max_element);\n    max_sum = max_sum_so_far;\n    for (let i = 1; i < k; i++) {\n        max_sum_so_far = max_sum_so_far * 2 - sum_of_all_elements;\n        max_sum = Math.max(max_sum, max_sum_so_far);\n    }\n    return max_sum;\n}\n",
    "    let max_sum = 0;\n    let max_ending_here = 0;\n    for (let i = 0; i < n * k; i++) {\n        max_ending_here = max_ending_here + a[i % n];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_sum < max_ending_here) {\n            max_sum = max_ending_here;\n        }\n    }\n    return max_sum;\n}\n",
    "    let max_sum = 0;\n    let max_ending_here = 0;\n    for (let i = 0; i < n * k; i++) {\n        max_ending_here = max_ending_here + a[i % n];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_sum < max_ending_here) {\n            max_sum = max_ending_here;\n        }\n    }\n    return max_sum;\n}\n",
    "    let max_sum = 0;\n    let max_sum_so_far = 0;\n    let max_sum_ending_here = 0;\n\n    for (let i = 0; i < n * k; i++) {\n        max_sum_ending_here = max_sum_ending_here + a[i % n];\n\n        if (max_sum_ending_here < 0) {\n            max_sum_ending_here = 0;\n        }\n\n        if (max_sum_so_far < max_sum_ending_here) {\n            max_sum_so_far = max_sum_ending_here;\n        }\n    }\n\n    return max_sum_so_far;\n}\n",
    "    let max_sum = 0;\n    let max_ending_here = 0;\n    let max_so_far = 0;\n    let i = 0;\n    let j = 0;\n    let start = 0;\n    let end = 0;\n    let s = 0;\n    let max_sum_all = 0;\n    for (i = 0; i < n; i++) {\n        max_sum_all += a[i];\n    }\n    max_sum_all = max_sum_all * k;\n    for (i = 0; i < n * 2; i++) {\n        max_ending_here += a[i % n];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n    }\n    max_sum = max_so_far;\n    if (max_sum < max_sum_all) {\n        max_sum = max_sum_all;\n    }\n    return max_sum;\n}\n",
    "    let max_sum = 0;\n    let max_ending_here = 0;\n    let max_so_far = 0;\n    let i: number;\n    let j: number;\n    let m: number;\n    let sum: number;\n    let max_ending_here_kadane = 0;\n    let max_so_far_kadane = 0;\n    let max_ending_here_wrap = 0;\n    let max_so_far_wrap = 0;\n    let max_wrap = 0;\n\n    for (i = 0; i < n; i++) {\n        max_wrap += a[i];\n    }\n\n    for (i = 0; i < n; i++) {\n        max_ending_here_kadane += a[i];\n        if (max_ending_here_kadane < 0) {\n            max_ending_here_kadane = 0;\n        }\n        if (max_so_far_kadane < max_ending_here_kadane) {\n            max_so_far_kadane = max_ending_here_kadane;\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        max_ending_here_wrap += a[i];\n        if (max_ending_here_wrap < 0) {\n            max_ending_here_wrap = 0;\n        }\n        if (max_so_far_wrap < max_ending_here_wrap) {\n            max_so_far_wrap = max_ending_here_wrap;\n        }\n    }\n\n    max_so_far_wrap = Math.max(max_so_far_wrap, max_wrap + max_so_far_kadane);\n\n    if (k == 1) {\n        return max_so_far_wrap;\n    }\n\n    for (i = 0; i < n; i++) {\n        max_ending_here += a[i];\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max",
    "    let max_sum = 0;\n    let max_sum_so_far = 0;\n    let max_sum_ending_here = 0;\n    let i = 0;\n    let j = 0;\n    let start = 0;\n    let end = 0;\n    let sum = 0;\n    for (i = 0; i < n; i++) {\n        sum += a[i];\n    }\n    max_sum = sum * k;\n    for (i = 0; i < n; i++) {\n        max_sum_ending_here += a[i];\n        if (max_sum_ending_here < 0) {\n            max_sum_ending_here = 0;\n            j = i + 1;\n        }\n        if (max_sum_so_far < max_sum_ending_here) {\n            max_sum_so_far = max_sum_ending_here;\n            start = j;\n            end = i;\n        }\n    }\n    if (max_sum_so_far > 0) {\n        max_sum = Math.max(max_sum, max_sum_so_far * k);\n    }\n    if (max_sum_so_far === 0) {\n        max_sum = max_sum_so_far;\n    }\n    return max_sum;\n}\n",
    "    let max_sum = 0;\n    let curr_sum = 0;\n    let max_element = a[0];\n    for (let i = 0; i < n; i++) {\n        max_element = Math.max(max_element, a[i]);\n        curr_sum += a[i];\n        if (i == n - 1) {\n            curr_sum = curr_sum * k - max_element;\n        }\n        max_sum = Math.max(max_sum, curr_sum);\n        if (curr_sum < 0) {\n            curr_sum = 0;\n        }\n    }\n    return max_sum;\n}\n",
    "    let max_sum = 0,\n        max_ending_here = 0;\n\n    for (let i = 0; i < n * k; i++) {\n        max_ending_here = max_ending_here + a[i % n];\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n        if (max_sum < max_ending_here)\n            max_sum = max_ending_here;\n    }\n    return max_sum;\n}\n",
    "    let max_sum = 0;\n    let max_ending_here = 0;\n    let max_so_far = 0;\n    let i = 0;\n    let j = 0;\n    let l = 0;\n    let m = 0;\n    let max_ending_here_start = 0;\n    let max_ending_here_end = 0;\n    let max_so_far_start = 0;\n    let max_so_far_end = 0;\n    let max_ending_here_start_temp = 0;\n    let max_ending_here_end_temp = 0;\n    let max_so_far_start_temp = 0;\n    let max_so_far_end_temp = 0;\n    for (l = 0; l < k; l++) {\n        for (i = 0; i < n; i++) {\n            max_ending_here = max_ending_here + a[i];\n            if (max_ending_here < 0) {\n                max_ending_here = 0;\n                max_ending_here_start_temp = i + 1;\n            }\n            if (max_so_far < max_ending_here) {\n                max_so_far = max_ending_here;\n                max_so_far_start_temp = max_ending_here_start_temp;\n                max_so_far_end_temp = i;\n            }\n        }\n        if (l == 0) {\n            max_so_far_start = max_so_far_start_temp;\n            max_so_far_end = max_so_far_end_temp;\n        }\n        max_sum = max_sum + max_so_far;\n        max_so_far = 0;\n        max_ending_here = 0;\n    }\n    return max_sum;\n}\n"
  ]
}