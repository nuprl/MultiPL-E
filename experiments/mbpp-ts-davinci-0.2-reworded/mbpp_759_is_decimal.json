{
  "name": "mbpp_759_is_decimal",
  "language": "ts",
  "prompt": "//Write a function to check whether a given string is a decimal number with a precision of 2.\nfunction is_decimal(num: string): boolean {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_decimal;\n  assert.deepEqual(candidate(\"123.11\"),true);\n  assert.deepEqual(candidate(\"e666.86\"),false);\n  assert.deepEqual(candidate(\"3.124587\"),false);\n  assert.deepEqual(candidate(\"1.11\"),true);\n  assert.deepEqual(candidate(\"1.1.11\"),false);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    var re = /^\\d+(\\.\\d{1,2})?$/;\n    return re.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{2})?$/.test(num);\n}\n",
    "    let regexp = /^\\d+(\\.\\d{1,2})?$/;\n    return regexp.test(num);\n}\n\nconsole.log(is_decimal(\"-1.23\"));\nconsole.log(is_decimal(\"1.23\"));\nconsole.log(is_decimal(\"-1.2.3\"));\nconsole.log(is_decimal(\"1.2.3\"));\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+(\\.\\d{1,2})?$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d*\\.\\d{2}$/.test(num);\n}\n",
    "    return /^\\d+\\.\\d{2}$/.test(num);\n}\n"
  ]
}