{
  "name": "mbpp_593_removezero_ip",
  "language": "ts",
  "prompt": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n  let ip_arr = ip.split(\".\");\n  let new_ip = \"\";\n  for (let i = 0; i < ip_arr.length; i++) {\n    if (ip_arr[i].charAt(0) == \"0\") {\n      ip_arr[i] = ip_arr[i].substring(1);\n    }\n    new_ip = new_ip + ip_arr[i] + \".\";\n  }\n  return new_ip.substring(0, new_ip.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].charAt(0) == '0') {\n            ip_arr[i] = ip_arr[i].substring(1);\n        }\n        new_ip += ip_arr[i];\n        if (i != ip_arr.length - 1) {\n            new_ip += '.';\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        let num = parseInt(ip_arr[i]);\n        if (num === 0) {\n            new_ip += '0.';\n        } else {\n            new_ip += num + '.';\n        }\n    }\n    return new_ip.slice(0, -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let arr = ip.split('.');\n    let newarr = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 1 && arr[i].charAt(0) == '0') {\n            newarr.push(arr[i].substring(1));\n        } else {\n            newarr.push(arr[i]);\n        }\n    }\n    return newarr.join('.');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i][0] == '0') {\n            ip_arr[i] = ip_arr[i].substring(1);\n        }\n        result += ip_arr[i];\n        if (i < ip_arr.length - 1) {\n            result += '.';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let ip_arr_new = [];\n    for (let i = 0; i < ip_arr.length; i++) {\n        ip_arr_new.push(parseInt(ip_arr[i]));\n    }\n    return ip_arr_new.join('.');\n}\nconsole.log(removezero_ip('255.024.01.01'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509709,
      "stdout": "255.24.1.1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        let num = parseInt(ip_arr[i]);\n        if (num === 0) {\n            result += '0';\n        } else {\n            result += num.toString();\n        }\n        if (i < ip_arr.length - 1) {\n            result += '.';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i][0] === '0') {\n            new_ip += ip_arr[i].substring(1);\n        } else {\n            new_ip += ip_arr[i];\n        }\n        if (i < ip_arr.length - 1) {\n            new_ip += '.';\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let ip_str = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0') {\n            ip_str += ip_arr[i].substring(1);\n        } else {\n            ip_str += ip_arr[i];\n        }\n        if (i < ip_arr.length - 1) {\n            ip_str += '.';\n        }\n    }\n    return ip_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i] != '0') {\n            new_ip += ip_arr[i];\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpt0umr8si.js:15:12)\n    at Object.<anonymous> (/tmp/tmpt0umr8si.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split(\".\");\n    let new_ip = \"\";\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i][0] == \"0\") {\n            new_ip += ip_arr[i].slice(1);\n        } else {\n            new_ip += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        let num = parseInt(ip_arr[i]);\n        if (num == 0) {\n            result += '0.';\n        } else {\n            result += num + '.';\n        }\n    }\n    return result.slice(0, -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0') {\n            result += ip_arr[i].substring(1);\n        }\n        else {\n            result += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            result += '.';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr: string[] = ip.split('.');\n    let result: string = \"\";\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1) {\n            if (ip_arr[i].charAt(0) == '0') {\n                ip_arr[i] = ip_arr[i].substring(1);\n            }\n        }\n        result += ip_arr[i];\n        if (i != ip_arr.length - 1) {\n            result += \".\";\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n  let ip_arr = ip.split(\".\");\n  let new_ip = \"\";\n  for (let i = 0; i < ip_arr.length; i++) {\n    if (ip_arr[i][0] == \"0\") {\n      new_ip += ip_arr[i].slice(1);\n    } else {\n      new_ip += ip_arr[i];\n    }\n    if (i != ip_arr.length - 1) {\n      new_ip += \".\";\n    }\n  }\n  return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let ip_arr_new = [];\n    for (let i = 0; i < ip_arr.length; i++) {\n        ip_arr_new.push(parseInt(ip_arr[i]));\n    }\n    return ip_arr_new.join('.');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i][0] == '0') {\n            new_ip += ip_arr[i].substr(1) + '.';\n        } else {\n            new_ip += ip_arr[i] + '.';\n        }\n    }\n    return new_ip.substr(0, new_ip.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let ip_str = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i][0] == '0') {\n            ip_str += ip_arr[i].substring(1) + '.';\n        } else {\n            ip_str += ip_arr[i] + '.';\n        }\n    }\n    return ip_str.substring(0, ip_str.length - 1);\n}\nconsole.log(removezero_ip('255.024.01.01'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509709,
      "stdout": "255.24.1.1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0') {\n            result += ip_arr[i].substring(1);\n        } else {\n            result += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            result += '.';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i][0] == '0') {\n            new_ip += ip_arr[i].substring(1);\n        } else {\n            new_ip += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            new_ip += '.';\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr: string[] = ip.split(\".\");\n    let new_ip: string = \"\";\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].charAt(0) == \"0\") {\n            new_ip += ip_arr[i].substring(1, ip_arr[i].length) + \".\";\n        } else {\n            new_ip += ip_arr[i] + \".\";\n        }\n    }\n    return new_ip.substring(0, new_ip.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i] == '0') {\n            result += '0.';\n        } else {\n            result += ip_arr[i] + '.';\n        }\n    }\n    return result.slice(0, -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp0zgqrjc2.js:18:12)\n    at Object.<anonymous> (/tmp/tmp0zgqrjc2.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let arr = ip.split('.');\n    let new_arr = [];\n    for (let i = 0; i < arr.length; i++) {\n        let str = arr[i];\n        let j = 0;\n        while (str[j] == '0') {\n            j++;\n        }\n        new_arr.push(str.slice(j));\n    }\n    return new_arr.join('.');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let ip_arr_new: string[] = [];\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].charAt(0) == '0') {\n            ip_arr_new.push(ip_arr[i].substring(1));\n        } else {\n            ip_arr_new.push(ip_arr[i]);\n        }\n    }\n    return ip_arr_new.join('.');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i][0] == '0') {\n            new_ip += ip_arr[i].substring(1);\n        } else {\n            new_ip += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            new_ip += '.';\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n  let ip_arr = ip.split(\".\");\n  let result = \"\";\n  for (let i = 0; i < ip_arr.length; i++) {\n    if (ip_arr[i].charAt(0) == \"0\") {\n      result += ip_arr[i].substring(1);\n    } else {\n      result += ip_arr[i];\n    }\n    if (i != ip_arr.length - 1) {\n      result += \".\";\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0') {\n            new_ip += ip_arr[i].substr(1);\n        } else {\n            new_ip += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            new_ip += '.';\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split(\".\");\n    let result = \"\";\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i][0] == \"0\") {\n            result += ip_arr[i].substring(1) + \".\";\n        } else {\n            result += ip_arr[i] + \".\";\n        }\n    }\n    return result.substring(0, result.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].charAt(0) == '0') {\n            new_ip += ip_arr[i].substring(1) + '.';\n        } else {\n            new_ip += ip_arr[i] + '.';\n        }\n    }\n    return new_ip.substring(0, new_ip.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i][0] === '0') {\n            result += ip_arr[i].substring(1);\n        } else {\n            result += ip_arr[i];\n        }\n        if (i !== ip_arr.length - 1) {\n            result += '.';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split(\".\");\n    let result = \"\";\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i][0] == \"0\") {\n            result += ip_arr[i].substring(1) + \".\";\n        } else {\n            result += ip_arr[i] + \".\";\n        }\n    }\n    return result.substring(0, result.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let newip: string = \"\";\n    let count: number = 0;\n    for (let i: number = 0; i < ip.length; i++) {\n        if (ip[i] == \"0\") {\n            count++;\n        }\n        else {\n            break;\n        }\n    }\n    for (let i: number = count; i < ip.length; i++) {\n        newip += ip[i];\n    }\n    return newip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpf9ruo7v7.js:21:12)\n    at Object.<anonymous> (/tmp/tmpf9ruo7v7.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i] == '0') {\n            result += '0';\n        } else {\n            result += ip_arr[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp3lbp9x_8.js:18:12)\n    at Object.<anonymous> (/tmp/tmp3lbp9x_8.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split(\".\");\n    let new_ip = \"\";\n    for (let i = 0; i < ip_arr.length; i++) {\n        new_ip += parseInt(ip_arr[i]).toString() + \".\";\n    }\n    return new_ip.slice(0, -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr: string[] = ip.split('.');\n    let new_ip: string = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].charAt(0) == '0') {\n            ip_arr[i] = ip_arr[i].slice(1);\n        }\n        new_ip += ip_arr[i];\n        if (i < ip_arr.length - 1) {\n            new_ip += '.';\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let ip_str = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) === '0') {\n            ip_str += ip_arr[i].substring(1) + '.';\n        } else {\n            ip_str += ip_arr[i] + '.';\n        }\n    }\n    return ip_str.substring(0, ip_str.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0') {\n            ip_arr[i] = ip_arr[i].substr(1);\n        }\n    }\n    return ip_arr.join('.');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0') {\n            result = result + ip_arr[i].substring(1, ip_arr[i].length) + '.';\n        } else {\n            result = result + ip_arr[i] + '.';\n        }\n    }\n    return result.substring(0, result.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let arr = ip.split('.');\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 1 && arr[i][0] == '0') {\n            arr[i] = arr[i].substring(1);\n        }\n    }\n    return arr.join('.');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr: string[] = ip.split(\".\");\n    let new_ip: string = \"\";\n    for (let i: number = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].charAt(0) == \"0\") {\n            ip_arr[i] = ip_arr[i].substring(1);\n        }\n        new_ip += ip_arr[i];\n        if (i < ip_arr.length - 1) {\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0') {\n            new_ip += ip_arr[i].substring(1);\n        }\n        else {\n            new_ip += ip_arr[i];\n        }\n        if (i < ip_arr.length - 1) {\n            new_ip += '.';\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i][0] == '0') {\n            ip_arr[i] = ip_arr[i].substring(1);\n        }\n        new_ip += ip_arr[i];\n        if (i < ip_arr.length - 1) {\n            new_ip += '.';\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr: string[] = ip.split(\".\");\n    let new_ip: string = \"\";\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0') {\n            ip_arr[i] = ip_arr[i].substring(1);\n        }\n        new_ip += ip_arr[i];\n        if (i != ip_arr.length - 1) {\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let ip_str = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        ip_str += parseInt(ip_arr[i]).toString();\n        if (i != ip_arr.length - 1) {\n            ip_str += '.';\n        }\n    }\n    return ip_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let arr = ip.split(\".\");\n    let newarr = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i][0] == \"0\") {\n            newarr.push(arr[i].replace(/^0+/, \"\"));\n        }\n        else {\n            newarr.push(arr[i]);\n        }\n    }\n    return newarr.join(\".\");\n}\nconsole.log(removezero_ip(\"255.024.01.01\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123734,
      "stdout": "255.24.1.1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = [];\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1) {\n            new_ip.push(ip_arr[i]);\n        }\n        else {\n            new_ip.push(ip_arr[i].replace(/^0+/, ''));\n        }\n    }\n    return new_ip.join('.');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123736,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmph0bfy7ne.js:18:12)\n    at Object.<anonymous> (/tmp/tmph0bfy7ne.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i] == '0') {\n            new_ip += '0.';\n        } else {\n            new_ip += ip_arr[i] + '.';\n        }\n    }\n    return new_ip.slice(0, -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp9ic7prjd.js:18:12)\n    at Object.<anonymous> (/tmp/tmp9ic7prjd.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        let temp = ip_arr[i];\n        while (temp.length > 1 && temp[0] === '0') {\n            temp = temp.substr(1);\n        }\n        result += temp;\n        if (i < ip_arr.length - 1) {\n            result += '.';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split(\".\");\n    let new_ip = \"\";\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i][0] == \"0\") {\n            new_ip += ip_arr[i].substring(1) + \".\";\n        } else {\n            new_ip += ip_arr[i] + \".\";\n        }\n    }\n    return new_ip.substring(0, new_ip.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let ip_arr_new = [];\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0') {\n            ip_arr_new.push(ip_arr[i].substring(1));\n        } else {\n            ip_arr_new.push(ip_arr[i]);\n        }\n    }\n    return ip_arr_new.join('.');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = [];\n    for (let i = 0; i < ip_arr.length; i++) {\n        new_ip.push(parseInt(ip_arr[i]));\n    }\n    return new_ip.join('.');\n}\nconsole.log(removezero_ip('255.024.01.01'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123737,
      "stdout": "255.24.1.1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split(\".\");\n    let new_ip = \"\";\n    for (let i = 0; i < ip_arr.length; i++) {\n        let temp = ip_arr[i];\n        while (temp.length > 0 && temp[0] == \"0\") {\n            temp = temp.substring(1);\n        }\n        new_ip += temp;\n        if (i != ip_arr.length - 1) {\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr: string[] = ip.split(\".\");\n    let result: string = \"\";\n    for (let i: number = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].charAt(0) == \"0\") {\n            ip_arr[i] = ip_arr[i].substring(1);\n        }\n        result = result + ip_arr[i] + \".\";\n    }\n    return result.substring(0, result.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr: string[] = ip.split('.');\n    let new_ip: string = '';\n    for (let i: number = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0') {\n            new_ip += ip_arr[i].substring(1);\n        }\n        else {\n            new_ip += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            new_ip += '.';\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split(\".\");\n    let new_ip = \"\";\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i] == \"0\") {\n            new_ip += \"0.\";\n        } else {\n            new_ip += ip_arr[i] + \".\";\n        }\n    }\n    return new_ip.slice(0, -1);\n}\nconsole.log(removezero_ip(\"255.024.01.01\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123737,
      "stdout": "255.024.01.01\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp2gqt90ok.js:19:12)\n    at Object.<anonymous> (/tmp/tmp2gqt90ok.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i] != '0') {\n            new_ip = new_ip + ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            new_ip = new_ip + '.';\n        }\n    }\n    return new_ip;\n}\nconsole.log(removezero_ip('255.024.01.01'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123737,
      "stdout": "255.024.01.01\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp1_xju_mn.js:19:12)\n    at Object.<anonymous> (/tmp/tmp1_xju_mn.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split(\".\");\n    let ip_arr_new = [];\n    for (let i = 0; i < ip_arr.length; i++) {\n        let num = parseInt(ip_arr[i]);\n        if (num === 0) {\n            ip_arr_new.push(\"0\");\n        } else {\n            ip_arr_new.push(num.toString());\n        }\n    }\n    return ip_arr_new.join(\".\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i][0] == '0') {\n            new_ip += ip_arr[i].substring(1) + '.';\n        } else {\n            new_ip += ip_arr[i] + '.';\n        }\n    }\n    return new_ip.substring(0, new_ip.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i][0] === '0') {\n            new_ip += ip_arr[i].substring(1) + '.';\n        } else {\n            new_ip += ip_arr[i] + '.';\n        }\n    }\n    return new_ip.substring(0, new_ip.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i] == '0') {\n            result = result + '.' + '0';\n        } else {\n            result = result + '.' + ip_arr[i];\n        }\n    }\n    return result.substring(1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp8x44ws73.js:18:12)\n    at Object.<anonymous> (/tmp/tmp8x44ws73.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].charAt(0) == '0') {\n            new_ip += ip_arr[i].substring(1) + '.';\n        } else {\n            new_ip += ip_arr[i] + '.';\n        }\n    }\n    return new_ip.substring(0, new_ip.length - 1);\n}\nconsole.log(removezero_ip('255.024.01.01'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123737,
      "stdout": "255.24.1.1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let arr = ip.split('.');\n    let newarr = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 1 && arr[i][0] == '0') {\n            newarr.push(arr[i].substr(1));\n        }\n        else {\n            newarr.push(arr[i]);\n        }\n    }\n    return newarr.join('.');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0') {\n            new_ip += ip_arr[i].substring(1);\n        } else {\n            new_ip += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            new_ip += '.';\n        }\n    }\n    return new_ip;\n}\nconsole.log(removezero_ip('255.024.01.01'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123737,
      "stdout": "255.24.1.1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i][0] == '0') {\n            result += ip_arr[i].substring(1);\n        } else {\n            result += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            result += '.';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split(\".\");\n    let ip_str = \"\";\n    for (let i = 0; i < ip_arr.length; i++) {\n        let ip_num = parseInt(ip_arr[i]);\n        if (ip_num == 0) {\n            ip_str += \"0.\";\n        }\n        else {\n            ip_str += ip_arr[i] + \".\";\n        }\n    }\n    return ip_str.slice(0, -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmplbxymvaa.js:19:12)\n    at Object.<anonymous> (/tmp/tmplbxymvaa.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr: string[] = ip.split('.');\n    let result: string = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1) {\n            result = result + ip_arr[i] + '.';\n        }\n        else {\n            result = result + ip_arr[i].replace(/^0+/, '') + '.';\n        }\n    }\n    return result.slice(0, -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmps8dbyy1y.js:18:12)\n    at Object.<anonymous> (/tmp/tmps8dbyy1y.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let arr = ip.split('.');\n    let newarr = [];\n    for (let i = 0; i < arr.length; i++) {\n        let temp = arr[i];\n        while (temp.length > 1 && temp[0] === '0') {\n            temp = temp.slice(1);\n        }\n        newarr.push(temp);\n    }\n    return newarr.join('.');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split(\".\");\n    let new_ip = \"\";\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].charAt(0) == \"0\") {\n            new_ip += ip_arr[i].substring(1);\n        } else {\n            new_ip += ip_arr[i];\n        }\n        if (i < ip_arr.length - 1) {\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_array = ip.split(\".\");\n    let new_ip = \"\";\n    for (let i = 0; i < ip_array.length; i++) {\n        if (ip_array[i].charAt(0) == \"0\") {\n            new_ip += ip_array[i].substring(1);\n        } else {\n            new_ip += ip_array[i];\n        }\n        if (i != ip_array.length - 1) {\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123739,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1) {\n            if (ip_arr[i].charAt(0) == '0') {\n                ip_arr[i] = ip_arr[i].substring(1);\n            }\n        }\n        new_ip += ip_arr[i] + '.';\n    }\n    new_ip = new_ip.substring(0, new_ip.length - 1);\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123739,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i] == '00') {\n            ip_arr[i] = '0';\n        }\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0') {\n            ip_arr[i] = ip_arr[i].substr(1);\n        }\n        new_ip += ip_arr[i] + '.';\n    }\n    return new_ip.substr(0, new_ip.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123739,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let arr = ip.split('.');\n    let newarr = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 1 && arr[i][0] == '0') {\n            newarr.push(arr[i].slice(1));\n        } else {\n            newarr.push(arr[i]);\n        }\n    }\n    return newarr.join('.');\n}\nconsole.log(removezero_ip('255.024.01.01'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123739,
      "stdout": "255.24.1.1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split(\".\");\n    let new_ip = \"\";\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == \"0\") {\n            new_ip += ip_arr[i].substring(1);\n        } else {\n            new_ip += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split(\".\");\n    let new_ip = \"\";\n    for (let i = 0; i < ip_arr.length; i++) {\n        new_ip += parseInt(ip_arr[i]) + \".\";\n    }\n    return new_ip.slice(0, -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i][0] == '0') {\n            ip_arr[i] = ip_arr[i].substring(1);\n        }\n    }\n    return ip_arr.join('.');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let newip: string = \"\";\n    let i: number = 0;\n    while (ip[i] == \"0\") {\n        i++;\n    }\n    for (i; i < ip.length; i++) {\n        newip += ip[i];\n    }\n    return newip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpknsi5903.js:16:12)\n    at Object.<anonymous> (/tmp/tmpknsi5903.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < arr.length; i++) {\n        let num = parseInt(arr[i]);\n        if (num === 0) {\n            result += '0.';\n        } else {\n            result += num + '.';\n        }\n    }\n    return result.slice(0, result.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    var ip_arr = ip.split('.');\n    var ip_str = '';\n    for (var i = 0; i < ip_arr.length; i++) {\n        var ip_num = parseInt(ip_arr[i]);\n        ip_str += ip_num.toString() + '.';\n    }\n    return ip_str.slice(0, -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let ip_str = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].charAt(0) === '0') {\n            ip_arr[i] = ip_arr[i].substring(1);\n        }\n        ip_str += ip_arr[i] + '.';\n    }\n    return ip_str.substring(0, ip_str.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr: string[] = ip.split(\".\");\n    let new_ip: string = \"\";\n    for (let i: number = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].charAt(0) == \"0\") {\n            new_ip += ip_arr[i].substring(1, ip_arr[i].length) + \".\";\n        }\n        else {\n            new_ip += ip_arr[i] + \".\";\n        }\n    }\n    return new_ip.substring(0, new_ip.length - 1);\n}\nconsole.log(removezero_ip(\"255.024.01.01\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123740,
      "stdout": "255.24.1.1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].charAt(0) == '0') {\n            new_ip += ip_arr[i].substring(1) + '.';\n        }\n        else {\n            new_ip += ip_arr[i] + '.';\n        }\n    }\n    return new_ip.substring(0, new_ip.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i][0] == '0') {\n            new_ip += ip_arr[i].substring(1);\n        } else {\n            new_ip += ip_arr[i];\n        }\n        if (i < ip_arr.length - 1) {\n            new_ip += '.';\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let arr = ip.split('.');\n    let newarr = [];\n    for (let i = 0; i < arr.length; i++) {\n        let temp = arr[i];\n        while (temp[0] == '0') {\n            temp = temp.substring(1);\n        }\n        newarr.push(temp);\n    }\n    return newarr.join('.');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let arr = ip.split('.');\n    let res = '';\n    for (let i = 0; i < arr.length; i++) {\n        let num = parseInt(arr[i]);\n        if (num === 0) {\n            res += '0';\n        } else {\n            res += num.toString();\n        }\n        if (i !== arr.length - 1) {\n            res += '.';\n        }\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let ip_str = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].charAt(0) == '0') {\n            ip_str += ip_arr[i].substring(1, ip_arr[i].length) + '.';\n        } else {\n            ip_str += ip_arr[i] + '.';\n        }\n    }\n    return ip_str.substring(0, ip_str.length - 1);\n}\nconsole.log(removezero_ip('255.024.01.01'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123740,
      "stdout": "255.24.1.1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i] != '0') {\n            new_ip += ip_arr[i];\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpt0umr8si.js:15:12)\n    at Object.<anonymous> (/tmp/tmpt0umr8si.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let ip_str = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0') {\n            ip_str += ip_arr[i].substr(1);\n        } else {\n            ip_str += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            ip_str += '.';\n        }\n    }\n    return ip_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 1 && arr[i].charAt(0) == '0') {\n            result += arr[i].substr(1);\n        } else {\n            result += arr[i];\n        }\n        if (i < arr.length - 1) {\n            result += '.';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i][0] == '0') {\n            ip_arr[i] = ip_arr[i].slice(1);\n        }\n        new_ip += ip_arr[i] + '.';\n    }\n    return new_ip.slice(0, new_ip.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_array = ip.split(\".\");\n    let new_ip = \"\";\n    for (let i = 0; i < ip_array.length; i++) {\n        let temp = ip_array[i];\n        while (temp.charAt(0) == \"0\" && temp.length > 1) {\n            temp = temp.substring(1);\n        }\n        new_ip += temp;\n        if (i != ip_array.length - 1) {\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i] == '0') {\n            new_ip += '0.';\n        } else {\n            new_ip += ip_arr[i] + '.';\n        }\n    }\n    return new_ip.slice(0, -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp9ic7prjd.js:18:12)\n    at Object.<anonymous> (/tmp/tmp9ic7prjd.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let ip_new = [];\n    for (let i = 0; i < ip_arr.length; i++) {\n        ip_new.push(parseInt(ip_arr[i]));\n    }\n    return ip_new.join('.');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let ip_arr_new = [];\n    for (let i = 0; i < ip_arr.length; i++) {\n        ip_arr_new.push(parseInt(ip_arr[i]));\n    }\n    return ip_arr_new.join('.');\n}\n\nconsole.log(removezero_ip('255.024.01.01'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123740,
      "stdout": "255.24.1.1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split(\".\");\n    let ip_str = \"\";\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i] == \"0\") {\n            ip_str += \"0\";\n        }\n        else {\n            ip_str += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            ip_str += \".\";\n        }\n    }\n    return ip_str;\n}\nconsole.log(removezero_ip(\"255.024.01.01\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123742,
      "stdout": "255.024.01.01\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpk9pwhvs2.js:22:12)\n    at Object.<anonymous> (/tmp/tmpk9pwhvs2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        let num = parseInt(ip_arr[i]);\n        if (num == 0) {\n            new_ip += '0';\n        } else {\n            new_ip += num;\n        }\n        if (i != ip_arr.length - 1) {\n            new_ip += '.';\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i][0] == '0') {\n            new_ip += ip_arr[i].substring(1);\n        } else {\n            new_ip += ip_arr[i];\n        }\n        if (i < ip_arr.length - 1) {\n            new_ip += '.';\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0') {\n            new_ip += ip_arr[i].substring(1, ip_arr[i].length) + '.';\n        } else {\n            new_ip += ip_arr[i] + '.';\n        }\n    }\n    return new_ip.substring(0, new_ip.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr: string[] = ip.split('.');\n    let result: string = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i] == '0') {\n            ip_arr[i] = '';\n        }\n        result += ip_arr[i] + '.';\n    }\n    return result.slice(0, -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123742,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpv1uzt0sa.js:16:12)\n    at Object.<anonymous> (/tmp/tmpv1uzt0sa.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i] != '0') {\n            result += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            result += '.';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123743,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpgrmtml6m.js:18:12)\n    at Object.<anonymous> (/tmp/tmpgrmtml6m.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i][0] == '0') {\n            new_ip += ip_arr[i].substring(1);\n        } else {\n            new_ip += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            new_ip += '.';\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let arr = ip.split(\".\");\n    let result = \"\";\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 1 && arr[i][0] == \"0\") {\n            result += arr[i].substring(1);\n        } else {\n            result += arr[i];\n        }\n        if (i < arr.length - 1) {\n            result += \".\";\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123742,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split(\".\");\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].charAt(0) == \"0\") {\n            ip_arr[i] = ip_arr[i].substring(1);\n        }\n    }\n    return ip_arr.join(\".\");\n}\nconsole.log(removezero_ip(\"255.024.01.01\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123742,
      "stdout": "255.24.1.1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let ip_str = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i] == '0') {\n            ip_str += '0';\n        } else {\n            ip_str += ip_arr[i];\n            if (i != ip_arr.length - 1) {\n                ip_str += '.';\n            }\n        }\n    }\n    return ip_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123742,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpu35y60pd.js:21:12)\n    at Object.<anonymous> (/tmp/tmpu35y60pd.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i][0] == '0') {\n            result += ip_arr[i].substring(1) + '.';\n        } else {\n            result += ip_arr[i] + '.';\n        }\n    }\n    return result.substring(0, result.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123743,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let ip_str = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1) {\n            ip_str += ip_arr[i] + '.';\n        } else {\n            ip_str += ip_arr[i].replace(/^0+/, '') + '.';\n        }\n    }\n    return ip_str.slice(0, -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123743,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpwa19hqpj.js:18:12)\n    at Object.<anonymous> (/tmp/tmpwa19hqpj.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1) {\n            if (ip_arr[i].charAt(0) == '0') {\n                result += ip_arr[i].substring(1) + '.';\n            } else {\n                result += ip_arr[i] + '.';\n            }\n        } else {\n            result += ip_arr[i] + '.';\n        }\n    }\n    return result.substring(0, result.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123743,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        let num = parseInt(ip_arr[i]);\n        if (num == 0) {\n            new_ip = new_ip + '.' + '0';\n        }\n        else {\n            new_ip = new_ip + '.' + num;\n        }\n    }\n    return new_ip.substring(1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123743,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        let num = parseInt(ip_arr[i]);\n        if (num == 0) {\n            new_ip += '0';\n        } else {\n            new_ip += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            new_ip += '.';\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123743,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpv9tsxquu.js:22:12)\n    at Object.<anonymous> (/tmp/tmpv9tsxquu.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0') {\n            new_ip += ip_arr[i].substring(1);\n        } else {\n            new_ip += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            new_ip += '.';\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123743,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr: string[] = ip.split('.');\n    let new_ip: string = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].charAt(0) == '0') {\n            new_ip += ip_arr[i].substr(1) + '.';\n        } else {\n            new_ip += ip_arr[i] + '.';\n        }\n    }\n    return new_ip.substr(0, new_ip.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123743,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    var ip_arr = ip.split('.');\n    var ip_str = '';\n    for (var i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].charAt(0) == '0') {\n            ip_str += ip_arr[i].substring(1) + '.';\n        } else {\n            ip_str += ip_arr[i] + '.';\n        }\n    }\n    return ip_str.substring(0, ip_str.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123743,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i] == '0') {\n            new_ip += '0.';\n        } else {\n            new_ip += ip_arr[i] + '.';\n        }\n    }\n    return new_ip.slice(0, -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp9ic7prjd.js:18:12)\n    at Object.<anonymous> (/tmp/tmp9ic7prjd.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split(\".\");\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == \"0\") {\n            ip_arr[i] = ip_arr[i].substring(1);\n        }\n    }\n    return ip_arr.join(\".\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123743,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0') {\n            new_ip += ip_arr[i].substring(1, ip_arr[i].length);\n        } else {\n            new_ip += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            new_ip += '.';\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123743,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        let temp = ip_arr[i];\n        while (temp.length > 1 && temp[0] === '0') {\n            temp = temp.substr(1);\n        }\n        new_ip += temp;\n        if (i < ip_arr.length - 1) {\n            new_ip += '.';\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123743,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr: string[] = ip.split(\".\");\n    let result: string = \"\";\n    for (let i: number = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == \"0\") {\n            result += ip_arr[i].substring(1) + \".\";\n        } else {\n            result += ip_arr[i] + \".\";\n        }\n    }\n    return result.substring(0, result.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123743,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split(\".\");\n    let new_ip = \"\";\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i][0] == \"0\") {\n            new_ip += ip_arr[i].slice(1) + \".\";\n        } else {\n            new_ip += ip_arr[i] + \".\";\n        }\n    }\n    return new_ip.slice(0, -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123743,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i][0] == '0') {\n            new_ip += ip_arr[i].slice(1);\n        } else {\n            new_ip += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            new_ip += '.';\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123743,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i] == '0') {\n            new_ip += '0.';\n        } else {\n            new_ip += ip_arr[i] + '.';\n        }\n    }\n    return new_ip.slice(0, -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp9ic7prjd.js:18:12)\n    at Object.<anonymous> (/tmp/tmp9ic7prjd.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        result += parseInt(ip_arr[i]) + '.';\n    }\n    return result.slice(0, -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123743,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = [];\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].charAt(0) === '0') {\n            new_ip.push(ip_arr[i].substring(1));\n        } else {\n            new_ip.push(ip_arr[i]);\n        }\n    }\n    return new_ip.join('.');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123744,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr: string[] = ip.split('.');\n    let result: string = '';\n    for (let i: number = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0') {\n            result += ip_arr[i].substr(1);\n        } else {\n            result += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            result += '.';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123745,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n  let ip_arr = ip.split(\".\");\n  let new_ip = \"\";\n  for (let i = 0; i < ip_arr.length; i++) {\n    if (ip_arr[i].length > 1 && ip_arr[i][0] == \"0\") {\n      new_ip += ip_arr[i].substring(1);\n    } else {\n      new_ip += ip_arr[i];\n    }\n    if (i != ip_arr.length - 1) {\n      new_ip += \".\";\n    }\n  }\n  return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123745,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let arr = ip.split(\".\");\n    let newarr = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 1 && arr[i].charAt(0) == \"0\") {\n            newarr.push(arr[i].substring(1));\n        }\n        else {\n            newarr.push(arr[i]);\n        }\n    }\n    return newarr.join(\".\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123745,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split(\".\");\n    let res = \"\";\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i] == \"0\") {\n            ip_arr[i] = \"\";\n        }\n        res += ip_arr[i] + \".\";\n    }\n    return res.slice(0, res.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123745,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp5ls4b4uh.js:16:12)\n    at Object.<anonymous> (/tmp/tmp5ls4b4uh.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let result = [];\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].charAt(0) == '0') {\n            result.push(ip_arr[i].substr(1));\n        } else {\n            result.push(ip_arr[i]);\n        }\n    }\n    return result.join('.');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123745,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i] == '0') {\n            new_ip += '0';\n        } else {\n            new_ip += ip_arr[i];\n            break;\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123745,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpjlgw_lvs.js:19:12)\n    at Object.<anonymous> (/tmp/tmpjlgw_lvs.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let ip_str = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        let temp = ip_arr[i];\n        while (temp.startsWith('0')) {\n            temp = temp.substring(1);\n        }\n        ip_str += temp;\n        if (i != ip_arr.length - 1) {\n            ip_str += '.';\n        }\n    }\n    return ip_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123745,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0') {\n            result += ip_arr[i].substring(1);\n        } else {\n            result += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            result += '.';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let ip_arr_new = [];\n    for (let i = 0; i < ip_arr.length; i++) {\n        ip_arr_new.push(parseInt(ip_arr[i], 10));\n    }\n    return ip_arr_new.join('.');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123745,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let ip_arr_new = [];\n    for (let i = 0; i < ip_arr.length; i++) {\n        ip_arr_new.push(parseInt(ip_arr[i]));\n    }\n    return ip_arr_new.join('.');\n}\nconsole.log(removezero_ip('255.024.01.01'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509709,
      "stdout": "255.24.1.1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].charAt(0) == '0') {\n            result += ip_arr[i].substring(1) + '.';\n        } else {\n            result += ip_arr[i] + '.';\n        }\n    }\n    return result.substring(0, result.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].charAt(0) == '0') {\n            ip_arr[i] = ip_arr[i].substring(1);\n        }\n        new_ip += ip_arr[i];\n        if (i != ip_arr.length - 1) {\n            new_ip += '.';\n        }\n    }\n    return new_ip;\n}\n\nconsole.log(removezero_ip('255.024.01.01'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123746,
      "stdout": "255.24.1.1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let ip_str = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].charAt(0) == '0') {\n            ip_str += ip_arr[i].substr(1);\n        } else {\n            ip_str += ip_arr[i];\n        }\n        if (i < ip_arr.length - 1) {\n            ip_str += '.';\n        }\n    }\n    return ip_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123745,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr: string[] = ip.split('.');\n    let result: string = '';\n    for (let i: number = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0') {\n            result += ip_arr[i].substring(1);\n        }\n        else {\n            result += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            result += '.';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let ip_str = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i][0] === '0') {\n            ip_str += ip_arr[i].slice(1);\n        } else {\n            ip_str += ip_arr[i];\n        }\n        if (i < ip_arr.length - 1) {\n            ip_str += '.';\n        }\n    }\n    return ip_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let arr = ip.split('.');\n    let newarr = [];\n    for (let i = 0; i < arr.length; i++) {\n        let str = arr[i];\n        let newstr = '';\n        for (let j = 0; j < str.length; j++) {\n            if (str[j] != '0') {\n                newstr += str[j];\n            }\n        }\n        newarr.push(newstr);\n    }\n    return newarr.join('.');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let arr = ip.split('.');\n    let newarr = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].charAt(0) == '0') {\n            newarr.push(arr[i].substring(1));\n        }\n        else {\n            newarr.push(arr[i]);\n        }\n    }\n    return newarr.join('.');\n}\nconsole.log(removezero_ip('255.024.01.01'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123745,
      "stdout": "255.24.1.1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr: string[] = ip.split(\".\");\n    let ip_arr_new: string[] = [];\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].startsWith(\"0\")) {\n            ip_arr_new.push(ip_arr[i].substring(1));\n        } else {\n            ip_arr_new.push(ip_arr[i]);\n        }\n    }\n    return ip_arr_new.join(\".\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split(\".\");\n    let new_ip = \"\";\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == \"0\") {\n            new_ip += ip_arr[i].substring(1);\n        } else {\n            new_ip += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123740,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        let temp = ip_arr[i];\n        while (temp.length > 0 && temp[0] == '0') {\n            temp = temp.slice(1);\n        }\n        result += temp;\n        if (i < ip_arr.length - 1) {\n            result += '.';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let res = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1) {\n            res += ip_arr[i] + '.';\n        } else {\n            res += ip_arr[i].replace(/^0+/, '') + '.';\n        }\n    }\n    return res.slice(0, -1);\n}\nconsole.log(removezero_ip('255.024.01.01'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123746,
      "stdout": "255.024.01.01\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpdv1d41rt.js:19:12)\n    at Object.<anonymous> (/tmp/tmpdv1d41rt.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let ip_str = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].charAt(0) == '0') {\n            ip_str += ip_arr[i].substring(1);\n        } else {\n            ip_str += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            ip_str += '.';\n        }\n    }\n    return ip_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split(\".\");\n    let result = \"\";\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i][0] == \"0\") {\n            result += ip_arr[i].substring(1, ip_arr[i].length);\n        } else {\n            result += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            result += \".\";\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0') {\n            result += ip_arr[i].substring(1);\n        }\n        else {\n            result += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            result += '.';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1665509709,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split(\".\");\n    let new_ip = \"\";\n    for (let i = 0; i < ip_arr.length; i++) {\n        let temp = ip_arr[i];\n        if (temp[0] == \"0\") {\n            temp = temp.substring(1);\n        }\n        new_ip += temp;\n        if (i != ip_arr.length - 1) {\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let arr = ip.split('.');\n    let newarr = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 1 && arr[i][0] == '0') {\n            newarr.push(arr[i].substring(1));\n        } else {\n            newarr.push(arr[i]);\n        }\n    }\n    return newarr.join('.');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n  let ip_arr = ip.split(\".\");\n  let new_ip = \"\";\n  for (let i = 0; i < ip_arr.length; i++) {\n    let temp = ip_arr[i];\n    while (temp.length > 1 && temp[0] == \"0\") {\n      temp = temp.substr(1);\n    }\n    new_ip += temp;\n    if (i < ip_arr.length - 1) {\n      new_ip += \".\";\n    }\n  }\n  return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i] == '0') {\n            new_ip += '0.';\n        } else {\n            new_ip += ip_arr[i] + '.';\n        }\n    }\n    return new_ip.substring(0, new_ip.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpzwnv_e6o.js:18:12)\n    at Object.<anonymous> (/tmp/tmpzwnv_e6o.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr: string[] = ip.split(\".\");\n    let ip_arr_new: string[] = [];\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].startsWith(\"0\")) {\n            ip_arr_new.push(ip_arr[i].substring(1));\n        } else {\n            ip_arr_new.push(ip_arr[i]);\n        }\n    }\n    return ip_arr_new.join(\".\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123746,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split(\".\");\n    let new_ip = \"\";\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].charAt(0) == \"0\") {\n            new_ip += ip_arr[i].substring(1);\n        } else {\n            new_ip += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123748,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0') {\n            new_ip += ip_arr[i].substring(1);\n        }\n        else {\n            new_ip += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            new_ip += '.';\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr: string[] = ip.split('.');\n    let new_ip: string = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].charAt(0) === '0') {\n            new_ip += ip_arr[i].substring(1) + '.';\n        } else {\n            new_ip += ip_arr[i] + '.';\n        }\n    }\n    return new_ip.substring(0, new_ip.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123748,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 1 && arr[i][0] == '0') {\n            result += arr[i].slice(1);\n        } else {\n            result += arr[i];\n        }\n        if (i != arr.length - 1) {\n            result += '.';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123748,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        let num = parseInt(ip_arr[i]);\n        if (num > 0) {\n            new_ip += num;\n            if (i < ip_arr.length - 1) {\n                new_ip += '.';\n            }\n        }\n    }\n    return new_ip;\n}\nconsole.log(removezero_ip('255.024.01.01'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123748,
      "stdout": "255.24.1.1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 1 && arr[i].charAt(0) == '0') {\n            result += arr[i].substring(1);\n        }\n        else {\n            result += arr[i];\n        }\n        if (i != arr.length - 1) {\n            result += '.';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123748,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i][0] === '0') {\n            result += ip_arr[i].substring(1);\n        } else {\n            result += ip_arr[i];\n        }\n        if (i !== ip_arr.length - 1) {\n            result += '.';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i] == '0') {\n            result += '0.';\n        } else {\n            result += ip_arr[i] + '.';\n        }\n    }\n    return result.slice(0, -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp0zgqrjc2.js:18:12)\n    at Object.<anonymous> (/tmp/tmp0zgqrjc2.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let arr = ip.split(\".\");\n    let result = \"\";\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 1 && arr[i].charAt(0) == \"0\") {\n            result += arr[i].substring(1);\n        } else {\n            result += arr[i];\n        }\n        if (i < arr.length - 1) {\n            result += \".\";\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123748,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        let num = parseInt(ip_arr[i]);\n        if (num == 0) {\n            new_ip += '0';\n        }\n        else {\n            new_ip += num;\n        }\n        if (i != ip_arr.length - 1) {\n            new_ip += '.';\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123748,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > 1 && arr[i][0] == '0') {\n            result += arr[i].substring(1, arr[i].length);\n        } else {\n            result += arr[i];\n        }\n        if (i != arr.length - 1) {\n            result += '.';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123748,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0') {\n            new_ip += ip_arr[i].substring(1);\n        }\n        else {\n            new_ip += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            new_ip += '.';\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr: string[] = ip.split('.');\n    let new_ip: string = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i][0] == '0') {\n            ip_arr[i] = ip_arr[i].substr(1);\n        }\n        new_ip += ip_arr[i] + '.';\n    }\n    return new_ip.substr(0, new_ip.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123748,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_array: string[] = ip.split('.');\n    let new_ip: string = '';\n    for (let i = 0; i < ip_array.length; i++) {\n        if (ip_array[i].length > 1) {\n            if (ip_array[i].charAt(0) == '0') {\n                ip_array[i] = ip_array[i].substring(1);\n            }\n        }\n        new_ip = new_ip + ip_array[i] + '.';\n    }\n    return new_ip.substring(0, new_ip.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i][0] === '0') {\n            result += ip_arr[i].substring(1);\n        } else {\n            result += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            result += '.';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0') {\n            new_ip += ip_arr[i].substring(1);\n        }\n        else {\n            new_ip += ip_arr[i];\n        }\n        if (i < ip_arr.length - 1) {\n            new_ip += '.';\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i][0] == '0') {\n            result += ip_arr[i].substring(1);\n        } else {\n            result += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            result += '.';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123748,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0') {\n            new_ip = new_ip + ip_arr[i].substr(1) + '.';\n        }\n        else {\n            new_ip = new_ip + ip_arr[i] + '.';\n        }\n    }\n    return new_ip.substr(0, new_ip.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i][0] == '0') {\n            result += ip_arr[i].substring(1);\n        } else {\n            result += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            result += '.';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i][0] === '0') {\n            result += ip_arr[i].substring(1, ip_arr[i].length);\n        } else {\n            result += ip_arr[i];\n        }\n        if (i !== ip_arr.length - 1) {\n            result += '.';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123748,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr: string[] = ip.split(\".\");\n    let new_ip: string = \"\";\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == \"0\") {\n            ip_arr[i] = ip_arr[i].substring(1);\n        }\n        new_ip = new_ip + ip_arr[i] + \".\";\n    }\n    return new_ip.substring(0, new_ip.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i] == '0') {\n            new_ip += '0';\n        } else {\n            new_ip += ip_arr[i];\n        }\n    }\n    return new_ip;\n}\nconsole.log(removezero_ip('255.024.01.01'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123749,
      "stdout": "2550240101\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'21608094196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpawuuzzv2.js:19:12)\n    at Object.<anonymous> (/tmp/tmpawuuzzv2.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '21608094196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split(\".\");\n    let ip_arr_new = [];\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0') {\n            ip_arr_new.push(ip_arr[i].substr(1));\n        } else {\n            ip_arr_new.push(ip_arr[i]);\n        }\n    }\n    return ip_arr_new.join(\".\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let i = 0;\n    while (ip[i] == '0') {\n        i++;\n    }\n    return ip.substring(i);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmphx1krzwl.js:12:12)\n    at Object.<anonymous> (/tmp/tmphx1krzwl.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    for (let i = 0; i < ip_arr.length; i++) {\n        ip_arr[i] = parseInt(ip_arr[i]).toString();\n    }\n    return ip_arr.join('.');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let arr = ip.split('.');\n    let res = '';\n    for (let i = 0; i < arr.length; i++) {\n        let str = arr[i];\n        while (str[0] == '0') {\n            str = str.substring(1);\n        }\n        res += str;\n        if (i != arr.length - 1) {\n            res += '.';\n        }\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123749,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0') {\n            ip_arr[i] = ip_arr[i].substring(1);\n        }\n        new_ip += ip_arr[i];\n        if (i < ip_arr.length - 1) {\n            new_ip += '.';\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123750,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split(\".\");\n    let new_ip = \"\";\n    for (let i = 0; i < ip_arr.length; i++) {\n        let temp = ip_arr[i];\n        while (temp.charAt(0) == \"0\") {\n            temp = temp.substr(1);\n        }\n        new_ip += temp;\n        if (i != ip_arr.length - 1) {\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123750,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split(\".\");\n    let result = \"\";\n    for (let i = 0; i < ip_arr.length; i++) {\n        let num = parseInt(ip_arr[i]);\n        if (num === 0) {\n            result += \"0.\";\n        } else {\n            result += num + \".\";\n        }\n    }\n    return result.substring(0, result.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123750,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i][0] == '0') {\n            ip_arr[i] = ip_arr[i].substring(1);\n        }\n        new_ip += ip_arr[i];\n        if (i < ip_arr.length - 1) {\n            new_ip += '.';\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123734,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i][0] == '0') {\n            new_ip += ip_arr[i].slice(1) + '.';\n        }\n        else {\n            new_ip += ip_arr[i] + '.';\n        }\n    }\n    return new_ip.slice(0, -1);\n}\nconsole.log(removezero_ip('255.024.01.01'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123750,
      "stdout": "255.24.1.1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i][0] == '0') {\n            new_ip += ip_arr[i].substring(1);\n        } else {\n            new_ip += ip_arr[i];\n        }\n        if (i < ip_arr.length - 1) {\n            new_ip += '.';\n        }\n    }\n    return new_ip;\n}\nconsole.log(removezero_ip('255.024.01.01'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123751,
      "stdout": "255.24.1.1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let ip_str = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].charAt(0) == '0') {\n            ip_str += ip_arr[i].substring(1) + '.';\n        } else {\n            ip_str += ip_arr[i] + '.';\n        }\n    }\n    return ip_str.substring(0, ip_str.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr: string[] = ip.split(\".\");\n    let new_ip: string = \"\";\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].charAt(0) == \"0\") {\n            new_ip += ip_arr[i].substring(1);\n        } else {\n            new_ip += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr: string[] = ip.split('.');\n    let new_ip: string = '';\n    for (let i: number = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].charAt(0) == '0') {\n            ip_arr[i] = ip_arr[i].substring(1);\n        }\n        new_ip += ip_arr[i] + '.';\n    }\n    return new_ip.substring(0, new_ip.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = [];\n    for (let i = 0; i < ip_arr.length; i++) {\n        let num = parseInt(ip_arr[i]);\n        if (num === 0) {\n            new_ip.push('0');\n        } else {\n            new_ip.push(num.toString());\n        }\n    }\n    return new_ip.join('.');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let arr = ip.split('.');\n    let newarr = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] != '0') {\n            newarr.push(arr[i]);\n        }\n    }\n    return newarr.join('.');\n}\nconsole.log(removezero_ip('255.024.01.01'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123751,
      "stdout": "255.024.01.01\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpowgvfxbz.js:16:12)\n    at Object.<anonymous> (/tmp/tmpowgvfxbz.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split(\".\");\n    let new_ip = \"\";\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i] == \"0\") {\n            new_ip += \"0.\";\n        } else {\n            new_ip += ip_arr[i] + \".\";\n        }\n    }\n    return new_ip.slice(0, -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp4shv7yhv.js:18:12)\n    at Object.<anonymous> (/tmp/tmp4shv7yhv.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr: string[] = ip.split(\".\");\n    let new_ip: string = \"\";\n\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == \"0\") {\n            new_ip += ip_arr[i].substring(1);\n        } else {\n            new_ip += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i] == '0') {\n            new_ip += '0.';\n        }\n        else {\n            new_ip += ip_arr[i] + '.';\n        }\n    }\n    return new_ip.slice(0, -1);\n}\nconsole.log(removezero_ip('255.024.01.01'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123751,
      "stdout": "255.024.01.01\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpa79ovcre.js:19:12)\n    at Object.<anonymous> (/tmp/tmpa79ovcre.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = [];\n    for (let i = 0; i < ip_arr.length; i++) {\n        let num = parseInt(ip_arr[i]);\n        if (num === 0) {\n            new_ip.push('0');\n        } else {\n            new_ip.push(num.toString());\n        }\n    }\n    return new_ip.join('.');\n}\n\nconsole.log(removezero_ip('255.024.01.01'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123751,
      "stdout": "255.24.1.1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let ip_str = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].charAt(0) == '0') {\n            ip_str += ip_arr[i].substring(1, ip_arr[i].length) + '.';\n        } else {\n            ip_str += ip_arr[i] + '.';\n        }\n    }\n    return ip_str.substring(0, ip_str.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let ip_str = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        ip_str += parseInt(ip_arr[i]).toString() + '.';\n    }\n    return ip_str.slice(0, -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        let num = parseInt(ip_arr[i]);\n        if (num == 0) {\n            result += '0';\n        } else {\n            result += num.toString();\n        }\n        if (i != ip_arr.length - 1) {\n            result += '.';\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let ip_arr_new = ip_arr.map(function (val) {\n        if (val.length > 1 && val[0] == '0') {\n            return val.substring(1);\n        }\n        return val;\n    });\n    return ip_arr_new.join('.');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr: string[] = ip.split(\".\");\n    let new_ip: string = \"\";\n    for (let i: number = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1) {\n            if (ip_arr[i].charAt(0) == \"0\") {\n                ip_arr[i] = ip_arr[i].substring(1);\n            }\n        }\n        new_ip += ip_arr[i];\n        if (i < ip_arr.length - 1) {\n            new_ip += \".\";\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let result = \"\";\n    let count = 0;\n    for (let i = 0; i < ip.length; i++) {\n        if (ip[i] == \"0\") {\n            count++;\n        }\n        else {\n            break;\n        }\n    }\n    for (let i = count; i < ip.length; i++) {\n        result += ip[i];\n    }\n    return result;\n}\nconsole.log(removezero_ip(\"255.024.01.01\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123751,
      "stdout": "255.024.01.01\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmpkdhf42uu.js:22:12)\n    at Object.<anonymous> (/tmp/tmpkdhf42uu.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let arr = ip.split('.');\n    let result = '';\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] == '0') {\n            result += '0.';\n        } else {\n            result += arr[i] + '.';\n        }\n    }\n    return result.substring(0, result.length - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123751,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmphl_9vkrv.js:18:12)\n    at Object.<anonymous> (/tmp/tmphl_9vkrv.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let ip_arr_new = [];\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i] != '0') {\n            ip_arr_new.push(ip_arr[i]);\n        }\n    }\n    return ip_arr_new.join('.');\n}\nconsole.log(removezero_ip('255.024.01.01'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123751,
      "stdout": "255.024.01.01\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'216.08.094.196'\n\nshould loosely deep-equal\n\n'216.8.94.196'\n    at test (/tmp/tmp8782vybf.js:16:12)\n    at Object.<anonymous> (/tmp/tmp8782vybf.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '216.08.094.196',\n  expected: '216.8.94.196',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to remove leading zeroes from an ip address.\nfunction removezero_ip(ip: string): string {\n    let ip_arr = ip.split('.');\n    let new_ip = '';\n    for (let i = 0; i < ip_arr.length; i++) {\n        if (ip_arr[i].length > 1 && ip_arr[i].charAt(0) == '0') {\n            new_ip += ip_arr[i].substring(1);\n        }\n        else {\n            new_ip += ip_arr[i];\n        }\n        if (i != ip_arr.length - 1) {\n            new_ip += '.';\n        }\n    }\n    return new_ip;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = removezero_ip;\n  assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");\n  assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");\n  assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");\n}\n\ntest();",
      "timestamp": 1666123747,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}