{
  "name": "mbpp_806_max_run_uppercase",
  "language": "ts",
  "prompt": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] == test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp57k3e4xn.js:22:12)\n    at Object.<anonymous> (/tmp/tmp57k3e4xn.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let cur_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n        } else {\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpddcwp303.js:22:12)\n    at Object.<anonymous> (/tmp/tmpddcwp303.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpfb2wkeku.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfb2wkeku.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let curr_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello, World!\"));\nconsole.log(max_run_uppercase(\"Hello, World! I'm a string.\"));\nconsole.log(max_run_uppercase(\"Hello, World! I'm a string. I'm a string. I'm a string.\"));\nconsole.log(max_run_uppercase(\"Hello, World! I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string. I'm a string.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510550,
      "stdout": "../../../../tmp/tmpivy58ro7.ts(21,857): error TS1002: Unterminated string literal.\n../../../../tmp/tmpivy58ro7.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmpivy58ro7.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpfb2wkeku.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfb2wkeku.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n  let max_run = 0;\n  let current_run = 0;\n  for (let i = 0; i < test_str.length; i++) {\n    if (test_str[i] === test_str[i].toUpperCase()) {\n      current_run++;\n      if (current_run > max_run) {\n        max_run = current_run;\n      }\n    } else {\n      current_run = 0;\n    }\n  }\n  return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run += 1;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"abCdEfG\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmphp1kzeim.js:44:12)\n    at Object.<anonymous> (/tmp/tmphp1kzeim.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let cur_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello\"));\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World!\"));\nconsole.log(max_run_uppercase(\"Hello World! I am a string.\"));\nconsole.log(max_run_uppercase(\"Hello World! I am a string. I am a string.\"));\nconsole.log(max_run_uppercase(\"Hello World! I am a string. I am a string. I am a string.\"));\nconsole.log(max_run_uppercase(\"Hello World! I am a string. I am a string. I am a string. I am a string.\"));\nconsole.log(max_run_uppercase(\"Hello World! I am a string. I am a string. I am a string. I am a string. I am a string.\"));\nconsole.log(max_run_uppercase(\"Hello World! I am a string. I am a string. I am a string. I am a string. I am a string. I am a string.\"));\nconsole.log(max_run_uppercase(\"Hello World! I am a string. I am a string. I am a string. I am a string. I am a string. I am a string. I am a string.\"));\nconsole.log(max_run_uppercase(\"Hello World! I am a string. I am a string. I am a string. I am a string. I am a string. I am a string. I am a string. I am a string.\"));\nconsole.log(max_run_uppercase(\"Hello World! I am a string. I am a\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510550,
      "stdout": "../../../../tmp/tmp3ftcfz0k.ts(29,66): error TS1002: Unterminated string literal.\n../../../../tmp/tmp3ftcfz0k.ts(30,1): error TS1005: ',' expected.\n../../../../tmp/tmp3ftcfz0k.ts(30,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World123\"));\nconsole.log(max_run_uppercase(\"Hello World123ABC\"));\nconsole.log(max_run_uppercase(\"Hello World123ABCabc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "2\n2\n2\n6\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpfbr7_2_y.js:26:12)\n    at Object.<anonymous> (/tmp/tmpfbr7_2_y.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let curr_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpgy6ys16m.js:22:12)\n    at Object.<anonymous> (/tmp/tmpgy6ys16m.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] == test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            current_run = 0;\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpw39c7x82.js:22:12)\n    at Object.<anonymous> (/tmp/tmpw39c7x82.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpfb2wkeku.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfb2wkeku.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpkvpirwyy.js:22:12)\n    at Object.<anonymous> (/tmp/tmpkvpirwyy.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\nconsole.log(max_run_uppercase(\"abcdEfghiJKLmnopqrstuvwxyz\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run += 1;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpy72pqb18.js:22:12)\n    at Object.<anonymous> (/tmp/tmpy72pqb18.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        }\n        else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpm_azb65u.js:22:12)\n    at Object.<anonymous> (/tmp/tmpm_azb65u.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] == test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] == test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpn3sxv7vs.js:22:12)\n    at Object.<anonymous> (/tmp/tmpn3sxv7vs.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let curr_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpx6llln7j.js:22:12)\n    at Object.<anonymous> (/tmp/tmpx6llln7j.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n  let max_run: number = 0;\n  let current_run: number = 0;\n  for (let i = 0; i < test_str.length; i++) {\n    if (test_str[i] === test_str[i].toUpperCase()) {\n      current_run++;\n    } else {\n      if (current_run > max_run) {\n        max_run = current_run;\n      }\n      current_run = 0;\n    }\n  }\n  if (current_run > max_run) {\n    max_run = current_run;\n  }\n  return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplf629yai.js:22:12)\n    at Object.<anonymous> (/tmp/tmplf629yai.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplf629yai.js:22:12)\n    at Object.<anonymous> (/tmp/tmplf629yai.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let curr_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpgy6ys16m.js:22:12)\n    at Object.<anonymous> (/tmp/tmpgy6ys16m.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            current_run = 0;\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpddcwp303.js:22:12)\n    at Object.<anonymous> (/tmp/tmpddcwp303.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let curr_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpgy6ys16m.js:22:12)\n    at Object.<anonymous> (/tmp/tmpgy6ys16m.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] == test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am the best string ever\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string ever, and I am the best string\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "../../../../tmp/tmpqnz6ayg8.ts(21,1262): error TS1002: Unterminated string literal.\n../../../../tmp/tmpqnz6ayg8.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmpqnz6ayg8.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpfyivpn_q.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfyivpn_q.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_count = 0;\n    let count = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            count++;\n        } else {\n            if (count > max_count) {\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    return max_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp68dyufo3.js:22:12)\n    at Object.<anonymous> (/tmp/tmp68dyufo3.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let curr_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplvx_2wbk.js:22:12)\n    at Object.<anonymous> (/tmp/tmplvx_2wbk.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= 'A' && test_str[i] <= 'Z') {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            current_run = 0;\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"aAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAa\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "../../../../tmp/tmp1hdz2_l2.ts(18,409): error TS1002: Unterminated string literal.\n../../../../tmp/tmp1hdz2_l2.ts(19,1): error TS1005: ',' expected.\n../../../../tmp/tmp1hdz2_l2.ts(19,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let cur_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n        } else {\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, I am a string, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, I am a string, I am a string, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, I am a string, I am a string, I am a string, I am a string\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "2\n4\n4\n4\n4\n4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp57k3e4xn.js:22:12)\n    at Object.<anonymous> (/tmp/tmp57k3e4xn.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpfb2wkeku.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfb2wkeku.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpddcwp303.js:22:12)\n    at Object.<anonymous> (/tmp/tmpddcwp303.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplf629yai.js:22:12)\n    at Object.<anonymous> (/tmp/tmplf629yai.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpddcwp303.js:22:12)\n    at Object.<anonymous> (/tmp/tmpddcwp303.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpfb2wkeku.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfb2wkeku.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp57k3e4xn.js:22:12)\n    at Object.<anonymous> (/tmp/tmp57k3e4xn.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let cur_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n        } else {\n            max_run = Math.max(max_run, cur_run);\n            cur_run = 0;\n        }\n    }\n    max_run = Math.max(max_run, cur_run);\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= 'A' && test_str[i] <= 'Z') {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!!!!!!\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpzkp_9jv2.js:43:12)\n    at Object.<anonymous> (/tmp/tmpzkp_9jv2.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpw39c7x82.js:22:12)\n    at Object.<anonymous> (/tmp/tmpw39c7x82.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpddcwp303.js:22:12)\n    at Object.<anonymous> (/tmp/tmpddcwp303.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpddcwp303.js:22:12)\n    at Object.<anonymous> (/tmp/tmpddcwp303.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let curr_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpgy6ys16m.js:22:12)\n    at Object.<anonymous> (/tmp/tmpgy6ys16m.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpfb2wkeku.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfb2wkeku.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let curr_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpgy6ys16m.js:22:12)\n    at Object.<anonymous> (/tmp/tmpgy6ys16m.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let cur_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n        } else {\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            current_run = 0;\n        }\n        max_run = Math.max(max_run, current_run);\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n  let max_run: number = 0;\n  let current_run: number = 0;\n  for (let i = 0; i < test_str.length; i++) {\n    if (test_str[i] === test_str[i].toUpperCase()) {\n      current_run++;\n    } else {\n      if (current_run > max_run) {\n        max_run = current_run;\n      }\n      current_run = 0;\n    }\n  }\n  return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmptufm1rph.js:22:12)\n    at Object.<anonymous> (/tmp/tmptufm1rph.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] == test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpn3sxv7vs.js:22:12)\n    at Object.<anonymous> (/tmp/tmpn3sxv7vs.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpddcwp303.js:22:12)\n    at Object.<anonymous> (/tmp/tmpddcwp303.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpfb2wkeku.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfb2wkeku.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let curr_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string with some UPPERCASE characters\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string with some UPPERCASE characters and some lowercase characters\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string with some UPPERCASE characters and some lowercase characters and some numbers 12345\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string with some UPPERCASE characters and some lowercase characters and some numbers 12345 and some special characters !@#$%^&*()_+\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "2\n4\n11\n11\n11\n13\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let curr_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpgy6ys16m.js:22:12)\n    at Object.<anonymous> (/tmp/tmpgy6ys16m.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_count: number = 0;\n    let count: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            count++;\n            if (count > max_count) {\n                max_count = count;\n            }\n        } else {\n            count = 0;\n        }\n    }\n    return max_count;\n}\n\nconsole.log(max_run_uppercase(\"aaaBBBBBcccccndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "../../../../tmp/tmpurgbq8zu.ts(18,797): error TS1002: Unterminated string literal.\n../../../../tmp/tmpurgbq8zu.ts(19,1): error TS1005: ',' expected.\n../../../../tmp/tmpurgbq8zu.ts(19,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            max_run = Math.max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    return Math.max(max_run, current_run);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplf629yai.js:22:12)\n    at Object.<anonymous> (/tmp/tmplf629yai.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            current_run = 0;\n        }\n        if (current_run > max_run) {\n            max_run = current_run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpw39c7x82.js:22:12)\n    at Object.<anonymous> (/tmp/tmpw39c7x82.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_count: number = 0;\n    let count: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            count++;\n            if (count > max_count) {\n                max_count = count;\n            }\n        } else {\n            count = 0;\n        }\n    }\n    return max_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let cur_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n        } else {\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I AM A STRING\"));\nconsole.log(max_run_uppercase(\"Hello World, I AM A STRING, I AM A STRING\"));\nconsole.log(max_run_uppercase(\"Hello World, I AM A STRING, I AM A STRING, I AM A STRING\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "2\n4\n15\n30\n45\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let cur_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n        } else {\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let cur_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplgcs8uvp.js:22:12)\n    at Object.<anonymous> (/tmp/tmplgcs8uvp.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpw39c7x82.js:22:12)\n    at Object.<anonymous> (/tmp/tmpw39c7x82.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let curr_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplvx_2wbk.js:22:12)\n    at Object.<anonymous> (/tmp/tmplvx_2wbk.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let curr_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplvx_2wbk.js:22:12)\n    at Object.<anonymous> (/tmp/tmplvx_2wbk.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, with a lot of UPPERCASE characters\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123300,
      "stdout": "2\n4\n11\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpmgi1__91.js:25:12)\n    at Object.<anonymous> (/tmp/tmpmgi1__91.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let curr_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if (curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let curr_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run += 1;\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let cur_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp2ex4gelh.js:22:12)\n    at Object.<anonymous> (/tmp/tmp2ex4gelh.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am all uppercase\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am all lowercase\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am all lowercase, with a few UPPERCASE words\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am all lowercase, with a few UPPERCASE words, and a few more UPPERCASE words\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "2\n4\n4\n4\n11\n11\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpu33lw4t6.js:28:12)\n    at Object.<anonymous> (/tmp/tmpu33lw4t6.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string. I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string. I am a string. I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string. I am a string. I am a string. I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string. I am a string. I am a string. I am a string. I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string. I am a string. I am a string. I am a string. I am a string. I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string. I am a string. I am a string. I am a string. I am a string. I am a string. I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string. I am a string. I am a string. I am a string. I am a string. I am a string. I am a string. I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string. I am a string. I am a string. I am a string. I am a string. I am a string. I am a string. I am a string. I am a string\"));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "../../../../tmp/tmp923o_poa.ts(29,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] == test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpczuw9pau.js:22:12)\n    at Object.<anonymous> (/tmp/tmpczuw9pau.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp57k3e4xn.js:22:12)\n    at Object.<anonymous> (/tmp/tmp57k3e4xn.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplf629yai.js:22:12)\n    at Object.<anonymous> (/tmp/tmplf629yai.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str.charAt(i) == test_str.charAt(i).toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123300,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let cur_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplgcs8uvp.js:22:12)\n    at Object.<anonymous> (/tmp/tmplgcs8uvp.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpkvpirwyy.js:22:12)\n    at Object.<anonymous> (/tmp/tmpkvpirwyy.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let curr_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplvx_2wbk.js:22:12)\n    at Object.<anonymous> (/tmp/tmplvx_2wbk.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "2\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp33xln9kt.js:23:12)\n    at Object.<anonymous> (/tmp/tmp33xln9kt.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run += 1;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"aBcDeFgH\"));\nconsole.log(max_run_uppercase(\"aBcDeFgH1234\"));\nconsole.log(max_run_uppercase(\"aBcDeFgH123456789\"));\nconsole.log(max_run_uppercase(\"aBcDeFgH123456789ABCDEFGH\"));\nconsole.log(max_run_uppercase(\"aBcDeFgH123456789ABCDEFGH123456789\"));\nconsole.log(max_run_uppercase(\"aBcDeFgH123456789ABCDEFGH123456789ABCDEFGH\"));\nconsole.log(max_run_uppercase(\"aBcDeFgH123456789ABCDEFGH123456789ABCDEFGH123456789\"));\nconsole.log(max_run_uppercase(\"aBcDeFgH123456789ABCDEFGH123456789ABCDEFGH123456789ABCDEFGH\"));\nconsole.log(max_run_uppercase(\"aBcDeFgH123456789ABCDEFGH123456789ABCDEFGH123456789ABCDEFGH123456789\"));\nconsole.log(max_run_uppercase(\"aBcDeFgH123456789ABCDEFGH123456789ABCDEFGH123456789ABCDEFGH123456789ABCDEFGH\"));\nconsole.log(max_run_uppercase(\"aBcDeFgH123456789ABCDEFGH123456789ABCDEFGH123456789\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123301,
      "stdout": "../../../../tmp/tmpwjw1bb5z.ts(28,83): error TS1002: Unterminated string literal.\n../../../../tmp/tmpwjw1bb5z.ts(29,1): error TS1005: ',' expected.\n../../../../tmp/tmpwjw1bb5z.ts(29,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"aAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAa\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "../../../../tmp/tmp7a7wgjrw.ts(18,415): error TS1002: Unterminated string literal.\n../../../../tmp/tmp7a7wgjrw.ts(19,1): error TS1005: ',' expected.\n../../../../tmp/tmp7a7wgjrw.ts(19,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123301,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] == test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpocww5hfr.js:22:12)\n    at Object.<anonymous> (/tmp/tmpocww5hfr.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpfb2wkeku.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfb2wkeku.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplf629yai.js:22:12)\n    at Object.<anonymous> (/tmp/tmplf629yai.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_count = 0;\n    let count = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            count++;\n        } else {\n            if (count > max_count) {\n                max_count = count;\n            }\n            count = 0;\n        }\n    }\n    return max_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp68dyufo3.js:22:12)\n    at Object.<anonymous> (/tmp/tmp68dyufo3.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let curr_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplvx_2wbk.js:22:12)\n    at Object.<anonymous> (/tmp/tmplvx_2wbk.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "2\n4\n4\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpa_tme7at.js:25:12)\n    at Object.<anonymous> (/tmp/tmpa_tme7at.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplf629yai.js:22:12)\n    at Object.<anonymous> (/tmp/tmplf629yai.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp57k3e4xn.js:22:12)\n    at Object.<anonymous> (/tmp/tmp57k3e4xn.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"aBcDeFg\"));\nconsole.log(max_run_uppercase(\"aBcDeFgGH\"));\nconsole.log(max_run_uppercase(\"aBcDeFgGHI\"));\nconsole.log(max_run_uppercase(\"aBcDeFgGHIJ\"));\nconsole.log(max_run_uppercase(\"aBcDeFgGHIJK\"));\nconsole.log(max_run_uppercase(\"aBcDeFgGHIJKL\"));\nconsole.log(max_run_uppercase(\"aBcDeFgGHIJKLM\"));\nconsole.log(max_run_uppercase(\"aBcDeFgGHIJKLMN\"));\nconsole.log(max_run_uppercase(\"aBcDeFgGHIJKLMNO\"));\nconsole.log(max_run_uppercase(\"aBcDeFgGHIJKLMNOP\"));\nconsole.log(max_run_uppercase(\"aBcDeFgGHIJKLMNOPQ\"));\nconsole.log(max_run_uppercase(\"aBcDeFgGHIJKLMNOPQR\"));\nconsole.log(max_run_uppercase(\"aBcDeFgGHIJKLMNOPQRS\"));\nconsole.log(max_run_uppercase(\"aBcDeFgGHIJKLMNOPQRST\"));\nconsole.log(max_run_uppercase(\"aBcDeFgGHIJKLMNOPQRST\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "../../../../tmp/tmp9r5mapm8.ts(32,53): error TS1002: Unterminated string literal.\n../../../../tmp/tmp9r5mapm8.ts(33,1): error TS1005: ',' expected.\n../../../../tmp/tmp9r5mapm8.ts(33,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpkvpirwyy.js:22:12)\n    at Object.<anonymous> (/tmp/tmpkvpirwyy.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "../../../../tmp/tmp8immiktr.ts(27,65): error TS1002: Unterminated string literal.\n../../../../tmp/tmp8immiktr.ts(28,1): error TS1005: ',' expected.\n../../../../tmp/tmp8immiktr.ts(28,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"aAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAa\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "../../../../tmp/tmp8dku_gjb.ts(18,415): error TS1002: Unterminated string literal.\n../../../../tmp/tmp8dku_gjb.ts(19,1): error TS1005: ',' expected.\n../../../../tmp/tmp8dku_gjb.ts(19,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let cur_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplgcs8uvp.js:22:12)\n    at Object.<anonymous> (/tmp/tmplgcs8uvp.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let cur_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplgcs8uvp.js:22:12)\n    at Object.<anonymous> (/tmp/tmplgcs8uvp.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpfb2wkeku.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfb2wkeku.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpfb2wkeku.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfb2wkeku.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let curr_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpgy6ys16m.js:22:12)\n    at Object.<anonymous> (/tmp/tmpgy6ys16m.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp57k3e4xn.js:22:12)\n    at Object.<anonymous> (/tmp/tmp57k3e4xn.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let curr_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] >= 'A' && test_str[i] <= 'Z') {\n            curr_run++;\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n        } else {\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpw39c7x82.js:22:12)\n    at Object.<anonymous> (/tmp/tmpw39c7x82.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "2\n4\n4\n4\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpi6vxzo6z.js:26:12)\n    at Object.<anonymous> (/tmp/tmpi6vxzo6z.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmp57k3e4xn.js:22:12)\n    at Object.<anonymous> (/tmp/tmp57k3e4xn.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            run = 0;\n        }\n\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let cur_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpuh7v6m0g.js:22:12)\n    at Object.<anonymous> (/tmp/tmpuh7v6m0g.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_count = 0;\n    let count = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            count++;\n            if (count > max_count) {\n                max_count = count;\n            }\n        } else {\n            count = 0;\n        }\n    }\n    return max_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let curr_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            curr_run = 0;\n        }\n        if (curr_run > max_run) {\n            max_run = curr_run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let cur_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n        } else {\n            cur_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpfb2wkeku.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfb2wkeku.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        }\n        else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpkvpirwyy.js:22:12)\n    at Object.<anonymous> (/tmp/tmpkvpirwyy.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a JavaScript Developer\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "2\n4\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0, run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpo9eia_4v.js:21:12)\n    at Object.<anonymous> (/tmp/tmpo9eia_4v.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if (current_run > max_run) {\n        max_run = current_run;\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Heeeellllloooo\"));\nconsole.log(max_run_uppercase(\"Heeeellllloooo\"));\nconsole.log(max_run_uppercase(\"Heeeellllloooo\"));\nconsole.log(max_run_uppercase(\"Heeeellllloooo\"));\nconsole.log(max_run_uppercase(\"Heeeellllloooo\"));\nconsole.log(max_run_uppercase(\"Heeeellllloooo\"));\nconsole.log(max_run_uppercase(\"Heeeellllloooo\"));\nconsole.log(max_run_uppercase(\"Heeeellllloooo\"));\nconsole.log(max_run_uppercase(\"Heeeellllloooo\"));\nconsole.log(max_run_uppercase(\"Heeeellllloooo\"));\nconsole.log(max_run_uppercase(\"Heeeellllloooo\"));\nconsole.log(max_run_uppercase(\"Heeeellllloooo\"));\nconsole.log(max_run_uppercase(\"Heeeellllloooo\"));\nconsole.log(max_run_uppercase(\"Heeeellllloooo\"));\nconsole.log(max_run_uppercase(\"Heeeellllloooo\"));\nconsole.log(max_run_uppercase(\"Heeeellllloooo\"));\nconsole.log(max_run\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "../../../../tmp/tmpi9pf6hup.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmpi9pf6hup.ts(38,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str.charAt(i) >= 'A' && test_str.charAt(i) <= 'Z') {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string, and I am a string\"));\nconsole.log(max_run\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "../../../../tmp/tmp1vsgq7r_.ts(31,1): error TS1005: ',' expected.\n../../../../tmp/tmp1vsgq7r_.ts(31,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpkvpirwyy.js:22:12)\n    at Object.<anonymous> (/tmp/tmpkvpirwyy.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"aAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAa\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "../../../../tmp/tmpd34f9y_9.ts(18,409): error TS1002: Unterminated string literal.\n../../../../tmp/tmpd34f9y_9.ts(19,1): error TS1005: ',' expected.\n../../../../tmp/tmpd34f9y_9.ts(19,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let cur_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n        } else {\n            if (cur_run > max_run) {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if (cur_run > max_run) {\n        max_run = cur_run;\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if (run > max_run) {\n        max_run = run;\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpkvpirwyy.js:22:12)\n    at Object.<anonymous> (/tmp/tmpkvpirwyy.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!!!!!!!!!!!!!!!!\"));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "../../../../tmp/tmp_3jr8huu.ts(39,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123297,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplf629yai.js:22:12)\n    at Object.<anonymous> (/tmp/tmplf629yai.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let cur_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            cur_run++;\n        } else {\n            cur_run = 0;\n        }\n        if (cur_run > max_run) {\n            max_run = cur_run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let curr_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123296,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmplvx_2wbk.js:22:12)\n    at Object.<anonymous> (/tmp/tmplvx_2wbk.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] == test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123304,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World!\"));\nconsole.log(max_run_uppercase(\"Hello World! I am a test string.\"));\nconsole.log(max_run_uppercase(\"Hello World! I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a test string. I am a\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123303,
      "stdout": "../../../../tmp/tmp8jsvse29.ts(21,1131): error TS1002: Unterminated string literal.\n../../../../tmp/tmp8jsvse29.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmp8jsvse29.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] == test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            max_run = Math.max(max_run, run);\n            run = 0;\n        }\n    }\n    return Math.max(max_run, run);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            max_run = Math.max(max_run, current_run);\n            current_run = 0;\n        }\n    }\n    return Math.max(max_run, current_run);\n}\n\nconsole.log(max_run_uppercase(\"AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaA\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123303,
      "stdout": "../../../../tmp/tmptpgn7eha.ts(16,409): error TS1002: Unterminated string literal.\n../../../../tmp/tmptpgn7eha.ts(17,1): error TS1005: ',' expected.\n../../../../tmp/tmptpgn7eha.ts(17,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            if (run > max_run) {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I am a string, and I am a string\"));\nconsole.log(max_run_uppercase(\"Hello World, I AM A STRING\"));\nconsole.log(max_run_uppercase(\"Hello World, I AM A STRING, AND I AM A STRING\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123304,
      "stdout": "2\n4\n4\n2\n2\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpq6m8swky.js:27:12)\n    at Object.<anonymous> (/tmp/tmpq6m8swky.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpfb2wkeku.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfb2wkeku.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            run = 0;\n        }\n        if (run > max_run) {\n            max_run = run;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"Hello World\"));\nconsole.log(max_run_uppercase(\"Hello World!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!\"));\nconsole.log(max_run_uppercase(\"Hello World!!!!!!!\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123304,
      "stdout": "2\n3\n4\n5\n7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n            if (run > max_run) {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    return max_run;\n}\n\nconsole.log(max_run_uppercase(\"abCdEfG\"));\nconsole.log(max_run_uppercase(\"abCdEfG1234\"));\nconsole.log(max_run_uppercase(\"abCdEfG1234AA\"));\nconsole.log(max_run_uppercase(\"abCdEfG1234AAbbb\"));\nconsole.log(max_run_uppercase(\"abCdEfG1234AAbbbBBB\"));\nconsole.log(max_run_uppercase(\"abCdEfG1234AAbbbBBBccCC\"));\nconsole.log(max_run_uppercase(\"abCdEfG1234AAbbbBBBccCCDDDD\"));\nconsole.log(max_run_uppercase(\"abCdEfG1234AAbbbBBBccCCDDDDEEEE\"));\nconsole.log(max_run_uppercase(\"abCdEfG1234AAbbbBBBccCCDDDDEEEEFFFFF\"));\nconsole.log(max_run_uppercase(\"abCdEfG1234AAbbbBBBccCCDDDDEEEEFFFFFGGGGGG\"));\nconsole.log(max_run_uppercase(\"abCdEfG1234AAbbbBBBccCCDDDDEEEEFFFFFGGGGGGHHHHHHH\"));\nconsole.log(max_run_uppercase(\"abCdEfG1234AAbbbBBBccCCDDDDEEEEFFFFFGGGGGGHHHHHHHIIIIIIII\"));\nconsole.log(max_run_uppercase(\"abCdEfG1234AAbbbBBBcc\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123304,
      "stdout": "../../../../tmp/tmp432_vt_w.ts(30,53): error TS1002: Unterminated string literal.\n../../../../tmp/tmp432_vt_w.ts(31,1): error TS1005: ',' expected.\n../../../../tmp/tmp432_vt_w.ts(31,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let curr_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if (curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123299,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            run++;\n        } else {\n            max_run = Math.max(max_run, run);\n            run = 0;\n        }\n    }\n    return Math.max(max_run, run);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123304,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let curr_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            curr_run = 0;\n        }\n        if (curr_run > max_run) {\n            max_run = curr_run;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123302,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run = 0;\n    let current_run = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let current_run: number = 0;\n    for (let i = 0; i < test_str.length; i++) {\n        if (test_str[i] === test_str[i].toUpperCase()) {\n            current_run++;\n        } else {\n            if (current_run > max_run) {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1665510551,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely deep-equal\n\n6\n    at test (/tmp/tmpfb2wkeku.js:22:12)\n    at Object.<anonymous> (/tmp/tmpfb2wkeku.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 6,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find maximum run of uppercase characters in the given string.\nfunction max_run_uppercase(test_str: string): number {\n    let max_run: number = 0;\n    let curr_run: number = 0;\n    for (let i: number = 0; i < test_str.length; i++) {\n        if (test_str[i] == test_str[i].toUpperCase()) {\n            curr_run++;\n        } else {\n            if (curr_run > max_run) {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if (curr_run > max_run) {\n        max_run = curr_run;\n    }\n    return max_run;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_run_uppercase;\n  assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);\n  assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);\n  assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);\n}\n\ntest();",
      "timestamp": 1666123304,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}