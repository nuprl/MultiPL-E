{
  "name": "mbpp_57_find_Max_Num",
  "language": "ts",
  "prompt": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let len: number = arr.length;\n    for (let i: number = 0; i < len; i++) {\n        for (let j: number = i + 1; j < len; j++) {\n            if (arr[i] < arr[j]) {\n                let temp: number = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i: number = 0; i < len; i++) {\n        maxNum = maxNum * 10 + arr[i];\n    }\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let len: number = arr.length;\n    for (let i: number = 0; i < len; i++) {\n        for (let j: number = i + 1; j < len; j++) {\n            if (arr[i] < arr[j]) {\n                let temp: number = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i: number = 0; i < len; i++) {\n        maxNum = maxNum * 10 + arr[i];\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > max) {\n                max = num;\n            }\n        }\n    }\n    return max;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1, 0]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1, 0, 9]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1, 0, 9, 8]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1, 0, 9, 8, 7]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1, 0, 9, 8, 7, 6]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1, 0, 9, 8, 7, 6, 5]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1, 0, 9, 8, 7, 6, 5, 4]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1, 0, 9, 8, 7, 6, 5, 4, 3]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1, 0, 9, 8, 7, 6, 5, 4, 3, 2]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "../../../../tmp/tmpsydzkch3.ts(29,1): error TS1005: ',' expected.\n../../../../tmp/tmpsydzkch3.ts(29,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let temp: number = 0;\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    for (i = 0; i < arr.length; i++) {\n        for (j = 0; j < arr.length; j++) {\n            if (arr[i] > arr[j]) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (k = 0; k < arr.length; k++) {\n        maxNum = maxNum * 10 + arr[k];\n    }\n    return maxNum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        let numStr = num.toString();\n        let numArr = numStr.split(\"\");\n        let numArrSort = numArr.sort((a, b) => b - a);\n        let numSort = numArrSort.join(\"\");\n        let numSortNum = parseInt(numSort);\n        if (numSortNum > maxNum) {\n            maxNum = numSortNum;\n        }\n    }\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "../../../../tmp/tmpqucd2yc5.ts(8,48): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpqucd2yc5.ts(8,52): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    let numStr = num.toString();\n    let numArr = numStr.split(\"\");\n    let numArrSort = numArr.sort((a, b) => b - a);\n    let numStrSort = numArrSort.join(\"\");\n    let numSort = parseInt(numStrSort);\n    if (numSort > maxNum) {\n      maxNum = numSort;\n    }\n  }\n  return maxNum;\n}\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "../../../../tmp/tmppr19hlye.ts(8,44): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmppr19hlye.ts(8,48): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = 0;\n    for (let j = i; j < arr.length; j++) {\n      num = num * 10 + arr[j];\n      if (num > maxNum) {\n        maxNum = num;\n      }\n    }\n  }\n  return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 3, 1, 9, 8]));\nconsole.log(find_Max_Num([9, 1, 2, 3, 9]));\nconsole.log(find_Max_Num([1, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(find_Max_Num([5, 3, 8, 9, 1, 2, 4, 6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "12345\n53198\n91239\n1987654321\n538912467\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpadsp1vpt.js:23:12)\n    at Object.<anonymous> (/tmp/tmpadsp1vpt.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let temp: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] < arr[j]) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        maxNum = maxNum * 10 + arr[i];\n    }\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    for (let j = 0; j < arr.length; j++) {\n      if (i !== j) {\n        num = num * 10 + arr[j];\n      }\n    }\n    if (num > maxNum) {\n      maxNum = num;\n    }\n  }\n  return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "51234\n55555\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpz_yb1snd.js:22:12)\n    at Object.<anonymous> (/tmp/tmpz_yb1snd.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    arr.sort((a, b) => {\n        return b - a;\n    });\n    for (let i = 0; i < arr.length; i++) {\n        maxNum = maxNum * 10 + arr[i];\n    }\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 3, 1, 4, 0]));\nconsole.log(find_Max_Num([9, 9, 9, 9, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "54321\n54310\n99999\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = arr[i];\n        for (let j = 0; j < arr.length; j++) {\n            if (i != j) {\n                num = num * 10 + arr[j];\n            }\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4]));\nconsole.log(find_Max_Num([4, 6, 7, 1]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "4123\n7461\n9123456780\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpz5imfalu.js:23:12)\n    at Object.<anonymous> (/tmp/tmpz5imfalu.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > max) {\n                max = num;\n            }\n        }\n    }\n    return max;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 0]));\nconsole.log(find_Max_Num([9, 9, 9, 9, 9]));\nconsole.log(find_Max_Num([9, 9, 9, 9, 0]));\nconsole.log(find_Max_Num([9, 9, 9, 9, 1]));\nconsole.log(find_Max_Num([9, 9, 9, 9, 2]));\nconsole.log(find_Max_Num([9, 9, 9, 9, 3]));\nconsole.log(find_Max_Num([9, 9, 9, 9, 4]));\nconsole.log(find_Max_Num([9, 9, 9, 9, 5]));\nconsole.log(find_Max_Num([9, 9, 9, 9, 6]));\nconsole.log(find_Max_Num([9, 9, 9, 9, 7]));\nconsole.log(find_Max_Num([9, 9, 9, 9, 8]));\nconsole.log(find_Max_Num([9, 9, 9, 9, 9]));\nconsole.log(find_Max_Num([9, 9, 9, 9, 9]));\nconsole.log(find_Max_Num([9, 9, 9, 9, 9]));\nconsole.log(find_Max_Num([9, 9, 9, 9, 9]));\nconsole.log(find_Max_Num([9, 9, 9, 9, 9]));\nconsole.log(find_Max_Num([9, 9, 9, 9, 9]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "12345\n54321\n54320\n99999\n99990\n99991\n99992\n99993\n99994\n99995\n99996\n99997\n99998\n99999\n99999\n99999\n99999\n99999\n99999\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpd1dhipmd.js:37:12)\n    at Object.<anonymous> (/tmp/tmpd1dhipmd.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    let str = '';\n    for (let i = 0; i < arr.length; i++) {\n        str += arr[i];\n    }\n    let num = parseInt(str);\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] < arr[j]) {\n                let temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    let str1 = '';\n    for (let i = 0; i < arr.length; i++) {\n        str1 += arr[i];\n    }\n    maxNum = parseInt(str1);\n    return maxNum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let arrLength: number = arr.length;\n    for (let i = 0; i < arrLength; i++) {\n        let num: number = 0;\n        for (let j = 0; j < arrLength; j++) {\n            num = num * 10 + arr[j];\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n        let temp: number = arr[0];\n        for (let k = 0; k < arrLength - 1; k++) {\n            arr[k] = arr[k + 1];\n        }\n        arr[arrLength - 1] = temp;\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "51234\n55555\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpirt7jgnx.js:26:12)\n    at Object.<anonymous> (/tmp/tmpirt7jgnx.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max: number = 0;\n    let max_str: string = \"\";\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] < arr[j]) {\n                let temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        max_str += arr[i];\n    }\n    max = parseInt(max_str);\n    return max;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "987645349431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        let str = num.toString();\n        let strArr = str.split('');\n        let strArrSort = strArr.sort();\n        let strSort = strArrSort.join('');\n        let numSort = parseInt(strSort);\n        if (numSort > max) {\n            max = numSort;\n        }\n    }\n    return max;\n}\n\nconsole.log(find_Max_Num([23, 12, 34, 56, 78]));\nconsole.log(find_Max_Num([23, 12, 34, 56, 78, 99, 100]));\nconsole.log(find_Max_Num([23, 12, 34, 56, 78, 99, 100, 1]));\nconsole.log(find_Max_Num([23, 12, 34, 56, 78, 99, 100, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "78\n99\n99\n99\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpzdixb3za.js:24:12)\n    at Object.<anonymous> (/tmp/tmpzdixb3za.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max_num: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > max_num) {\n                max_num = num;\n            }\n        }\n    }\n    return max_num;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "45297054\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpblplap8v.js:19:12)\n    at Object.<anonymous> (/tmp/tmpblplap8v.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        let numStr = num.toString();\n        let numStrArr = numStr.split('');\n        let numStrArrSort = numStrArr.sort((a, b) => {\n            return b - a;\n        });\n        let numStrSort = numStrArrSort.join('');\n        let numSort = parseInt(numStrSort);\n        if (numSort > maxNum) {\n            maxNum = numSort;\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "../../../../tmp/tmpf04jfx1g.ts(9,20): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpf04jfx1g.ts(9,24): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    for (let j = 0; j < arr.length; j++) {\n      if (i !== j) {\n        num = num * 10 + arr[j];\n      }\n    }\n    if (num > maxNum) {\n      maxNum = num;\n    }\n  }\n  return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "312\n346059\n51234\n612345\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp6qf4832b.js:24:12)\n    at Object.<anonymous> (/tmp/tmp6qf4832b.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    let maxNumStr = \"\";\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] < arr[j]) {\n                let temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        maxNumStr += arr[i];\n    }\n    maxNum = parseInt(maxNumStr);\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "987645349431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max_num: number = 0;\n    let temp: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] < arr[j]) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        max_num = max_num * 10 + arr[i];\n    }\n    return max_num;\n}\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122456,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = arr[i];\n        let numStr: string = num.toString();\n        let numStrArr: string[] = numStr.split('');\n        let numStrArrSort: string[] = numStrArr.sort((a, b) => { return b.localeCompare(a) });\n        let numStrSort: string = numStrArrSort.join('');\n        let numSort: number = parseInt(numStrSort);\n        if (numSort > maxNum) {\n            maxNum = numSort;\n        }\n    }\n    return maxNum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpz4pufrvm.js:20:12)\n    at Object.<anonymous> (/tmp/tmpz4pufrvm.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = 0;\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[i] != arr[j]) {\n                num = num * 10 + arr[j];\n            }\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122456,
      "stdout": "2345\n0\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n23\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp1yt53kf9.js:22:12)\n    at Object.<anonymous> (/tmp/tmp1yt53kf9.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 23,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = 0;\n        for (let j = 0; j < arr.length; j++) {\n            if (i != j) {\n                num = num * 10 + arr[j];\n            }\n        }\n        if (num > max) {\n            max = num;\n        }\n    }\n    return max;\n}\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122456,
      "stdout": "2345\n5555\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n23\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpgo5d76xt.js:22:12)\n    at Object.<anonymous> (/tmp/tmpgo5d76xt.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 23,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > max) {\n                max = num;\n            }\n        }\n    }\n    return max;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 3, 1, 9, 8]));\nconsole.log(find_Max_Num([9, 9, 9, 9, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122456,
      "stdout": "12345\n53198\n99999\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp1nx6pi1v.js:21:12)\n    at Object.<anonymous> (/tmp/tmp1nx6pi1v.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > max) {\n                max = num;\n            }\n        }\n    }\n    return max;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 3, 1, 9, 8]));\nconsole.log(find_Max_Num([9, 9, 9, 9, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122456,
      "stdout": "12345\n53198\n99999\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp1nx6pi1v.js:21:12)\n    at Object.<anonymous> (/tmp/tmp1nx6pi1v.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    for (let j = 0; j < arr.length; j++) {\n      if (i !== j) {\n        num = num * 10 + arr[j];\n      }\n    }\n    if (num > max) {\n      max = num;\n    }\n  }\n  return max;\n}\n\nconsole.log(find_Max_Num([1, 2, 3]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122456,
      "stdout": "312\n346059\n51234\n612345\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp5xjbevw_.js:24:12)\n    at Object.<anonymous> (/tmp/tmp5xjbevw_.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum: number = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num: number = 0;\n    for (let j = i; j < arr.length; j++) {\n      num = num * 10 + arr[j];\n      if (num > maxNum) {\n        maxNum = num;\n      }\n    }\n  }\n  return maxNum;\n}\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 3, 1, 9, 8]));\nconsole.log(find_Max_Num([9, 1, 2, 3, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122456,
      "stdout": "12345\n53198\n91239\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpsk6549sz.js:21:12)\n    at Object.<anonymous> (/tmp/tmpsk6549sz.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    }\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1]));\nconsole.log(find_Max_Num([5, 3, 1, 4, 2]));\nconsole.log(find_Max_Num([9, 1, 2, 3, 4]));\nconsole.log(find_Max_Num([23, 34, 55]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122456,
      "stdout": "12345\n54321\n53142\n91234\n2695\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpdrc79xir.js:23:12)\n    at Object.<anonymous> (/tmp/tmpdrc79xir.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let len: number = arr.length;\n    for (let i: number = 0; i < len; i++) {\n        let num: number = 0;\n        for (let j: number = i; j < len; j++) {\n            num = num * 10 + arr[j];\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122456,
      "stdout": "../../../../tmp/tmpa0h0lwkr.ts(18,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum: number = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num: number = 0;\n    for (let j = i; j < arr.length; j++) {\n      num = num * 10 + arr[j];\n      if (num > maxNum) {\n        maxNum = num;\n      }\n    }\n  }\n  return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 3, 1, 9, 8]));\nconsole.log(find_Max_Num([9, 1, 2, 3, 9]));\nconsole.log(find_Max_Num([1, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\nconsole.log(find_Max_Num([5, 3, 8, 9, 1, 2, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122456,
      "stdout": "12345\n53198\n91239\n1987654321\n5389124\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp31m2qr59.js:23:12)\n    at Object.<anonymous> (/tmp/tmp31m2qr59.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        let numStr = num.toString();\n        let numArr = numStr.split('');\n        numArr.sort();\n        numArr.reverse();\n        let numStr2 = numArr.join('');\n        let num2 = parseInt(numStr2);\n        if (num2 > maxNum) {\n            maxNum = num2;\n        }\n    }\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122456,
      "stdout": "98\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpoqu6rbuh.js:22:12)\n    at Object.<anonymous> (/tmp/tmpoqu6rbuh.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 3, 1, 9, 8]));\nconsole.log(find_Max_Num([9, 1, 2, 3, 9]));\nconsole.log(find_Max_Num([1, 9, 8, 7, 6]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122456,
      "stdout": "12345\n53198\n91239\n19876\n123456789\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp73edx2mb.js:23:12)\n    at Object.<anonymous> (/tmp/tmp73edx2mb.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max = 0;\n    let temp = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] < arr[j]) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        max = max * 10 + arr[i];\n    }\n    return max;\n}\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122456,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum = 0;\n  let maxNumStr = \"\";\n  let arrStr = arr.map(String);\n  arrStr.sort((a, b) => b.localeCompare(a));\n  maxNumStr = arrStr.join(\"\");\n  maxNum = parseInt(maxNumStr);\n  return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122456,
      "stdout": "989764543431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 3, 1, 9, 8]));\nconsole.log(find_Max_Num([9, 1, 2, 3, 9]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 9]));\nconsole.log(find_Max_Num([9, 1, 9, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122456,
      "stdout": "12345\n53198\n91239\n12349\n91934\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp5d47mlfh.js:23:12)\n    at Object.<anonymous> (/tmp/tmp5d47mlfh.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let num: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] < arr[j]) {\n                num = arr[i];\n                arr[i] = arr[j];\n                arr[j] = num;\n            }\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        maxNum = maxNum * 10 + arr[i];\n    }\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122456,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    for (let j = 0; j < arr.length; j++) {\n      if (i != j) {\n        num = num * 10 + arr[j];\n      }\n    }\n    if (num > maxNum) {\n      maxNum = num;\n    }\n  }\n  return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122456,
      "stdout": "984447054\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpgh2ob05r.js:21:12)\n    at Object.<anonymous> (/tmp/tmpgh2ob05r.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > max) {\n                max = num;\n            }\n        }\n    }\n    return max;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122456,
      "stdout": "../../../../tmp/tmpk27g7qvl.ts(20,1): error TS1005: ',' expected.\n../../../../tmp/tmpk27g7qvl.ts(20,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > max) {\n                max = num;\n            }\n        }\n    }\n    return max;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122456,
      "stdout": "45297054\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp6x79hz81.js:19:12)\n    at Object.<anonymous> (/tmp/tmp6x79hz81.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        let numString = num.toString();\n        let numLength = numString.length;\n        let numArray = numString.split('');\n        let numArrayLength = numArray.length;\n        let numArraySorted = numArray.sort((a, b) => b - a);\n        let numArraySortedString = numArraySorted.join('');\n        let numArraySortedNumber = parseInt(numArraySortedString);\n        if (numArraySortedNumber > maxNum) {\n            maxNum = numArraySortedNumber;\n        }\n    }\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122456,
      "stdout": "../../../../tmp/tmp6ldfz53d.ts(10,54): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmp6ldfz53d.ts(10,58): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        let numStr = num.toString();\n        let numArr = numStr.split(\"\");\n        numArr.sort();\n        numArr.reverse();\n        let numStr2 = numArr.join(\"\");\n        let num2 = parseInt(numStr2);\n        if (num2 > maxNum) {\n            maxNum = num2;\n        }\n    }\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122456,
      "stdout": "98\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpi5cekdi8.js:22:12)\n    at Object.<anonymous> (/tmp/tmpi5cekdi8.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = 0;\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[i] > arr[j]) {\n                num = num * 10 + arr[i];\n            }\n            else {\n                num = num * 10 + arr[j];\n            }\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122456,
      "stdout": "1088888878\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n333\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp91yf5k9n.js:24:12)\n    at Object.<anonymous> (/tmp/tmp91yf5k9n.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 333,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > max)\n                max = num;\n        }\n    }\n    return max;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1]));\nconsole.log(find_Max_Num([4, 6, 2, 5, 9, 8]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122456,
      "stdout": "12345\n54321\n462598\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpkjk8_ohx.js:20:12)\n    at Object.<anonymous> (/tmp/tmpkjk8_ohx.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = arr[i];\n        for (let j = 0; j < arr.length; j++) {\n            if (i != j) {\n                num = num * 10 + arr[j];\n            }\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 2, 3, 4]));\nconsole.log(find_Max_Num([4, 6, 7, 1]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122459,
      "stdout": "4123\n7461\n912345678\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpt5j1y8ng.js:23:12)\n    at Object.<anonymous> (/tmp/tmpt5j1y8ng.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    arr.sort((a, b) => b - a);\n    for (let i = 0; i < arr.length; i++) {\n        maxNum = maxNum * 10 + arr[i];\n    }\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 3, 1, 4, 0]));\nconsole.log(find_Max_Num([9, 9, 9, 9, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122459,
      "stdout": "54321\n54310\n99999\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = 0;\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[i] > arr[j]) {\n                num = num * 10 + arr[i];\n            } else {\n                num = num * 10 + arr[j];\n            }\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122459,
      "stdout": "1088888878\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n333\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpxlzhuoow.js:24:12)\n    at Object.<anonymous> (/tmp/tmpxlzhuoow.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 333,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let temp: number = 0;\n    let tempArr: number[] = [];\n    for (let i: number = 0; i < arr.length; i++) {\n        for (let j: number = 0; j < arr.length; j++) {\n            if (arr[i] > arr[j]) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i: number = 0; i < arr.length; i++) {\n        tempArr.push(arr[i]);\n    }\n    maxNum = parseInt(tempArr.join(''));\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122459,
      "stdout": "987645349431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        let numStr = num.toString();\n        let numArr = numStr.split('');\n        let numArrSort = numArr.sort();\n        let numArrSortReverse = numArrSort.reverse();\n        let numArrSortReverseJoin = numArrSortReverse.join('');\n        let numArrSortReverseJoinNum = parseInt(numArrSortReverseJoin);\n        if (numArrSortReverseJoinNum > maxNum) {\n            maxNum = numArrSortReverseJoinNum;\n        }\n    }\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122459,
      "stdout": "98\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp32l5rmwk.js:22:12)\n    at Object.<anonymous> (/tmp/tmp32l5rmwk.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    for (let j = 0; j < arr.length; j++) {\n      if (i !== j) {\n        num = num * 10 + arr[j];\n      }\n    }\n    if (num > max) {\n      max = num;\n    }\n  }\n  return max;\n}\n\nconsole.log(find_Max_Num([1, 2, 3]));\nconsole.log(find_Max_Num([4, 5, 6]));\nconsole.log(find_Max_Num([7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122459,
      "stdout": "312\n645\n978\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpn099g6gc.js:23:12)\n    at Object.<anonymous> (/tmp/tmpn099g6gc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        let numStr = num.toString();\n        let numStrLen = numStr.length;\n        let numStrArr = numStr.split('');\n        let numStrArrLen = numStrArr.length;\n        for (let j = 0; j < numStrArrLen; j++) {\n            let numStrArrNum = Number(numStrArr[j]);\n            if (numStrArrNum > maxNum) {\n                maxNum = numStrArrNum;\n            }\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122459,
      "stdout": "9\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmposgvjdrs.js:23:12)\n    at Object.<anonymous> (/tmp/tmposgvjdrs.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max: number = 0;\n    let temp: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] < arr[j]) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        max = max * 10 + arr[i];\n    }\n    return max;\n}\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122459,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    }\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 2, 3, 4]));\nconsole.log(find_Max_Num([4, 6, 7, 1]));\nconsole.log(find_Max_Num([4, 6, 7, 1, 0]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122459,
      "stdout": "1234\n4671\n46710\n123456789\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpuev4vsc5.js:22:12)\n    at Object.<anonymous> (/tmp/tmpuev4vsc5.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let maxNumStr: string = '';\n    for (let i = 0; i < arr.length; i++) {\n        maxNumStr += arr[i];\n    }\n    maxNum = parseInt(maxNumStr);\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122459,
      "stdout": "../../../../tmp/tmpvl6t_975.ts(15,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        let numStr = num.toString();\n        let numStrArr = numStr.split('');\n        let numStrArrSort = numStrArr.sort((a, b) => b - a);\n        let numStrSort = numStrArrSort.join('');\n        let numSort = parseInt(numStrSort);\n        maxNum = maxNum + numSort;\n    }\n    return maxNum;\n}\nconsole.log(find_Max_Num([23, 34, 56, 78, 90]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122459,
      "stdout": "../../../../tmp/tmpkxuoxini.ts(8,54): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpkxuoxini.ts(8,58): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    arr.sort((a, b) => b - a);\n    for (let i = 0; i < arr.length; i++) {\n        maxNum = maxNum * 10 + arr[i];\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122459,
      "stdout": "54321\n55555\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    let numStr = num.toString();\n    let numArr = numStr.split(\"\");\n    let numArrLen = numArr.length;\n    let numArrSort = numArr.sort((a, b) => {\n      return b - a;\n    });\n    let numArrSortStr = numArrSort.join(\"\");\n    let numArrSortNum = parseInt(numArrSortStr);\n    if (numArrSortNum > maxNum) {\n      maxNum = numArrSortNum;\n    }\n  }\n  return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122459,
      "stdout": "../../../../tmp/tmpkr9bfks4.ts(10,14): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpkr9bfks4.ts(10,18): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum: number = 0;\n  let temp: number = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n      }\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    maxNum = maxNum * 10 + arr[i];\n  }\n  return maxNum;\n}\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122459,
      "stdout": "54321\n54321\n370953\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > max) {\n                max = num;\n            }\n        }\n    }\n    return max;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]));\nconsole.log(find_Max_Num([9, 9, 9, 9, 9, 9, 9, 9, 9, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122459,
      "stdout": "12345\n54321\n1234567890\n9999999999\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpns6bmvoj.js:22:12)\n    at Object.<anonymous> (/tmp/tmpns6bmvoj.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    let maxNumStr = \"\";\n    for (let i = 0; i < arr.length; i++) {\n        maxNumStr += arr[i];\n    }\n    maxNum = parseInt(maxNumStr);\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122459,
      "stdout": "12345\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpa8yvhgio.js:15:12)\n    at Object.<anonymous> (/tmp/tmpa8yvhgio.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        for (let j = 0; j < arr.length; j++) {\n            if (i != j) {\n                num = num * 10 + arr[j];\n            }\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122459,
      "stdout": "312\n346059\n9123456780\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpllg0nan0.js:23:12)\n    at Object.<anonymous> (/tmp/tmpllg0nan0.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        for (let j = 0; j < arr.length; j++) {\n            if (i !== j) {\n                num = num * 10 + arr[j];\n            }\n        }\n        if (num > max) {\n            max = num;\n        }\n    }\n    return max;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122459,
      "stdout": "51234\n55555\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp0r68l8_2.js:22:12)\n    at Object.<anonymous> (/tmp/tmp0r68l8_2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = arr[i];\n        let numStr: string = num.toString();\n        let numArr: string[] = numStr.split(\"\");\n        numArr.sort();\n        numArr.reverse();\n        let newNum: number = parseInt(numArr.join(\"\"));\n        if (newNum > maxNum) {\n            maxNum = newNum;\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122459,
      "stdout": "98\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp3vpqyi9y.js:21:12)\n    at Object.<anonymous> (/tmp/tmp3vpqyi9y.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > max) {\n                max = num;\n            }\n        }\n    }\n    return max;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]));\nconsole.log(find_Max_Num([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122459,
      "stdout": "12345\n54321\n1234567890\n123456789\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpw6y884ye.js:22:12)\n    at Object.<anonymous> (/tmp/tmpw6y884ye.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let temp = arr[i];\n        for (let j = 0; j < arr.length; j++) {\n            if (i !== j) {\n                temp = temp * 10 + arr[j];\n            }\n        }\n        if (temp > maxNum) {\n            maxNum = temp;\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122459,
      "stdout": "312\n346059\n51234\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp3865lma4.js:23:12)\n    at Object.<anonymous> (/tmp/tmp3865lma4.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        for (let j = 0; j < arr.length; j++) {\n            if (i !== j) {\n                num = num * 10 + arr[j];\n            }\n        }\n        if (num > max) {\n            max = num;\n        }\n    }\n    return max;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122459,
      "stdout": "51234\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpq150bq53.js:21:12)\n    at Object.<anonymous> (/tmp/tmpq150bq53.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let temp: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] < arr[j]) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        maxNum = maxNum * 10 + arr[i];\n    }\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum: number = 0;\n  let num: number = 0;\n  for (let i: number = 0; i < arr.length; i++) {\n    num = arr[i];\n    for (let j: number = 0; j < arr.length; j++) {\n      if (i !== j) {\n        num = num * 10 + arr[j];\n      }\n    }\n    if (num > maxNum) {\n      maxNum = num;\n    }\n  }\n  return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122459,
      "stdout": "312\n346059\n51234\n912345678\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp27by36i3.js:25:12)\n    at Object.<anonymous> (/tmp/tmp27by36i3.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > max) {\n                max = num;\n            }\n        }\n    }\n    return max;\n}\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122462,
      "stdout": "45297054\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp8noxdxi7.js:19:12)\n    at Object.<anonymous> (/tmp/tmp8noxdxi7.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = arr[i];\n        for (let j = i + 1; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122461,
      "stdout": "45297054\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpnfq5mlb9.js:19:12)\n    at Object.<anonymous> (/tmp/tmpnfq5mlb9.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = arr[i];\n        for (let j = 0; j < arr.length; j++) {\n            if (i != j) {\n                num = num * 10 + arr[j];\n            }\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 3, 1, 4, 2]));\nconsole.log(find_Max_Num([9, 9, 9, 9, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122461,
      "stdout": "51234\n53142\n99999\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpctckagw0.js:23:12)\n    at Object.<anonymous> (/tmp/tmpctckagw0.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        let numStr = num.toString();\n        let numStrLen = numStr.length;\n        let numStrArr = numStr.split('');\n        let numStrArrLen = numStrArr.length;\n        let numStrArrSort = numStrArr.sort();\n        let numStrArrSortRev = numStrArrSort.reverse();\n        let numStrArrSortRevJoin = numStrArrSortRev.join('');\n        let numStrArrSortRevJoinNum = parseInt(numStrArrSortRevJoin);\n        if (numStrArrSortRevJoinNum > maxNum) {\n            maxNum = numStrArrSortRevJoinNum;\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([10, 7689, 456, 9876]));\nconsole.log(find_Max_Num([54, 546, 548, 60]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122462,
      "stdout": "9876\n854\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpjuw1eoc8.js:25:12)\n    at Object.<anonymous> (/tmp/tmpjuw1eoc8.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    let tempNum = 0;\n    let tempArr = [];\n    let tempArr2 = [];\n    let tempArr3 = [];\n    let tempArr4 = [];\n    let tempArr5 = [];\n    let tempArr6 = [];\n    let tempArr7 = [];\n    let tempArr8 = [];\n    let tempArr9 = [];\n    let tempArr10 = [];\n    let tempArr11 = [];\n    let tempArr12 = [];\n    let tempArr13 = [];\n    let tempArr14 = [];\n    let tempArr15 = [];\n    let tempArr16 = [];\n    let tempArr17 = [];\n    let tempArr18 = [];\n    let tempArr19 = [];\n    let tempArr20 = [];\n    let tempArr21 = [];\n    let tempArr22 = [];\n    let tempArr23 = [];\n    let tempArr24 = [];\n    let tempArr25 = [];\n    let tempArr26 = [];\n    let tempArr27 = [];\n    let tempArr28 = [];\n    let tempArr29 = [];\n    let tempArr30 = [];\n    let tempArr31 = [];\n    let tempArr32 = [];\n    let tempArr33 = [];\n    let tempArr34 = [];\n    let tempArr35 = [];\n    let tempArr36 = [];\n    let tempArr37 = [];\n    let tempArr38 = [];\n    let tempArr39 = [];\n    let tempArr40 = [];\n    let tempArr41 = [];\n    let tempArr42 = [];\n    let tempArr43 = [];\n    let tempArr44 = [];\n    let tempArr45 = [];\n    let tempArr46 = [];\n    let tempArr47 = [];\n    let tempArr48 = [];\n    let tempArr49 = [];\n    let tempArr50 = [];\n    let tempArr51 = [];\n    let tempArr52 = [];\n    let tempArr53 = [];\n    let tempArr54 = [];\n    let tempArr55 = [];\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122461,
      "stdout": "../../../../tmp/tmpi4s60za6.ts(72,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max: number = 0;\n    let str: string = \"\";\n    for (let i = 0; i < arr.length; i++) {\n        str += arr[i];\n    }\n    max = parseInt(str);\n    return max;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 3, 1, 4, 0]));\nconsole.log(find_Max_Num([9, 9, 9, 9, 9]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122462,
      "stdout": "12345\n53140\n99999\n1234567890\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmphx3318r6.js:18:12)\n    at Object.<anonymous> (/tmp/tmphx3318r6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let maxNumStr: string = \"\";\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[i] > arr[j]) {\n                let temp: number = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        maxNumStr += arr[i];\n    }\n    maxNum = parseInt(maxNumStr);\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122462,
      "stdout": "987645349431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum: number = 0;\n  let str: string = \"\";\n  for (let i = 0; i < arr.length; i++) {\n    str += arr[i];\n  }\n  maxNum = parseInt(str);\n  return maxNum;\n}\nconsole.log(find_Max_Num([1, 2, 3]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122461,
      "stdout": "123\n3303459\n330346000000000000\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp0tad8qb9.js:17:12)\n    at Object.<anonymous> (/tmp/tmp0tad8qb9.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        let numStr = num.toString();\n        let numStrLen = numStr.length;\n        let numStrArr = numStr.split('');\n        let numStrArrLen = numStrArr.length;\n        let numStrArrSort = numStrArr.sort();\n        let numStrArrSortRev = numStrArrSort.reverse();\n        let numStrArrSortRevJoin = numStrArrSortRev.join('');\n        let numStrArrSortRevJoinNum = parseInt(numStrArrSortRevJoin);\n        if (numStrArrSortRevJoinNum > maxNum) {\n            maxNum = numStrArrSortRevJoinNum;\n        }\n    }\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122462,
      "stdout": "98\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp4f2qa9tg.js:24:12)\n    at Object.<anonymous> (/tmp/tmp4f2qa9tg.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max_num = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        for (let j = 0; j < arr.length; j++) {\n            if (j != i) {\n                num = num * 10 + arr[j];\n            }\n        }\n        if (num > max_num) {\n            max_num = num;\n        }\n    }\n    return max_num;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122462,
      "stdout": "51234\n55555\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpxhjkqubx.js:22:12)\n    at Object.<anonymous> (/tmp/tmpxhjkqubx.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1, 0]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 0]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 0, 0]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 0, 0, 0]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 0, 0, 0, 0]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 0, 0, 0, 0, 0]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(find_Max_Num([1, 2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122462,
      "stdout": "../../../../tmp/tmpyvigdnyb.ts(30,1): error TS1005: ',' expected.\n../../../../tmp/tmpyvigdnyb.ts(30,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = 0;\n    for (let j = i; j < arr.length; j++) {\n      num = num * 10 + arr[j];\n      if (num > max) {\n        max = num;\n      }\n    }\n  }\n  return max;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122462,
      "stdout": "12345\n54321\n1234567890\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpnumgtvky.js:21:12)\n    at Object.<anonymous> (/tmp/tmpnumgtvky.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let num: number = 0;\n    let len: number = arr.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < len; j++) {\n            if (arr[i] > arr[j]) {\n                num = arr[i];\n                arr[i] = arr[j];\n                arr[j] = num;\n            }\n        }\n    }\n    for (let i = 0; i < len; i++) {\n        maxNum = maxNum * 10 + arr[i];\n    }\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122462,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let temp: number = 0;\n    let len: number = arr.length;\n    for (let i: number = 0; i < len; i++) {\n        for (let j: number = i + 1; j < len; j++) {\n            if (arr[i] < arr[j]) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i: number = 0; i < len; i++) {\n        maxNum = maxNum * 10 + arr[i];\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122462,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    let temp = 0;\n    let len = arr.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = i + 1; j < len; j++) {\n            if (arr[i] < arr[j]) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i = 0; i < len; i++) {\n        maxNum = maxNum * 10 + arr[i];\n    }\n    return maxNum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum = 0;\n  let currNum = 0;\n  let currDigit = 0;\n  let currDigitIndex = 0;\n  let currDigitCount = 0;\n  let currDigitCountIndex = 0;\n  let currDigitCountArr = [];\n  let currDigitArr = [];\n  let currDigitArrIndex = 0;\n  let currDigitArrCount = 0;\n  let currDigitArrCountIndex = 0;\n  let currDigitArrCountArr = [];\n  let currDigitArrCountArrIndex = 0;\n  let currDigitArrCountArrCount = 0;\n  let currDigitArrCountArrCountIndex = 0;\n  let currDigitArrCountArrCountArr = [];\n  let currDigitArrCountArrCountArrIndex = 0;\n  let currDigitArrCountArrCountArrCount = 0;\n  let currDigitArrCountArrCountArrCountIndex = 0;\n  let currDigitArrCountArrCountArrCountArr = [];\n  let currDigitArrCountArrCountArrCountArrIndex = 0;\n  let currDigitArrCountArrCountArrCountArrCount = 0;\n  let currDigitArrCountArrCountArrCountArrCountIndex = 0;\n  let currDigitArrCountArrCountArrCountArrCountArr = [];\n  let currDigitArrCountArrCountArrCountArrCountArrIndex = 0;\n  let currDigitArrCountArrCountArrCountArrCountArrCount = 0;\n  let currDigitArrCountArrCountArrCountArrCountArrCountIndex = 0;\n  let currDigitArrCountArrCountArrCountArrCountArrCountArr = [];\n  let currDigitArrCountArrCountArrCountArrCountArrCountArrIndex = 0;\n  let currDigitArrCount\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122462,
      "stdout": "../../../../tmp/tmpu5lbuing.ts(44,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    if (num > maxNum) {\n      maxNum = num;\n    }\n  }\n  return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3]));\nconsole.log(find_Max_Num([27, 19, 42, 2, 13, 45, 48]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122462,
      "stdout": "3\n48\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpccd67kyt.js:17:12)\n    at Object.<anonymous> (/tmp/tmpccd67kyt.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max_num: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > max_num) {\n                max_num = num;\n            }\n        }\n    }\n    return max_num;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "45297054\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpblplap8v.js:19:12)\n    at Object.<anonymous> (/tmp/tmpblplap8v.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122462,
      "stdout": "45297054\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmppjviekr2.js:19:12)\n    at Object.<anonymous> (/tmp/tmppjviekr2.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    let maxDigits = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        let digits = 0;\n        while (num > 0) {\n            digits++;\n            num = Math.floor(num / 10);\n        }\n        if (digits > maxDigits) {\n            maxDigits = digits;\n            maxNum = arr[i];\n        } else if (digits == maxDigits) {\n            if (arr[i] > maxNum) {\n                maxNum = arr[i];\n            }\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122462,
      "stdout": "98\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpfffhr10r.js:28:12)\n    at Object.<anonymous> (/tmp/tmpfffhr10r.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > max) {\n                max = num;\n            }\n        }\n    }\n    return max;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4]));\nconsole.log(find_Max_Num([4, 6, 2, 1, 9, 63, -134, 566]));\nconsole.log(find_Max_Num([5, 5, 3, 9]));\nconsole.log(find_Max_Num([3, 31, 34, 5, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122462,
      "stdout": "1234\n46224526\n5539\n64459\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmppxi1zfko.js:22:12)\n    at Object.<anonymous> (/tmp/tmppxi1zfko.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 3, 1, 9, 8]));\nconsole.log(find_Max_Num([9, 1, 2, 3, 9]));\nconsole.log(find_Max_Num([1, 9, 8, 7, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122462,
      "stdout": "12345\n53198\n91239\n19876\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpt1m4rhjc.js:22:12)\n    at Object.<anonymous> (/tmp/tmpt1m4rhjc.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        for (let j = 0; j < arr.length; j++) {\n            if (i != j) {\n                num = num * 10 + arr[j];\n            }\n        }\n        if (num > max) {\n            max = num;\n        }\n    }\n    return max;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 5, 3, 3, 1]));\nconsole.log(find_Max_Num([9, 1, 2, 3, 9]));\nconsole.log(find_Max_Num([23, 45, 67, 89, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122462,
      "stdout": "51234\n55331\n99123\n918182\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmph2g1koh7.js:24:12)\n    at Object.<anonymous> (/tmp/tmph2g1koh7.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let max: number = 0;\n  let str: string = \"\";\n  for (let i = 0; i < arr.length; i++) {\n    str += arr[i];\n  }\n  str = str.split(\"\").sort().reverse().join(\"\");\n  max = parseInt(str);\n  return max;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122462,
      "stdout": "998765444331\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    let numStr = num.toString();\n    let numStrArr = numStr.split(\"\");\n    let numStrArrSorted = numStrArr.sort((a, b) => {\n      return b - a;\n    });\n    let numStrSorted = numStrArrSorted.join(\"\");\n    let numSorted = parseInt(numStrSorted);\n    if (numSorted > maxNum) {\n      maxNum = numSorted;\n    }\n  }\n  return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122463,
      "stdout": "../../../../tmp/tmprywjn9ln.ts(9,14): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmprywjn9ln.ts(9,18): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        let temp = num;\n        for (let j = 0; j < arr.length; j++) {\n            if (i != j) {\n                temp = temp * 10 + arr[j];\n            }\n        }\n        if (temp > maxNum) {\n            maxNum = temp;\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4]));\nconsole.log(find_Max_Num([4, 6, 7, 1]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122464,
      "stdout": "4123\n7461\n912345678\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpfa634_zw.js:24:12)\n    at Object.<anonymous> (/tmp/tmpfa634_zw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max: number = 0;\n    let temp: number = 0;\n    let i: number = 0;\n    let j: number = 0;\n    let len: number = arr.length;\n    for (i = 0; i < len; i++) {\n        for (j = i + 1; j < len; j++) {\n            if (arr[i] < arr[j]) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (i = 0; i < len; i++) {\n        max = max * 10 + arr[i];\n    }\n    return max;\n}\nlet arr: number[] = [1, 34, 3, 98, 9, 76, 45, 4];\nconsole.log(find_Max_Num(arr));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122464,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let result: number = 0;\n  let temp: number = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] < arr[j]) {\n        temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n      }\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    result = result * 10 + arr[i];\n  }\n  return result;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122464,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum = 0;\n  let num = 0;\n  for (let i = 0; i < arr.length; i++) {\n    num = arr[i];\n    for (let j = 0; j < arr.length; j++) {\n      if (i !== j) {\n        num = num * 10 + arr[j];\n      }\n    }\n    if (num > maxNum) {\n      maxNum = num;\n    }\n  }\n  return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4]));\nconsole.log(find_Max_Num([4, 6, 7, 1]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122465,
      "stdout": "4123\n7461\n51234\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp4s55udw2.js:24:12)\n    at Object.<anonymous> (/tmp/tmp4s55udw2.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let len: number = arr.length;\n    for (let i: number = 0; i < len; i++) {\n        let num: number = 0;\n        for (let j: number = i; j < len; j++) {\n            num = num * 10 + arr[j];\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 3, 1, 9, 8]));\nconsole.log(find_Max_Num([9, 1, 2, 3, 9]));\nconsole.log(find_Max_Num([1, 9, 8, 3, 4]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122465,
      "stdout": "12345\n53198\n91239\n19834\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpoh33t853.js:23:12)\n    at Object.<anonymous> (/tmp/tmpoh33t853.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let temp: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] < arr[j]) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        maxNum = maxNum * 10 + arr[i];\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122465,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    let tempNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[i] > arr[j]) {\n                tempNum = arr[i];\n                arr[i] = arr[j];\n                arr[j] = tempNum;\n            }\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        maxNum = maxNum * 10 + arr[i];\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122464,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let temp = arr[i];\n    for (let j = 0; j < arr.length; j++) {\n      if (i != j) {\n        temp = temp * 10 + arr[j];\n      }\n    }\n    if (temp > maxNum) {\n      maxNum = temp;\n    }\n  }\n  return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122464,
      "stdout": "312\n346059\n51234\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpq0jazuet.js:23:12)\n    at Object.<anonymous> (/tmp/tmpq0jazuet.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    let maxNumStr = '';\n    let arrStr = arr.map(String);\n    arrStr.sort((a, b) => {\n        return b - a;\n    });\n    maxNumStr = arrStr.join('');\n    maxNum = parseInt(maxNumStr);\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122464,
      "stdout": "../../../../tmp/tmp3xrzkczp.ts(7,16): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmp3xrzkczp.ts(7,20): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n      }\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    maxNum = maxNum * 10 + arr[i];\n  }\n  return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122464,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        for (let j = 0; j < arr.length; j++) {\n            if (i != j) {\n                num = num * 10 + arr[j];\n            }\n        }\n        if (maxNum < num) {\n            maxNum = num;\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4]));\nconsole.log(find_Max_Num([4, 6, 7, 1]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122465,
      "stdout": "4123\n7461\n912345678\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp82wvac5c.js:23:12)\n    at Object.<anonymous> (/tmp/tmp82wvac5c.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > max) {\n                max = num;\n            }\n        }\n    }\n    return max;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1]));\nconsole.log(find_Max_Num([9, 8, 7, 6, 5]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122465,
      "stdout": "12345\n54321\n98765\n123456789\n1234567890\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpkjrcmtn7.js:23:12)\n    at Object.<anonymous> (/tmp/tmpkjrcmtn7.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let num: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        num = arr[i];\n        for (let j = 0; j < arr.length; j++) {\n            if (i != j) {\n                num = num * 10 + arr[j];\n            }\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122465,
      "stdout": "../../../../tmp/tmporb133ap.ts(32,1): error TS1005: ',' expected.\n../../../../tmp/tmporb133ap.ts(32,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let maxNumStr: string = \"\";\n    for (let i = 0; i < arr.length; i++) {\n        maxNumStr += arr[i];\n    }\n    maxNum = parseInt(maxNumStr);\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122464,
      "stdout": "../../../../tmp/tmpmsumeqh2.ts(15,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        let numStr = num.toString();\n        let numStrArr = numStr.split('');\n        let numStrArrSorted = numStrArr.sort((a, b) => b - a);\n        let numStrSorted = numStrArrSorted.join('');\n        let numSorted = parseInt(numStrSorted);\n        if (numSorted > maxNum) {\n            maxNum = numSorted;\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122465,
      "stdout": "../../../../tmp/tmpe6uarl0s.ts(8,56): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpe6uarl0s.ts(8,60): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = 0;\n        for (let j = 0; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n        let temp: number = arr[0];\n        for (let j = 0; j < arr.length - 1; j++) {\n            arr[j] = arr[j + 1];\n        }\n        arr[arr.length - 1] = temp;\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122465,
      "stdout": "51234\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp3w3b12va.js:24:12)\n    at Object.<anonymous> (/tmp/tmp3w3b12va.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    let num = 0;\n    for (let i = 0; i < arr.length; i++) {\n        num = arr[i];\n        for (let j = 0; j < arr.length; j++) {\n            if (i != j) {\n                num = num * 10 + arr[j];\n            }\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 5, 5, 5, 5]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122465,
      "stdout": "51234\n55555\n612345\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpn422bifw.js:24:12)\n    at Object.<anonymous> (/tmp/tmpn422bifw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    let num = 0;\n    for (let i = 0; i < arr.length; i++) {\n        num = arr[i];\n        for (let j = 0; j < arr.length; j++) {\n            if (i != j) {\n                num = num * 10 + arr[j];\n            }\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 5, 5, 5, 5]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122465,
      "stdout": "51234\n55555\n9123456780\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpofuschun.js:24:12)\n    at Object.<anonymous> (/tmp/tmpofuschun.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = 0;\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[i] > arr[j]) {\n                num = num * 10 + arr[i];\n            } else {\n                num = num * 10 + arr[j];\n            }\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122459,
      "stdout": "1088888878\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n333\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpxlzhuoow.js:24:12)\n    at Object.<anonymous> (/tmp/tmpxlzhuoow.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 333,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let result = 0;\n    let i = 0;\n    let j = 0;\n    let temp = 0;\n    for (i = 0; i < arr.length; i++) {\n        for (j = i + 1; j < arr.length; j++) {\n            if (arr[i] < arr[j]) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (i = 0; i < arr.length; i++) {\n        result = result * 10 + arr[i];\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122465,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let maxStr: string = \"\";\n    for (let i = 0; i < arr.length; i++) {\n        maxStr += arr[i];\n    }\n    maxNum = parseInt(maxStr);\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122465,
      "stdout": "12345\n55555\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpoebo4ut7.js:16:12)\n    at Object.<anonymous> (/tmp/tmpoebo4ut7.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        let temp = num;\n        for (let j = 0; j < arr.length; j++) {\n            if (i != j) {\n                temp = temp * 10 + arr[j];\n            }\n        }\n        if (temp > maxNum) {\n            maxNum = temp;\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4]));\nconsole.log(find_Max_Num([4, 6, 7, 1]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122464,
      "stdout": "4123\n7461\n912345678\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpfa634_zw.js:24:12)\n    at Object.<anonymous> (/tmp/tmpfa634_zw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > max) {\n                max = num;\n            }\n        }\n    }\n    return max;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1, 0]));\nconsole.log(find_Max_Num([0, 1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([9, 1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([9, 1, 2, 3, 4, 5, 6]));\nconsole.log(find_Max_Num([9, 1, 2, 3, 4, 5, 6, 7]));\nconsole.log(find_Max_Num([9, 1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(find_Max_Num([9, 1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(find_Max_Num([9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]));\nconsole.log(find_Max_Num([9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1]));\nconsole.log(find_Max_Num([9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2]));\nconsole.log(find_Max_Num([9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3]));\nconsole.log(find_Max_Num([9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122465,
      "stdout": "../../../../tmp/tmpt8493vet.ts(30,1): error TS1005: ',' expected.\n../../../../tmp/tmpt8493vet.ts(30,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        let numStr = num.toString();\n        let numStrArr = numStr.split('');\n        let numStrArrSorted = numStrArr.sort((a, b) => b - a);\n        let numStrSorted = numStrArrSorted.join('');\n        let numSorted = parseInt(numStrSorted);\n        if (numSorted > maxNum) {\n            maxNum = numSorted;\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122465,
      "stdout": "../../../../tmp/tmpe6uarl0s.ts(8,56): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpe6uarl0s.ts(8,60): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122462,
      "stdout": "45297054\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmppjviekr2.js:19:12)\n    at Object.<anonymous> (/tmp/tmppjviekr2.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        let numStr = num.toString();\n        let numArr = numStr.split('');\n        let numArrSort = numArr.sort((a, b) => {\n            return b - a;\n        });\n        let numSort = parseInt(numArrSort.join(''));\n        if (numSort > maxNum) {\n            maxNum = numSort;\n        }\n    }\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122465,
      "stdout": "../../../../tmp/tmppahuq1ee.ts(9,20): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmppahuq1ee.ts(9,24): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        let numStr = num.toString();\n        let numArr = numStr.split('');\n        let numArrLen = numArr.length;\n        let numArrSort = numArr.sort((a, b) => b - a);\n        let numArrSortStr = numArrSort.join('');\n        let numArrSortNum = parseInt(numArrSortStr);\n        if (numArrSortNum > maxNum) {\n            maxNum = numArrSortNum;\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\nconsole.log(find_Max_Num([54, 546, 548, 60]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122466,
      "stdout": "../../../../tmp/tmpw0dl5so6.ts(9,48): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpw0dl5so6.ts(9,52): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122462,
      "stdout": "45297054\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmppjviekr2.js:19:12)\n    at Object.<anonymous> (/tmp/tmppjviekr2.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122467,
      "stdout": "6\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpcqfmczvj.js:15:12)\n    at Object.<anonymous> (/tmp/tmpcqfmczvj.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > maxNum) {\n      maxNum = arr[i];\n    }\n  }\n  return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3]));\nconsole.log(find_Max_Num([27, 19, 42, 2, 13, 45, 48]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122467,
      "stdout": "3\n48\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp4y0_22nu.js:16:12)\n    at Object.<anonymous> (/tmp/tmp4y0_22nu.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        for (let j = i + 1; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122467,
      "stdout": "45297054\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpi9fjkngg.js:19:12)\n    at Object.<anonymous> (/tmp/tmpi9fjkngg.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    let numStr = num.toString();\n    let numArr = numStr.split(\"\");\n    let numArrLen = numArr.length;\n    let numArrSort = numArr.sort();\n    let numArrSortRev = numArrSort.reverse();\n    let numArrSortRevJoin = numArrSortRev.join(\"\");\n    let numArrSortRevJoinNum = parseInt(numArrSortRevJoin);\n    if (numArrSortRevJoinNum > maxNum) {\n      maxNum = numArrSortRevJoinNum;\n    }\n  }\n  return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122467,
      "stdout": "98\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpcv7nzh_q.js:23:12)\n    at Object.<anonymous> (/tmp/tmpcv7nzh_q.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let num: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        num = arr[i];\n        for (let j = 0; j < arr.length; j++) {\n            if (i != j) {\n                num = num * 10 + arr[j];\n            }\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122467,
      "stdout": "51234\n55555\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmplh4rp86l.js:23:12)\n    at Object.<anonymous> (/tmp/tmplh4rp86l.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let temp: number = 0;\n    let len: number = arr.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = i + 1; j < len; j++) {\n            if (arr[i] < arr[j]) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i = 0; i < len; i++) {\n        maxNum = maxNum * 10 + arr[i];\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122467,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max_num: number = 0;\n    let num_str: string = \"\";\n    for (let i = 0; i < arr.length; i++) {\n        num_str += arr[i];\n    }\n    max_num = parseInt(num_str);\n    return max_num;\n}\n\nconsole.log(find_Max_Num([1, 2, 3]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122467,
      "stdout": "123\n3303459\n3303459\n3303459\n3303459\n3303459\n3303459\n3303459\n3303459\n3303459\n3303459\n3303459\n3303459\n3303459\n3303459\n3303459\n3303459\n3303459\n3303459\n3303459\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpn7114sff.js:34:12)\n    at Object.<anonymous> (/tmp/tmpn7114sff.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let strNum: string = '';\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] < arr[j]) {\n                let temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        strNum += arr[i];\n    }\n    maxNum = parseInt(strNum);\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122467,
      "stdout": "987645349431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum: number = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let temp: number = arr[i];\n    for (let j = 0; j < arr.length; j++) {\n      if (j !== i) {\n        temp = temp * 10 + arr[j];\n      }\n    }\n    if (temp > maxNum) {\n      maxNum = temp;\n    }\n  }\n  return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3]));\nconsole.log(find_Max_Num([9, 1, 2, 3, 9]));\nconsole.log(find_Max_Num([9, 1, 2, 3, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122467,
      "stdout": "312\n99123\n91230\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmprsx2w__g.js:23:12)\n    at Object.<anonymous> (/tmp/tmprsx2w__g.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum = 0;\n  arr.sort((a, b) => b - a);\n  for (let i = 0; i < arr.length; i++) {\n    maxNum = maxNum * 10 + arr[i];\n  }\n  return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122467,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = 0;\n    for (let j = i; j < arr.length; j++) {\n      num = num * 10 + arr[j];\n      if (num > max) {\n        max = num;\n      }\n    }\n  }\n  return max;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1]));\nconsole.log(find_Max_Num([9, 9, 9, 9, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122467,
      "stdout": "12345\n54321\n99999\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmppo2u1y8y.js:21:12)\n    at Object.<anonymous> (/tmp/tmppo2u1y8y.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    let str = '';\n    arr.sort((a, b) => b - a);\n    for (let i = 0; i < arr.length; i++) {\n        str += arr[i];\n    }\n    maxNum = parseInt(str);\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122467,
      "stdout": "987645349431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = 0;\n    for (let j = i; j < arr.length; j++) {\n      num = num * 10 + arr[j];\n      if (num > maxNum) {\n        maxNum = num;\n      }\n    }\n  }\n  return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 3, 1, 9, 8]));\nconsole.log(find_Max_Num([9, 1, 2, 3, 9]));\nconsole.log(find_Max_Num([9, 9, 9, 9, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122468,
      "stdout": "12345\n53198\n91239\n99999\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmprj66wq5t.js:22:12)\n    at Object.<anonymous> (/tmp/tmprj66wq5t.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        let str = num.toString();\n        for (let j = 0; j < str.length; j++) {\n            let digit = str[j];\n            if (digit > max) {\n                max = digit;\n            }\n        }\n    }\n    return max;\n}\n\nconsole.log(find_Max_Num([23, 45, 67]));\nconsole.log(find_Max_Num([23, 45, 678]));\nconsole.log(find_Max_Num([23, 45, 6780]));\nconsole.log(find_Max_Num([23, 45, 67800]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122467,
      "stdout": "../../../../tmp/tmpdk02az9i.ts(9,17): error TS2365: Operator '>' cannot be applied to types 'string' and 'number'.\n../../../../tmp/tmpdk02az9i.ts(10,17): error TS2322: Type 'string' is not assignable to type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let str: string = '';\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] < arr[j]) {\n                let temp: number = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        str += arr[i];\n    }\n    maxNum = parseInt(str);\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122468,
      "stdout": "987645349431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    for (let j = 0; j < arr.length; j++) {\n      if (i !== j) {\n        num = num * 10 + arr[j];\n      }\n    }\n    if (num > maxNum) {\n      maxNum = num;\n    }\n  }\n  return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122468,
      "stdout": "312\n346059\n51234\n912345678\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmplfyiqbkn.js:24:12)\n    at Object.<anonymous> (/tmp/tmplfyiqbkn.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        for (let j = 0; j < arr.length; j++) {\n            if (i !== j) {\n                num = num * 10 + arr[j];\n            }\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(find_Max_Num([9, 1, 2, 3, 4, 5, 6, 7, 8]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122468,
      "stdout": "312\n346059\n912345678\n912345678\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp19vm9k2y.js:24:12)\n    at Object.<anonymous> (/tmp/tmp19vm9k2y.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    let temp = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] < arr[j]) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        maxNum = maxNum * 10 + arr[i];\n    }\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122468,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    arr.sort((a, b) => {\n        return b - a;\n    });\n    for (let i = 0; i < arr.length; i++) {\n        maxNum = maxNum * 10 + arr[i];\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 3, 1, 4, 0]));\nconsole.log(find_Max_Num([9, 9, 9, 9, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122468,
      "stdout": "54321\n54310\n99999\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    if (num > maxNum) {\n      maxNum = num;\n    }\n  }\n  return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3]));\nconsole.log(find_Max_Num([27, 19, 42, 2, 13, 45]));\nconsole.log(find_Max_Num([31, 5, 48, 2, 13, 45]));\nconsole.log(find_Max_Num([31, 5, 48, 2, 13, 45]));\nconsole.log(find_Max_Num([31, 5, 48, 2, 13, 45]));\nconsole.log(find_Max_Num([31, 5, 48, 2, 13, 45]));\nconsole.log(find_Max_Num([31, 5, 48, 2, 13, 45]));\nconsole.log(find_Max_Num([31, 5, 48, 2, 13, 45]));\nconsole.log(find_Max_Num([31, 5, 48, 2, 13, 45]));\nconsole.log(find_Max_Num([31, 5, 48, 2, 13, 45]));\nconsole.log(find_Max_Num([31, 5, 48, 2, 13, 45]));\nconsole.log(find_Max_Num([31, 5, 48, 2, 13, 45]));\nconsole.log(find_Max_Num([31, 5, 48, 2, 13, 45]));\nconsole.log(find_Max_Num([31, 5, 48, 2, 13, 45]));\nconsole.log(find_Max_Num([31, 5, 48, 2, 13, 45]));\nconsole.log(find_Max_Num([31, 5, 48, 2, 13, 45]));\nconsole.log(find_Max_Num([31, 5, 48, 2, 13, 45]));\nconsole.log(find_Max_Num([31, 5, 48, 2, 13, 45]));\nconsole.log(find_Max_Num([31, 5, 48, 2,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122467,
      "stdout": "../../../../tmp/tmp_4xea4b0.ts(32,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let strNum: string = \"\";\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] < arr[j]) {\n                let temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        strNum += arr[i];\n    }\n    maxNum = parseInt(strNum);\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122468,
      "stdout": "987645349431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    for (let i: number = 0; i < arr.length; i++) {\n        let num: number = 0;\n        for (let j: number = 0; j < arr.length; j++) {\n            if (i != j) {\n                num = num * 10 + arr[j];\n            }\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122468,
      "stdout": "2345\n5555\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n23\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp8lrkqklp.js:22:12)\n    at Object.<anonymous> (/tmp/tmp8lrkqklp.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 23,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = arr[i];\n        let numStr: string = num.toString();\n        let numStrLen: number = numStr.length;\n        let numStrArr: string[] = numStr.split('');\n        let numStrArrLen: number = numStrArr.length;\n        let numStrArrSort: string[] = numStrArr.sort();\n        let numStrArrSortReverse: string[] = numStrArrSort.reverse();\n        let numStrArrSortReverseJoin: string = numStrArrSortReverse.join('');\n        let numStrArrSortReverseJoinNum: number = parseInt(numStrArrSortReverseJoin);\n        if (numStrArrSortReverseJoinNum > maxNum) {\n            maxNum = numStrArrSortReverseJoinNum;\n        }\n    }\n    return maxNum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpb1k28yn_.js:23:12)\n    at Object.<anonymous> (/tmp/tmpb1k28yn_.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        for (let j = 0; j < arr.length; j++) {\n            if (j != i) {\n                num = num * 10 + arr[j];\n            }\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122469,
      "stdout": "51234\n55555\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpv37hmeqb.js:22:12)\n    at Object.<anonymous> (/tmp/tmpv37hmeqb.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    let tempNum = 0;\n    let tempArr = [];\n    let tempArr2 = [];\n    let tempArr3 = [];\n    let tempArr4 = [];\n    let tempArr5 = [];\n    let tempArr6 = [];\n    let tempArr7 = [];\n    let tempArr8 = [];\n    let tempArr9 = [];\n    let tempArr10 = [];\n    let tempArr11 = [];\n    let tempArr12 = [];\n    let tempArr13 = [];\n    let tempArr14 = [];\n    let tempArr15 = [];\n    let tempArr16 = [];\n    let tempArr17 = [];\n    let tempArr18 = [];\n    let tempArr19 = [];\n    let tempArr20 = [];\n    let tempArr21 = [];\n    let tempArr22 = [];\n    let tempArr23 = [];\n    let tempArr24 = [];\n    let tempArr25 = [];\n    let tempArr26 = [];\n    let tempArr27 = [];\n    let tempArr28 = [];\n    let tempArr29 = [];\n    let tempArr30 = [];\n    let tempArr31 = [];\n    let tempArr32 = [];\n    let tempArr33 = [];\n    let tempArr34 = [];\n    let tempArr35 = [];\n    let tempArr36 = [];\n    let tempArr37 = [];\n    let tempArr38 = [];\n    let tempArr39 = [];\n    let tempArr40 = [];\n    let tempArr41 = [];\n    let tempArr42 = [];\n    let tempArr43 = [];\n    let tempArr44 = [];\n    let tempArr45 = [];\n    let tempArr46 = [];\n    let tempArr47 = [];\n    let tempArr48 = [];\n    let tempArr49 = [];\n    let tempArr50 = [];\n    let tempArr51 = [];\n    let tempArr52 = [];\n    let tempArr53 = [];\n    let tempArr54 = [];\n    let tempArr55 = [];\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122461,
      "stdout": "../../../../tmp/tmpi4s60za6.ts(72,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let maxNumStr: string = \"\";\n    for (let i = 0; i < arr.length; i++) {\n        maxNumStr += arr[i];\n    }\n    maxNum = parseInt(maxNumStr);\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122464,
      "stdout": "../../../../tmp/tmpmsumeqh2.ts(15,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    let maxNumString = \"\";\n    let numString = \"\";\n    for (let i = 0; i < arr.length; i++) {\n        numString += arr[i];\n    }\n    let numArray = numString.split(\"\");\n    numArray.sort(function (a, b) {\n        return b - a;\n    });\n    for (let i = 0; i < numArray.length; i++) {\n        maxNumString += numArray[i];\n    }\n    maxNum = parseInt(maxNumString);\n    return maxNum;\n}\nconsole.log(\"Largest number that can be formed with the given array of digits: \" + find_Max_Num([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122469,
      "stdout": "../../../../tmp/tmpkdskoybo.ts(11,16): error TS2362: The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n../../../../tmp/tmpkdskoybo.ts(11,20): error TS2363: The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = 0;\n    for (let j = i; j < arr.length; j++) {\n      num = num * 10 + arr[j];\n    }\n    if (num > maxNum) {\n      maxNum = num;\n    }\n  }\n  return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 3, 1, 9, 8]));\nconsole.log(find_Max_Num([9, 1, 2, 3, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122470,
      "stdout": "12345\n53198\n91239\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpjncf_5pm.js:21:12)\n    at Object.<anonymous> (/tmp/tmpjncf_5pm.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let str: string = '';\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] < arr[j]) {\n                let temp: number = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        str += arr[i];\n    }\n    maxNum = parseInt(str);\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122470,
      "stdout": "987645349431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = 0;\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[i] > arr[j]) {\n                num = num * 10 + arr[i];\n            } else {\n                num = num * 10 + arr[j];\n            }\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122470,
      "stdout": "1088888878\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n333\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmps9ctt3oe.js:24:12)\n    at Object.<anonymous> (/tmp/tmps9ctt3oe.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 333,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let tempNum = 0;\n        for (let j = i; j < arr.length; j++) {\n            tempNum = tempNum * 10 + arr[j];\n            if (tempNum > maxNum) {\n                maxNum = tempNum;\n            }\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122470,
      "stdout": "12345\n54321\n1234567890\n12345678901234570000\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpu2jnif6h.js:22:12)\n    at Object.<anonymous> (/tmp/tmpu2jnif6h.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] < arr[j]) {\n                let temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        maxNum = maxNum * 10 + arr[i];\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122470,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    let numStr = num.toString();\n    let numArr = numStr.split(\"\");\n    numArr.sort();\n    let numStr2 = numArr.join(\"\");\n    let num2 = parseInt(numStr2);\n    if (num2 > maxNum) {\n      maxNum = num2;\n    }\n  }\n  return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122470,
      "stdout": "89\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp5hvlsa_p.js:21:12)\n    at Object.<anonymous> (/tmp/tmp5hvlsa_p.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] != -1) {\n        num = num * 10 + arr[j];\n        arr[j] = -1;\n        break;\n      }\n    }\n    maxNum = Math.max(maxNum, num);\n  }\n  return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 3, 1, 4, 0]));\nconsole.log(find_Max_Num([9, 1, 7, 9, 7]));\nconsole.log(find_Max_Num([9, 9, 9, 9, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122470,
      "stdout": "5\n5\n9\n9\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpyalpno8n.js:24:12)\n    at Object.<anonymous> (/tmp/tmpyalpno8n.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let tempNum: number = 0;\n    let tempArr: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        tempArr = arr.slice();\n        tempArr.splice(i, 1);\n        tempNum = arr[i];\n        for (let j = 0; j < tempArr.length; j++) {\n            if (tempArr[j] > tempArr[j + 1]) {\n                let temp = tempArr[j];\n                tempArr[j] = tempArr[j + 1];\n                tempArr[j + 1] = temp;\n            }\n        }\n        for (let k = tempArr.length - 1; k >= 0; k--) {\n            tempNum = tempNum * 10 + tempArr[k];\n        }\n        if (tempNum > maxNum) {\n            maxNum = tempNum;\n        }\n    }\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122470,
      "stdout": "54321\n55555\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6514\n\nshould loosely deep-equal\n\n6541\n    at test (/tmp/tmp9aoc1m2m.js:32:12)\n    at Object.<anonymous> (/tmp/tmp9aoc1m2m.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6514,\n  expected: 6541,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let str: string = \"\";\n    for (let i = 0; i < arr.length; i++) {\n        str += arr[i];\n    }\n    maxNum = parseInt(str);\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1]));\nconsole.log(find_Max_Num([5, 3, 1, 9, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122470,
      "stdout": "12345\n54321\n53197\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmplpu0dpay.js:17:12)\n    at Object.<anonymous> (/tmp/tmplpu0dpay.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let temp = arr[i];\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] < arr[j]) {\n        temp = arr[j];\n        arr[j] = arr[i];\n        arr[i] = temp;\n      }\n    }\n    maxNum = maxNum * 10 + arr[i];\n  }\n  return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122470,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] < arr[j]) {\n                let temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        max = max * 10 + arr[i];\n    }\n    return max;\n}\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122470,
      "stdout": "54321\n54321\n9876543210\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = arr[i];\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3]));\nconsole.log(find_Max_Num([27, 19, 42, 2, 13, 45, 48]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122470,
      "stdout": "3\n48\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp16sraigz.js:17:12)\n    at Object.<anonymous> (/tmp/tmp16sraigz.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum: number = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] < arr[j]) {\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n      }\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    maxNum = maxNum * 10 + arr[i];\n  }\n  return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122470,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] < arr[j]) {\n                let temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        maxNum = maxNum * 10 + arr[i];\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122470,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        let temp = num;\n        for (let j = 0; j < arr.length; j++) {\n            if (i !== j) {\n                temp = temp * 10 + arr[j];\n            }\n        }\n        if (temp > maxNum) {\n            maxNum = temp;\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122470,
      "stdout": "51234\n55555\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp77u82i40.js:23:12)\n    at Object.<anonymous> (/tmp/tmp77u82i40.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    let numStr = num.toString();\n    let numArr = numStr.split(\"\");\n    numArr.sort();\n    numArr.reverse();\n    let numStr2 = numArr.join(\"\");\n    let num2 = parseInt(numStr2);\n    if (num2 > maxNum) {\n      maxNum = num2;\n    }\n  }\n  return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122470,
      "stdout": "98\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpkxzi05zb.js:22:12)\n    at Object.<anonymous> (/tmp/tmpkxzi05zb.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        let str = num.toString();\n        let len = str.length;\n        for (let j = 0; j < len; j++) {\n            let digit = str[j];\n            let num2 = parseInt(digit);\n            if (num2 > max) {\n                max = num2;\n            }\n        }\n    }\n    return max;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122471,
      "stdout": "9\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp6k71zh4e.js:22:12)\n    at Object.<anonymous> (/tmp/tmp6k71zh4e.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum: number = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num: number = arr[i];\n    let numStr: string = num.toString();\n    let numArr: string[] = numStr.split(\"\");\n    let numArrSort: string[] = numArr.sort((a, b) => {\n      return b.localeCompare(a);\n    });\n    let numStrSort: string = numArrSort.join(\"\");\n    let numSort: number = parseInt(numStrSort);\n    if (numSort > maxNum) {\n      maxNum = numSort;\n    }\n  }\n  return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122471,
      "stdout": "98\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmph8ijhss0.js:23:12)\n    at Object.<anonymous> (/tmp/tmph8ijhss0.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]));\nconsole.log(find_Max_Num([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122471,
      "stdout": "12345\n54321\n1234567890\n9876543210\n12345678901234570000\n1.2345678901234566e+29\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpheevibh3.js:24:12)\n    at Object.<anonymous> (/tmp/tmpheevibh3.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > max) {\n                max = num;\n            }\n        }\n    }\n    return max;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 3, 1, 9, 8]));\nconsole.log(find_Max_Num([9, 1, 2, 3, 9]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 9]));\nconsole.log(find_Max_Num([9, 1, 9, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122471,
      "stdout": "12345\n53198\n91239\n12349\n91934\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpjt0ure94.js:23:12)\n    at Object.<anonymous> (/tmp/tmpjt0ure94.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let temp: number = 0;\n    let tempArr: number[] = [];\n    let tempArr2: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        tempArr.push(arr[i]);\n        for (let j = 0; j < arr.length; j++) {\n            if (tempArr.indexOf(arr[j]) === -1) {\n                tempArr.push(arr[j]);\n            }\n        }\n        temp = parseInt(tempArr.join(''));\n        if (temp > maxNum) {\n            maxNum = temp;\n        }\n        tempArr = [];\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122472,
      "stdout": "51234\n5\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpibxo9348.js:27:12)\n    at Object.<anonymous> (/tmp/tmpibxo9348.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max_num: number = 0;\n    for (let i: number = 0; i < arr.length; i++) {\n        let num: number = 0;\n        for (let j: number = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > max_num) {\n                max_num = num;\n            }\n        }\n    }\n    return max_num;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122472,
      "stdout": "45297054\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpqe_jamwd.js:19:12)\n    at Object.<anonymous> (/tmp/tmpqe_jamwd.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = 0;\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[i] > arr[j]) {\n                num = num * 10 + arr[i];\n            } else {\n                num = num * 10 + arr[j];\n            }\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122470,
      "stdout": "1088888878\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n333\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmps9ctt3oe.js:24:12)\n    at Object.<anonymous> (/tmp/tmps9ctt3oe.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 333,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122462,
      "stdout": "45297054\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmppjviekr2.js:19:12)\n    at Object.<anonymous> (/tmp/tmppjviekr2.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let num: number = 0;\n    let len: number = arr.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = i + 1; j < len; j++) {\n            if (arr[i] < arr[j]) {\n                num = arr[i];\n                arr[i] = arr[j];\n                arr[j] = num;\n            }\n        }\n    }\n    for (let i = 0; i < len; i++) {\n        maxNum = maxNum * 10 + arr[i];\n    }\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122472,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let str: string = \"\";\n    for (let i = 0; i < arr.length; i++) {\n        str = str + arr[i];\n    }\n    maxNum = parseInt(str);\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122473,
      "stdout": "12345\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpcfxsw4o6.js:15:12)\n    at Object.<anonymous> (/tmp/tmpcfxsw4o6.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let result: number = 0;\n    let temp: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] < arr[j]) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        result = result * 10 + arr[i];\n    }\n    return result;\n}\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122473,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    let temp = 0;\n    let len = arr.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = i + 1; j < len; j++) {\n            if (arr[i] < arr[j]) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i = 0; i < len; i++) {\n        maxNum = maxNum * 10 + arr[i];\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122473,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let len: number = arr.length;\n    for (let i: number = 0; i < len; i++) {\n        for (let j: number = i + 1; j < len; j++) {\n            if (arr[i] < arr[j]) {\n                let temp: number = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i: number = 0; i < len; i++) {\n        maxNum = maxNum * 10 + arr[i];\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let num: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        num = arr[i];\n        for (let j = 0; j < arr.length; j++) {\n            if (i !== j) {\n                num = num * 10 + arr[j];\n            }\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 5, 5, 5, 5]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122473,
      "stdout": "51234\n55555\n9123456780\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpn7n8j6bh.js:24:12)\n    at Object.<anonymous> (/tmp/tmpn7n8j6bh.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        for (let j = 0; j < arr.length; j++) {\n            if (i != j) {\n                num = num * 10 + arr[j];\n            }\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 2, 3, 4]));\nconsole.log(find_Max_Num([4, 6, 7, 1]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122473,
      "stdout": "4123\n7461\n612345\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp1z886f_c.js:23:12)\n    at Object.<anonymous> (/tmp/tmp1z886f_c.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n  let maxNum: number = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let tempNum: number = 0;\n    for (let j = i; j < arr.length; j++) {\n      tempNum = tempNum * 10 + arr[j];\n      if (tempNum > maxNum) {\n        maxNum = tempNum;\n      }\n    }\n  }\n  return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1]));\nconsole.log(find_Max_Num([5, 3, 1, 4, 2]));\nconsole.log(find_Max_Num([9, 1, 2, 3, 4]));\nconsole.log(find_Max_Num([23, 45, 67, 89, 12]));\nconsole.log(find_Max_Num([1, 1, 1, 1, 1]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 0]));\nconsole.log(find_Max_Num([9, 9, 9, 9, 9]));\nconsole.log(find_Max_Num([9, 9, 9, 9, 9, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122473,
      "stdout": "12345\n54321\n53142\n91234\n282602\n11111\n12340\n99999\n999999\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp3k0op96f.js:27:12)\n    at Object.<anonymous> (/tmp/tmp3k0op96f.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > max) {\n                max = num;\n            }\n        }\n    }\n    return max;\n}\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122473,
      "stdout": "12345\n54321\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp6xxvgjp6.js:20:12)\n    at Object.<anonymous> (/tmp/tmp6xxvgjp6.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let temp: number = 0;\n    let tempArr: number[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        tempArr.push(arr[i]);\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] < arr[j]) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        maxNum = maxNum * 10 + arr[i];\n    }\n    return maxNum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122473,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let len: number = arr.length;\n    for (let i: number = 0; i < len; i++) {\n        for (let j: number = i + 1; j < len; j++) {\n            if (arr[i] < arr[j]) {\n                let temp: number = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i: number = 0; i < len; i++) {\n        maxNum = maxNum * 10 + arr[i];\n    }\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let temp: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] < arr[j]) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        maxNum = maxNum * 10 + arr[i];\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122473,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > max) {\n                max = num;\n            }\n        }\n    }\n    return max;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 3, 1, 9, 8]));\nconsole.log(find_Max_Num([9, 1, 2, 3, 9]));\nconsole.log(find_Max_Num([1, 2, 9, 3, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122473,
      "stdout": "12345\n53198\n91239\n12939\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp7k_djqoi.js:22:12)\n    at Object.<anonymous> (/tmp/tmp7k_djqoi.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let str: string = \"\";\n    for (let i: number = 0; i < arr.length; i++) {\n        for (let j: number = i + 1; j < arr.length; j++) {\n            if (arr[i] < arr[j]) {\n                let temp: number = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i: number = 0; i < arr.length; i++) {\n        str = str + arr[i];\n    }\n    maxNum = parseInt(str);\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122473,
      "stdout": "987645349431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > max) {\n                max = num;\n            }\n        }\n    }\n    return max;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1, 0]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1, 0, 9, 8, 7, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122473,
      "stdout": "12345\n54321\n543210\n5432109876\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpclc_1aq5.js:22:12)\n    at Object.<anonymous> (/tmp/tmpclc_1aq5.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    let temp = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] < arr[j]) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        maxNum = maxNum * 10 + arr[i];\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122473,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let maxNumStr: string = \"\";\n    let arrStr: string[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        arrStr.push(arr[i].toString());\n    }\n    arrStr.sort((a, b) => {\n        return b.localeCompare(a);\n    });\n    maxNumStr = arrStr.join(\"\");\n    maxNum = parseInt(maxNumStr);\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122473,
      "stdout": "989764543431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122462,
      "stdout": "45297054\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmppjviekr2.js:19:12)\n    at Object.<anonymous> (/tmp/tmppjviekr2.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let temp = arr[i];\n        for (let j = 0; j < arr.length; j++) {\n            if (i != j) {\n                temp = temp * 10 + arr[j];\n            }\n        }\n        if (temp > maxNum) {\n            maxNum = temp;\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122473,
      "stdout": "312\n346059\n9123456780\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n312\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp3_3ew_ls.js:23:12)\n    at Object.<anonymous> (/tmp/tmp3_3ew_ls.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 312,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    let maxNumStr = \"\";\n    for (let i = 0; i < arr.length; i++) {\n        maxNumStr += arr[i];\n    }\n    maxNum = parseInt(maxNumStr);\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9]));\nconsole.log(find_Max_Num([3, 30, 34, 5, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122473,
      "stdout": "../../../../tmp/tmp_yp8usag.ts(15,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1]));\nconsole.log(find_Max_Num([5, 3, 1, 4, 2]));\nconsole.log(find_Max_Num([9, 1, 2, 5, 8, 3]));\nconsole.log(find_Max_Num([3, 1, 4, 5]));\nconsole.log(find_Max_Num([5, 9, 8, 7, 6, 4, 3, 2, 1]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122473,
      "stdout": "12345\n54321\n53142\n912583\n3145\n598764321\n123456789\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpinw_lxn2.js:25:12)\n    at Object.<anonymous> (/tmp/tmpinw_lxn2.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    let maxNumArr = [];\n    let temp = 0;\n    let tempArr = [];\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[i] < arr[j]) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        maxNumArr.push(arr[i]);\n    }\n    maxNum = parseInt(maxNumArr.join(''));\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122473,
      "stdout": "987645349431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = 0;\n        for (let j = i; j < arr.length; j++) {\n            num = num * 10 + arr[j];\n            if (num > max) {\n                max = num;\n            }\n        }\n    }\n    return max;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122473,
      "stdout": "45297054\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmplrq08pf8.js:19:12)\n    at Object.<anonymous> (/tmp/tmplrq08pf8.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max: number = 0;\n    let str: string = \"\";\n    for (let i = 0; i < arr.length; i++) {\n        str += arr[i];\n    }\n    max = parseInt(str);\n    return max;\n}\nconsole.log(find_Max_Num([1, 2, 3, 4, 5]));\nconsole.log(find_Max_Num([5, 4, 3, 2, 1]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6]));\nconsole.log(find_Max_Num([1, 2, 3, 4, 5, 6, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122473,
      "stdout": "12345\n54321\n123456\n1234567\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n123\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpdfa04ogj.js:18:12)\n    at Object.<anonymous> (/tmp/tmpdfa04ogj.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 123,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = 0;\n        for (let j = 0; j < arr.length; j++) {\n            if (arr[i] > arr[j]) {\n                num = num * 10 + arr[i];\n            } else {\n                num = num * 10 + arr[j];\n            }\n        }\n        if (num > maxNum) {\n            maxNum = num;\n        }\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122470,
      "stdout": "1088888878\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n333\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmps9ctt3oe.js:24:12)\n    at Object.<anonymous> (/tmp/tmps9ctt3oe.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 333,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum: number = 0;\n    let len: number = arr.length;\n    for (let i: number = 0; i < len; i++) {\n        for (let j: number = i + 1; j < len; j++) {\n            if (arr[i] < arr[j]) {\n                let temp: number = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    for (let i: number = 0; i < len; i++) {\n        maxNum = maxNum * 10 + arr[i];\n    }\n    return maxNum;\n}\n\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "1060849431\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let maxNum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        let numStr = num.toString();\n        let numArr = numStr.split('');\n        let numArrSort = numArr.sort();\n        let numArrSortReverse = numArrSort.reverse();\n        let numArrSortReverseJoin = numArrSortReverse.join('');\n        let numArrSortReverseJoinNum = parseInt(numArrSortReverseJoin);\n        if (numArrSortReverseJoinNum > maxNum) {\n            maxNum = numArrSortReverseJoinNum;\n        }\n    }\n    return maxNum;\n}\nconsole.log(find_Max_Num([1, 34, 3, 98, 9, 76, 45, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122459,
      "stdout": "98\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmp32l5rmwk.js:22:12)\n    at Object.<anonymous> (/tmp/tmp32l5rmwk.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the largest number that can be formed with the given array of digits.\nfunction find_Max_Num(arr: number[]): number {\n    let max: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num: number = arr[i];\n        let str: string = num.toString();\n        let len: number = str.length;\n        let sum: number = 0;\n        for (let j = 0; j < len; j++) {\n            let digit: number = parseInt(str[j]);\n            sum = sum + digit;\n        }\n        if (sum > max) {\n            max = sum;\n        }\n    }\n    return max;\n}\n\nconsole.log(find_Max_Num([51, 71, 17, 42]));\nconsole.log(find_Max_Num([42, 33, 60]));\nconsole.log(find_Max_Num([51, 32, 43]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Max_Num;\n  assert.deepEqual(candidate([1, 2, 3]),321);\n  assert.deepEqual(candidate([4, 5, 6, 1]),6541);\n  assert.deepEqual(candidate([1, 2, 3, 9]),9321);\n}\n\ntest();",
      "timestamp": 1666122474,
      "stdout": "8\n6\n7\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n321\n    at test (/tmp/tmpn6427o6z.js:25:12)\n    at Object.<anonymous> (/tmp/tmpn6427o6z.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 321,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    }
  ]
}