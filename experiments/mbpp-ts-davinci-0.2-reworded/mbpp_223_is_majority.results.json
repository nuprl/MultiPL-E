{
  "name": "mbpp_223_is_majority",
  "language": "ts",
  "prompt": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    return count > n / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i: number = 0;\n    let j: number = n - 1;\n    let mid: number = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] != x)) {\n            return (mid + n / 2) <= n;\n        }\n        else if (arr[mid] >= x) {\n            j = mid - 1;\n        }\n        else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmprgtiu045.js:24:12)\n    at Object.<anonymous> (/tmp/tmprgtiu045.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === x) {\n            count++;\n        }\n    }\n    return count > n / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (arr[i] == x) {\n      count++;\n    }\n  }\n  if (count > n / 2) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (arr[i] === x) {\n      count++;\n    }\n  }\n  return count > n / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i: number = 0;\n    let j: number = n - 1;\n    let mid: number = 0;\n    while (i <= j) {\n        mid = Math.floor((i + j) / 2);\n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] != x)) {\n            break;\n        } else if (arr[mid] >= x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    if (arr[mid] == x) {\n        if (mid + n / 2 <= n - 1 && arr[mid + n / 2] == x) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnxg6bgp_.js:33:12)\n    at Object.<anonymous> (/tmp/tmpnxg6bgp_.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] != x)) {\n            return (mid + n / 2) <= n;\n        }\n        else if (arr[mid] >= x) {\n            j = mid - 1;\n        }\n        else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmptb_sri5j.js:24:12)\n    at Object.<anonymous> (/tmp/tmptb_sri5j.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i: number = 0;\n    let j: number = n - 1;\n    let mid: number = Math.floor((i + j) / 2);\n\n    while (i <= j) {\n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] != x)) {\n            return true;\n        }\n        else if (arr[mid] >= x) {\n            j = mid - 1;\n        }\n        else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpllpnit2h.js:24:12)\n    at Object.<anonymous> (/tmp/tmpllpnit2h.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x)\n            count++;\n    }\n    if (count > n / 2)\n        return true;\n    else\n        return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor(n / 2);\n    let mid_element = arr[mid];\n    while (i < j) {\n        if (arr[i] === x && arr[j] === x) {\n            return true;\n        }\n        if (arr[i] !== x) {\n            i++;\n        }\n        if (arr[j] !== x) {\n            j--;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmptyk5pmgz.js:24:12)\n    at Object.<anonymous> (/tmp/tmptyk5pmgz.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] === x && (mid === 0 || arr[mid - 1] !== x)) {\n            return (mid + n / 2) <= n;\n        }\n        if (arr[mid] >= x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpkd_wwu88.js:24:12)\n    at Object.<anonymous> (/tmp/tmpkd_wwu88.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (arr[i] === x) {\n      count++;\n    }\n  }\n  return count > n / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    return count > n / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] === x && (mid === 0 || arr[mid - 1] !== x)) {\n            return (n / 2) <= (mid + 1);\n        } else if (arr[mid] >= x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123136,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmptms1lwqw.js:23:12)\n    at Object.<anonymous> (/tmp/tmptms1lwqw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === x) {\n            count++;\n        }\n    }\n    return count > n / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor(n / 2);\n    while (i <= j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] === x) {\n            if (mid + mid <= n) {\n                return true;\n            } else {\n                j = mid - 1;\n            }\n        } else if (arr[mid] > x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpheh2izyh.js:29:12)\n    at Object.<anonymous> (/tmp/tmpheh2izyh.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor(n / 2);\n    while (i <= j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] === x) {\n            if (mid + mid > n) {\n                return true;\n            } else {\n                return false;\n            }\n        } else if (arr[mid] < x) {\n            i = mid + 1;\n        } else {\n            j = mid - 1;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv5_z1_av.js:28:12)\n    at Object.<anonymous> (/tmp/tmpv5_z1_av.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i: number = 0;\n    let j: number = n - 1;\n    let mid: number = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] != x)) {\n            return true;\n        }\n        if (arr[mid] >= x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3i9tkwc7.js:24:12)\n    at Object.<anonymous> (/tmp/tmp3i9tkwc7.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] != x)) {\n            return (mid + n / 2) <= n;\n        }\n        if (arr[mid] >= x) {\n            j = mid - 1;\n        }\n        else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpjt00dqtg.js:24:12)\n    at Object.<anonymous> (/tmp/tmpjt00dqtg.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i: number = 0;\n    let j: number = n - 1;\n    let mid: number = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] != x)) {\n            return true;\n        }\n        if (arr[mid] >= x) {\n            j = mid - 1;\n        }\n        else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfrb3msaf.js:24:12)\n    at Object.<anonymous> (/tmp/tmpfrb3msaf.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i: number = 0;\n    let j: number = n - 1;\n    let mid: number = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] != x)) {\n            return true;\n        }\n        if (arr[mid] >= x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3i9tkwc7.js:24:12)\n    at Object.<anonymous> (/tmp/tmp3i9tkwc7.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i: number = 0;\n    let j: number = n - 1;\n    let mid: number = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] === x && (mid === 0 || arr[mid - 1] !== x)) {\n            return (n / 2) <= (n - mid);\n        }\n        if (arr[mid] >= x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_n6d2l_r.js:24:12)\n    at Object.<anonymous> (/tmp/tmp_n6d2l_r.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor(n / 2);\n    while (i <= j) {\n        mid = Math.floor((i + j) / 2);\n        if (arr[mid] === x) {\n            break;\n        } else if (arr[mid] > x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    if (mid === 0 || mid === n - 1) {\n        return false;\n    }\n    if (arr[mid] === x && arr[mid - 1] !== x && arr[mid + 1] !== x) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmprh_f6apv.js:29:12)\n    at Object.<anonymous> (/tmp/tmprh_f6apv.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor(n / 2);\n    while (i < j) {\n        if (arr[mid] == x && arr[mid + 1] != x) {\n            return true;\n        }\n        if (arr[mid] >= x) {\n            j = mid - 1;\n        }\n        else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    if (arr[mid] == x) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3_ympvq4.js:27:12)\n    at Object.<anonymous> (/tmp/tmp3_ympvq4.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count: number = 0;\n    for (let i: number = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i: number = 0;\n    let j: number = n - 1;\n    let mid: number = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] != x)) {\n            return (mid + n / 2 <= n - 1 && arr[mid + n / 2] == x);\n        }\n        else if (arr[mid] >= x) {\n            j = mid - 1;\n        }\n        else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpi_5her_c.js:23:12)\n    at Object.<anonymous> (/tmp/tmpi_5her_c.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === x) {\n            count++;\n        }\n    }\n    return count > n / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i: number = 0;\n    let j: number = n - 1;\n    let mid: number = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] != x)) {\n            return true;\n        }\n        if (arr[mid] >= x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3i9tkwc7.js:24:12)\n    at Object.<anonymous> (/tmp/tmp3i9tkwc7.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (arr[i] === x) {\n      count++;\n    }\n  }\n  if (count > n / 2) {\n    return true;\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor(n / 2);\n    let pos = -1;\n    while (i <= j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] === x) {\n            pos = mid;\n            break;\n        }\n        else if (arr[mid] < x) {\n            i = mid + 1;\n        }\n        else {\n            j = mid - 1;\n        }\n    }\n    if (pos === -1) {\n        return false;\n    }\n    if ((pos + mid) > n) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpeidmdwgm.js:31:12)\n    at Object.<anonymous> (/tmp/tmpeidmdwgm.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] != x)) {\n            return (mid + n / 2) <= n;\n        }\n        else if (arr[mid] >= x) {\n            j = mid - 1;\n        }\n        else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmptb_sri5j.js:24:12)\n    at Object.<anonymous> (/tmp/tmptb_sri5j.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor(n / 2);\n    while (i < j) {\n        if (arr[mid] == x && arr[mid + 1] != x) {\n            return true;\n        }\n        else if (arr[mid] >= x) {\n            j = mid - 1;\n        }\n        else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpr98pi2cc.js:23:12)\n    at Object.<anonymous> (/tmp/tmpr98pi2cc.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n\n    while (i < j) {\n        if (arr[mid] === x && arr[mid + 1] !== x) {\n            return true;\n        } else if (arr[mid] === x && arr[mid + 1] === x) {\n            i = mid;\n        } else if (arr[mid] !== x && arr[mid - 1] === x) {\n            return true;\n        } else if (arr[mid] !== x && arr[mid - 1] !== x) {\n            j = mid;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpchr1epyo.js:27:12)\n    at Object.<anonymous> (/tmp/tmpchr1epyo.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] == x && (mid == n - 1 || arr[mid + 1] != x)) {\n            return true;\n        }\n        if (arr[mid] <= x) {\n            i = mid + 1;\n        } else {\n            j = mid - 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpccog4pnk.js:24:12)\n    at Object.<anonymous> (/tmp/tmpccog4pnk.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor(n / 2);\n    while (i < j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] < x)) {\n            return (mid + n / 2) <= n;\n        }\n        if (arr[mid] >= x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp88gbi5_l.js:23:12)\n    at Object.<anonymous> (/tmp/tmp88gbi5_l.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i: number = 0;\n    let j: number = n - 1;\n    let mid: number = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] === x && (mid === 0 || arr[mid - 1] !== x)) {\n            return (mid + Math.floor(n / 2)) <= (n - 1) && arr[mid + Math.floor(n / 2)] === x;\n        }\n        else if (arr[mid] >= x) {\n            j = mid - 1;\n        }\n        else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i: number = 0;\n    let j: number = n - 1;\n    let mid: number = 0;\n    while (i <= j) {\n        mid = Math.floor((i + j) / 2);\n        if (arr[mid] === x && (mid === 0 || arr[mid - 1] !== x)) {\n            break;\n        }\n        if (arr[mid] >= x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    if (i > j) {\n        return false;\n    }\n    if ((mid + n / 2) <= (n - 1) && arr[mid + n / 2] === x) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_ru2owte.js:29:12)\n    at Object.<anonymous> (/tmp/tmp_ru2owte.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] != x)) {\n            return true;\n        }\n        if (arr[mid] >= x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpvktguhj8.js:24:12)\n    at Object.<anonymous> (/tmp/tmpvktguhj8.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i: number = 0;\n    let j: number = n - 1;\n    let mid: number = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] === x) {\n            if ((mid + n / 2) <= j) {\n                return true;\n            } else {\n                return false;\n            }\n        } else if (arr[mid] < x) {\n            i = mid + 1;\n        } else {\n            j = mid - 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpb6t8vuqr.js:28:12)\n    at Object.<anonymous> (/tmp/tmpb6t8vuqr.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] < x)) {\n            return true;\n        }\n        if (arr[mid] >= x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpjhwp0h66.js:24:12)\n    at Object.<anonymous> (/tmp/tmpjhwp0h66.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = 0;\n    while (i <= j) {\n        mid = Math.floor((i + j) / 2);\n        if (arr[mid] == x && (mid == n - 1 || arr[mid + 1] != x)) {\n            break;\n        }\n        if (arr[mid] >= x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    let left = mid;\n    i = 0;\n    j = n - 1;\n    while (i <= j) {\n        mid = Math.floor((i + j) / 2);\n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] != x)) {\n            break;\n        }\n        if (arr[mid] > x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    let right = mid;\n    if (right - left + 1 > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmplqvebh1j.js:44:12)\n    at Object.<anonymous> (/tmp/tmplqvebh1j.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n\n    while (i <= j) {\n        if (arr[mid] === x) {\n            if (mid + n / 2 <= n - 1) {\n                return true;\n            } else {\n                return false;\n            }\n        } else if (arr[mid] < x) {\n            i = mid + 1;\n        } else {\n            j = mid - 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123140,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmppbunvm7a.js:28:12)\n    at Object.<anonymous> (/tmp/tmppbunvm7a.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    return count > n / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (arr[i] == x) {\n      count++;\n    }\n  }\n  if (count > n / 2) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i: number = 0;\n    let j: number = n - 1;\n    let mid: number = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] != x)) {\n            return true;\n        }\n        if (arr[mid] >= x) {\n            j = mid - 1;\n        }\n        else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfrb3msaf.js:24:12)\n    at Object.<anonymous> (/tmp/tmpfrb3msaf.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    return count > n / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] != x)) {\n            return (mid + n / 2 <= n - 1);\n        }\n        if (arr[mid] >= x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnftnnr_c.js:24:12)\n    at Object.<anonymous> (/tmp/tmpnftnnr_c.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor(n / 2);\n    while (i <= j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] === x && (mid === 0 || arr[mid - 1] !== x)) {\n            return true;\n        } else if (arr[mid] >= x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpttq0ujxv.js:24:12)\n    at Object.<anonymous> (/tmp/tmpttq0ujxv.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor(n / 2);\n    while (i <= j) {\n        if (arr[mid] === x && arr[mid + n / 2] === x) {\n            return true;\n        }\n        else if (arr[mid] < x) {\n            i = mid + 1;\n        }\n        else {\n            j = mid - 1;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123154,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) count++;\n    }\n    if (count > n / 2) return true;\n    else return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (arr[i] === x) {\n      count++;\n    }\n  }\n  if (count > n / 2) {\n    return true;\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (arr[i] === x) {\n      count++;\n    }\n  }\n  return count > n / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === x) {\n            count++;\n        }\n    }\n    return count > n / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count: number = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123140,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor(n / 2);\n    while (i < j) {\n        mid = Math.floor((i + j) / 2);\n        if (arr[mid] === x) {\n            break;\n        }\n        if (arr[mid] < x) {\n            i = mid + 1;\n        } else {\n            j = mid - 1;\n        }\n    }\n    if (arr[mid] === x) {\n        let count = 0;\n        for (let i = 0; i < n; i++) {\n            if (arr[i] === x) {\n                count++;\n            }\n        }\n        if (count > Math.floor(n / 2)) {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = 0;\n    while (i <= j) {\n        mid = Math.floor((i + j) / 2);\n        if (arr[mid] == x && (mid == n - 1 || arr[mid + 1] != x)) {\n            break;\n        }\n        if (arr[mid] <= x) {\n            i = mid + 1;\n        } else {\n            j = mid - 1;\n        }\n    }\n    if (arr[mid] == x) {\n        if ((mid + n / 2) <= (n - 1)) {\n            return arr[mid + Math.floor(n / 2)] == x;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123140,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjxm0lrej.js:33:12)\n    at Object.<anonymous> (/tmp/tmpjxm0lrej.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] != x)) {\n            return mid + n / 2 <= j;\n        }\n        if (arr[mid] >= x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzlnoobcs.js:23:12)\n    at Object.<anonymous> (/tmp/tmpzlnoobcs.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i: number = 0;\n    let j: number = n - 1;\n    let mid: number = 0;\n    while (i <= j) {\n        mid = Math.floor((i + j) / 2);\n        if (arr[mid] == x && (mid == n - 1 || x > arr[mid + 1])) {\n            break;\n        }\n        if (x > arr[mid]) {\n            i = mid + 1;\n        } else {\n            j = mid - 1;\n        }\n    }\n    if (arr[mid] == x) {\n        if ((mid + n / 2) <= (n - 1) && arr[mid + n / 2] == x) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123140,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0c7v8of5.js:33:12)\n    at Object.<anonymous> (/tmp/tmp0c7v8of5.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] === x && (mid === 0 || arr[mid - 1] !== x)) {\n            return (mid + Math.floor(n / 2)) <= (n - 1);\n        }\n        if (arr[mid] >= x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123140,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfmo4_yxo.js:24:12)\n    at Object.<anonymous> (/tmp/tmpfmo4_yxo.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] === x && (mid === 0 || arr[mid - 1] !== x)) {\n            return (mid + n / 2) <= j;\n        }\n        if (arr[mid] >= x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123140,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpwlzbx1ao.js:23:12)\n    at Object.<anonymous> (/tmp/tmpwlzbx1ao.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor(n / 2);\n    while (i <= j) {\n        if (arr[mid] === x && arr[mid + n / 2] === x) {\n            return true;\n        }\n        if (arr[mid] < x) {\n            i = mid + 1;\n        } else {\n            j = mid - 1;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123154,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor(n / 2);\n    while (i <= j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] == x) {\n            if (mid + mid <= n) {\n                return true;\n            } else {\n                j = mid - 1;\n            }\n        } else if (arr[mid] < x) {\n            i = mid + 1;\n        } else {\n            j = mid - 1;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp2gc1ifvx.js:29:12)\n    at Object.<anonymous> (/tmp/tmp2gc1ifvx.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (arr[i] === x) {\n      count++;\n    }\n  }\n  if (count > n / 2) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123140,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor(n / 2);\n    let index = -1;\n\n    while (i <= j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] === x) {\n            index = mid;\n            break;\n        } else if (arr[mid] > x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n\n    if (index === -1) {\n        return false;\n    }\n\n    if ((index + n / 2) <= (n - 1)) {\n        return true;\n    }\n\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123140,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpixgpzv31.js:31:12)\n    at Object.<anonymous> (/tmp/tmpixgpzv31.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    return count > n / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] === x && (mid === 0 || arr[mid - 1] < x)) {\n            return (mid + n / 2) <= n;\n        } else if (arr[mid] >= x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmplhuautof.js:24:12)\n    at Object.<anonymous> (/tmp/tmplhuautof.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n\n    while (i <= j) {\n        if (arr[mid] === x) {\n            if (mid + Math.floor(n / 2) <= n - 1 && arr[mid + Math.floor(n / 2)] === x) {\n                return true;\n            } else {\n                return false;\n            }\n        } else if (arr[mid] < x) {\n            i = mid + 1;\n        } else {\n            j = mid - 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123140,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuek2kxsd.js:28:12)\n    at Object.<anonymous> (/tmp/tmpuek2kxsd.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n  let i = 0;\n  let j = n - 1;\n  let mid = Math.floor((i + j) / 2);\n  while (i <= j) {\n    if (arr[mid] === x && (mid === i || arr[mid - 1] !== x)) {\n      return true;\n    } else if (arr[mid] >= x) {\n      j = mid - 1;\n    } else {\n      i = mid + 1;\n    }\n    mid = Math.floor((i + j) / 2);\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123140,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpn6fi_f61.js:24:12)\n    at Object.<anonymous> (/tmp/tmpn6fi_f61.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === x) {\n            count++;\n        }\n    }\n    return count > n / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor(n / 2);\n    while (i <= j) {\n        let mid = Math.floor((i + j) / 2);\n        if (arr[mid] == x) {\n            if (mid + mid <= n) {\n                return true;\n            }\n            else {\n                j = mid - 1;\n            }\n        }\n        else if (arr[mid] > x) {\n            j = mid - 1;\n        }\n        else {\n            i = mid + 1;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123140,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpv93elhkn.js:29:12)\n    at Object.<anonymous> (/tmp/tmpv93elhkn.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] === x && (mid === 0 || arr[mid - 1] !== x)) {\n            return (n / 2) <= (n - mid);\n        }\n        if (arr[mid] >= x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp54k9vvq9.js:24:12)\n    at Object.<anonymous> (/tmp/tmp54k9vvq9.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] === x && (mid === 0 || arr[mid - 1] !== x)) {\n            return (n / 2) <= (n - mid);\n        }\n        if (arr[mid] >= x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp54k9vvq9.js:24:12)\n    at Object.<anonymous> (/tmp/tmp54k9vvq9.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (arr[i] === x) {\n      count++;\n    }\n  }\n  return count > n / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] != x)) {\n            return (mid + n / 2) <= n;\n        }\n        if (arr[mid] >= x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp08sazmi8.js:24:12)\n    at Object.<anonymous> (/tmp/tmp08sazmi8.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (arr[i] == x) {\n      count++;\n    }\n  }\n  if (count > n / 2) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] != x)) {\n            return true;\n        }\n        if (arr[mid] >= x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpvktguhj8.js:24:12)\n    at Object.<anonymous> (/tmp/tmpvktguhj8.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (arr[i] === x) {\n      count++;\n    }\n  }\n  if (count > n / 2) {\n    return true;\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i: number = 0;\n    let j: number = n - 1;\n    let mid: number = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] != x)) {\n            return (mid + (n / 2) <= n - 1) ? true : false;\n        }\n        else if (arr[mid] >= x) {\n            j = mid - 1;\n        }\n        else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmph0bwqlu1.js:24:12)\n    at Object.<anonymous> (/tmp/tmph0bwqlu1.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i: number = 0;\n    let j: number = n - 1;\n    let mid: number = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] == x && (mid == 0 || x > arr[mid - 1])) {\n            break;\n        }\n        else if (x > arr[mid]) {\n            i = mid + 1;\n        }\n        else {\n            j = mid - 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    if ((mid + n / 2 <= n - 1) && arr[mid + n / 2] == x) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpatv62qyt.js:28:12)\n    at Object.<anonymous> (/tmp/tmpatv62qyt.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] == x && (mid == n - 1 || arr[mid + 1] != x)) {\n            return true;\n        }\n        if (arr[mid] <= x) {\n            i = mid + 1;\n        } else {\n            j = mid - 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpccog4pnk.js:24:12)\n    at Object.<anonymous> (/tmp/tmpccog4pnk.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor(n / 2);\n    while (i < j) {\n        if (arr[mid] == x && arr[mid + 1] != x) {\n            return true;\n        }\n        else if (arr[mid] >= x) {\n            j = mid - 1;\n        }\n        else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    if (arr[mid] == x) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo4de1ys6.js:27:12)\n    at Object.<anonymous> (/tmp/tmpo4de1ys6.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] === x && (mid === 0 || arr[mid - 1] !== x)) {\n            return (n - mid) > (n / 2);\n        }\n        if (arr[mid] >= x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmprhw1g98m.js:24:12)\n    at Object.<anonymous> (/tmp/tmprhw1g98m.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === x) {\n            count++;\n        }\n    }\n    return count > n / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] === x) {\n            if (mid + n / 2 <= n - 1) {\n                return arr[mid + n / 2] === x;\n            } else {\n                return true;\n            }\n        } else if (arr[mid] < x) {\n            i = mid + 1;\n        } else {\n            j = mid - 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === x) {\n            count++;\n        }\n    }\n    return count > n / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor(n / 2);\n    while (i < j) {\n        if (arr[mid] == x && arr[mid + 1] != x) {\n            return true;\n        }\n        else if (arr[mid] < x) {\n            i = mid + 1;\n        }\n        else {\n            j = mid - 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpeasq36da.js:23:12)\n    at Object.<anonymous> (/tmp/tmpeasq36da.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (arr[i] === x) {\n      count++;\n    }\n  }\n  if (count > n / 2) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123140,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] == x && (mid == n - 1 || arr[mid + 1] != x)) {\n            return true;\n        }\n        if (arr[mid] <= x) {\n            i = mid + 1;\n        } else {\n            j = mid - 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpccog4pnk.js:24:12)\n    at Object.<anonymous> (/tmp/tmpccog4pnk.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (arr[i] === x) {\n      count++;\n    }\n  }\n  if (count > n / 2) {\n    return true;\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    return count > n / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] != x)) {\n            return (n / 2) <= (mid + 1);\n        } else if (x <= arr[mid]) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpb59lnyhw.js:23:12)\n    at Object.<anonymous> (/tmp/tmpb59lnyhw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === x) {\n            count++;\n        }\n    }\n    return count > n / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor(n / 2);\n    while (i < j) {\n        if (arr[mid] == x && arr[mid + 1] != x) {\n            return true;\n        }\n        else if (arr[mid] >= x) {\n            j = mid - 1;\n        }\n        else if (arr[mid] < x) {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpp08e26hs.js:23:12)\n    at Object.<anonymous> (/tmp/tmpp08e26hs.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n    while (i < j) {\n        if (arr[mid] == x && arr[mid + 1] != x) {\n            return true;\n        }\n        if (arr[mid] >= x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpe_syha3m.js:23:12)\n    at Object.<anonymous> (/tmp/tmpe_syha3m.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i: number = 0;\n    let j: number = n - 1;\n    let mid: number = Math.floor(n / 2);\n    while (i < j) {\n        if (arr[mid] == x && arr[mid + n / 2] == x) {\n            return true;\n        }\n        else if (x > arr[mid]) {\n            i = mid + 1;\n        }\n        else {\n            j = mid - 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpwt9ymyxe.js:23:12)\n    at Object.<anonymous> (/tmp/tmpwt9ymyxe.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === x) {\n            count++;\n        }\n    }\n    return count > n / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === x) {\n            count++;\n        }\n    }\n    return count > n / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor(n / 2);\n    while (i <= j) {\n        mid = Math.floor((i + j) / 2);\n        if (arr[mid] == x) {\n            break;\n        }\n        if (arr[mid] < x) {\n            i = mid + 1;\n        } else {\n            j = mid - 1;\n        }\n    }\n    if (arr[mid] == x) {\n        if (mid + n / 2 <= n - 1 && arr[mid + n / 2] == x) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnvz9_9nl.js:33:12)\n    at Object.<anonymous> (/tmp/tmpnvz9_9nl.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (arr[i] === x) {\n      count++;\n    }\n  }\n  return count > n / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] == x && (mid == 0 || arr[mid - 1] != x)) {\n            return (n / 2) <= (n - mid);\n        } else if (arr[mid] >= x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp98yrjdyq.js:24:12)\n    at Object.<anonymous> (/tmp/tmp98yrjdyq.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] === x && (mid === 0 || arr[mid - 1] !== x)) {\n            return (mid + n / 2) <= j;\n        } else if (arr[mid] >= x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8w9_7y3h.js:23:12)\n    at Object.<anonymous> (/tmp/tmp8w9_7y3h.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] === x && (mid === 0 || arr[mid - 1] !== x)) {\n            return true;\n        }\n        if (arr[mid] >= x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123143,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpjguvtwt6.js:24:12)\n    at Object.<anonymous> (/tmp/tmpjguvtwt6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] === x && (mid === 0 || arr[mid - 1] < x)) {\n            return (mid + n / 2) <= n;\n        } else if (arr[mid] >= x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmplhuautof.js:24:12)\n    at Object.<anonymous> (/tmp/tmplhuautof.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === x) {\n            count++;\n        }\n    }\n    return count > n / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor(n / 2);\n    while (i <= j) {\n        if (arr[mid] == x && arr[mid + n / 2] == x) {\n            return true;\n        }\n        if (arr[mid] < x) {\n            i = mid + 1;\n        } else {\n            j = mid - 1;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123157,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (arr[i] == x) {\n      count++;\n    }\n  }\n  if (count > n / 2) {\n    return true;\n  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor(n / 2);\n    while (i <= j) {\n        if (arr[mid] === x && arr[mid + n / 2] === x) {\n            return true;\n        }\n        if (arr[mid] < x) {\n            i = mid + 1;\n        } else {\n            j = mid - 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzyabqq8k.js:23:12)\n    at Object.<anonymous> (/tmp/tmpzyabqq8k.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor(n / 2);\n    while (i <= j) {\n        if (arr[mid] == x && arr[mid + n / 2] == x) {\n            return true;\n        }\n        else if (arr[mid] < x) {\n            i = mid + 1;\n        }\n        else {\n            j = mid - 1;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123157,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] === x && (mid === 0 || arr[mid - 1] !== x)) {\n            return (n / 2) <= (n - mid);\n        }\n        if (arr[mid] >= x) {\n            j = mid - 1;\n        }\n        else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmppofktgax.js:24:12)\n    at Object.<anonymous> (/tmp/tmppofktgax.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === x) {\n            count++;\n        }\n    }\n    return count > n / 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let i = 0;\n    let j = n - 1;\n    let mid = Math.floor((i + j) / 2);\n    while (i <= j) {\n        if (arr[mid] === x && (mid === 0 || arr[mid - 1] !== x)) {\n            return (n / 2) <= (n - mid);\n        }\n        if (arr[mid] >= x) {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n        mid = Math.floor((i + j) / 2);\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp54k9vvq9.js:24:12)\n    at Object.<anonymous> (/tmp/tmp54k9vvq9.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunction is_majority(arr: number[], n: number, x: number): boolean {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            count++;\n        }\n    }\n    if (count > n / 2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_majority;\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);\n  assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);\n  assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);\n  assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);\n}\n\ntest();",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}