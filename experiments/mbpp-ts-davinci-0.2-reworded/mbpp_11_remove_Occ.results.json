{
  "name": "mbpp_11_remove_Occ",
  "language": "ts",
  "prompt": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = \"\";\n    let s2: string = \"\";\n    let s3: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] != ch) {\n            s1 = s1 + s[i];\n        }\n    }\n    for (let i = s1.length - 1; i >= 0; i--) {\n        if (s1[i] != ch) {\n            s2 = s2 + s1[i];\n        }\n    }\n    for (let i = s2.length - 1; i >= 0; i--) {\n        s3 = s3 + s2[i];\n    }\n    return s3;\n}\nconsole.log(remove_Occ(\"python\", \"p\"));\nconsole.log(remove_Occ(\"python\", \"n\"));\nconsole.log(remove_Occ(\"python\", \"t\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510492,
      "stdout": "ython\npytho\npyhon\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let res: string = \"\";\n    let flag: boolean = false;\n    for (i = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            flag = true;\n            break;\n        }\n    }\n    if (flag) {\n        for (j = i + 1; j < s.length; j++) {\n            if (s[j] == ch) {\n                break;\n            }\n        }\n        for (k = 0; k < s.length; k++) {\n            if (k != i && k != j) {\n                res = res + s[k];\n            }\n        }\n    }\n    else {\n        res = s;\n    }\n    return res;\n}\nconsole.log(remove_Occ(\"hello\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "heo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index: number = s.indexOf(ch);\n    let index2: number = s.lastIndexOf(ch);\n    let s1: string = s.slice(0, index) + s.slice(index + 1);\n    let s2: string = s1.slice(0, index2) + s1.slice(index2 + 1);\n    return s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510492,
      "stdout": "w3esoure\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmp20v4klag.js:13:12)\n    at Object.<anonymous> (/tmp/tmp20v4klag.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var i: number;\n    var j: number;\n    var k: number;\n    var l: number;\n    var m: number;\n    var n: number;\n    var o: number;\n    var p: number;\n    var q: number;\n    var r: number;\n    var t: number;\n    var u: number;\n    var v: number;\n    var w: number;\n    var x: number;\n    var y: number;\n    var z: number;\n    var a: number;\n    var b: number;\n    var c: number;\n    var d: number;\n    var e: number;\n    var f: number;\n    var g: number;\n    var h: number;\n    var i: number;\n    var j: number;\n    var k: number;\n    var l: number;\n    var m: number;\n    var n: number;\n    var o: number;\n    var p: number;\n    var q: number;\n    var r: number;\n    var t: number;\n    var u: number;\n    var v: number;\n    var w: number;\n    var x: number;\n    var y: number;\n    var z: number;\n    var a: number;\n    var b: number;\n    var c: number;\n    var d: number;\n    var e: number;\n    var f: number;\n    var g: number;\n    var h: number;\n    var i: number;\n    var j: number;\n    var k: number;\n    var l: number;\n    var m: number;\n    var n: number;\n    var o: number;\n    var p: number;\n    var q: number;\n    var r: number;\n    var t: number;\n    var u: number;\n    var v: number;\n    var w: number;\n    var x: number;\n    var y: number;\n    var z: number;\n    var a: number;\n    var b: number;\n    var c: number;\n    var d: number;\n    var e: number;\n    var f: number;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "../../../../tmp/tmpzq3ocy19.ts(88,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index: number = s.indexOf(ch);\n    let index2: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, index);\n    let s2: string = s.substring(index + 1, index2);\n    let s3: string = s.substring(index2 + 1, s.length);\n    return s1 + s2 + s3;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let index2 = s.lastIndexOf(ch);\n    let s1 = s.slice(0, index);\n    let s2 = s.slice(index + 1, index2);\n    let s3 = s.slice(index2 + 1);\n    return s1 + s2 + s3;\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "Pthon\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, '');\n    let s2: string = s1.replace(ch, '');\n    return s2;\n}\n\nconsole.log(remove_Occ('w3resource', 'r'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    if (index > -1) {\n        s = s.substring(0, index) + s.substring(index + 1);\n    }\n    let index1 = s.lastIndexOf(ch);\n    if (index1 > -1) {\n        s = s.substring(0, index1) + s.substring(index1 + 1);\n    }\n    return s;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\nconsole.log(remove_Occ(\"w3resource\", \"e\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510492,
      "stdout": "w3esouce\nw3rsourc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = \"\";\n    let s2: string = \"\";\n    let s3: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] != ch) {\n            s1 = s1 + s[i];\n        }\n    }\n    for (let i = s1.length - 1; i >= 0; i--) {\n        if (s1[i] != ch) {\n            s2 = s2 + s1[i];\n        }\n    }\n    for (let i = s2.length - 1; i >= 0; i--) {\n        s3 = s3 + s2[i];\n    }\n    return s3;\n}\nconsole.log(remove_Occ(\"python\", \"p\"));\nconsole.log(remove_Occ(\"python\", \"n\"));\nconsole.log(remove_Occ(\"python\", \"o\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510492,
      "stdout": "ython\npytho\npythn\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = \"\";\n    let s2: string = \"\";\n    let s3: string = \"\";\n    let s4: string = \"\";\n    let s5: string = \"\";\n    let s6: string = \"\";\n    let s7: string = \"\";\n    let s8: string = \"\";\n    let s9: string = \"\";\n    let s10: string = \"\";\n    let s11: string = \"\";\n    let s12: string = \"\";\n    let s13: string = \"\";\n    let s14: string = \"\";\n    let s15: string = \"\";\n    let s16: string = \"\";\n    let s17: string = \"\";\n    let s18: string = \"\";\n    let s19: string = \"\";\n    let s20: string = \"\";\n    let s21: string = \"\";\n    let s22: string = \"\";\n    let s23: string = \"\";\n    let s24: string = \"\";\n    let s25: string = \"\";\n    let s26: string = \"\";\n    let s27: string = \"\";\n    let s28: string = \"\";\n    let s29: string = \"\";\n    let s30: string = \"\";\n    let s31: string = \"\";\n    let s32: string = \"\";\n    let s33: string = \"\";\n    let s34: string = \"\";\n    let s35: string = \"\";\n    let s36: string = \"\";\n    let s37: string = \"\";\n    let s38: string = \"\";\n    let s39: string = \"\";\n    let s40: string = \"\";\n    let s41: string = \"\";\n    let s42: string = \"\";\n    let s43: string = \"\";\n    let s44: string = \"\";\n    let s45: string = \"\";\n    let s46: string = \"\";\n    let s47: string = \"\";\n    let s48: string = \"\";\n    let s49: string = \"\";\n    let s50: string = \"\";\n    let s51: string = \"\";\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "../../../../tmp/tmpwv8pc6pe.ts(66,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let result: string = \"\";\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            flag = true;\n            break;\n        }\n    }\n    if (flag == true) {\n        for (j = i + 1; j < s.length; j++) {\n            if (s[j] == ch) {\n                k = j;\n            }\n        }\n        for (i = 0; i < s.length; i++) {\n            if (i != k && i != k - 1) {\n                result = result + s[i];\n            }\n        }\n    }\n    else {\n        result = s;\n    }\n    return result;\n}\nconsole.log(remove_Occ(\"hello\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "heo\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'abc'\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmphg854ehd.js:36:12)\n    at Object.<anonymous> (/tmp/tmphg854ehd.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'abc',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] != ch) {\n            s1 += s[i];\n        }\n    }\n    return s1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    let s1 = s.substring(0, i);\n    let s2 = s.substring(i + 1, j);\n    let s3 = s.substring(j + 1, s.length);\n    return s1 + s2 + s3;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510492,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = 0;\n    let j = s.length - 1;\n    let res = \"\";\n    while (i < s.length) {\n        if (s[i] != ch) {\n            res += s[i];\n        }\n        i++;\n    }\n    while (j > 0) {\n        if (s[j] != ch) {\n            res += s[j];\n        }\n        j--;\n    }\n    return res;\n}\nconsole.log(remove_Occ(\"hello\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510492,
      "stdout": "heooe\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'heooe'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpt396l298.js:24:12)\n    at Object.<anonymous> (/tmp/tmpt396l298.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'heooe',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    let s1 = s.slice(0, i) + s.slice(i + 1, j) + s.slice(j + 1);\n    return s1;\n}\nconsole.log(remove_Occ(\"python\", \"p\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "ython\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    let s1 = s.substring(0, i);\n    let s2 = s.substring(j + 1);\n    return s1 + s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510492,
      "stdout": "w3ce\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmp4lo0g4zq.js:14:12)\n    at Object.<anonymous> (/tmp/tmp4lo0g4zq.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let new_str: string = \"\";\n    let first_occ: number = s.indexOf(ch);\n    let last_occ: number = s.lastIndexOf(ch);\n    if (first_occ == -1) {\n        return s;\n    }\n    else {\n        new_str = s.substring(0, first_occ) + s.substring(first_occ + 1);\n        new_str = new_str.substring(0, last_occ - 1) + new_str.substring(last_occ);\n        return new_str;\n    }\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510492,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let res: string = s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1);\n    return res;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510492,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let index2 = s.lastIndexOf(ch);\n    let s1 = s.substring(0, index);\n    let s2 = s.substring(index + 1, index2);\n    let s3 = s.substring(index2 + 1, s.length);\n    return s1 + s2 + s3;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = 0;\n    let str: string = \"\";\n    let str1: string = \"\";\n    let str2: string = \"\";\n    for (i = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            str1 = s.substring(i + 1);\n            break;\n        }\n    }\n    for (j = str1.length - 1; j >= 0; j--) {\n        if (str1[j] == ch) {\n            str2 = str1.substring(0, j);\n            break;\n        }\n    }\n    str = s.substring(0, i) + str2;\n    return str;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "w3esou\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'he'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmphhg5zbz3.js:27:12)\n    at Object.<anonymous> (/tmp/tmphhg5zbz3.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'he',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let index2 = s.lastIndexOf(ch);\n    let s1 = s.substring(0, index);\n    let s2 = s.substring(index + 1, index2);\n    let s3 = s.substring(index2 + 1);\n    return s1 + s2 + s3;\n}\nconsole.log(remove_Occ(\"Python\", \"n\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123189,
      "stdout": "Python\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let n: number = s.length;\n    let i: number = 0;\n    let j: number = n - 1;\n    let k: number = 0;\n    let ch1: string = ch.charAt(0);\n    let ch2: string = ch.charAt(1);\n    let s1: string = \"\";\n    let s2: string = \"\";\n    let s3: string = \"\";\n    let s4: string = \"\";\n    let s5: string = \"\";\n    let s6: string = \"\";\n    let s7: string = \"\";\n    let s8: string = \"\";\n    let s9: string = \"\";\n    let s10: string = \"\";\n    let s11: string = \"\";\n    let s12: string = \"\";\n    let s13: string = \"\";\n    let s14: string = \"\";\n    let s15: string = \"\";\n    let s16: string = \"\";\n    let s17: string = \"\";\n    let s18: string = \"\";\n    let s19: string = \"\";\n    let s20: string = \"\";\n    let s21: string = \"\";\n    let s22: string = \"\";\n    let s23: string = \"\";\n    let s24: string = \"\";\n    let s25: string = \"\";\n    let s26: string = \"\";\n    let s27: string = \"\";\n    let s28: string = \"\";\n    let s29: string = \"\";\n    let s30: string = \"\";\n    let s31: string = \"\";\n    let s32: string = \"\";\n    let s33: string = \"\";\n    let s34: string = \"\";\n    let s35: string = \"\";\n    let s36: string = \"\";\n    let s37: string = \"\";\n    let s38: string = \"\";\n    let s39: string = \"\";\n    let s40: string = \"\";\n    let s41: string = \"\";\n    let s42: string = \"\";\n    let s43: string = \"\";\n    let s44: string = \"\";\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123188,
      "stdout": "../../../../tmp/tmpi7v3zdik.ts(65,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let lastIndex = s.lastIndexOf(ch);\n    let result = s.slice(0, index) + s.slice(index + 1, lastIndex) + s.slice(lastIndex + 1);\n    return result;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123189,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, i);\n    let s2: string = s.substring(j + 1);\n    return s1 + s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123189,
      "stdout": "w3ce\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmpe53_m3sf.js:14:12)\n    at Object.<anonymous> (/tmp/tmpe53_m3sf.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let str = s.replace(ch, \"\");\n    return str;\n}\nconsole.log(remove_Occ(\"w3resource\", \"e\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123189,
      "stdout": "w3rsource\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helo'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpu6sfmzph.js:10:12)\n    at Object.<anonymous> (/tmp/tmpu6sfmzph.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helo',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let lastIndex = s.lastIndexOf(ch);\n    let result = s.slice(0, index) + s.slice(index + 1, lastIndex) + s.slice(lastIndex + 1);\n    return result;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123189,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let f = s.indexOf(ch);\n    let l = s.lastIndexOf(ch);\n    let res = s.substring(0, f) + s.substring(f + 1, l) + s.substring(l + 1);\n    return res;\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123189,
      "stdout": "Python\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, i);\n    let s2: string = s.substring(j + 1, s.length);\n    let s3: string = s1 + s2;\n    return s3;\n}\nconsole.log(remove_Occ(\"hello\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123189,
      "stdout": "heo\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmpoh3avpo9.js:15:12)\n    at Object.<anonymous> (/tmp/tmpoh3avpo9.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1);\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123189,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\n\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123189,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index: number = s.indexOf(ch);\n    let index2: number = s.lastIndexOf(ch);\n    if (index == -1) {\n        return s;\n    }\n    else {\n        return s.slice(0, index) + s.slice(index + 1, index2) + s.slice(index2 + 1);\n    }\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\nconsole.log(remove_Occ(\"w3resource\", \"w\"));\nconsole.log(remove_Occ(\"w3resource\", \"e\"));\nconsole.log(remove_Occ(\"w3resource\", \"w3\"));\nconsole.log(remove_Occ(\"w3resource\", \"3\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123189,
      "stdout": "w3esouce\n3resource\nw3rsourc\n3resource\nwresource\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"e\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123189,
      "stdout": "w3rsourc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let a = s.indexOf(ch);\n    let b = s.lastIndexOf(ch);\n    let c = s.substring(0, a) + s.substring(a + 1, b) + s.substring(b + 1, s.length);\n    return c;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123189,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, i) + s.substring(i + 1, s.length);\n    let s2: string = s1.substring(0, j) + s1.substring(j + 1, s1.length);\n    return s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123189,
      "stdout": "w3esoure\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmppxxh6dob.js:13:12)\n    at Object.<anonymous> (/tmp/tmppxxh6dob.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index: number = s.indexOf(ch);\n    let index1: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, index);\n    let s2: string = s.substring(index + 1, index1);\n    let s3: string = s.substring(index1 + 1);\n    return s1 + s2 + s3;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let index2 = s.lastIndexOf(ch);\n    let res = s.substring(0, index) + s.substring(index + 1, index2) + s.substring(index2 + 1);\n    return res;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123189,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, i);\n    let s2: string = s.substring(j + 1);\n    return s1 + s2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmpqon5bh3n.js:13:12)\n    at Object.<anonymous> (/tmp/tmpqon5bh3n.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let n: number = s.length;\n    let i: number = 0;\n    let j: number = n - 1;\n    let res: string = \"\";\n    while (i < n && s[i] != ch) {\n        res += s[i];\n        i++;\n    }\n    while (j >= 0 && s[j] != ch) {\n        j--;\n    }\n    while (i < j) {\n        res += s[i];\n        i++;\n    }\n    return res;\n}\nconsole.log(remove_Occ(\"geeksforgeeks\", \"e\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123189,
      "stdout": "geeksforge\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmp0mlm_tl6.js:24:12)\n    at Object.<anonymous> (/tmp/tmp0mlm_tl6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let reg = new RegExp(ch, \"g\");\n    return s.replace(reg, \"\");\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123189,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let new_str: string = \"\";\n    let first_occ: number = s.indexOf(ch);\n    let last_occ: number = s.lastIndexOf(ch);\n    if (first_occ == -1) {\n        return s;\n    }\n    new_str = s.substring(0, first_occ) + s.substring(first_occ + 1, last_occ) + s.substring(last_occ + 1);\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let index2 = s.lastIndexOf(ch);\n    let str = s.slice(0, index) + s.slice(index + 1, index2) + s.slice(index2 + 1);\n    return str;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123189,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let res: string = \"\";\n    let first: boolean = true;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] == ch && first) {\n            first = false;\n            continue;\n        }\n        res += s[i];\n    }\n    return res.substring(0, res.length - 1);\n}\nconsole.log(remove_Occ(\"Python\", \"n\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123189,
      "stdout": "Pyth\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpr9rmayz5.js:18:12)\n    at Object.<anonymous> (/tmp/tmpr9rmayz5.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = 0;\n    let str: string = \"\";\n    let str1: string = \"\";\n    let str2: string = \"\";\n    for (i = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            str1 = s.slice(0, i);\n            str2 = s.slice(i + 1, s.length);\n            str = str1 + str2;\n            break;\n        }\n    }\n    for (j = str.length - 1; j >= 0; j--) {\n        if (str[j] == ch) {\n            str1 = str.slice(0, j);\n            str2 = str.slice(j + 1, str.length);\n            str = str1 + str2;\n            break;\n        }\n    }\n    return str;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123189,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let reg = new RegExp(ch, \"g\");\n    return s.replace(reg, \"\");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let res: string = \"\";\n    for (i = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            break;\n        }\n    }\n    for (j = i + 1; j < s.length; j++) {\n        if (s[j] == ch) {\n            break;\n        }\n    }\n    for (k = 0; k < s.length; k++) {\n        if (k != i && k != j) {\n            res = res + s[k];\n        }\n    }\n    return res;\n}\nconsole.log(remove_Occ(\"hello\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123191,
      "stdout": "heo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let first_Occ: number = s.indexOf(ch);\n    let last_Occ: number = s.lastIndexOf(ch);\n    let s1: string = s.slice(0, first_Occ) + s.slice(first_Occ + 1, last_Occ) + s.slice(last_Occ + 1);\n    return s1;\n}\n\nlet s: string = \"Python\";\nlet ch: string = \"y\";\nconsole.log(remove_Occ(s, ch));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123191,
      "stdout": "Pthon\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var i: number = 0;\n    var j: number = 0;\n    var temp: string = \"\";\n    var temp1: string = \"\";\n    var temp2: string = \"\";\n    for (i = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            temp = s.slice(i + 1);\n            break;\n        }\n    }\n    for (j = temp.length - 1; j >= 0; j--) {\n        if (temp[j] == ch) {\n            temp1 = temp.slice(0, j);\n            break;\n        }\n    }\n    temp2 = s.replace(temp1, \"\");\n    return temp2;\n}\nvar str: string = \"Hello World\";\nvar ch: string = \"l\";\nconsole.log(remove_Occ(str, ch));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123192,
      "stdout": "Helld\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpg8u5g83s.js:29:12)\n    at Object.<anonymous> (/tmp/tmpg8u5g83s.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = s.length - 1;\n    let s1: string = \"\";\n    let s2: string = \"\";\n    while (s[i] != ch) {\n        s1 = s1 + s[i];\n        i++;\n    }\n    while (s[j] != ch) {\n        s2 = s[j] + s2;\n        j--;\n    }\n    return s1 + s2;\n}\nconsole.log(remove_Occ(\"hello world\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123192,
      "stdout": "hed\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmp0gncq49y.js:22:12)\n    at Object.<anonymous> (/tmp/tmp0gncq49y.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let first_Occ = s.indexOf(ch);\n    let last_Occ = s.lastIndexOf(ch);\n    let s1 = s.substring(0, first_Occ) + s.substring(first_Occ + 1);\n    let s2 = s1.substring(0, last_Occ) + s1.substring(last_Occ + 1);\n    return s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123192,
      "stdout": "w3esoure\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpj2_yxx_6.js:13:12)\n    at Object.<anonymous> (/tmp/tmpj2_yxx_6.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let str: string = \"\";\n    for (i = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            j = i;\n            break;\n        }\n    }\n    for (i = s.length - 1; i >= 0; i--) {\n        if (s[i] == ch) {\n            k = i;\n            break;\n        }\n    }\n    for (i = 0; i < s.length; i++) {\n        if (i == j) {\n            continue;\n        }\n        else if (i == k) {\n            continue;\n        }\n        else {\n            str = str + s[i];\n        }\n    }\n    return str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var i: number = 0;\n    var j: number = 0;\n    var str: string = \"\";\n    var ch1: string = \"\";\n    var ch2: string = \"\";\n    for (i = 0; i < s.length; i++) {\n        if (s.charAt(i) == ch) {\n            ch1 = s.charAt(i);\n            break;\n        }\n    }\n    for (j = s.length - 1; j >= 0; j--) {\n        if (s.charAt(j) == ch) {\n            ch2 = s.charAt(j);\n            break;\n        }\n    }\n    for (i = 0; i < s.length; i++) {\n        if (s.charAt(i) != ch1 && s.charAt(i) != ch2) {\n            str = str + s.charAt(i);\n        }\n    }\n    return str;\n}\nvar str: string = \"hello world\";\nvar ch: string = \"l\";\nconsole.log(remove_Occ(str, ch));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123192,
      "stdout": "heo word\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = \"\";\n    for (let i: number = 0; i < s.length; i++) {\n        if (s[i] != ch) {\n            s1 = s1 + s[i];\n        }\n    }\n    return s1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let first = s.indexOf(ch);\n    let last = s.lastIndexOf(ch);\n    let res = s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1);\n    return res;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123192,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let index2 = s.lastIndexOf(ch);\n    let s1 = s.substring(0, index);\n    let s2 = s.substring(index + 1, index2);\n    let s3 = s.substring(index2 + 1, s.length);\n    return s1 + s2 + s3;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123192,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = 0;\n    let n: number = s.length;\n    let res: string = \"\";\n    for (i = 0; i < n; i++) {\n        if (s[i] != ch) {\n            res = res + s[i];\n        }\n    }\n    return res;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123192,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let n: number = s.length;\n    let i: number = 0;\n    let j: number = n - 1;\n    let res: string = \"\";\n    while (i < n) {\n        if (s[i] != ch) {\n            res += s[i];\n        }\n        i++;\n    }\n    while (j >= 0) {\n        if (s[j] != ch) {\n            res += s[j];\n        }\n        j--;\n    }\n    return res;\n}\nconsole.log(remove_Occ(\"hello\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123192,
      "stdout": "heooeh\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'heooeh'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpa7mjr_6_.js:25:12)\n    at Object.<anonymous> (/tmp/tmpa7mjr_6_.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'heooeh',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let res: string = \"\";\n    let f: boolean = false;\n    for (let i: number = 0; i < s.length; i++) {\n        if (s[i] == ch && !f) {\n            f = true;\n            continue;\n        }\n        res += s[i];\n    }\n    if (res[res.length - 1] == ch) {\n        res = res.slice(0, res.length - 1);\n    }\n    return res;\n}\nconsole.log(remove_Occ(\"Python\", \"n\"));\nconsole.log(remove_Occ(\"Python\", \"y\"));\nconsole.log(remove_Occ(\"Python\", \"P\"));\nconsole.log(remove_Occ(\"Python\", \"p\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123192,
      "stdout": "Pytho\nPthon\nython\nPython\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helo'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpl34gv30y.js:24:12)\n    at Object.<anonymous> (/tmp/tmpl34gv30y.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helo',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = s.length - 1;\n    let ch1: string = ch.charAt(0);\n    let ch2: string = ch.charAt(1);\n    let s1: string = \"\";\n    let s2: string = \"\";\n    let s3: string = \"\";\n    let s4: string = \"\";\n    let s5: string = \"\";\n    let s6: string = \"\";\n    let s7: string = \"\";\n    let s8: string = \"\";\n    let s9: string = \"\";\n    let s10: string = \"\";\n    let s11: string = \"\";\n    let s12: string = \"\";\n    let s13: string = \"\";\n    let s14: string = \"\";\n    let s15: string = \"\";\n    let s16: string = \"\";\n    let s17: string = \"\";\n    let s18: string = \"\";\n    let s19: string = \"\";\n    let s20: string = \"\";\n    let s21: string = \"\";\n    let s22: string = \"\";\n    let s23: string = \"\";\n    let s24: string = \"\";\n    let s25: string = \"\";\n    let s26: string = \"\";\n    let s27: string = \"\";\n    let s28: string = \"\";\n    let s29: string = \"\";\n    let s30: string = \"\";\n    let s31: string = \"\";\n    let s32: string = \"\";\n    let s33: string = \"\";\n    let s34: string = \"\";\n    let s35: string = \"\";\n    let s36: string = \"\";\n    let s37: string = \"\";\n    let s38: string = \"\";\n    let s39: string = \"\";\n    let s40: string = \"\";\n    let s41: string = \"\";\n    let s42: string = \"\";\n    let s43: string = \"\";\n    let s44: string = \"\";\n    let s45: string = \"\";\n    let s46: string = \"\";\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123191,
      "stdout": "../../../../tmp/tmp407d8kmq.ts(64,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123192,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let str: string = \"\";\n    for (i = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            break;\n        }\n    }\n    for (j = s.length - 1; j >= 0; j--) {\n        if (s[j] == ch) {\n            break;\n        }\n    }\n    for (k = 0; k < s.length; k++) {\n        if (k != i && k != j) {\n            str = str + s[k];\n        }\n    }\n    return str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let first = s.indexOf(ch);\n    let last = s.lastIndexOf(ch);\n    let s1 = s.substring(0, first);\n    let s2 = s.substring(first + 1, last);\n    let s3 = s.substring(last + 1);\n    return s1 + s2 + s3;\n}\nconsole.log(remove_Occ(\"Python\", \"n\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123192,
      "stdout": "Python\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let n: number = s.length;\n    let i: number = 0;\n    let j: number = n - 1;\n    let res: string = \"\";\n    while (i < n && s[i] != ch) {\n        res += s[i];\n        i++;\n    }\n    i++;\n    while (i < n && s[i] != ch) {\n        res += s[i];\n        i++;\n    }\n    while (j > 0 && s[j] != ch) {\n        j--;\n    }\n    while (j > 0 && s[j] != ch) {\n        j--;\n    }\n    while (j > 0) {\n        res += s[j];\n        j--;\n    }\n    return res;\n}\nconsole.log(remove_Occ(\"geeksforgeeks\", \"e\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123192,
      "stdout": "geegrofskee\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helle'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmp145796a6.js:32:12)\n    at Object.<anonymous> (/tmp/tmp145796a6.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helle',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let first = s.indexOf(ch);\n    let last = s.lastIndexOf(ch);\n    let str = s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1);\n    return str;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123192,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    if (i == -1) {\n        return s;\n    } else {\n        return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1);\n    }\n}\nconsole.log(remove_Occ(\"hello\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123192,
      "stdout": "heo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let reg = new RegExp(ch, 'g');\n    let str = s.replace(reg, '');\n    return str;\n}\nconsole.log(remove_Occ('w3resource.com', 'o'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123192,
      "stdout": "w3resurce.cm\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = s.length - 1;\n    let flag: boolean = false;\n    let flag1: boolean = false;\n    let str: string = \"\";\n    while (i < s.length) {\n        if (s[i] == ch) {\n            flag = true;\n            break;\n        }\n        i++;\n    }\n    while (j >= 0) {\n        if (s[j] == ch) {\n            flag1 = true;\n            break;\n        }\n        j--;\n    }\n    if (flag == true && flag1 == true) {\n        for (let k = 0; k < s.length; k++) {\n            if (k != i && k != j) {\n                str = str + s[k];\n            }\n        }\n        return str;\n    }\n    else {\n        return s;\n    }\n}\nconsole.log(remove_Occ(\"hello\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123192,
      "stdout": "heo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = 0;\n    let str: string = \"\";\n    for (i = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            break;\n        }\n    }\n    for (j = s.length - 1; j >= 0; j--) {\n        if (s[j] == ch) {\n            break;\n        }\n    }\n    str = s.slice(i + 1, j);\n    return str;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123192,
      "stdout": "esou\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmp6yzh47ky.js:23:12)\n    at Object.<anonymous> (/tmp/tmp6yzh47ky.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index: number;\n    index = s.indexOf(ch);\n    s = s.slice(0, index) + s.slice(index + 1);\n    index = s.lastIndexOf(ch);\n    s = s.slice(0, index) + s.slice(index + 1);\n    return s;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123194,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = s.length - 1;\n    let res: string = \"\";\n    while (i < s.length) {\n        if (s[i] == ch) {\n            i++;\n            break;\n        }\n        res += s[i];\n        i++;\n    }\n    while (j >= 0) {\n        if (s[j] == ch) {\n            j--;\n            break;\n        }\n        res = s[j] + res;\n        j--;\n    }\n    while (i <= j) {\n        res += s[i];\n        i++;\n    }\n    return res;\n}\nconsole.log(remove_Occ(\"hello\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123194,
      "stdout": "ohe\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ohe'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpu7zh260m.js:32:12)\n    at Object.<anonymous> (/tmp/tmpu7zh260m.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ohe',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var i: number = s.indexOf(ch);\n    var j: number = s.lastIndexOf(ch);\n    if (i == -1) {\n        return s;\n    }\n    else {\n        return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123194,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1);\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123189,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = \"\";\n    let s2: string = \"\";\n    let s3: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            s1 = s.substring(0, i);\n            s2 = s.substring(i + 1, s.length);\n            break;\n        }\n    }\n    for (let i = s2.length - 1; i >= 0; i--) {\n        if (s2[i] == ch) {\n            s3 = s2.substring(0, i);\n            break;\n        }\n    }\n    return s1 + s3;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123194,
      "stdout": "w3esou\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'he'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpanll18d8.js:25:12)\n    at Object.<anonymous> (/tmp/tmpanll18d8.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'he',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var i: number = 0;\n    var j: number = 0;\n    var k: number = 0;\n    var new_str: string = \"\";\n    for (i = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            break;\n        }\n    }\n    for (j = i + 1; j < s.length; j++) {\n        if (s[j] != ch) {\n            new_str = new_str + s[j];\n        }\n        else {\n            break;\n        }\n    }\n    for (k = j + 1; k < s.length; k++) {\n        new_str = new_str + s[k];\n    }\n    return new_str;\n}\nvar s: string = \"Hello World\";\nvar ch: string = \"l\";\nconsole.log(remove_Occ(s, ch));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123194,
      "stdout": "o World\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'o'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmp09ujx171.js:31:12)\n    at Object.<anonymous> (/tmp/tmp09ujx171.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let first = s.indexOf(ch);\n    let last = s.lastIndexOf(ch);\n    let newStr = s.slice(0, first) + s.slice(first + 1, last) + s.slice(last + 1);\n    return newStr;\n}\nconsole.log(remove_Occ(\"python\", \"p\"));\nconsole.log(remove_Occ(\"python\", \"n\"));\nconsole.log(remove_Occ(\"python\", \"o\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123194,
      "stdout": "ython\npytho\npythn\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var i: number = 0;\n    var j: number = 0;\n    var k: number = 0;\n    var s1: string = \"\";\n    var s2: string = \"\";\n    var s3: string = \"\";\n    var s4: string = \"\";\n    var s5: string = \"\";\n    var s6: string = \"\";\n    var s7: string = \"\";\n    var s8: string = \"\";\n    var s9: string = \"\";\n    var s10: string = \"\";\n    var s11: string = \"\";\n    var s12: string = \"\";\n    var s13: string = \"\";\n    var s14: string = \"\";\n    var s15: string = \"\";\n    var s16: string = \"\";\n    var s17: string = \"\";\n    var s18: string = \"\";\n    var s19: string = \"\";\n    var s20: string = \"\";\n    var s21: string = \"\";\n    var s22: string = \"\";\n    var s23: string = \"\";\n    var s24: string = \"\";\n    var s25: string = \"\";\n    var s26: string = \"\";\n    var s27: string = \"\";\n    var s28: string = \"\";\n    var s29: string = \"\";\n    var s30: string = \"\";\n    var s31: string = \"\";\n    var s32: string = \"\";\n    var s33: string = \"\";\n    var s34: string = \"\";\n    var s35: string = \"\";\n    var s36: string = \"\";\n    var s37: string = \"\";\n    var s38: string = \"\";\n    var s39: string = \"\";\n    var s40: string = \"\";\n    var s41: string = \"\";\n    var s42: string = \"\";\n    var s43: string = \"\";\n    var s44: string = \"\";\n    var s45: string = \"\";\n    var s46: string = \"\";\n    var s47: string = \"\";\n    var s48: string = \"\";\n    var s49\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123194,
      "stdout": "../../../../tmp/tmpoydt186b.ts(66,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let reg = new RegExp(ch, \"g\");\n    return s.replace(reg, \"\");\n}\n\nconsole.log(remove_Occ(\"w3resource\", \"e\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123195,
      "stdout": "w3rsourc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, i);\n    let s2: string = s.substring(j + 1);\n    return s1 + s2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123189,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmpqon5bh3n.js:13:12)\n    at Object.<anonymous> (/tmp/tmpqon5bh3n.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, i);\n    let s2: string = s.substring(j + 1, s.length);\n    return s1 + s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123194,
      "stdout": "w3ce\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmps9c1tcki.js:14:12)\n    at Object.<anonymous> (/tmp/tmps9c1tcki.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    let s1 = s.substring(0, i);\n    let s2 = s.substring(j + 1);\n    return s1 + s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510492,
      "stdout": "w3ce\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmp4lo0g4zq.js:14:12)\n    at Object.<anonymous> (/tmp/tmp4lo0g4zq.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let str = s.replace(ch, '');\n    return str;\n}\nconsole.log(remove_Occ('w3resource.com', 'o'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123195,
      "stdout": "w3resurce.com\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helo'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpg4bk71b7.js:10:12)\n    at Object.<anonymous> (/tmp/tmpg4bk71b7.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helo',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let index2 = s.lastIndexOf(ch);\n    let new_str = s.substring(0, index) + s.substring(index + 1, index2) + s.substring(index2 + 1);\n    return new_str;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123194,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = s.length - 1;\n    let str: string = \"\";\n    for (i = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            break;\n        }\n    }\n    for (j = s.length - 1; j >= 0; j--) {\n        if (s[j] == ch) {\n            break;\n        }\n    }\n    for (let k = 0; k < s.length; k++) {\n        if (k != i && k != j) {\n            str += s[k];\n        }\n    }\n    return str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var i = s.indexOf(ch);\n    var j = s.lastIndexOf(ch);\n    var res = s.slice(0, i) + s.slice(i + 1, j) + s.slice(j + 1);\n    return res;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123195,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = s.replace(ch, \"\");\n    let s2: string = s1.replace(ch, \"\");\n    return s2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let index2 = s.lastIndexOf(ch);\n    let s1 = s.substring(0, index);\n    let s2 = s.substring(index2 + 1);\n    return s1 + s2;\n}\n\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123195,
      "stdout": "w3ce\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmp6xx9cq8e.js:14:12)\n    at Object.<anonymous> (/tmp/tmp6xx9cq8e.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = \"\";\n    let s2: string = \"\";\n    let s3: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            s1 = s.slice(0, i);\n            s2 = s.slice(i + 1);\n            break;\n        }\n    }\n    for (let i = s2.length - 1; i >= 0; i--) {\n        if (s2[i] == ch) {\n            s3 = s2.slice(0, i);\n            break;\n        }\n    }\n    return s1 + s3;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123195,
      "stdout": "w3esou\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'he'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpc8xnl2te.js:25:12)\n    at Object.<anonymous> (/tmp/tmpc8xnl2te.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'he',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var i: number = 0;\n    var j: number = 0;\n    var temp: string = \"\";\n    var temp1: string = \"\";\n    var temp2: string = \"\";\n    var temp3: string = \"\";\n    for (i = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            temp = s.slice(i + 1);\n            break;\n        }\n    }\n    for (j = temp.length - 1; j >= 0; j--) {\n        if (temp[j] == ch) {\n            temp1 = temp.slice(0, j);\n            break;\n        }\n    }\n    temp2 = s.slice(0, i);\n    temp3 = temp2.concat(temp1);\n    return temp3;\n}\nvar str: string = \"hello world\";\nvar ch: string = \"l\";\nvar res: string = remove_Occ(str, ch);\nconsole.log(\"After removing first and last occurrence of \" + ch + \" from \" + str + \" is \" + res);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123195,
      "stdout": "After removing first and last occurrence of l from hello world is helo wor\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'he'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpuz0mlcr9.js:32:12)\n    at Object.<anonymous> (/tmp/tmpuz0mlcr9.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'he',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    return s.replace(ch, '');\n}\nconsole.log(remove_Occ('w3resource.com', 'o'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123195,
      "stdout": "w3resurce.com\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helo'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmp71cpr4g0.js:9:12)\n    at Object.<anonymous> (/tmp/tmp71cpr4g0.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helo',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1);\n}\nconsole.log(remove_Occ(\"Python\", \"o\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123195,
      "stdout": "Python\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = s.length - 1;\n    let new_str: string = \"\";\n    let c: string = ch;\n    while (s[i] != c) {\n        new_str = new_str + s[i];\n        i++;\n    }\n    while (s[j] != c) {\n        j--;\n    }\n    for (let k: number = i + 1; k < j; k++) {\n        new_str = new_str + s[k];\n    }\n    return new_str;\n}\nconsole.log(remove_Occ(\"hello world\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123195,
      "stdout": "helo wor\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'he'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmp_vvrp4yc.js:23:12)\n    at Object.<anonymous> (/tmp/tmp_vvrp4yc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'he',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var i: number;\n    var j: number;\n    var k: number;\n    var str: string = \"\";\n    var str1: string = \"\";\n    var str2: string = \"\";\n    var str3: string = \"\";\n    for (i = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            str1 = s.substring(0, i);\n            str2 = s.substring(i + 1, s.length);\n            str3 = str1 + str2;\n            break;\n        }\n    }\n    for (j = str3.length - 1; j >= 0; j--) {\n        if (str3[j] == ch) {\n            str1 = str3.substring(0, j);\n            str2 = str3.substring(j + 1, str3.length);\n            str = str1 + str2;\n            break;\n        }\n    }\n    return str;\n}\nvar s: string = \"Hello World\";\nvar ch: string = \"l\";\nconsole.log(remove_Occ(s, ch));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123195,
      "stdout": "Helo Word\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    let s1 = s.substring(0, i);\n    let s2 = s.substring(j + 1);\n    return s1 + s2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmpg7pcqzb6.js:13:12)\n    at Object.<anonymous> (/tmp/tmpg7pcqzb6.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let l: number = 0;\n    let m: number = 0;\n    let n: number = 0;\n    let str: string = \"\";\n    let str1: string = \"\";\n    let str2: string = \"\";\n    let str3: string = \"\";\n    let str4: string = \"\";\n    let str5: string = \"\";\n    let str6: string = \"\";\n    let str7: string = \"\";\n    let str8: string = \"\";\n    let str9: string = \"\";\n    let str10: string = \"\";\n    let str11: string = \"\";\n    let str12: string = \"\";\n    let str13: string = \"\";\n    let str14: string = \"\";\n    let str15: string = \"\";\n    let str16: string = \"\";\n    let str17: string = \"\";\n    let str18: string = \"\";\n    let str19: string = \"\";\n    let str20: string = \"\";\n    let str21: string = \"\";\n    let str22: string = \"\";\n    let str23: string = \"\";\n    let str24: string = \"\";\n    let str25: string = \"\";\n    let str26: string = \"\";\n    let str27: string = \"\";\n    let str28: string = \"\";\n    let str29: string = \"\";\n    let str30: string = \"\";\n    let str31: string = \"\";\n    let str32: string = \"\";\n    let str33: string = \"\";\n    let str34: string = \"\";\n    let str35: string = \"\";\n    let str36: string = \"\";\n    let str37: string = \"\";\n    let str38: string = \"\";\n    let str39: string = \"\";\n    let str40: string = \"\";\n    let str41: string = \"\";\n    let str42: string = \"\";\n    let str43: string = \"\";\n    let str44: string = \"\";\n    let str45: string = \"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123196,
      "stdout": "../../../../tmp/tmp3ujwa4vg.ts(54,26): error TS1002: Unterminated string literal.\n../../../../tmp/tmp3ujwa4vg.ts(66,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = s.length - 1;\n    let s1: string = \"\";\n    let s2: string = \"\";\n    let s3: string = \"\";\n    while (s[i] != ch) {\n        s1 = s1 + s[i];\n        i++;\n    }\n    while (s[j] != ch) {\n        s2 = s[j] + s2;\n        j--;\n    }\n    for (let k: number = i + 1; k < j; k++) {\n        s3 = s3 + s[k];\n    }\n    return s1 + s3 + s2;\n}\nconsole.log(remove_Occ(\"sakshi\", \"s\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123196,
      "stdout": "akhi\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let first_Occ: number = s.indexOf(ch);\n    let last_Occ: number = s.lastIndexOf(ch);\n    let res: string = s.substring(0, first_Occ) + s.substring(first_Occ + 1, last_Occ) + s.substring(last_Occ + 1);\n    return res;\n}\n\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123197,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    return s.replace(ch, '');\n}\nconsole.log(remove_Occ('w3resource.com', 'o'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123195,
      "stdout": "w3resurce.com\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helo'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmp71cpr4g0.js:9:12)\n    at Object.<anonymous> (/tmp/tmp71cpr4g0.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helo',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = 0;\n    let str: string = \"\";\n    let str1: string = \"\";\n    let str2: string = \"\";\n    for (i = 0; i < s.length; i++) {\n        if (s.charAt(i) == ch) {\n            str = s.substring(0, i) + s.substring(i + 1, s.length);\n            break;\n        }\n    }\n    for (j = str.length - 1; j >= 0; j--) {\n        if (str.charAt(j) == ch) {\n            str1 = str.substring(0, j) + str.substring(j + 1, str.length);\n            break;\n        }\n    }\n    return str1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let first_Occ: number = s.indexOf(ch);\n    let last_Occ: number = s.lastIndexOf(ch);\n    let new_Str: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (i != first_Occ && i != last_Occ) {\n            new_Str += s[i];\n        }\n    }\n    return new_Str;\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\nconsole.log(remove_Occ(\"Python\", \"n\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123197,
      "stdout": "Pthon\nPytho\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    let s1 = s.substring(0, i);\n    let s2 = s.substring(i + 1, j);\n    let s3 = s.substring(j + 1);\n    return s1 + s2 + s3;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let l: number = 0;\n    let m: number = 0;\n    let n: number = 0;\n    let o: number = 0;\n    let p: number = 0;\n    let q: number = 0;\n    let r: number = 0;\n    let t: number = 0;\n    let u: number = 0;\n    let v: number = 0;\n    let w: number = 0;\n    let x: number = 0;\n    let y: number = 0;\n    let z: number = 0;\n    let a: number = 0;\n    let b: number = 0;\n    let c: number = 0;\n    let d: number = 0;\n    let e: number = 0;\n    let f: number = 0;\n    let g: number = 0;\n    let h: number = 0;\n    let ii: number = 0;\n    let jj: number = 0;\n    let kk: number = 0;\n    let ll: number = 0;\n    let mm: number = 0;\n    let nn: number = 0;\n    let oo: number = 0;\n    let pp: number = 0;\n    let qq: number = 0;\n    let rr: number = 0;\n    let ss: number = 0;\n    let tt: number = 0;\n    let uu: number = 0;\n    let vv: number = 0;\n    let ww: number = 0;\n    let xx: number = 0;\n    let yy: number = 0;\n    let zz: number = 0;\n    let aa: number = 0;\n    let bb: number = 0;\n    let cc: number = 0;\n    let dd: number = 0;\n    let ee: number = 0;\n    let ff: number = 0;\n    let gg: number = 0;\n    let hh: number = 0;\n    let iii: number = 0;\n    let jjj: number = 0;\n    let kkk: number = 0;\n    let lll: number\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123197,
      "stdout": "../../../../tmp/tmpgf1_emp_.ts(69,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var i: number = 0;\n    var j: number = 0;\n    var k: number = 0;\n    var new_str: string = \"\";\n    for (i = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            break;\n        }\n    }\n    for (j = s.length - 1; j >= 0; j--) {\n        if (s[j] == ch) {\n            break;\n        }\n    }\n    for (k = 0; k < s.length; k++) {\n        if (k != i && k != j) {\n            new_str = new_str + s[k];\n        }\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let first = s.indexOf(ch);\n    let last = s.lastIndexOf(ch);\n    let str = s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1);\n    return str;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123192,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let first = s.indexOf(ch);\n    let last = s.lastIndexOf(ch);\n    return s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1);\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123197,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let lastIndex = s.lastIndexOf(ch);\n    let newStr = s.slice(0, index) + s.slice(index + 1, lastIndex) + s.slice(lastIndex + 1);\n    return newStr;\n}\nconsole.log(remove_Occ(\"Python\", \"n\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123197,
      "stdout": "Pytho\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1);\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123197,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = 0;\n    let str: string = \"\";\n    let str1: string = \"\";\n    let str2: string = \"\";\n    for (i = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            str = s.slice(i + 1);\n            break;\n        }\n    }\n    for (j = str.length - 1; j >= 0; j--) {\n        if (str[j] == ch) {\n            str1 = str.slice(0, j);\n            break;\n        }\n    }\n    str2 = s.slice(0, i) + str1;\n    return str2;\n}\nconsole.log(remove_Occ(\"welcome to edureka\", \"e\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123197,
      "stdout": "wlcome to edur\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'he'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpkuxfyq9f.js:27:12)\n    at Object.<anonymous> (/tmp/tmpkuxfyq9f.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'he',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.slice(0, i) + s.slice(i + 1, s.length);\n    let s2: string = s1.slice(0, j) + s1.slice(j + 1, s1.length);\n    return s2;\n}\n\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123197,
      "stdout": "w3esoure\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpajgjvot4.js:13:12)\n    at Object.<anonymous> (/tmp/tmpajgjvot4.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let n: number = s.length;\n    let i: number = 0;\n    let j: number = n - 1;\n    let res: string = \"\";\n    while (i < n && s[i] != ch) {\n        res += s[i];\n        i++;\n    }\n    i++;\n    while (i < n && s[i] != ch) {\n        res += s[i];\n        i++;\n    }\n    while (j > 0 && s[j] != ch) {\n        j--;\n    }\n    j--;\n    while (j > 0 && s[j] != ch) {\n        j--;\n    }\n    while (j > 0) {\n        res += s[j];\n        j--;\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123198,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hele'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpyl468lun.js:32:12)\n    at Object.<anonymous> (/tmp/tmpyl468lun.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hele',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let index2 = s.lastIndexOf(ch);\n    let s1 = s.substring(0, index);\n    let s2 = s.substring(index + 1, index2);\n    let s3 = s.substring(index2 + 1, s.length);\n    return s1 + s2 + s3;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123192,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    let s1 = s.substring(0, i);\n    let s2 = s.substring(i + 1, j);\n    let s3 = s.substring(j + 1);\n    return s1 + s2 + s3;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var i: number = 0;\n    var j: number = 0;\n    var k: number = 0;\n    var l: number = 0;\n    var m: number = 0;\n    var n: number = 0;\n    var o: number = 0;\n    var p: number = 0;\n    var q: number = 0;\n    var r: number = 0;\n    var t: number = 0;\n    var u: number = 0;\n    var v: number = 0;\n    var w: number = 0;\n    var x: number = 0;\n    var y: number = 0;\n    var z: number = 0;\n    var a: number = 0;\n    var b: number = 0;\n    var c: number = 0;\n    var d: number = 0;\n    var e: number = 0;\n    var f: number = 0;\n    var g: number = 0;\n    var h: number = 0;\n    var a1: number = 0;\n    var b1: number = 0;\n    var c1: number = 0;\n    var d1: number = 0;\n    var e1: number = 0;\n    var f1: number = 0;\n    var g1: number = 0;\n    var h1: number = 0;\n    var a2: number = 0;\n    var b2: number = 0;\n    var c2: number = 0;\n    var d2: number = 0;\n    var e2: number = 0;\n    var f2: number = 0;\n    var g2: number = 0;\n    var h2: number = 0;\n    var a3: number = 0;\n    var b3: number = 0;\n    var c3: number = 0;\n    var d3: number = 0;\n    var e3: number = 0;\n    var f3: number = 0;\n    var g3: number = 0;\n    var h3: number = 0;\n    var a4: number = 0;\n    var b4: number = 0;\n    var c4: number = 0;\n    var d4: number = 0;\n    var e4: number\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123198,
      "stdout": "../../../../tmp/tmp03ns1jxr.ts(68,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1 = s.replace(ch, \"\");\n    let s2 = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123198,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var i: number = s.indexOf(ch);\n    var j: number = s.lastIndexOf(ch);\n    var res: string = \"\";\n    if (i == -1) {\n        return s;\n    }\n    else if (i == j) {\n        for (var k = 0; k < s.length; k++) {\n            if (s[k] != ch) {\n                res = res + s[k];\n            }\n        }\n        return res;\n    }\n    else {\n        for (var k = 0; k < s.length; k++) {\n            if (k != i && k != j) {\n                res = res + s[k];\n            }\n        }\n        return res;\n    }\n}\nconsole.log(remove_Occ(\"hello\", \"l\"));\nconsole.log(remove_Occ(\"hello\", \"h\"));\nconsole.log(remove_Occ(\"hello\", \"o\"));\nconsole.log(remove_Occ(\"hello\", \"e\"));\nconsole.log(remove_Occ(\"hello\", \"z\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123198,
      "stdout": "heo\nello\nhell\nhllo\nhello\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var i: number;\n    var j: number;\n    var k: number;\n    var temp: string;\n    var temp1: string;\n    var temp2: string;\n    var temp3: string;\n    var temp4: string;\n    var temp5: string;\n    var temp6: string;\n    var temp7: string;\n    var temp8: string;\n    var temp9: string;\n    var temp10: string;\n    var temp11: string;\n    var temp12: string;\n    var temp13: string;\n    var temp14: string;\n    var temp15: string;\n    var temp16: string;\n    var temp17: string;\n    var temp18: string;\n    var temp19: string;\n    var temp20: string;\n    var temp21: string;\n    var temp22: string;\n    var temp23: string;\n    var temp24: string;\n    var temp25: string;\n    var temp26: string;\n    var temp27: string;\n    var temp28: string;\n    var temp29: string;\n    var temp30: string;\n    var temp31: string;\n    var temp32: string;\n    var temp33: string;\n    var temp34: string;\n    var temp35: string;\n    var temp36: string;\n    var temp37: string;\n    var temp38: string;\n    var temp39: string;\n    var temp40: string;\n    var temp41: string;\n    var temp42: string;\n    var temp43: string;\n    var temp44: string;\n    var temp45: string;\n    var temp46: string;\n    var temp47: string;\n    var temp48: string;\n    var temp49: string;\n    var temp50: string;\n    var temp51: string;\n    var temp52: string;\n    var temp53: string;\n    var temp54: string;\n    var temp55: string;\n    var temp56: string;\n    var temp57: string;\n    var temp58: string;\n    var temp59: string;\n    var temp60: string;\n    var temp\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123198,
      "stdout": "../../../../tmp/tmpsnlysr18.ts(79,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    let str1 = s.substring(0, i);\n    let str2 = s.substring(j + 1);\n    return str1 + str2;\n}\n\nconsole.log(remove_Occ(\"Python\", \"n\"));\nconsole.log(remove_Occ(\"Python\", \"p\"));\nconsole.log(remove_Occ(\"Python\", \"o\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123198,
      "stdout": "Pytho\nPython\nPythn\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmpd_jzf94k.js:16:12)\n    at Object.<anonymous> (/tmp/tmpd_jzf94k.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = \"\";\n    let s2: string = \"\";\n    let s3: string = \"\";\n    let s4: string = \"\";\n    let s5: string = \"\";\n    let s6: string = \"\";\n    let s7: string = \"\";\n    let s8: string = \"\";\n    let s9: string = \"\";\n    let s10: string = \"\";\n    let s11: string = \"\";\n    let s12: string = \"\";\n    let s13: string = \"\";\n    let s14: string = \"\";\n    let s15: string = \"\";\n    let s16: string = \"\";\n    let s17: string = \"\";\n    let s18: string = \"\";\n    let s19: string = \"\";\n    let s20: string = \"\";\n    let s21: string = \"\";\n    let s22: string = \"\";\n    let s23: string = \"\";\n    let s24: string = \"\";\n    let s25: string = \"\";\n    let s26: string = \"\";\n    let s27: string = \"\";\n    let s28: string = \"\";\n    let s29: string = \"\";\n    let s30: string = \"\";\n    let s31: string = \"\";\n    let s32: string = \"\";\n    let s33: string = \"\";\n    let s34: string = \"\";\n    let s35: string = \"\";\n    let s36: string = \"\";\n    let s37: string = \"\";\n    let s38: string = \"\";\n    let s39: string = \"\";\n    let s40: string = \"\";\n    let s41: string = \"\";\n    let s42: string = \"\";\n    let s43: string = \"\";\n    let s44: string = \"\";\n    let s45: string = \"\";\n    let s46: string = \"\";\n    let s47: string = \"\";\n    let s48: string = \"\";\n    let s49: string = \"\";\n    let s50: string = \"\";\n    let s51: string = \"\";\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "../../../../tmp/tmpwv8pc6pe.ts(66,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let reg = new RegExp(ch, \"g\");\n    return s.replace(reg, \"\");\n}\n\nconsole.log(remove_Occ(\"w3resource\", \"e\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123195,
      "stdout": "w3rsourc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let first = s.indexOf(ch);\n    let last = s.lastIndexOf(ch);\n    let str = s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1);\n    return str;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\nconsole.log(remove_Occ(\"w3resource\", \"w\"));\nconsole.log(remove_Occ(\"w3resource\", \"e\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123198,
      "stdout": "w3esouce\nw3resource\nw3rsourc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = s.length - 1;\n    let new_str: string = \"\";\n    while (i < s.length) {\n        if (s[i] == ch) {\n            break;\n        }\n        new_str += s[i];\n        i++;\n    }\n    while (j >= 0) {\n        if (s[j] == ch) {\n            break;\n        }\n        new_str += s[j];\n        j--;\n    }\n    return new_str;\n}\nconsole.log(remove_Occ(\"abcab\", \"a\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123198,
      "stdout": "b\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmpe0siqknw.js:27:12)\n    at Object.<anonymous> (/tmp/tmpe0siqknw.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let str: string = \"\";\n    let str1: string = \"\";\n    let str2: string = \"\";\n    let str3: string = \"\";\n    for (i = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            str1 = s.slice(0, i);\n            str2 = s.slice(i + 1, s.length);\n            str3 = str1 + str2;\n            break;\n        }\n    }\n    for (j = str3.length - 1; j >= 0; j--) {\n        if (str3[j] == ch) {\n            str = str3.slice(0, j);\n            break;\n        }\n    }\n    return str;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123198,
      "stdout": "w3esou\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'he'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmp1jagdaqx.js:30:12)\n    at Object.<anonymous> (/tmp/tmp1jagdaqx.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'he',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let first_Occ: number = s.indexOf(ch);\n    let last_Occ: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, first_Occ) + s.substring(first_Occ + 1);\n    let s2: string = s1.substring(0, last_Occ) + s1.substring(last_Occ + 1);\n    return s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123198,
      "stdout": "w3esoure\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpx4gj2zqw.js:13:12)\n    at Object.<anonymous> (/tmp/tmpx4gj2zqw.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let index2 = s.lastIndexOf(ch);\n    let s1 = s.substring(0, index);\n    let s2 = s.substring(index + 1, index2);\n    let s3 = s.substring(index2 + 1);\n    return s1 + s2 + s3;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123199,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = s.length - 1;\n    let ch1: string = ch.charAt(0);\n    let ch2: string = ch.charAt(1);\n    let s1: string = \"\";\n    let s2: string = \"\";\n    let s3: string = \"\";\n    let s4: string = \"\";\n    while (s.charAt(i) != ch1) {\n        s1 = s1 + s.charAt(i);\n        i++;\n    }\n    while (s.charAt(j) != ch2) {\n        s2 = s2 + s.charAt(j);\n        j--;\n    }\n    for (let k = i + 1; k < j; k++) {\n        s3 = s3 + s.charAt(k);\n    }\n    s4 = s1 + s3 + s2;\n    return s4;\n}\nconsole.log(remove_Occ(\"w3resource\", \"w3\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123199,
      "stdout": "ecruoser\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'heolleh'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpwcs90iuk.js:29:12)\n    at Object.<anonymous> (/tmp/tmpwcs90iuk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'heolleh',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let result = \"\";\n    let first = s.indexOf(ch);\n    let last = s.lastIndexOf(ch);\n    for (let i = 0; i < s.length; i++) {\n        if (i === first || i === last) {\n            continue;\n        }\n        result += s[i];\n    }\n    return result;\n}\nconsole.log(remove_Occ(\"Python\", \"n\"));\nconsole.log(remove_Occ(\"Python\", \"y\"));\nconsole.log(remove_Occ(\"Python\", \"P\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123199,
      "stdout": "Pytho\nPthon\nython\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, i) + s.substring(i + 1);\n    let s2: string = s1.substring(0, j) + s1.substring(j + 1);\n    return s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123199,
      "stdout": "w3esoure\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmp3hrecgv5.js:13:12)\n    at Object.<anonymous> (/tmp/tmp3hrecgv5.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let n: number = s.length;\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let str: string = \"\";\n    for (i = 0; i < n; i++) {\n        if (s[i] == ch) {\n            break;\n        }\n    }\n    for (j = i + 1; j < n; j++) {\n        if (s[j] != ch) {\n            str = str + s[j];\n        }\n    }\n    for (k = 0; k < i; k++) {\n        str = s[k] + str;\n    }\n    return str;\n}\nlet str: string = \"hello world\";\nlet ch: string = \"l\";\nconsole.log(remove_Occ(str, ch));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123200,
      "stdout": "eho word\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'eho'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpxy1xh880.js:29:12)\n    at Object.<anonymous> (/tmp/tmpxy1xh880.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'eho',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = s.length - 1;\n    let flag: boolean = false;\n    let flag1: boolean = false;\n    let str: string = \"\";\n    for (i = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            flag = true;\n            break;\n        }\n    }\n    for (j = s.length - 1; j >= 0; j--) {\n        if (s[j] == ch) {\n            flag1 = true;\n            break;\n        }\n    }\n    if (flag == false && flag1 == false) {\n        return s;\n    }\n    else if (flag == true && flag1 == false) {\n        for (i = 0; i < s.length; i++) {\n            if (s[i] == ch) {\n                continue;\n            }\n            else {\n                str = str + s[i];\n            }\n        }\n    }\n    else if (flag == false && flag1 == true) {\n        for (j = s.length - 1; j >= 0; j--) {\n            if (s[j] == ch) {\n                continue;\n            }\n            else {\n                str = s[j] + str;\n            }\n        }\n    }\n    else {\n        for (i = 0; i < s.length; i++) {\n            if (s[i] == ch) {\n                continue;\n            }\n            else {\n                str = str + s[i];\n            }\n        }\n        for (j = s.length - 1; j >= 0; j--) {\n            if (s[j] == ch) {\n                continue;\n            }\n            else {\n                str = s[j] + str;\n            }\n        }\n    }\n    return str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'heoheo'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmp7xljcyhw.js:66:12)\n    at Object.<anonymous> (/tmp/tmp7xljcyhw.js:70:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'heoheo',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let reg = new RegExp(ch, \"g\");\n    return s.replace(reg, \"\");\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123189,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let index2 = s.lastIndexOf(ch);\n    let s1 = s.substring(0, index);\n    let s2 = s.substring(index + 1, index2);\n    let s3 = s.substring(index2 + 1);\n    return s1 + s2 + s3;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123199,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var i: number = 0;\n    var j: number = 0;\n    var k: number = 0;\n    var new_str: string = \"\";\n    for (i = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            j = i;\n            break;\n        }\n    }\n    for (i = s.length - 1; i >= 0; i--) {\n        if (s[i] == ch) {\n            k = i;\n            break;\n        }\n    }\n    for (i = 0; i < s.length; i++) {\n        if (i != j && i != k) {\n            new_str = new_str + s[i];\n        }\n    }\n    return new_str;\n}\nconsole.log(remove_Occ(\"hello\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123200,
      "stdout": "heo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    let s1 = s.substring(0, i);\n    let s2 = s.substring(i + 1, j);\n    let s3 = s.substring(j + 1);\n    return s1 + s2 + s3;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123197,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let reg = new RegExp(ch, \"g\");\n    return s.replace(reg, \"\");\n}\nconsole.log(remove_Occ(\"w3resource\", \"e\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123200,
      "stdout": "w3rsourc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, i);\n    let s2: string = s.substring(j + 1, s.length);\n    let s3: string = s1.concat(s2);\n    return s3;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123200,
      "stdout": "w3ce\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmpozq7z7n0.js:15:12)\n    at Object.<anonymous> (/tmp/tmpozq7z7n0.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1);\n}\nconsole.log(remove_Occ(\"Python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123200,
      "stdout": "Python\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let lastIndex = s.lastIndexOf(ch);\n    let result = s.slice(0, index) + s.slice(index + 1, lastIndex) + s.slice(lastIndex + 1);\n    return result;\n}\nconsole.log(remove_Occ(\"Python\", \"n\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123200,
      "stdout": "Pytho\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    return s.slice(0, i) + s.slice(i + 1, j) + s.slice(j + 1);\n}\nconsole.log(remove_Occ(\"Python\", \"o\"));\nconsole.log(remove_Occ(\"Python\", \"n\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123201,
      "stdout": "Pythn\nPytho\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let x: string = \"\";\n    let y: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] != ch) {\n            x += s[i];\n        }\n    }\n    for (let i = x.length - 1; i >= 0; i--) {\n        if (x[i] != ch) {\n            y += x[i];\n        }\n    }\n    let z: string = \"\";\n    for (let i = y.length - 1; i >= 0; i--) {\n        z += y[i];\n    }\n    return z;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123200,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = s.length - 1;\n    let new_str: string = \"\";\n    for (i = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            break;\n        }\n    }\n    for (j = s.length - 1; j >= 0; j--) {\n        if (s[j] == ch) {\n            break;\n        }\n    }\n    for (let k = 0; k < s.length; k++) {\n        if (k < i || k > j) {\n            new_str = new_str + s[k];\n        }\n    }\n    return new_str;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123200,
      "stdout": "w3ce\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmp401jg27f.js:28:12)\n    at Object.<anonymous> (/tmp/tmp401jg27f.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1 = s.replace(ch, \"\");\n    let s2 = s1.replace(ch, \"\");\n    return s2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let first_Occ = s.indexOf(ch);\n    let last_Occ = s.lastIndexOf(ch);\n    let s1 = s.slice(0, first_Occ) + s.slice(first_Occ + 1);\n    let s2 = s1.slice(0, last_Occ) + s1.slice(last_Occ + 1);\n    return s2;\n}\nconsole.log(remove_Occ('w3resource', 'r'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123200,
      "stdout": "w3esoure\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpdghtblpb.js:13:12)\n    at Object.<anonymous> (/tmp/tmpdghtblpb.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let a: string = \"\";\n    let b: string = \"\";\n    let c: string = \"\";\n    let d: string = \"\";\n    let e: string = \"\";\n    let f: string = \"\";\n    let g: string = \"\";\n    let h: string = \"\";\n    let i: string = \"\";\n    let j: string = \"\";\n    let k: string = \"\";\n    let l: string = \"\";\n    let m: string = \"\";\n    let n: string = \"\";\n    let o: string = \"\";\n    let p: string = \"\";\n    let q: string = \"\";\n    let r: string = \"\";\n    let t: string = \"\";\n    let u: string = \"\";\n    let v: string = \"\";\n    let w: string = \"\";\n    let x: string = \"\";\n    let y: string = \"\";\n    let z: string = \"\";\n    let A: string = \"\";\n    let B: string = \"\";\n    let C: string = \"\";\n    let D: string = \"\";\n    let E: string = \"\";\n    let F: string = \"\";\n    let G: string = \"\";\n    let H: string = \"\";\n    let I: string = \"\";\n    let J: string = \"\";\n    let K: string = \"\";\n    let L: string = \"\";\n    let M: string = \"\";\n    let N: string = \"\";\n    let O: string = \"\";\n    let P: string = \"\";\n    let Q: string = \"\";\n    let R: string = \"\";\n    let S: string = \"\";\n    let T: string = \"\";\n    let U: string = \"\";\n    let V: string = \"\";\n    let W: string = \"\";\n    let X: string = \"\";\n    let Y: string = \"\";\n    let Z: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] == \"a\") {\n            a = a + s[i];\n        }\n        else if (s[i]\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123200,
      "stdout": "../../../../tmp/tmp8a6rm81q.ts(59,1): error TS1005: ')' expected.\n../../../../tmp/tmp8a6rm81q.ts(70,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index: number = s.indexOf(ch);\n    let lastIndex: number = s.lastIndexOf(ch);\n    let result: string = \"\";\n    if (index == -1) {\n        return s;\n    }\n    if (index == lastIndex) {\n        result = s.replace(ch, \"\");\n        return result;\n    }\n    else {\n        result = s.replace(ch, \"\");\n        result = result.replace(ch, \"\");\n        return result;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var i: number = 0;\n    var j: number = 0;\n    var k: number = 0;\n    var l: number = 0;\n    var m: number = 0;\n    var n: number = 0;\n    var o: number = 0;\n    var p: number = 0;\n    var q: number = 0;\n    var r: number = 0;\n    var t: number = 0;\n    var u: number = 0;\n    var v: number = 0;\n    var w: number = 0;\n    var x: number = 0;\n    var y: number = 0;\n    var z: number = 0;\n    var a: number = 0;\n    var b: number = 0;\n    var c: number = 0;\n    var d: number = 0;\n    var e: number = 0;\n    var f: number = 0;\n    var g: number = 0;\n    var h: number = 0;\n    var i1: number = 0;\n    var j1: number = 0;\n    var k1: number = 0;\n    var l1: number = 0;\n    var m1: number = 0;\n    var n1: number = 0;\n    var o1: number = 0;\n    var p1: number = 0;\n    var q1: number = 0;\n    var r1: number = 0;\n    var t1: number = 0;\n    var u1: number = 0;\n    var v1: number = 0;\n    var w1: number = 0;\n    var x1: number = 0;\n    var y1: number = 0;\n    var z1: number = 0;\n    var a1: number = 0;\n    var b1: number = 0;\n    var c1: number = 0;\n    var d1: number = 0;\n    var e1: number = 0;\n    var f1: number = 0;\n    var g1: number = 0;\n    var h1: number = 0;\n    var i2: number = 0;\n    var j2: number = 0;\n    var k2: number = 0;\n    var l2: number\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123200,
      "stdout": "../../../../tmp/tmprz19k_9n.ts(68,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = s.length - 1;\n    let str: string = \"\";\n    while (i < s.length) {\n        if (s[i] != ch) {\n            str += s[i];\n        }\n        i++;\n    }\n    while (j >= 0) {\n        if (s[j] != ch) {\n            str += s[j];\n        }\n        j--;\n    }\n    return str;\n}\nconsole.log(remove_Occ(\"hello\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123201,
      "stdout": "heooeh\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'heooeh'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpszf4qahv.js:24:12)\n    at Object.<anonymous> (/tmp/tmpszf4qahv.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'heooeh',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let first = s.indexOf(ch);\n    let last = s.lastIndexOf(ch);\n    let str = s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1, s.length);\n    return str;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\nconsole.log(remove_Occ(\"w3resource\", \"w\"));\nconsole.log(remove_Occ(\"w3resource\", \"e\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123201,
      "stdout": "w3esouce\nw3resource\nw3rsourc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var i: number = 0;\n    var j: number = s.length - 1;\n    var c: string = \"\";\n    var d: string = \"\";\n    var e: string = \"\";\n    var f: string = \"\";\n    var g: string = \"\";\n    var h: string = \"\";\n    var k: string = \"\";\n    for (i = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            c = s.slice(0, i);\n            d = s.slice(i + 1, s.length);\n            break;\n        }\n    }\n    for (j = s.length - 1; j >= 0; j--) {\n        if (s[j] == ch) {\n            e = s.slice(0, j);\n            f = s.slice(j + 1, s.length);\n            break;\n        }\n    }\n    g = c + d;\n    h = e + f;\n    k = g + h;\n    return k;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helohelo'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpxizq0n1k.js:34:12)\n    at Object.<anonymous> (/tmp/tmpxizq0n1k.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helohelo',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    let s1 = s.substring(0, i);\n    let s2 = s.substring(j + 1);\n    return s1 + s2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123195,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmpg7pcqzb6.js:13:12)\n    at Object.<anonymous> (/tmp/tmpg7pcqzb6.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let lastIndex = s.lastIndexOf(ch);\n    if (index == -1) {\n        return s;\n    }\n    else if (index == lastIndex) {\n        return s.replace(ch, \"\");\n    }\n    else {\n        return s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1);\n    }\n}\nconsole.log(remove_Occ(\"Python\", \"n\"));\nconsole.log(remove_Occ(\"Python\", \"p\"));\nconsole.log(remove_Occ(\"Python\", \"o\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123201,
      "stdout": "Pytho\nPython\nPythn\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    if (i == -1) {\n        return s;\n    }\n    if (i == j) {\n        return s.slice(0, i) + s.slice(i + 1);\n    }\n    return s.slice(0, i) + s.slice(i + 1, j) + s.slice(j + 1);\n}\nconsole.log(remove_Occ(\"Python\", \"n\"));\nconsole.log(remove_Occ(\"Python\", \"y\"));\nconsole.log(remove_Occ(\"Python\", \"P\"));\nconsole.log(remove_Occ(\"Python\", \"p\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123202,
      "stdout": "Pytho\nPthon\nython\nPython\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let index1 = s.lastIndexOf(ch);\n    let s1 = s.substring(0, index) + s.substring(index + 1);\n    let s2 = s1.substring(0, index1) + s1.substring(index1 + 1);\n    return s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123202,
      "stdout": "w3esoure\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpt9fmd5xj.js:13:12)\n    at Object.<anonymous> (/tmp/tmpt9fmd5xj.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = 0;\n    let new_str: string = \"\";\n    for (i = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            break;\n        }\n    }\n    for (j = s.length - 1; j >= 0; j--) {\n        if (s[j] == ch) {\n            break;\n        }\n    }\n    for (let k = 0; k < s.length; k++) {\n        if (k != i && k != j) {\n            new_str = new_str + s[k];\n        }\n    }\n    return new_str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123202,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1: string = \"\";\n    let s2: string = \"\";\n    let s3: string = \"\";\n    let s4: string = \"\";\n    let s5: string = \"\";\n    let s6: string = \"\";\n    let s7: string = \"\";\n    let s8: string = \"\";\n    let s9: string = \"\";\n    let s10: string = \"\";\n    let s11: string = \"\";\n    let s12: string = \"\";\n    let s13: string = \"\";\n    let s14: string = \"\";\n    let s15: string = \"\";\n    let s16: string = \"\";\n    let s17: string = \"\";\n    let s18: string = \"\";\n    let s19: string = \"\";\n    let s20: string = \"\";\n    let s21: string = \"\";\n    let s22: string = \"\";\n    let s23: string = \"\";\n    let s24: string = \"\";\n    let s25: string = \"\";\n    let s26: string = \"\";\n    let s27: string = \"\";\n    let s28: string = \"\";\n    let s29: string = \"\";\n    let s30: string = \"\";\n    let s31: string = \"\";\n    let s32: string = \"\";\n    let s33: string = \"\";\n    let s34: string = \"\";\n    let s35: string = \"\";\n    let s36: string = \"\";\n    let s37: string = \"\";\n    let s38: string = \"\";\n    let s39: string = \"\";\n    let s40: string = \"\";\n    let s41: string = \"\";\n    let s42: string = \"\";\n    let s43: string = \"\";\n    let s44: string = \"\";\n    let s45: string = \"\";\n    let s46: string = \"\";\n    let s47: string = \"\";\n    let s48: string = \"\";\n    let s49: string = \"\";\n    let s50: string = \"\";\n    let s51: string = \"\";\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510491,
      "stdout": "../../../../tmp/tmpwv8pc6pe.ts(66,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let reg = new RegExp(ch, \"g\");\n    return s.replace(reg, \"\");\n}\n\nconsole.log(remove_Occ(\"w3resource\", \"e\"));\nconsole.log(remove_Occ(\"w3resource\", \"w\"));\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123202,
      "stdout": "w3rsourc\n3resource\nw3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = s.length - 1;\n    let s1: string = \"\";\n    let s2: string = \"\";\n    let s3: string = \"\";\n    while (s[i] != ch) {\n        s1 = s1 + s[i];\n        i++;\n    }\n    while (s[j] != ch) {\n        s2 = s[j] + s2;\n        j--;\n    }\n    for (let k: number = i + 1; k < j; k++) {\n        s3 = s3 + s[k];\n    }\n    return s1 + s3 + s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123203,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = s.length - 1;\n    let temp: string = \"\";\n    let temp1: string = \"\";\n    let temp2: string = \"\";\n    for (i = 0; i < s.length; i++) {\n        if (s[i] != ch) {\n            temp = temp + s[i];\n        }\n        else {\n            break;\n        }\n    }\n    for (j = s.length - 1; j >= 0; j--) {\n        if (s[j] != ch) {\n            temp1 = temp1 + s[j];\n        }\n        else {\n            break;\n        }\n    }\n    for (let k = temp1.length - 1; k >= 0; k--) {\n        temp2 = temp2 + temp1[k];\n    }\n    return temp + temp2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123202,
      "stdout": "w3ce\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmp53xkxh15.js:34:12)\n    at Object.<anonymous> (/tmp/tmp53xkxh15.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = 0;\n    let str: string = \"\";\n    let str1: string = \"\";\n    let str2: string = \"\";\n    let str3: string = \"\";\n    for (i = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            str1 = s.substring(i + 1);\n            break;\n        }\n    }\n    for (j = str1.length - 1; j >= 0; j--) {\n        if (str1[j] == ch) {\n            str2 = str1.substring(0, j);\n            break;\n        }\n    }\n    str3 = s.substring(0, i) + str2;\n    return str3;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123203,
      "stdout": "w3esou\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'he'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpikjyr6je.js:28:12)\n    at Object.<anonymous> (/tmp/tmpikjyr6je.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'he',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let s1 = s.replace(ch, \"\");\n    let s2 = s1.replace(ch, \"\");\n    return s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123198,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    let s1 = s.substring(0, i);\n    let s2 = s.substring(j + 1, s.length);\n    return s1 + s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123203,
      "stdout": "w3ce\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmp70fh2uj5.js:14:12)\n    at Object.<anonymous> (/tmp/tmp70fh2uj5.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let n = s.length;\n    let x = s.indexOf(ch);\n    let y = s.lastIndexOf(ch);\n    let res = \"\";\n    for (let i = 0; i < n; i++) {\n        if (i != x && i != y) {\n            res = res + s[i];\n        }\n    }\n    return res;\n}\nconsole.log(remove_Occ(\"Python\", \"n\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123203,
      "stdout": "Pytho\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let str = s.replace(ch, '');\n    return str;\n}\nconsole.log(remove_Occ('w3resource.com', 'o'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123195,
      "stdout": "w3resurce.com\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helo'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpg4bk71b7.js:10:12)\n    at Object.<anonymous> (/tmp/tmpg4bk71b7.js:14:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helo',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let first = s.indexOf(ch);\n    let last = s.lastIndexOf(ch);\n    let str1 = s.slice(0, first) + s.slice(first + 1);\n    let str2 = str1.slice(0, last) + str1.slice(last + 1);\n    return str2;\n}\nconsole.log(remove_Occ(\"Python\", \"n\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123203,
      "stdout": "Pytho\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpv06vwf9_.js:13:12)\n    at Object.<anonymous> (/tmp/tmpv06vwf9_.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let r = s.replace(ch, '');\n    return r;\n}\nconsole.log(remove_Occ('w3resource', 'r'));\nconsole.log(remove_Occ('w3resource', 'w'));\nconsole.log(remove_Occ('w3resource', 'e'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123203,
      "stdout": "w3esource\n3resource\nw3rsource\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'helo'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpzjaa2ww2.js:12:12)\n    at Object.<anonymous> (/tmp/tmpzjaa2ww2.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'helo',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    if (i == j) {\n        return s.replace(ch, \"\");\n    }\n    else {\n        return s.replace(ch, \"\").replace(ch, \"\");\n    }\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\nconsole.log(remove_Occ(\"w3resource\", \"e\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123203,
      "stdout": "w3esouce\nw3rsourc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let index2 = s.lastIndexOf(ch);\n    let s1 = s.slice(0, index);\n    let s2 = s.slice(index + 1, index2);\n    let s3 = s.slice(index2 + 1);\n    return s1 + s2 + s3;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123203,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    let s1 = s.substring(0, i) + s.substring(i + 1, s.length);\n    let s2 = s1.substring(0, j) + s1.substring(j + 1, s1.length);\n    return s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123203,
      "stdout": "w3esoure\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpoi84d5gz.js:13:12)\n    at Object.<anonymous> (/tmp/tmpoi84d5gz.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    return s.slice(0, i) + s.slice(i + 1, j) + s.slice(j + 1);\n}\nconsole.log(remove_Occ(\"Python\", \"n\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123203,
      "stdout": "Pytho\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = s.length - 1;\n    let res: string = \"\";\n    while (i < s.length) {\n        if (s[i] != ch) {\n            res = res + s[i];\n        }\n        i++;\n    }\n    while (j >= 0) {\n        if (s[j] != ch) {\n            res = res + s[j];\n        }\n        j--;\n    }\n    return res;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123203,
      "stdout": "w3esouceecuose3w\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'heooeh'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmp3gmlntgq.js:24:12)\n    at Object.<anonymous> (/tmp/tmp3gmlntgq.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'heooeh',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let str: string = \"\";\n    for (i = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            j = i;\n            break;\n        }\n    }\n    for (i = s.length - 1; i >= 0; i--) {\n        if (s[i] == ch) {\n            k = i;\n            break;\n        }\n    }\n    for (i = 0; i < s.length; i++) {\n        if (i != j && i != k) {\n            str = str + s[i];\n        }\n    }\n    return str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123203,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let reg = new RegExp(ch, \"g\");\n    return s.replace(reg, \"\");\n}\nconsole.log(remove_Occ(\"w3resource\", \"e\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123200,
      "stdout": "w3rsourc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n  let i = s.indexOf(ch);\n  let j = s.lastIndexOf(ch);\n  return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1);\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123203,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.slice(0, i) + s.slice(i + 1);\n    let s2: string = s1.slice(0, j) + s1.slice(j + 1);\n    return s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123203,
      "stdout": "w3esoure\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpi0r2htmp.js:13:12)\n    at Object.<anonymous> (/tmp/tmpi0r2htmp.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.substring(0, i);\n    let s2: string = s.substring(j + 1);\n    let s3: string = s1 + s2;\n    return s3;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123204,
      "stdout": "w3ce\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmpd0lv1i0s.js:15:12)\n    at Object.<anonymous> (/tmp/tmpd0lv1i0s.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let str = \"\";\n    let i = 0;\n    let j = s.length - 1;\n    while (s[i] != ch) {\n        str += s[i];\n        i++;\n    }\n    while (s[j] != ch) {\n        j--;\n    }\n    for (let k = i + 1; k < j; k++) {\n        str += s[k];\n    }\n    return str;\n}\nconsole.log(remove_Occ(\"Python\", \"n\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123204,
      "stdout": "Pytho\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'he'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmp751ynkcq.js:22:12)\n    at Object.<anonymous> (/tmp/tmp751ynkcq.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'he',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let index2 = s.lastIndexOf(ch);\n    let s1 = s.substring(0, index);\n    let s2 = s.substring(index + 1, index2);\n    let s3 = s.substring(index2 + 1, s.length);\n    return s1 + s2 + s3;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123192,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let index2 = s.lastIndexOf(ch);\n    if (index == -1) {\n        return s;\n    }\n    else {\n        let s1 = s.slice(0, index);\n        let s2 = s.slice(index + 1, s.length);\n        let s3 = s1 + s2;\n        let s4 = s3.slice(0, index2);\n        let s5 = s3.slice(index2 + 1, s3.length);\n        let s6 = s4 + s5;\n        return s6;\n    }\n}\nconsole.log(remove_Occ(\"Python\", \"n\"));\nconsole.log(remove_Occ(\"Python\", \"p\"));\nconsole.log(remove_Occ(\"Python\", \"o\"));\nconsole.log(remove_Occ(\"Python\", \"x\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123204,
      "stdout": "Pytho\nPython\nPyth\nPython\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpik0lfmzc.js:25:12)\n    at Object.<anonymous> (/tmp/tmpik0lfmzc.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.slice(0, i) + s.slice(i + 1, j) + s.slice(j + 1);\n    return s1;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123204,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index: number = s.indexOf(ch);\n    let index1: number = s.lastIndexOf(ch);\n    let str: string = s.slice(0, index) + s.slice(index + 1, index1) + s.slice(index1 + 1);\n    return str;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123204,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let lastIndex = s.lastIndexOf(ch);\n    let result = s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1);\n    return result;\n}\n\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123204,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.slice(0, i) + s.slice(i + 1, s.length);\n    let s2: string = s1.slice(0, j) + s1.slice(j + 1, s1.length);\n    return s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123204,
      "stdout": "w3esoure\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpzlvmll10.js:13:12)\n    at Object.<anonymous> (/tmp/tmpzlvmll10.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    let s1 = s.substring(0, i) + s.substring(i + 1, s.length);\n    let s2 = s1.substring(0, j) + s1.substring(j + 1, s1.length);\n    return s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123203,
      "stdout": "w3esoure\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpoi84d5gz.js:13:12)\n    at Object.<anonymous> (/tmp/tmpoi84d5gz.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var i, j: number;\n    var s1: string = \"\";\n    var s2: string = \"\";\n    var s3: string = \"\";\n    for (i = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            s1 = s.slice(0, i);\n            s2 = s.slice(i + 1, s.length);\n            break;\n        }\n    }\n    for (j = s2.length - 1; j >= 0; j--) {\n        if (s2[j] == ch) {\n            s3 = s2.slice(0, j);\n            break;\n        }\n    }\n    return s1 + s3;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'he'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpwtqfmzt9.js:25:12)\n    at Object.<anonymous> (/tmp/tmpwtqfmzt9.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'he',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1);\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123189,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let a: string = s.replace(ch, \"\");\n    let b: string = a.replace(ch, \"\");\n    return b;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123205,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let lastIndex = s.lastIndexOf(ch);\n    let result = s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1);\n    return result;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123205,
      "stdout": "w3esouce\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = s.indexOf(ch);\n    let j: number = s.lastIndexOf(ch);\n    let s1: string = s.slice(0, i) + s.slice(i + 1);\n    let s2: string = s1.slice(0, j) + s1.slice(j + 1);\n    return s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123203,
      "stdout": "w3esoure\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpi0r2htmp.js:13:12)\n    at Object.<anonymous> (/tmp/tmpi0r2htmp.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let index = s.indexOf(ch);\n    let lastIndex = s.lastIndexOf(ch);\n    if (index == -1) {\n        return s;\n    }\n    if (index == lastIndex) {\n        return s.replace(ch, \"\");\n    }\n    return s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1);\n}\nconsole.log(remove_Occ(\"Python\", \"n\"));\nconsole.log(remove_Occ(\"Python\", \"o\"));\nconsole.log(remove_Occ(\"Python\", \"P\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123205,
      "stdout": "Pytho\nPythn\nython\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = s.length - 1;\n    let new_str: string = \"\";\n    while (i < s.length) {\n        if (s[i] == ch) {\n            break;\n        }\n        new_str += s[i];\n        i++;\n    }\n    while (j >= 0) {\n        if (s[j] == ch) {\n            break;\n        }\n        new_str = s[j] + new_str;\n        j--;\n    }\n    return new_str;\n}\nconsole.log(remove_Occ(\"hello world\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123205,
      "stdout": "dhe\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ohe'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpdukf8pif.js:26:12)\n    at Object.<anonymous> (/tmp/tmpdukf8pif.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ohe',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1, s.length);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    var i: number = 0;\n    var j: number = 0;\n    var k: number = 0;\n    var s1: string = \"\";\n    var s2: string = \"\";\n    var s3: string = \"\";\n    for (i = 0; i < s.length; i++) {\n        if (s[i] == ch) {\n            j = i;\n            break;\n        }\n    }\n    for (i = s.length - 1; i >= 0; i--) {\n        if (s[i] == ch) {\n            k = i;\n            break;\n        }\n    }\n    for (i = 0; i < j; i++) {\n        s1 = s1 + s[i];\n    }\n    for (i = j + 1; i < k; i++) {\n        s2 = s2 + s[i];\n    }\n    for (i = k + 1; i < s.length; i++) {\n        s3 = s3 + s[i];\n    }\n    return s1 + s2 + s3;\n}\nvar s: string = \"hello world\";\nvar ch: string = \"l\";\nconsole.log(remove_Occ(s, ch));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123205,
      "stdout": "helo word\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let first_Occ: number = s.indexOf(ch);\n    let last_Occ: number = s.lastIndexOf(ch);\n    let new_Str: string = s.substring(0, first_Occ) + s.substring(first_Occ + 1, last_Occ) + s.substring(last_Occ + 1);\n    return new_Str;\n}\n\nconsole.log(remove_Occ(\"Python\", \"y\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123205,
      "stdout": "Python\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    let s1 = s.substring(0, i) + s.substring(i + 1, s.length);\n    let s2 = s1.substring(0, j) + s1.substring(j + 1, s1.length);\n    return s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123203,
      "stdout": "w3esoure\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpoi84d5gz.js:13:12)\n    at Object.<anonymous> (/tmp/tmpoi84d5gz.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    let s1 = s.substring(0, i);\n    let s2 = s.substring(j + 1, s.length);\n    return s1 + s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123203,
      "stdout": "w3ce\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmp70fh2uj5.js:14:12)\n    at Object.<anonymous> (/tmp/tmp70fh2uj5.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let reg = new RegExp(ch, \"g\");\n    return s.replace(reg, \"\");\n}\nconsole.log(remove_Occ(\"w3resource\", \"e\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123200,
      "stdout": "w3rsourc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i = s.indexOf(ch);\n    let j = s.lastIndexOf(ch);\n    let s1 = s.substring(0, i);\n    let s2 = s.substring(j + 1);\n    return s1 + s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1665510492,
      "stdout": "w3ce\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely deep-equal\n\n'bcd'\n    at test (/tmp/tmp4lo0g4zq.js:14:12)\n    at Object.<anonymous> (/tmp/tmp4lo0g4zq.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'bcd',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = s.length - 1;\n    let s1: string = \"\";\n    let s2: string = \"\";\n    let s3: string = \"\";\n    let s4: string = \"\";\n    while (s[i] != ch) {\n        s1 = s1 + s[i];\n        i++;\n    }\n    while (s[j] != ch) {\n        s2 = s[j] + s2;\n        j--;\n    }\n    for (let k: number = i + 1; k < j; k++) {\n        s3 = s3 + s[k];\n    }\n    s4 = s1 + s3 + s2;\n    return s4;\n}\nconsole.log(remove_Occ(\"hello\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123205,
      "stdout": "heo\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let reg = new RegExp(ch, \"g\");\n    return s.replace(reg, \"\");\n}\nconsole.log(remove_Occ(\"w3resource\", \"e\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123200,
      "stdout": "w3rsourc\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = s.length - 1;\n    let result: string = \"\";\n    while (i < s.length) {\n        if (s[i] == ch) {\n            i++;\n            continue;\n        }\n        result += s[i];\n        i++;\n    }\n    while (j >= 0) {\n        if (s[j] == ch) {\n            j--;\n            continue;\n        }\n        result += s[j];\n        j--;\n    }\n    return result;\n}\nconsole.log(remove_Occ(\"hello world\", \"l\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123205,
      "stdout": "heo worddrow oeh\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'heooeh'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmp3p09i2zn.js:28:12)\n    at Object.<anonymous> (/tmp/tmp3p09i2zn.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'heooeh',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let reg = new RegExp(ch, 'g');\n    let str = s.replace(reg, '');\n    return str;\n}\n\nconsole.log(remove_Occ('w3resource.com', 'o'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123205,
      "stdout": "w3resurce.cm\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to remove first and last occurrence of a given character from the string.\nfunction remove_Occ(s: string, ch: string): string {\n    let i: number = 0;\n    let j: number = s.length - 1;\n    while (i < s.length && s[i] != ch) {\n        i++;\n    }\n    while (j >= 0 && s[j] != ch) {\n        j--;\n    }\n    let s1: string = s.substring(0, i) + s.substring(i + 1, s.length);\n    let s2: string = s1.substring(0, j) + s1.substring(j + 1, s1.length);\n    return s2;\n}\nconsole.log(remove_Occ(\"w3resource\", \"r\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = remove_Occ;\n  assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");\n  assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");\n  assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");\n}\n\ntest();",
      "timestamp": 1666123205,
      "stdout": "w3esoure\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hel'\n\nshould loosely deep-equal\n\n'heo'\n    at test (/tmp/tmpmxnv7hjm.js:19:12)\n    at Object.<anonymous> (/tmp/tmpmxnv7hjm.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hel',\n  expected: 'heo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    }
  ]
}