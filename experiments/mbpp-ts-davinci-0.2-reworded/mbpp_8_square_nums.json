{
  "name": "mbpp_8_square_nums",
  "language": "ts",
  "prompt": "//Write a function to find squares of individual elements in an array.\nfunction square_nums(nums: number[]): number[] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = square_nums;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);\n  assert.deepEqual(candidate([10, 20, 30]),[100, 400, 900]);\n  assert.deepEqual(candidate([12, 15]),[144, 225]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    return nums.map(num => num * num);\n}\n\nconsole.log(square_nums([1, 2, 3, 4, 5]));\n",
    "    return nums.map(n => n * n);\n}\n",
    "    return nums.map(x => x * x);\n}\nconsole.log(square_nums([1, 2, 3, 4, 5]));\n",
    "    return nums.map(num => num * num);\n}\n",
    "    return nums.map(function (num) {\n        return num * num;\n    });\n}\n\nconsole.log(square_nums([1, 2, 3, 4, 5]));\n",
    "    return nums.map(function (num) {\n        return num * num;\n    });\n}\n\nconsole.log(square_nums([1, 2, 3, 4, 5]));\n",
    "    return nums.map(num => num * num);\n}\n",
    "    return nums.map(function (num) {\n        return num * num;\n    });\n}\n\nconsole.log(square_nums([1, 2, 3, 4, 5]));\n",
    "    return nums.map(function (num) {\n        return num * num;\n    });\n}\n\nconsole.log(square_nums([1, 2, 3, 4, 5]));\n",
    "    return nums.map(n => n * n);\n}\n",
    "    return nums.map(num => num * num);\n}\n",
    "    return nums.map(function (num) {\n        return num * num;\n    });\n}\n",
    "    return nums.map(n => n * n);\n}\n",
    "    return nums.map(function (num) {\n        return num * num;\n    });\n}\n\nconsole.log(square_nums([1, 2, 3, 4, 5]));\n",
    "    return nums.map(function (num) {\n        return num * num;\n    });\n}\n",
    "    return nums.map(num => num * num);\n}\n",
    "    return nums.map(n => n * n);\n}\n",
    "    return nums.map(num => num * num);\n}\n",
    "    return nums.map(function (num) {\n        return num * num;\n    });\n}\n\nconsole.log(square_nums([1, 2, 3, 4, 5]));\n",
    "    return nums.map(num => num * num);\n}\n\nconsole.log(square_nums([1, 2, 3, 4, 5]));\n"
  ]
}