{
  "name": "mbpp_262_split_two_parts",
  "language": "ts",
  "prompt": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < L; i++) {\n        list2.push(list1[i]);\n    }\n    for (let i = L; i < list1.length; i++) {\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2 = list1.slice(L);\n    let list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any[] = [];\n    let list3: any[] = [];\n    for (let i = 0; i < L; i++) {\n        list2.push(list1[i]);\n    }\n    for (let i = L; i < list1.length; i++) {\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < L; i++) {\n        list2.push(list1[i]);\n    }\n    for (let i = L; i < list1.length; i++) {\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < L; i++) {\n        list2.push(list1[i]);\n    }\n    for (let i = L; i < list1.length; i++) {\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < L; i++) {\n        list2.push(list1[i]);\n    }\n    for (let i = L; i < list1.length; i++) {\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < L; i++) {\n        list2.push(list1[i]);\n    }\n    for (let i = L; i < list1.length; i++) {\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < L; i++) {\n        list2.push(list1[i]);\n    }\n    for (let i = L; i < list1.length; i++) {\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3, 4, 5 ], [ 6, 7, 8, 9, 10 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2 = [];\n    let list3 = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any[] = [];\n    let list3: any[] = [];\n    let list4: any[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    list4.push(list2);\n    list4.push(list3);\n    return list4;\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < L; i++) {\n        list2.push(list1[i]);\n    }\n    for (let i = L; i < list1.length; i++) {\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any[] = [];\n    let list3: any[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2 = list1.slice(L);\n    let list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < L; i++) {\n        list2.push(list1[i]);\n    }\n    for (let i = L; i < list1.length; i++) {\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2 = [];\n    let list3 = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any[] = [];\n    let list3: any[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < L; i++) {\n        list2.push(list1[i]);\n    }\n    for (let i = L; i < list1.length; i++) {\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2 = [];\n    let list3 = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n  let list2 = [];\n  let list3 = [];\n  for (let i = 0; i < list1.length; i++) {\n    if (i < L) {\n      list2.push(list1[i]);\n    } else {\n      list3.push(list1[i]);\n    }\n  }\n  return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let part1: any = [];\n    let part2: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            part1.push(list1[i]);\n        } else {\n            part2.push(list1[i]);\n        }\n    }\n    return [part1, part2];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2 = [];\n    let list3 = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3, 4, 5 ], [ 6, 7, 8, 9, 10 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2 = [];\n    let list3 = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < L; i++) {\n        list2.push(list1[i]);\n    }\n    for (let i = L; i < list1.length; i++) {\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2 = list1.slice(L);\n    let list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2 = [];\n    let list3 = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < L; i++) {\n        list2.push(list1[i]);\n    }\n    for (let i = L; i < list1.length; i++) {\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2 = list1.slice(L);\n    let list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3, 4 ], [ 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < L; i++) {\n        list2.push(list1[i]);\n    }\n    for (let i = L; i < list1.length; i++) {\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2 ], [ 3, 4, 5 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2 = [];\n    let list3 = [];\n    for (let i = 0; i < L; i++) {\n        list2.push(list1[i]);\n    }\n    for (let i = L; i < list1.length; i++) {\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3, 4 ], [ 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2 = [];\n    let list3 = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2 = [];\n    let list3 = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    for (let i: number = 0; i < L; i++) {\n        list2.push(list1[i]);\n    }\n    return list2;\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ 1, 2, 3 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1,\n    2\n  ],\n  [\n    3,\n    4,\n    4,\n    5,\n    1\n  ]\n]\n    at test (/tmp/tmp5adl9c8r.js:13:12)\n    at Object.<anonymous> (/tmp/tmp5adl9c8r.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 2 ],\n  expected: [ [ 1, 1, 2 ], [ 3, 4, 4, 5, 1 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < L; i++) {\n        list2.push(list1[i]);\n    }\n    for (let i = L; i < list1.length; i++) {\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2 = [];\n    let list3 = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let first_part: any = [];\n    let second_part: any = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (i < L) {\n            first_part.push(list1[i]);\n        } else {\n            second_part.push(list1[i]);\n        }\n    }\n    return [first_part, second_part];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < L; i++) {\n        list2.push(list1[i]);\n    }\n    for (let i = L; i < list1.length; i++) {\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < L; i++) {\n        list2.push(list1[i]);\n    }\n    for (let i = L; i < list1.length; i++) {\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2 = [];\n    let list3 = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2 = list1.slice(L);\n    let list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2 = [];\n    let list3 = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < L; i++) {\n        list2.push(list1[i]);\n    }\n    for (let i = L; i < list1.length; i++) {\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any[] = [];\n    let list3: any[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2 = list1.slice(L);\n    let list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3, 4, 5 ], [ 6, 7, 8, 9, 10 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  [\n    1,\n    1,\n    2\n  ],\n  [\n    3,\n    4,\n    4,\n    5,\n    1\n  ]\n]\n    at test (/tmp/tmpq5zazgf1.js:14:12)\n    at Object.<anonymous> (/tmp/tmpq5zazgf1.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 2 ],\n  expected: [ [ 1, 1, 2 ], [ 3, 4, 4, 5, 1 ] ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2 = [];\n    let list3 = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2 = [];\n    let list3 = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any[] = [];\n    let list3: any[] = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2 = list1.slice(L);\n    let list3 = list1.slice(0, L);\n    return [list3, list2];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < L; i++) {\n        list2.push(list1[i]);\n    }\n    for (let i = L; i < list1.length; i++) {\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2 ], [ 3, 4, 5 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i: number = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2 = [];\n    let list3 = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3, 4, 5 ], [ 6, 7, 8, 9, 10 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2 = [];\n    let list3 = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2 = [];\n    let list3 = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < L; i++) {\n        list2.push(list1[i]);\n    }\n    for (let i = L; i < list1.length; i++) {\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123622,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2 = [];\n    let list3 = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        } else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < L; i++) {\n        list2.push(list1[i]);\n    }\n    for (let i = L; i < list1.length; i++) {\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < L; i++) {\n        list2.push(list1[i]);\n    }\n    for (let i = L; i < list1.length; i++) {\n        list3.push(list1[i]);\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i < L) {\n            list2.push(list1[i]);\n        }\n        else {\n            list3.push(list1[i]);\n        }\n    }\n    return [list2, list3];\n}\nconsole.log(split_two_parts([1, 2, 3, 4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1665510565,
      "stdout": "[ [ 1, 2, 3 ], [ 4, 5, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.\nfunction split_two_parts(list1: any, L: number): any {\n    let list2 = list1.slice(L);\n    let list3 = list1.slice(0, L);\n    return [list3, list2];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_two_parts;\n  assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);\n  assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);\n}\n\ntest();",
      "timestamp": 1666123620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}