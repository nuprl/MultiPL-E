{
  "name": "mbpp_778_pack_consecutive_duplicates",
  "language": "ts",
  "prompt": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9, 9, 9, 10, 10, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510446,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2 ],\n  [ 3, 3, 3, 3 ],\n  [ 4 ],\n  [ 5, 5, 5 ],\n  [ 6, 6, 6 ],\n  [ 7, 7 ],\n  [ 8, 8 ],\n  [ 9, 9, 9, 9, 9, 9 ],\n  [ 10, 10, 10 ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    list1.forEach(function (item: any) {\n        if (item !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(item);\n        previous = item;\n    });\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510446,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2 ],\n  [ 3, 3, 3, 3 ],\n  [ 4 ],\n  [ 5, 5 ],\n  [ 6, 6, 6 ],\n  [ 7, 7 ],\n  [ 8, 8 ],\n  [ 9, 9, 9 ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i === 0) {\n            temp.push(list1[i]);\n        } else {\n            if (list1[i] === list1[i - 1]) {\n                temp.push(list1[i]);\n            } else {\n                result.push(temp);\n                temp = [];\n                temp.push(list1[i]);\n            }\n        }\n    }\n    result.push(temp);\n    return result;\n}\n\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 1, 2, 3, 3, 1, 1]));\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 1, 1]));\nconsole.log(pack_consecutive_duplicates([1, 2, 2, 3, 4, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510446,
      "stdout": "[ [ 1, 1, 1, 1 ], [ 2 ], [ 3, 3 ], [ 1, 1 ] ]\n[ [ 1, 1, 1, 1, 1 ] ]\n[ [ 1 ], [ 2, 2 ], [ 3 ], [ 4, 4 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510445,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2 ],\n  [ 3, 3, 3 ],\n  [ 4 ],\n  [ 5, 5, 5, 5, 5 ],\n  [ 6 ],\n  [ 7 ],\n  [ 8, 8 ],\n  [\n    9, 9, 9, 9,\n    9, 9, 9, 9\n  ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510446,
      "stdout": "[ [ 1, 1, 1 ], [ 2 ], [ 3, 3, 3, 3 ], [ 4, 4 ], [ 5, 5, 5, 5, 5, 5 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510445,
      "stdout": "../../../../tmp/tmpu69itfv9.ts(88,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== list1[i + 1]) {\n            temp.push(list1[i]);\n            result.push(temp);\n            temp = [];\n        } else {\n            temp.push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510445,
      "stdout": "../../../../tmp/tmpowbsd048.ts(17,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let list2 = [];\n    let list3 = [];\n    let list4 = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list1[i + 1]) {\n            list2.push(list1[i]);\n        } else {\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    for (let i = 0; i < list3.length; i++) {\n        if (list3[i].length > 1) {\n            list4.push(list3[i]);\n        }\n    }\n    return list4;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    4,\n    4\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmpsl33ix56.js:26:12)\n    at Object.<anonymous> (/tmp/tmpsl33ix56.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 0 ]",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510445,
      "stdout": "../../../../tmp/tmpm0ubgijq.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmpm0ubgijq.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    list1.forEach(function (current: any) {\n        if (current !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(current);\n        previous = current;\n    });\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510445,
      "stdout": "../../../../tmp/tmphiee8xau.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmphiee8xau.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let current: any = null;\n    let count: number = 0;\n\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] != current) {\n            if (count > 0) {\n                result.push(count);\n            }\n            current = list1[i];\n            count = 1;\n        } else {\n            count++;\n        }\n    }\n    if (count > 0) {\n        result.push(count);\n    }\n    return result;\n}\n\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 1, 2, 2, 2, 1, 1]));\nconsole.log(pack_consecutive_duplicates([\"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"c\", \"a\", \"a\", \"d\", \"e\", \"e\", \"e\", \"e\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510446,
      "stdout": "[ 4, 3, 2 ]\n[ 4, 1, 2, 2, 1, 4 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n  1,\n  1,\n  2,\n  1,\n  3,\n  1,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmp6q9g3pe6.js:28:12)\n    at Object.<anonymous> (/tmp/tmp6q9g3pe6.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 1, 1, 1, 2,\n    1, 3, 1, 1, 1,\n    2\n  ],",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510446,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2 ],\n  [ 3, 3, 3, 3 ],\n  [ 4, 4 ],\n  [ 5, 5, 5, 5, 5 ],\n  [ 6, 6, 6 ],\n  [\n    7, 7, 7, 7,\n    7, 7, 7, 7\n  ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list1[i + 1]) {\n            temp.push(list1[i]);\n        } else {\n            temp.push(list1[i]);\n            result.push(temp);\n            temp = [];\n        }\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510446,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2, 2 ],\n  [ 3, 3, 3, 3 ],\n  [ 4, 4, 4 ],\n  [ 5, 5, 5, 5, 5 ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 6, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510446,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2 ],\n  [ 3, 3, 3, 3 ],\n  [ 4 ],\n  [ 5, 5, 5, 5, 5, 5 ],\n  [ 6, 6 ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let list2 = [];\n    let count = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] == list1[i + 1]) {\n            count++;\n        } else {\n            list2.push(list1.slice(i - count, i + 1));\n            count = 0;\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510445,
      "stdout": "../../../../tmp/tmppjbuogux.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmppjbuogux.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list1[i + 1]) {\n            temp.push(list1[i]);\n        } else {\n            temp.push(list1[i]);\n            result.push(temp);\n            temp = [];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510446,
      "stdout": "[ [ 1, 1, 1 ], [ 2, 2 ], [ 3, 3, 3, 3 ], [ 4, 4 ], [ 5, 5, 5, 5, 5 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let list2 = [];\n    let list3 = [];\n    let list4 = [];\n    let list5 = [];\n    let list6 = [];\n    let list7 = [];\n    let list8 = [];\n    let list9 = [];\n    let list10 = [];\n    let list11 = [];\n    let list12 = [];\n    let list13 = [];\n    let list14 = [];\n    let list15 = [];\n    let list16 = [];\n    let list17 = [];\n    let list18 = [];\n    let list19 = [];\n    let list20 = [];\n    let list21 = [];\n    let list22 = [];\n    let list23 = [];\n    let list24 = [];\n    let list25 = [];\n    let list26 = [];\n    let list27 = [];\n    let list28 = [];\n    let list29 = [];\n    let list30 = [];\n    let list31 = [];\n    let list32 = [];\n    let list33 = [];\n    let list34 = [];\n    let list35 = [];\n    let list36 = [];\n    let list37 = [];\n    let list38 = [];\n    let list39 = [];\n    let list40 = [];\n    let list41 = [];\n    let list42 = [];\n    let list43 = [];\n    let list44 = [];\n    let list45 = [];\n    let list46 = [];\n    let list47 = [];\n    let list48 = [];\n    let list49 = [];\n    let list50 = [];\n    let list51 = [];\n    let list52 = [];\n    let list53 = [];\n    let list54 = [];\n    let list55 = [];\n    let list56 = [];\n    let list57 = [];\n    let list58 = [];\n    let list59 = [];\n    let list60 = [];\n    let list61 = [];\n    let list62 = [];\n    let list63 = [];\n    let list64 = [];\n    let list65 = [];\n    let list66 = [];\n    let list67 = [];\n    let list68 = [];\n    let list69 = [];\n    let list70 = [];\n    let list71 = [];\n    let list72 = [];\n    let list73 = [];\n    let list74 = [];\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "../../../../tmp/tmpr53lo8zt.ts(88,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2 ],\n  [ 3, 3, 3, 3 ],\n  [ 4 ],\n  [ 5, 5 ],\n  [ 6, 6, 6 ],\n  [ 7, 7 ],\n  [ 8, 8 ],\n  [ 9, 9, 9, 9, 9 ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let list2 = [];\n    let list3 = [];\n    let list4 = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] == list1[i + 1]) {\n            list2.push(list1[i]);\n        }\n        else {\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    for (let i = 0; i < list3.length; i++) {\n        if (list3[i].length > 1) {\n            list4.push(list3[i]);\n        }\n    }\n    return list4;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    4,\n    4\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmp40py3jvn.js:26:12)\n    at Object.<anonymous> (/tmp/tmp40py3jvn.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 0, 0 ]",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any;\n    list1.forEach(function (current: any) {\n        if (previous === current) {\n            temp.push(current);\n        } else {\n            result.push(temp);\n            temp = [current];\n        }\n        previous = current;\n    });\n    result.push(temp);\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [],\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmp7hz0dawa.js:22:12)\n    at Object.<anonymous> (/tmp/tmp7hz0dawa.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at nod",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "../../../../tmp/tmpv7mqn5kf.ts(23,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8, 8, 9, 9, 9, 9, 9, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2 ],\n  [ 3, 3, 3, 3 ],\n  [ 4 ],\n  [ 5, 5, 5, 5, 5 ],\n  [ 6 ],\n  [ 7 ],\n  [ 8, 8 ],\n  [ 9, 9, 9, 9, 9, 9 ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "../../../../tmp/tmpzop93hpx.ts(23,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let list2 = [];\n    let list3 = [];\n    let list4 = [];\n    let list5 = [];\n    let list6 = [];\n    let list7 = [];\n    let list8 = [];\n    let list9 = [];\n    let list10 = [];\n    let list11 = [];\n    let list12 = [];\n    let list13 = [];\n    let list14 = [];\n    let list15 = [];\n    let list16 = [];\n    let list17 = [];\n    let list18 = [];\n    let list19 = [];\n    let list20 = [];\n    let list21 = [];\n    let list22 = [];\n    let list23 = [];\n    let list24 = [];\n    let list25 = [];\n    let list26 = [];\n    let list27 = [];\n    let list28 = [];\n    let list29 = [];\n    let list30 = [];\n    let list31 = [];\n    let list32 = [];\n    let list33 = [];\n    let list34 = [];\n    let list35 = [];\n    let list36 = [];\n    let list37 = [];\n    let list38 = [];\n    let list39 = [];\n    let list40 = [];\n    let list41 = [];\n    let list42 = [];\n    let list43 = [];\n    let list44 = [];\n    let list45 = [];\n    let list46 = [];\n    let list47 = [];\n    let list48 = [];\n    let list49 = [];\n    let list50 = [];\n    let list51 = [];\n    let list52 = [];\n    let list53 = [];\n    let list54 = [];\n    let list55 = [];\n    let list56 = [];\n    let list57 = [];\n    let list58 = [];\n    let list59 = [];\n    let list60 = [];\n    let list61 = [];\n    let list62 = [];\n    let list63 = [];\n    let list64 = [];\n    let list65 = [];\n    let list66 = [];\n    let list67 = [];\n    let list68 = [];\n    let list69 = [];\n    let list70 = [];\n    let list71 = [];\n    let list72 = [];\n    let list73 = [];\n    let list74 = [];\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "../../../../tmp/tmpr53lo8zt.ts(88,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list1[i + 1]) {\n            temp.push(list1[i]);\n        } else {\n            temp.push(list1[i]);\n            result.push(temp);\n            temp = [];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "../../../../tmp/tmp8f4_6a2z.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmp8f4_6a2z.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let previous = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2 ],\n  [ 3, 3, 3, 3 ],\n  [ 4 ],\n  [ 5, 5, 5, 5, 5 ],\n  [ 6, 6, 6 ],\n  [ 7, 7, 7, 7 ],\n  [ 8, 8, 8 ],\n  [ 9, 9, 9, 9, 9, 9 ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "../../../../tmp/tmpg18bcdj_.ts(23,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list1[i + 1]) {\n            temp.push(list1[i]);\n        } else {\n            temp.push(list1[i]);\n            result.push(temp);\n            temp = [];\n        }\n    }\n    return result;\n}\n\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 1, 2, 2, 2, 1, 1]));\nconsole.log(pack_consecutive_duplicates([\"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"c\", \"a\", \"a\", \"d\", \"e\", \"e\", \"e\", \"e\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "[ [ 1, 1, 1, 1 ], [ 2, 2, 2 ], [ 1, 1 ] ]\n[\n  [ 'a', 'a', 'a', 'a' ],\n  [ 'b' ],\n  [ 'c', 'c' ],\n  [ 'a', 'a' ],\n  [ 'd' ],\n  [ 'e', 'e', 'e', 'e' ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "../../../../tmp/tmpjkbd05w4.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmpjkbd05w4.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "../../../../tmp/tmpwcluj0zv.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmpwcluj0zv.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 2, 2, 3, 4, 4, 5, 6, 6, 6, 7, 7, 8, 9, 4, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "[\n  [ 1 ],    [ 2, 2 ],\n  [ 3 ],    [ 4, 4 ],\n  [ 5 ],    [ 6, 6, 6 ],\n  [ 7, 7 ], [ 8 ],\n  [ 9 ],    [ 4, 4 ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "../../../../tmp/tmpth68d1t1.ts(25,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 6, 7, 8, 8, 9, 9, 9, 9, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2 ],\n  [ 3, 3, 3, 3 ],\n  [ 4 ],\n  [ 5, 5, 5 ],\n  [ 6 ],\n  [ 7 ],\n  [ 8, 8 ],\n  [ 9, 9, 9, 9, 9 ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let prev: any;\n\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    result.push(temp);\n    result.shift();\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 1, 2, 3, 3, 1, 1, 4, 5, 5, 5, 5]));\nconsole.log(pack_consecutive_duplicates([\"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"c\", \"a\", \"a\", \"d\", \"e\", \"e\", \"e\", \"e\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "[ [ 1, 1, 1, 1 ], [ 2 ], [ 3, 3 ], [ 1, 1 ], [ 4 ], [ 5, 5, 5, 5 ] ]\n[\n  [ 'a', 'a', 'a', 'a' ],\n  [ 'b' ],\n  [ 'c', 'c' ],\n  [ 'a', 'a' ],\n  [ 'd' ],\n  [ 'e', 'e', 'e', 'e' ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2 ],\n  [ 3, 3, 3, 3 ],\n  [ 4, 4 ],\n  [ 5, 5, 5, 5, 5 ],\n  [ 6, 6, 6 ],\n  [ 7, 7, 7, 7 ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let list2 = [];\n    let temp = [];\n    let i = 0;\n    while (i < list1.length) {\n        if (list1[i] === list1[i + 1]) {\n            temp.push(list1[i]);\n        } else {\n            temp.push(list1[i]);\n            list2.push(temp);\n            temp = [];\n        }\n        i++;\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 1, 2, 3, 3, 1, 1, 4, 5, 5, 5, 5]));\nconsole.log(pack_consecutive_duplicates([\"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"c\", \"a\", \"a\", \"d\", \"e\", \"e\", \"e\", \"e\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123414,
      "stdout": "[ [ 1, 1, 1, 1 ], [ 2 ], [ 3, 3 ], [ 1, 1 ], [ 4 ], [ 5, 5, 5, 5 ] ]\n[\n  [ 'a', 'a', 'a', 'a' ],\n  [ 'b' ],\n  [ 'c', 'c' ],\n  [ 'a', 'a' ],\n  [ 'd' ],\n  [ 'e', 'e', 'e', 'e' ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list1[i + 1]) {\n            temp.push(list1[i]);\n        } else {\n            temp.push(list1[i]);\n            result.push(temp);\n            temp = [];\n        }\n    }\n    return result;\n}\n\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123413,
      "stdout": "../../../../tmp/tmphda_cf5i.ts(18,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123414,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2 ],\n  [ 3, 3, 3, 3 ],\n  [ 4 ],\n  [ 5, 5, 5 ],\n  [ 6, 6, 6 ],\n  [ 7, 7 ],\n  [ 8, 8 ],\n  [ 9, 9, 9, 9, 9 ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    list1.forEach(function (item: any) {\n        if (item !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(item);\n        previous = item;\n    });\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 1, 1]));\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 1, 2, 2, 2, 1, 1]));\nconsole.log(pack_consecutive_duplicates([1, 1, 2, 2, 3, 3]));\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 1, 1]));\nconsole.log(pack_consecutive_duplicates([1, 2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123414,
      "stdout": "[ [ 1, 1, 1 ], [ 2 ], [ 3, 3, 3 ], [ 1, 1 ] ]\n[ [ 1, 1, 1, 1 ], [ 2, 2, 2 ], [ 1, 1 ] ]\n[ [ 1, 1 ], [ 2, 2 ], [ 3, 3 ] ]\n[ [ 1, 1, 1, 1, 1 ] ]\n[ [ 1 ], [ 2 ], [ 3 ], [ 4 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123414,
      "stdout": "../../../../tmp/tmpsnp8kcxj.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmpsnp8kcxj.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i === 0) {\n            temp.push(list1[i]);\n        }\n        else if (list1[i] === list1[i - 1]) {\n            temp.push(list1[i]);\n        }\n        else {\n            result.push(temp);\n            temp = [];\n            temp.push(list1[i]);\n        }\n    }\n    result.push(temp);\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 1, 2, 3, 3, 1, 1]));\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 1, 1, 1, 1, 1, 1]));\nconsole.log(pack_consecutive_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(pack_consecutive_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123413,
      "stdout": "../../../../tmp/tmpkrb1kdq7.ts(25,1): error TS1005: ',' expected.\n../../../../tmp/tmpkrb1kdq7.ts(25,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123413,
      "stdout": "../../../../tmp/tmpw0cm6twy.ts(23,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123414,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2 ],\n  [ 3, 3 ],\n  [ 4, 4, 4, 4 ],\n  [ 5, 5 ],\n  [ 6, 6, 6 ],\n  [ 7, 7 ],\n  [ 8, 8 ],\n  [ 9, 9, 9, 9, 9 ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123414,
      "stdout": "../../../../tmp/tmpsvphch0p.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmpsvphch0p.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            previous = list1[i];\n            temp = [];\n        }\n        temp.push(list1[i]);\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123414,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2 ],\n  [ 3, 3, 3, 3 ],\n  [ 4 ],\n  [ 5, 5, 5 ],\n  [ 6, 6, 6 ],\n  [ 7, 7, 7, 7, 7 ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123414,
      "stdout": "../../../../tmp/tmpwrjfak2m.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmpwrjfak2m.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 6, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123414,
      "stdout": "../../../../tmp/tmp8d6pnitl.ts(24,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123414,
      "stdout": "../../../../tmp/tmpx7g966cs.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmpx7g966cs.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let list2 = [];\n    let temp = [];\n    let j = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (i == 0) {\n            temp.push(list1[i]);\n        }\n        else if (list1[i] == list1[i - 1]) {\n            temp.push(list1[i]);\n        }\n        else {\n            list2.push(temp);\n            temp = [];\n            temp.push(list1[i]);\n        }\n    }\n    list2.push(temp);\n    return list2;\n}\nconsole.log(pack_consecutive_duplicates([\"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"c\", \"a\", \"a\", \"d\", \"e\", \"e\", \"e\", \"e\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123414,
      "stdout": "[\n  [ 'a', 'a', 'a', 'a' ],\n  [ 'b' ],\n  [ 'c', 'c' ],\n  [ 'a', 'a' ],\n  [ 'd' ],\n  [ 'e', 'e', 'e', 'e' ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let previous = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123414,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(\"pack consecutive duplicates of a given array elements into subarrays: \" + pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123414,
      "stdout": "pack consecutive duplicates of a given array elements into subarrays: 1,1,1,2,3,3,3,4,4,4,4,5,5,5,5,5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123414,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2 ],\n  [ 3, 3, 3, 3 ],\n  [ 4 ],\n  [ 5, 5 ],\n  [ 6, 6, 6 ],\n  [ 7, 7, 7, 7, 7, 7 ],\n  [ 8, 8 ],\n  [ 9, 9, 9, 9 ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    var list2 = [];\n    var list3 = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] == list1[i + 1]) {\n            list2.push(list1[i]);\n        }\n        else {\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123414,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2, 2 ],\n  [ 3, 3, 3, 3 ],\n  [ 4, 4, 4 ],\n  [ 5, 5, 5, 5, 5 ],\n  [ 6, 6, 6 ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    list1.forEach(function (element: any) {\n        if (element !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(element);\n        previous = element;\n    });\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 9, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123414,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2 ],\n  [ 3, 3, 3, 3 ],\n  [ 4 ],\n  [ 5, 5, 5, 5, 5 ],\n  [ 6, 6, 6 ],\n  [ 7, 7, 7 ],\n  [ 8, 8 ],\n  [ 9, 9 ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    var result = [];\n    var temp = [];\n    var prev = null;\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123414,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2 ],\n  [ 3, 3, 3, 3 ],\n  [ 4 ],\n  [ 5, 5 ],\n  [ 6, 6, 6 ],\n  [ 7, 7 ],\n  [ 8, 8 ],\n  [ 9, 9, 9, 9, 9 ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    var result = [];\n    var current = null;\n    var count = 0;\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] != current) {\n            if (count > 0) {\n                result.push(count);\n            }\n            current = list1[i];\n            count = 1;\n        } else {\n            count++;\n        }\n    }\n    if (count > 0) {\n        result.push(count);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123414,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n  1,\n  1,\n  2,\n  1,\n  3,\n  1,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmp8ie0uptn.js:26:12)\n    at Object.<anonymous> (/tmp/tmp8ie0uptn.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 1, 1, 1, 2,\n    1, 3, 1, 1, 1,\n    2\n  ],",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let list2 = [];\n    let list3 = [];\n    let list4 = [];\n    let list5 = [];\n    let list6 = [];\n    let list7 = [];\n    let list8 = [];\n    let list9 = [];\n    let list10 = [];\n    let list11 = [];\n    let list12 = [];\n    let list13 = [];\n    let list14 = [];\n    let list15 = [];\n    let list16 = [];\n    let list17 = [];\n    let list18 = [];\n    let list19 = [];\n    let list20 = [];\n    let list21 = [];\n    let list22 = [];\n    let list23 = [];\n    let list24 = [];\n    let list25 = [];\n    let list26 = [];\n    let list27 = [];\n    let list28 = [];\n    let list29 = [];\n    let list30 = [];\n    let list31 = [];\n    let list32 = [];\n    let list33 = [];\n    let list34 = [];\n    let list35 = [];\n    let list36 = [];\n    let list37 = [];\n    let list38 = [];\n    let list39 = [];\n    let list40 = [];\n    let list41 = [];\n    let list42 = [];\n    let list43 = [];\n    let list44 = [];\n    let list45 = [];\n    let list46 = [];\n    let list47 = [];\n    let list48 = [];\n    let list49 = [];\n    let list50 = [];\n    let list51 = [];\n    let list52 = [];\n    let list53 = [];\n    let list54 = [];\n    let list55 = [];\n    let list56 = [];\n    let list57 = [];\n    let list58 = [];\n    let list59 = [];\n    let list60 = [];\n    let list61 = [];\n    let list62 = [];\n    let list63 = [];\n    let list64 = [];\n    let list65 = [];\n    let list66 = [];\n    let list67 = [];\n    let list68 = [];\n    let list69 = [];\n    let list70 = [];\n    let list71 = [];\n    let list72 = [];\n    let list73 = [];\n    let list74 = [];\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "../../../../tmp/tmpr53lo8zt.ts(88,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123414,
      "stdout": "[\n  [ 1, 1 ],\n  [ 2, 2, 2 ],\n  [ 3, 3, 3, 3 ],\n  [ 4 ],\n  [ 5, 5 ],\n  [ 6, 6, 6 ],\n  [ 7, 7, 7, 7, 7, 7 ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let list2 = [];\n    let list3 = [];\n    let list4 = [];\n    let list5 = [];\n    let list6 = [];\n    let list7 = [];\n    let list8 = [];\n    let list9 = [];\n    let list10 = [];\n    let list11 = [];\n    let list12 = [];\n    let list13 = [];\n    let list14 = [];\n    let list15 = [];\n    let list16 = [];\n    let list17 = [];\n    let list18 = [];\n    let list19 = [];\n    let list20 = [];\n    let list21 = [];\n    let list22 = [];\n    let list23 = [];\n    let list24 = [];\n    let list25 = [];\n    let list26 = [];\n    let list27 = [];\n    let list28 = [];\n    let list29 = [];\n    let list30 = [];\n    let list31 = [];\n    let list32 = [];\n    let list33 = [];\n    let list34 = [];\n    let list35 = [];\n    let list36 = [];\n    let list37 = [];\n    let list38 = [];\n    let list39 = [];\n    let list40 = [];\n    let list41 = [];\n    let list42 = [];\n    let list43 = [];\n    let list44 = [];\n    let list45 = [];\n    let list46 = [];\n    let list47 = [];\n    let list48 = [];\n    let list49 = [];\n    let list50 = [];\n    let list51 = [];\n    let list52 = [];\n    let list53 = [];\n    let list54 = [];\n    let list55 = [];\n    let list56 = [];\n    let list57 = [];\n    let list58 = [];\n    let list59 = [];\n    let list60 = [];\n    let list61 = [];\n    let list62 = [];\n    let list63 = [];\n    let list64 = [];\n    let list65 = [];\n    let list66 = [];\n    let list67 = [];\n    let list68 = [];\n    let list69 = [];\n    let list70 = [];\n    let list71 = [];\n    let list72 = [];\n    let list73 = [];\n    let list74 = [];\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "../../../../tmp/tmpr53lo8zt.ts(88,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let list2 = [];\n    let list3 = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list1[i + 1]) {\n            list2.push(list1[i]);\n        } else {\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\n\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 1, 2, 3, 3, 1, 1, 4, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123414,
      "stdout": "[ [ 1, 1, 1, 1 ], [ 2 ], [ 3, 3 ], [ 1, 1 ], [ 4 ], [ 5, 5, 5, 5 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let previous = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] != previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 1, 2, 3, 3, 1, 1, 4, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123416,
      "stdout": "[ [ 1, 1, 1, 1 ], [ 2 ], [ 3, 3 ], [ 1, 1 ], [ 4 ], [ 5, 5, 5, 5 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123417,
      "stdout": "[ [ 1, 1, 1 ], [ 2 ], [ 3, 3, 3 ], [ 4, 4, 4, 4 ], [ 5, 5, 5, 5, 5 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let previous = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123416,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2 ],\n  [ 3, 3, 3, 3 ],\n  [ 4 ],\n  [ 5, 5 ],\n  [ 6, 6, 6 ],\n  [ 7, 7 ],\n  [ 8, 8 ],\n  [ 9 ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let list2 = [];\n    let list3 = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list1[i + 1]) {\n            list2.push(list1[i]);\n        } else {\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123416,
      "stdout": "[ [ 1, 1, 1 ], [ 2 ], [ 3, 3, 3 ], [ 4, 4, 4, 4 ], [ 5, 5, 5, 5, 5 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let previous = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123414,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 6, 6, 6, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123416,
      "stdout": "../../../../tmp/tmpk890vd_2.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmpk890vd_2.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 1, 1, 4, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123417,
      "stdout": "[ [ 1, 1, 1 ], [ 2 ], [ 3, 3, 3 ], [ 1, 1 ], [ 4 ], [ 5, 5, 5, 5 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123416,
      "stdout": "../../../../tmp/tmpwisb7e1b.ts(24,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123416,
      "stdout": "../../../../tmp/tmpu9v6pvcl.ts(23,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any[] = [];\n    let temp: any[] = [];\n    let previous = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    list1.forEach(function (item) {\n        if (item !== prev) {\n            result.push(temp);\n            temp = [];\n        }\n        temp.push(item);\n        prev = item;\n    });\n    result.push(temp);\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [],\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmp9qltjpg6.js:20:12)\n    at Object.<anonymous> (/tmp/tmp9qltjpg6.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at nod",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let previous = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123416,
      "stdout": "../../../../tmp/tmpd0ow74ie.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmpd0ow74ie.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123417,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2, 2 ],\n  [ 3, 3, 3 ],\n  [ 4, 4, 4, 4 ],\n  [ 5, 5, 5, 5, 5 ],\n  [ 6, 6, 6, 6, 6, 6 ],\n  [\n    7, 7, 7, 7,\n    7, 7, 7\n  ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let list2 = [];\n    let list3 = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list1[i + 1]) {\n            list2.push(list1[i]);\n        } else {\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\n\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123416,
      "stdout": "../../../../tmp/tmpicvu72kg.ts(18,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 7, 7, 7, 7, 8, 9, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123417,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2 ],\n  [ 3, 3 ],\n  [ 4 ],\n  [ 5, 5, 5 ],\n  [ 6 ],\n  [ 7, 7, 7, 7 ],\n  [ 8 ],\n  [ 9, 9 ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    var result = [];\n    var current = null;\n    var count = 0;\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] != current) {\n            if (count > 0) {\n                var temp = [];\n                for (var j = 0; j < count; j++) {\n                    temp.push(current);\n                }\n                result.push(temp);\n            }\n            current = list1[i];\n            count = 1;\n        } else {\n            count++;\n        }\n    }\n    if (count > 0) {\n        var temp = [];\n        for (var j = 0; j < count; j++) {\n            temp.push(current);\n        }\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    var list2 = [];\n    var list3 = [];\n    var list4 = [];\n    var list5 = [];\n    var list6 = [];\n    var list7 = [];\n    var list8 = [];\n    var list9 = [];\n    var list10 = [];\n    var list11 = [];\n    var list12 = [];\n    var list13 = [];\n    var list14 = [];\n    var list15 = [];\n    var list16 = [];\n    var list17 = [];\n    var list18 = [];\n    var list19 = [];\n    var list20 = [];\n    var list21 = [];\n    var list22 = [];\n    var list23 = [];\n    var list24 = [];\n    var list25 = [];\n    var list26 = [];\n    var list27 = [];\n    var list28 = [];\n    var list29 = [];\n    var list30 = [];\n    var list31 = [];\n    var list32 = [];\n    var list33 = [];\n    var list34 = [];\n    var list35 = [];\n    var list36 = [];\n    var list37 = [];\n    var list38 = [];\n    var list39 = [];\n    var list40 = [];\n    var list41 = [];\n    var list42 = [];\n    var list43 = [];\n    var list44 = [];\n    var list45 = [];\n    var list46 = [];\n    var list47 = [];\n    var list48 = [];\n    var list49 = [];\n    var list50 = [];\n    var list51 = [];\n    var list52 = [];\n    var list53 = [];\n    var list54 = [];\n    var list55 = [];\n    var list56 = [];\n    var list57 = [];\n    var list58 = [];\n    var list59 = [];\n    var list60 = [];\n    var list61 = [];\n    var list62 = [];\n    var list63 = [];\n    var list64 = [];\n    var list65 = [];\n    var list66 = [];\n    var list67 = [];\n    var list68 = [];\n    var list69 = [];\n    var list70 = [];\n    var list71 = [];\n    var list72 = [];\n    var list73 = [];\n    var list74 = [];\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510445,
      "stdout": "../../../../tmp/tmpu69itfv9.ts(88,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123417,
      "stdout": "../../../../tmp/tmpo9kp8kj7.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmpo9kp8kj7.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9, 9, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123417,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2 ],\n  [ 3, 3, 3, 3 ],\n  [ 4 ],\n  [ 5, 5, 5, 5, 5 ],\n  [ 6, 6, 6 ],\n  [ 7, 7 ],\n  [ 8, 8 ],\n  [ 9, 9, 9, 9, 9, 9 ],\n  [ 10 ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let prev: any = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 6, 7, 7, 7, 8, 9, 9, 9, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123417,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2 ],\n  [ 3, 3, 3 ],\n  [ 4 ],\n  [ 5, 5, 5 ],\n  [ 6 ],\n  [ 7, 7, 7 ],\n  [ 8 ],\n  [ 9, 9, 9, 9 ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    var result = [];\n    var i = 0;\n    while (i < list1.length) {\n        var count = 0;\n        var j = i;\n        while (j < list1.length && list1[i] == list1[j]) {\n            j++;\n            count++;\n        }\n        result.push(list1.slice(i, i + count));\n        i = j;\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 1, 2, 2, 2, 1, 1]));\nconsole.log(pack_consecutive_duplicates([\"a\", \"a\", \"a\", \"b\", \"b\", \"c\", \"c\", \"a\", \"a\", \"d\", \"d\", \"e\", \"e\", \"e\", \"e\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123417,
      "stdout": "[ [ 1, 1, 1, 1 ], [ 2, 2, 2 ], [ 1, 1 ] ]\n[\n  [ 'a', 'a', 'a' ],\n  [ 'b', 'b' ],\n  [ 'c', 'c' ],\n  [ 'a', 'a' ],\n  [ 'd', 'd' ],\n  [ 'e', 'e', 'e', 'e' ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let list2 = [];\n    let list3 = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] == list1[i + 1]) {\n            list2.push(list1[i]);\n        }\n        else {\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123417,
      "stdout": "../../../../tmp/tmp_q9i1srj.ts(18,1): error TS1005: ',' expected.\n../../../../tmp/tmp_q9i1srj.ts(18,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let list2 = [];\n    let temp = [];\n    let i = 0;\n    while (i < list1.length) {\n        if (list1[i] == list1[i + 1]) {\n            temp.push(list1[i]);\n            i++;\n        }\n        else {\n            temp.push(list1[i]);\n            list2.push(temp);\n            temp = [];\n            i++;\n        }\n    }\n    return list2;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123417,
      "stdout": "../../../../tmp/tmpyhq07cmd.ts(21,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    list1.forEach(function (item: any) {\n        if (item !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(item);\n        previous = item;\n    });\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123418,
      "stdout": "../../../../tmp/tmpsclgxgvt.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmpsclgxgvt.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    var result = [];\n    var current = null;\n    var count = 0;\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] != current) {\n            if (count > 0) {\n                result.push(count);\n            }\n            current = list1[i];\n            count = 1;\n        } else {\n            count++;\n        }\n    }\n    if (count > 0) {\n        result.push(count);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123414,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n  1,\n  1,\n  2,\n  1,\n  3,\n  1,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmp8ie0uptn.js:26:12)\n    at Object.<anonymous> (/tmp/tmp8ie0uptn.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 1, 1, 1, 2,\n    1, 3, 1, 1, 1,\n    2\n  ],",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    var result = [];\n    var current = null;\n    var count = 0;\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] != current) {\n            if (count > 0) {\n                result.push(count);\n            }\n            current = list1[i];\n            count = 1;\n        } else {\n            count++;\n        }\n    }\n    if (count > 0) {\n        result.push(count);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123414,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n  1,\n  1,\n  2,\n  1,\n  3,\n  1,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmp8ie0uptn.js:26:12)\n    at Object.<anonymous> (/tmp/tmp8ie0uptn.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 1, 1, 1, 2,\n    1, 3, 1, 1, 1,\n    2\n  ],",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 6, 7, 7, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123419,
      "stdout": "../../../../tmp/tmpqwppa8mc.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmpqwppa8mc.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let list2: any = []\n    let list3: any = []\n    let list4: any = []\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] == list1[i + 1]) {\n            list2.push(list1[i])\n        }\n        else {\n            list2.push(list1[i])\n            list3.push(list2)\n            list2 = []\n        }\n    }\n    for (let i = 0; i < list3.length; i++) {\n        list4.push(list3[i])\n    }\n    return list4\n}\nconsole.log(pack_consecutive_duplicates([\"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"c\", \"a\", \"a\", \"d\", \"e\", \"e\", \"e\", \"e\"]))\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123419,
      "stdout": "[\n  [ 'a', 'a', 'a', 'a' ],\n  [ 'b' ],\n  [ 'c', 'c' ],\n  [ 'a', 'a' ],\n  [ 'd' ],\n  [ 'e', 'e', 'e', 'e' ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 2, 2, 3, 4, 4, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123419,
      "stdout": "[ [ 1 ], [ 2, 2 ], [ 3 ], [ 4, 4 ], [ 5, 5, 5 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list1[i + 1]) {\n            temp.push(list1[i]);\n        } else {\n            temp.push(list1[i]);\n            result.push(temp);\n            temp = [];\n        }\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 5, 6, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123419,
      "stdout": "[ [ 1, 1, 1 ], [ 2, 2 ], [ 3, 3, 3, 3 ], [ 4 ], [ 5, 5, 5 ], [ 6, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123419,
      "stdout": "../../../../tmp/tmph_vc5yim.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmph_vc5yim.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i === 0) {\n            temp.push(list1[i]);\n        }\n        else if (list1[i] === list1[i - 1]) {\n            temp.push(list1[i]);\n        }\n        else {\n            result.push(temp);\n            temp = [];\n            temp.push(list1[i]);\n        }\n    }\n    result.push(temp);\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123419,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2, 2 ],\n  [ 3, 3, 3, 3 ],\n  [ 4 ],\n  [ 5, 5, 5 ],\n  [ 6, 6, 6 ],\n  [ 7, 7, 7, 7, 7, 7 ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 1, 2, 3, 3, 1, 1, 4, 5, 5, 5, 5]));\nconsole.log(pack_consecutive_duplicates([1, 1, 2, 2, 3, 3]));\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 1, 1]));\nconsole.log(pack_consecutive_duplicates([1, 2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123419,
      "stdout": "[ [ 1, 1, 1, 1 ], [ 2 ], [ 3, 3 ], [ 1, 1 ], [ 4 ], [ 5, 5, 5, 5 ] ]\n[ [ 1, 1 ], [ 2, 2 ], [ 3, 3 ] ]\n[ [ 1, 1, 1, 1, 1 ] ]\n[ [ 1 ], [ 2 ], [ 3 ], [ 4 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let current = null;\n    let count = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== current) {\n            if (count > 0) {\n                result.push(count);\n            }\n            current = list1[i];\n            count = 1;\n        } else {\n            count++;\n        }\n    }\n    if (count > 0) {\n        result.push(count);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n  1,\n  1,\n  2,\n  1,\n  3,\n  1,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmp93j_1csr.js:26:12)\n    at Object.<anonymous> (/tmp/tmp93j_1csr.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 1, 1, 1, 2,\n    1, 3, 1, 1, 1,\n    2\n  ],",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let list2: any = [];\n    let list3: any = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] == list1[i + 1]) {\n            list2.push(list1[i]);\n        }\n        else {\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 1, 2, 3, 3, 1, 1, 4, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123419,
      "stdout": "[ [ 1, 1, 1, 1 ], [ 2 ], [ 3, 3 ], [ 1, 1 ], [ 4 ], [ 5, 5, 5, 5 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    list1.forEach((item: any) => {\n        if (item !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(item);\n        previous = item;\n    });\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123419,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let list2 = [];\n    let temp = [];\n    let j = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (i == 0) {\n            temp[j] = list1[i];\n            j++;\n        }\n        else {\n            if (list1[i] == list1[i - 1]) {\n                temp[j] = list1[i];\n                j++;\n            }\n            else {\n                list2.push(temp);\n                temp = [];\n                j = 0;\n                temp[j] = list1[i];\n                j++;\n            }\n        }\n    }\n    list2.push(temp);\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 7, 8, 8, 9, 9, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123419,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2 ],\n  [ 3, 3, 3 ],\n  [ 4 ],\n  [ 5, 5, 5, 5, 5 ],\n  [ 6 ],\n  [ 7, 7 ],\n  [ 8, 8 ],\n  [ 9, 9, 9 ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123420,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2, 2 ],\n  [ 3, 3, 3 ],\n  [ 4, 4 ],\n  [\n    5, 5, 5, 5,\n    5, 5, 5\n  ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123419,
      "stdout": "../../../../tmp/tmp1nvhj6_3.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmp1nvhj6_3.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123420,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2, 2 ],\n  [ 3, 3, 3, 3 ],\n  [ 4 ],\n  [ 5, 5 ],\n  [ 6, 6, 6 ],\n  [ 7, 7, 7, 7 ],\n  [ 8, 8 ],\n  [ 9, 9, 9, 9, 9 ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123419,
      "stdout": "../../../../tmp/tmph_vc5yim.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmph_vc5yim.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 1, 2, 3, 3, 1, 1]));\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 1, 1]));\nconsole.log(pack_consecutive_duplicates([1, 2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123420,
      "stdout": "[ [ 1, 1, 1, 1 ], [ 2 ], [ 3, 3 ], [ 1, 1 ] ]\n[ [ 1, 1, 1, 1, 1 ] ]\n[ [ 1 ], [ 2 ], [ 3 ], [ 4 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123420,
      "stdout": "[ [ 1, 1, 1 ], [ 2, 2 ], [ 3, 3, 3, 3 ], [ 4, 4 ], [ 5, 5, 5, 5, 5 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let list2 = [];\n    let list3 = [];\n    let list4 = [];\n    let list5 = [];\n    let list6 = [];\n    let list7 = [];\n    let list8 = [];\n    let list9 = [];\n    let list10 = [];\n    let list11 = [];\n    let list12 = [];\n    let list13 = [];\n    let list14 = [];\n    let list15 = [];\n    let list16 = [];\n    let list17 = [];\n    let list18 = [];\n    let list19 = [];\n    let list20 = [];\n    let list21 = [];\n    let list22 = [];\n    let list23 = [];\n    let list24 = [];\n    let list25 = [];\n    let list26 = [];\n    let list27 = [];\n    let list28 = [];\n    let list29 = [];\n    let list30 = [];\n    let list31 = [];\n    let list32 = [];\n    let list33 = [];\n    let list34 = [];\n    let list35 = [];\n    let list36 = [];\n    let list37 = [];\n    let list38 = [];\n    let list39 = [];\n    let list40 = [];\n    let list41 = [];\n    let list42 = [];\n    let list43 = [];\n    let list44 = [];\n    let list45 = [];\n    let list46 = [];\n    let list47 = [];\n    let list48 = [];\n    let list49 = [];\n    let list50 = [];\n    let list51 = [];\n    let list52 = [];\n    let list53 = [];\n    let list54 = [];\n    let list55 = [];\n    let list56 = [];\n    let list57 = [];\n    let list58 = [];\n    let list59 = [];\n    let list60 = [];\n    let list61 = [];\n    let list62 = [];\n    let list63 = [];\n    let list64 = [];\n    let list65 = [];\n    let list66 = [];\n    let list67 = [];\n    let list68 = [];\n    let list69 = [];\n    let list70 = [];\n    let list71 = [];\n    let list72 = [];\n    let list73 = [];\n    let list74 = [];\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "../../../../tmp/tmpr53lo8zt.ts(88,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let count = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (i == 0) {\n            result.push([]);\n            result[count].push(list1[i]);\n        }\n        else if (list1[i] == list1[i - 1]) {\n            result[count].push(list1[i]);\n        }\n        else {\n            count++;\n            result.push([]);\n            result[count].push(list1[i]);\n        }\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123420,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2, 2 ],\n  [ 3, 3, 3 ],\n  [ 4 ],\n  [\n    5, 5, 5, 5,\n    5, 5, 5\n  ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let list2 = [];\n    let temp = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list1[i + 1]) {\n            temp.push(list1[i]);\n        } else {\n            temp.push(list1[i]);\n            list2.push(temp);\n            temp = [];\n        }\n    }\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123420,
      "stdout": "[ [ 1, 1, 1 ], [ 2 ], [ 3, 3, 3 ], [ 4 ], [ 5, 5, 5, 5, 5, 5 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    var result = [];\n    var current = null;\n    var count = 0;\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] != current) {\n            if (count > 0) {\n                var temp = [];\n                for (var j = 0; j < count; j++) {\n                    temp.push(current);\n                }\n                result.push(temp);\n            }\n            current = list1[i];\n            count = 1;\n        } else {\n            count++;\n        }\n    }\n    if (count > 0) {\n        var temp = [];\n        for (var j = 0; j < count; j++) {\n            temp.push(current);\n        }\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123417,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    var result = [];\n    var current = null;\n    var count = 0;\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] != current) {\n            if (count > 0) {\n                result.push(list1.slice(i - count, i));\n            }\n            current = list1[i];\n            count = 1;\n        } else {\n            count++;\n        }\n    }\n    if (count > 0) {\n        result.push(list1.slice(list1.length - count, list1.length));\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    for (let i: number = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123421,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let list2 = [];\n    let list3 = [];\n    let list4 = [];\n    let list5 = [];\n    let list6 = [];\n    let list7 = [];\n    let list8 = [];\n    let list9 = [];\n    let list10 = [];\n    let list11 = [];\n    let list12 = [];\n    let list13 = [];\n    let list14 = [];\n    let list15 = [];\n    let list16 = [];\n    let list17 = [];\n    let list18 = [];\n    let list19 = [];\n    let list20 = [];\n    let list21 = [];\n    let list22 = [];\n    let list23 = [];\n    let list24 = [];\n    let list25 = [];\n    let list26 = [];\n    let list27 = [];\n    let list28 = [];\n    let list29 = [];\n    let list30 = [];\n    let list31 = [];\n    let list32 = [];\n    let list33 = [];\n    let list34 = [];\n    let list35 = [];\n    let list36 = [];\n    let list37 = [];\n    let list38 = [];\n    let list39 = [];\n    let list40 = [];\n    let list41 = [];\n    let list42 = [];\n    let list43 = [];\n    let list44 = [];\n    let list45 = [];\n    let list46 = [];\n    let list47 = [];\n    let list48 = [];\n    let list49 = [];\n    let list50 = [];\n    let list51 = [];\n    let list52 = [];\n    let list53 = [];\n    let list54 = [];\n    let list55 = [];\n    let list56 = [];\n    let list57 = [];\n    let list58 = [];\n    let list59 = [];\n    let list60 = [];\n    let list61 = [];\n    let list62 = [];\n    let list63 = [];\n    let list64 = [];\n    let list65 = [];\n    let list66 = [];\n    let list67 = [];\n    let list68 = [];\n    let list69 = [];\n    let list70 = [];\n    let list71 = [];\n    let list72 = [];\n    let list73 = [];\n    let list74 = [];\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "../../../../tmp/tmpr53lo8zt.ts(88,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let list2 = [];\n    let list3 = [];\n    let list4 = [];\n    let list5 = [];\n    let list6 = [];\n    let list7 = [];\n    let list8 = [];\n    let list9 = [];\n    let list10 = [];\n    let list11 = [];\n    let list12 = [];\n    let list13 = [];\n    let list14 = [];\n    let list15 = [];\n    let list16 = [];\n    let list17 = [];\n    let list18 = [];\n    let list19 = [];\n    let list20 = [];\n    let list21 = [];\n    let list22 = [];\n    let list23 = [];\n    let list24 = [];\n    let list25 = [];\n    let list26 = [];\n    let list27 = [];\n    let list28 = [];\n    let list29 = [];\n    let list30 = [];\n    let list31 = [];\n    let list32 = [];\n    let list33 = [];\n    let list34 = [];\n    let list35 = [];\n    let list36 = [];\n    let list37 = [];\n    let list38 = [];\n    let list39 = [];\n    let list40 = [];\n    let list41 = [];\n    let list42 = [];\n    let list43 = [];\n    let list44 = [];\n    let list45 = [];\n    let list46 = [];\n    let list47 = [];\n    let list48 = [];\n    let list49 = [];\n    let list50 = [];\n    let list51 = [];\n    let list52 = [];\n    let list53 = [];\n    let list54 = [];\n    let list55 = [];\n    let list56 = [];\n    let list57 = [];\n    let list58 = [];\n    let list59 = [];\n    let list60 = [];\n    let list61 = [];\n    let list62 = [];\n    let list63 = [];\n    let list64 = [];\n    let list65 = [];\n    let list66 = [];\n    let list67 = [];\n    let list68 = [];\n    let list69 = [];\n    let list70 = [];\n    let list71 = [];\n    let list72 = [];\n    let list73 = [];\n    let list74 = [];\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "../../../../tmp/tmpr53lo8zt.ts(88,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123421,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2 ],\n  [ 3, 3, 3 ],\n  [ 4, 4, 4, 4 ],\n  [ 5, 5, 5, 5, 5 ],\n  [ 6, 6, 6, 6, 6, 6 ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let previous = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123422,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2 ],\n  [ 3, 3, 3 ],\n  [ 4, 4, 4, 4 ],\n  [ 5, 5, 5, 5, 5 ],\n  [ 6, 6, 6, 6, 6, 6 ],\n  [\n    7, 7, 7, 7,\n    7, 7, 7\n  ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list1[i + 1]) {\n            temp.push(list1[i]);\n        } else {\n            temp.push(list1[i]);\n            result.push(temp);\n            temp = [];\n        }\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 1, 2, 3, 3, 1, 1]));\nconsole.log(pack_consecutive_duplicates([\"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"c\", \"a\", \"a\", \"d\", \"e\", \"e\", \"e\", \"e\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123422,
      "stdout": "[ [ 1, 1, 1, 1 ], [ 2 ], [ 3, 3 ], [ 1, 1 ] ]\n[\n  [ 'a', 'a', 'a', 'a' ],\n  [ 'b' ],\n  [ 'c', 'c' ],\n  [ 'a', 'a' ],\n  [ 'd' ],\n  [ 'e', 'e', 'e', 'e' ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i == 0) {\n            temp.push(list1[i]);\n        }\n        else if (list1[i] == list1[i - 1]) {\n            temp.push(list1[i]);\n        }\n        else {\n            result.push(temp);\n            temp = [];\n            temp.push(list1[i]);\n        }\n    }\n    result.push(temp);\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123422,
      "stdout": "../../../../tmp/tmplx77itpa.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmplx77itpa.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(\"Packing consecutive duplicates of the array elements into subarrays: \" + pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123422,
      "stdout": "Packing consecutive duplicates of the array elements into subarrays: 1,1,1,2,3,3,3,3,4,4,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let prev: any = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123422,
      "stdout": "../../../../tmp/tmph34ap7_1.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmph34ap7_1.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9, 9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123422,
      "stdout": "[\n  [ 1, 1, 1 ],\n  [ 2 ],\n  [ 3, 3, 3, 3 ],\n  [ 4 ],\n  [ 5, 5 ],\n  [ 6, 6, 6 ],\n  [ 7, 7 ],\n  [ 8, 8 ],\n  [ 9, 9, 9, 9, 9 ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let previous = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123414,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let previous = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123414,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let list2 = [];\n    let temp = [];\n    let j = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (i == 0) {\n            temp[j] = list1[i];\n        }\n        else if (list1[i] == list1[i - 1]) {\n            temp[j] = list1[i];\n        }\n        else {\n            list2[j] = temp;\n            temp = [];\n            j++;\n            temp[0] = list1[i];\n        }\n    }\n    list2[j] = temp;\n    return list2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    <3 empty items>,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    <5 empty items>,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    <9 empty items>,\n    4\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmp9oa7a2iu.js:26:12)\n    at Object.<anonymous> (/tmp/tmp9oa7a2iu.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "../../../../tmp/tmp8f4_6a2z.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmp8f4_6a2z.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let previous = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123422,
      "stdout": "../../../../tmp/tmp9uwndlp2.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmp9uwndlp2.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let current = null;\n    let count = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== current) {\n            if (count > 0) {\n                result.push(count);\n            }\n            current = list1[i];\n            count = 1;\n        } else {\n            count++;\n        }\n    }\n    if (count > 0) {\n        result.push(count);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123420,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n  1,\n  1,\n  2,\n  1,\n  3,\n  1,\n  1,\n  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  [\n    0,\n    0\n  ],\n  [\n    1\n  ],\n  [\n    2\n  ],\n  [\n    3\n  ],\n  [\n    4,\n    4\n  ],\n  [\n    5\n  ],\n  [\n    6,\n    6,\n    6\n  ],\n  [\n    7\n  ],\n  [\n    8\n  ],\n  [\n    9\n  ],\n  [\n    4,\n    4\n  ]\n]\n    at test (/tmp/tmp93j_1csr.js:26:12)\n    at Object.<anonymous> (/tmp/tmp93j_1csr.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2, 1, 1, 1, 2,\n    1, 3, 1, 1, 1,\n    2\n  ],",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i === 0) {\n            temp.push(list1[i]);\n        }\n        else {\n            if (list1[i] === list1[i - 1]) {\n                temp.push(list1[i]);\n            }\n            else {\n                result.push(temp);\n                temp = [];\n                temp.push(list1[i]);\n            }\n        }\n    }\n    result.push(temp);\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    var result = [];\n    var temp = [];\n    var previous = null;\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 4, 4, 5, 5, 5, 5, 5, 6, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123422,
      "stdout": "../../../../tmp/tmpz7zfi74m.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmpz7zfi74m.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    var result = [];\n    var temp = [];\n    var prev = null;\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123422,
      "stdout": "../../../../tmp/tmpekjkuisb.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmpekjkuisb.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123422,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let list2 = [];\n    let count = 0;\n    let temp = list1[0];\n    for (let i = 0; i < list1.length; i++) {\n        if (temp == list1[i]) {\n            count++;\n        }\n        else {\n            list2.push(list1.slice(i - count, i));\n            count = 1;\n            temp = list1[i];\n        }\n    }\n    list2.push(list1.slice(list1.length - count, list1.length));\n    return list2;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 1, 2, 2, 2, 1, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123422,
      "stdout": "[ [ 1, 1, 1, 1 ], [ 2, 2, 2 ], [ 1, 1 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 3, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123422,
      "stdout": "../../../../tmp/tmp479wq91a.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmp479wq91a.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let list2 = [];\n    let list3 = [];\n    let list4 = [];\n    let list5 = [];\n    let list6 = [];\n    let list7 = [];\n    let list8 = [];\n    let list9 = [];\n    let list10 = [];\n    let list11 = [];\n    let list12 = [];\n    let list13 = [];\n    let list14 = [];\n    let list15 = [];\n    let list16 = [];\n    let list17 = [];\n    let list18 = [];\n    let list19 = [];\n    let list20 = [];\n    let list21 = [];\n    let list22 = [];\n    let list23 = [];\n    let list24 = [];\n    let list25 = [];\n    let list26 = [];\n    let list27 = [];\n    let list28 = [];\n    let list29 = [];\n    let list30 = [];\n    let list31 = [];\n    let list32 = [];\n    let list33 = [];\n    let list34 = [];\n    let list35 = [];\n    let list36 = [];\n    let list37 = [];\n    let list38 = [];\n    let list39 = [];\n    let list40 = [];\n    let list41 = [];\n    let list42 = [];\n    let list43 = [];\n    let list44 = [];\n    let list45 = [];\n    let list46 = [];\n    let list47 = [];\n    let list48 = [];\n    let list49 = [];\n    let list50 = [];\n    let list51 = [];\n    let list52 = [];\n    let list53 = [];\n    let list54 = [];\n    let list55 = [];\n    let list56 = [];\n    let list57 = [];\n    let list58 = [];\n    let list59 = [];\n    let list60 = [];\n    let list61 = [];\n    let list62 = [];\n    let list63 = [];\n    let list64 = [];\n    let list65 = [];\n    let list66 = [];\n    let list67 = [];\n    let list68 = [];\n    let list69 = [];\n    let list70 = [];\n    let list71 = [];\n    let list72 = [];\n    let list73 = [];\n    let list74 = [];\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "../../../../tmp/tmpr53lo8zt.ts(88,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123423,
      "stdout": "[ [ 1, 1, 1 ], [ 2 ], [ 3, 3, 3 ], [ 4 ], [ 5, 5, 5, 5, 5 ], [ 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let previous = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\nconsole.log(pack_consecutive_duplicates([\"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"c\", \"a\", \"a\", \"d\", \"e\", \"e\", \"e\", \"e\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123423,
      "stdout": "[\n  [ 'a', 'a', 'a', 'a' ],\n  [ 'b' ],\n  [ 'c', 'c' ],\n  [ 'a', 'a' ],\n  [ 'd' ],\n  [ 'e', 'e', 'e', 'e' ]\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] == list1[i + 1]) {\n            temp.push(list1[i]);\n        } else {\n            temp.push(list1[i]);\n            result.push(temp);\n            temp = [];\n        }\n    }\n    return result;\n}\n\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123422,
      "stdout": "../../../../tmp/tmp_re4lgbm.ts(18,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any[] = [];\n    let temp: any[] = [];\n    let previous = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123422,
      "stdout": "../../../../tmp/tmpvj176mu0.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmpvj176mu0.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123422,
      "stdout": "../../../../tmp/tmpsz6mbvq7.ts(23,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list1[i + 1]) {\n            temp.push(list1[i]);\n        } else {\n            temp.push(list1[i]);\n            result.push(temp);\n            temp = [];\n        }\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 1, 2, 2, 2, 1, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123423,
      "stdout": "[ [ 1, 1, 1, 1 ], [ 2, 2, 2 ], [ 1, 1 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123423,
      "stdout": "[ [ 1, 1, 1 ], [ 2 ], [ 3, 3, 3 ], [ 4, 4 ], [ 5, 5, 5, 5 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    list1.forEach(function (item: any) {\n        if (item !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(item);\n        previous = item;\n    });\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123423,
      "stdout": "../../../../tmp/tmpapwwu_zg.ts(23,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let list2 = [];\n    let list3 = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list1[i + 1]) {\n            list2.push(list1[i]);\n        }\n        else {\n            list2.push(list1[i]);\n            list3.push(list2);\n            list2 = [];\n        }\n    }\n    return list3;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 6, 6, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123423,
      "stdout": "[ [ 1, 1, 1 ], [ 2, 2 ], [ 3, 3, 3, 3 ], [ 4 ], [ 5, 5 ], [ 6, 6, 6 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let previous = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123414,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous: any = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 4, 4, 5, 5, 5, 5, 5, 6, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123423,
      "stdout": "../../../../tmp/tmp5om0srnu.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmp5om0srnu.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    let prev = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== prev) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        prev = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123411,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result = [];\n    let temp = [];\n    for (let i = 0; i < list1.length; i++) {\n        if (i == 0) {\n            temp.push(list1[i]);\n        } else {\n            if (list1[i] == list1[i - 1]) {\n                temp.push(list1[i]);\n            } else {\n                result.push(temp);\n                temp = [];\n                temp.push(list1[i]);\n            }\n        }\n    }\n    result.push(temp);\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123423,
      "stdout": "../../../../tmp/tmprq4ikx29.ts(22,1): error TS1005: ',' expected.\n../../../../tmp/tmprq4ikx29.ts(22,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let list2: any = [];\n    let list3: any = [];\n    let list4: any = [];\n    let list5: any = [];\n    let list6: any = [];\n    let list7: any = [];\n    let list8: any = [];\n    let list9: any = [];\n    let list10: any = [];\n    let list11: any = [];\n    let list12: any = [];\n    let list13: any = [];\n    let list14: any = [];\n    let list15: any = [];\n    let list16: any = [];\n    let list17: any = [];\n    let list18: any = [];\n    let list19: any = [];\n    let list20: any = [];\n    let list21: any = [];\n    let list22: any = [];\n    let list23: any = [];\n    let list24: any = [];\n    let list25: any = [];\n    let list26: any = [];\n    let list27: any = [];\n    let list28: any = [];\n    let list29: any = [];\n    let list30: any = [];\n    let list31: any = [];\n    let list32: any = [];\n    let list33: any = [];\n    let list34: any = [];\n    let list35: any = [];\n    let list36: any = [];\n    let list37: any = [];\n    let list38: any = [];\n    let list39: any = [];\n    let list40: any = [];\n    let list41: any = [];\n    let list42: any = [];\n    let list43: any = [];\n    let list44: any = [];\n    let list45: any = [];\n    let list46: any = [];\n    let list47: any = [];\n    let list48: any = [];\n    let list49: any = [];\n    let list50: any = [];\n    let list51: any = [];\n    let list52: any = [];\n    let list53: any = [];\n    let list54: any = [];\n    let list55: any = [];\n    let list56: any = [];\n    let list57: any = [];\n    let list58: any =\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "../../../../tmp/tmp52sgh3ib.ts(60,9): error TS1005: ',' expected.\n../../../../tmp/tmp52sgh3ib.ts(71,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to pack consecutive duplicates of a given array elements into subarrays.\nfunction pack_consecutive_duplicates(list1: any): any {\n    let result: any = [];\n    let temp: any = [];\n    let previous = null;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] !== previous) {\n            if (temp.length > 0) {\n                result.push(temp);\n            }\n            temp = [];\n        }\n        temp.push(list1[i]);\n        previous = list1[i];\n    }\n    if (temp.length > 0) {\n        result.push(temp);\n    }\n    return result;\n}\nconsole.log(pack_consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = pack_consecutive_duplicates;\n  assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);\n  assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);\n  assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);\n}\n\ntest();",
      "timestamp": 1666123424,
      "stdout": "[ [ 1, 1, 1 ], [ 2 ], [ 3, 3, 3 ], [ 4, 4, 4, 4 ], [ 5, 5, 5, 5, 5 ] ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}