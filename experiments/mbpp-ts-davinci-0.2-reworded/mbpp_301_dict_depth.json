{
  "name": "mbpp_301_dict_depth",
  "language": "ts",
  "prompt": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_301_dict_depth.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_sub = dict_depth(d[key]);\n            if (depth_of_sub > depth) {\n                depth = depth_of_sub;\n            }\n        }\n    }\n    return 1 + depth;\n}\n",
    "    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n",
    "    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max = 0;\n    for (let k in d) {\n        let v = d[k];\n        let depth = dict_depth(v);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n",
    "    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_subdict = dict_depth(d[key]);\n            if (depth_of_subdict > depth) {\n                depth = depth_of_subdict;\n            }\n        }\n    }\n    return 1 + depth;\n}\n",
    "    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;\n}\n",
    "    let max = 0;\n    for (let key in d) {\n        if (d.hasOwnProperty(key)) {\n            if (typeof d[key] === \"object\") {\n                let depth = dict_depth(d[key]) + 1;\n                if (depth > max) {\n                    max = depth;\n                }\n            }\n        }\n    }\n    return max;\n}\n",
    "    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max = 0;\n    for (const key in d) {\n        if (d.hasOwnProperty(key)) {\n            const depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n",
    "    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_key = dict_depth(d[key]);\n            if (depth_of_key > depth) {\n                depth = depth_of_key;\n            }\n        }\n    }\n    return 1 + depth;\n}\n",
    "    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n",
    "    if (d === null) {\n        return 0;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        max_depth = Math.max(max_depth, dict_depth(d[key]));\n    }\n    return max_depth + 1;\n}\n",
    "    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n",
    "    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== \"object\") {\n        return 1;\n    }\n    let max = 0;\n    for (let key in d) {\n        max = Math.max(max, dict_depth(d[key]));\n    }\n    return max + 1;\n}\n",
    "    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == 'object') {\n            let depth_of_sub = dict_depth(d[key]);\n            if (depth_of_sub > depth) {\n                depth = depth_of_sub;\n            }\n        }\n    }\n    return depth + 1;\n}\n",
    "    let depth = 1;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth_of_sub = dict_depth(d[key]) + 1;\n            if (depth_of_sub > depth) {\n                depth = depth_of_sub;\n            }\n        }\n    }\n    return depth;\n}\n",
    "    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        let value = d[key];\n        if (typeof value === 'object') {\n            let depth = dict_depth(value);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n",
    "    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] == 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n",
    "    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let k in d) {\n        max = Math.max(max, dict_depth(d[k]));\n    }\n    return max + 1;\n}\n",
    "    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n",
    "    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_key = dict_depth(d[key]);\n            if (depth_of_key > depth) {\n                depth = depth_of_key;\n            }\n        }\n    }\n    return depth + 1;\n}\n",
    "    let depth = 0;\n    for (const key in d) {\n        if (d.hasOwnProperty(key)) {\n            const element = d[key];\n            if (typeof element === 'object') {\n                const sub_depth = dict_depth(element);\n                if (sub_depth > depth) {\n                    depth = sub_depth;\n                }\n            }\n        }\n    }\n    return depth + 1;\n}\n"
  ]
}