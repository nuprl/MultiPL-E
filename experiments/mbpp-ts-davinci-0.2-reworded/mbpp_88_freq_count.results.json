{
  "name": "mbpp_88_freq_count",
  "language": "ts",
  "prompt": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_88_freq_count.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_count[list1[i]] == undefined) {\n            freq_count[list1[i]] = 1;\n        }\n        else {\n            freq_count[list1[i]] += 1;\n        }\n    }\n    return freq_count;\n}\n\nconsole.log(freq_count([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "{\n  '1': 1,\n  '2': 1,\n  '3': 1,\n  '4': 1,\n  '5': 1,\n  '6': 1,\n  '7': 1,\n  '8': 1,\n  '9': 1,\n  '10': 1,\n  '11': 1,\n  '12': 1,\n  '13': 1,\n  '14': 1,\n  '15': 1,\n  '16': 1,\n  '17': 1,\n  '18': 1,\n  '19': 1,\n  '20': 1,\n  '21': 1,\n  '22': 1,\n  '23': 1,\n  '24': 1,\n  '25': 1,\n  '26': 1,\n  '27': 1,\n  '28': 1,\n  '29': 1,\n  '30': 1,\n  '31': 1,\n  '32': 1,\n  '33': 1,\n  '34': 1,\n  '35': 1,\n  '36': 1,\n  '37': 1,\n  '38': 1,\n  '39': 1,\n  '40': 1,\n  '41': 1,\n  '42': 1,\n  '43': 1,\n  '44': 1,\n  '45': 1,\n  '46': 1,\n  '47': 1,\n  '48': 1,\n  '49': 1,\n  '50': 1,\n  '51': 1,\n  '52': 1,\n  '53': 1,\n  '54': 1,\n  '55': 1,\n  '56': 1,\n  '57': 1,\n  '58': 1,\n  '59': 1,\n  '60': 1,\n  '61': 1,\n  '62': 1,\n  '63': 1,\n  '64': 1,\n  '65': 1,\n  '66': 1,\n  '67': 1,\n  '68': 1,\n  '69': 1,\n  '70': 1,\n  '71': 1,\n  '72': 1,\n  '73': 1,\n  '74': 1,\n  '75': 1,\n  '76': 1,\n  '77': 1,\n  '78': 1,\n  '79': 1,\n  '80': 1,\n  '81': 1,\n  '82': 1,\n  '83': 1,\n  '84': 1,\n  '85': 1,\n  '86': 1,\n  '87': 1,\n  '88': 1,\n  '89': 1,\n  '90': 1,\n  '91': 1,\n  '92': 1,\n  '93': 1,\n  '94': ",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    list1.forEach(function(i) { count[i] = (count[i]||0) + 1;});\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        if (num in freq_count) {\n            freq_count[num] += 1;\n        } else {\n            freq_count[num] = 1;\n        }\n    }\n    return freq_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count[list1[i]]) {\n            count[list1[i]] += 1;\n        } else {\n            count[list1[i]] = 1;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] in freq_count_dict) {\n            freq_count_dict[list1[i]] += 1;\n        } else {\n            freq_count_dict[list1[i]] = 1;\n        }\n    }\n    return freq_count_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_count[list1[i]] == undefined) {\n            freq_count[list1[i]] = 1;\n        } else {\n            freq_count[list1[i]] += 1;\n        }\n    }\n    return freq_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    list1.forEach(function(i) { count[i] = (count[i]||0) + 1;});\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_count_dict[list1[i]] == undefined) {\n            freq_count_dict[list1[i]] = 1;\n        }\n        else {\n            freq_count_dict[list1[i]] += 1;\n        }\n    }\n    return freq_count_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq[list1[i]] == undefined) {\n            freq[list1[i]] = 1;\n        } else {\n            freq[list1[i]] += 1;\n        }\n    }\n    return freq;\n}\n\nconsole.log(freq_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "{\n  '1': 1,\n  '2': 1,\n  '3': 1,\n  '4': 1,\n  '5': 1,\n  '6': 1,\n  '7': 1,\n  '8': 1,\n  '9': 1,\n  '10': 1,\n  '11': 1,\n  '12': 1,\n  '13': 1\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_list = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_list[list1[i]] == undefined) {\n            freq_list[list1[i]] = 1;\n        } else {\n            freq_list[list1[i]] += 1;\n        }\n    }\n    return freq_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count[list1[i]] == undefined) {\n            count[list1[i]] = 1;\n        } else {\n            count[list1[i]] += 1;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let obj: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (obj[list1[i]]) {\n            obj[list1[i]] += 1;\n        } else {\n            obj[list1[i]] = 1;\n        }\n    }\n    return obj;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count: {[key: number]: number} = {};\n    for(let i = 0; i < list1.length; i++) {\n        if(freq_count[list1[i]] == undefined) {\n            freq_count[list1[i]] = 1;\n        } else {\n            freq_count[list1[i]] += 1;\n        }\n    }\n    return freq_count;\n}\n\nconsole.log(freq_count([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "{\n  '1': 2,\n  '2': 2,\n  '3': 2,\n  '4': 2,\n  '5': 2,\n  '6': 2,\n  '7': 2,\n  '8': 2,\n  '9': 2,\n  '10': 2\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq[list1[i]] == undefined) {\n            freq[list1[i]] = 1;\n        }\n        else {\n            freq[list1[i]] += 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq = {};\n    for (let i = 0; i < list1.length; i++) {\n        let element = list1[i];\n        if (freq[element]) {\n            freq[element]++;\n        } else {\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        count[num] = count[num] ? count[num] + 1 : 1;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        if (freq_count[num]) {\n            freq_count[num] += 1;\n        } else {\n            freq_count[num] = 1;\n        }\n    }\n    return freq_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_count[list1[i]] == undefined) {\n            freq_count[list1[i]] = 1;\n        } else {\n            freq_count[list1[i]] += 1;\n        }\n    }\n    return freq_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_dict[list1[i]]) {\n            freq_dict[list1[i]] += 1;\n        } else {\n            freq_dict[list1[i]] = 1;\n        }\n    }\n    return freq_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (result[list1[i]]) {\n            result[list1[i]] += 1;\n        } else {\n            result[list1[i]] = 1;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_obj: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_obj[list1[i]]) {\n            freq_obj[list1[i]] += 1;\n        } else {\n            freq_obj[list1[i]] = 1;\n        }\n    }\n    return freq_obj;\n}\n\nconsole.log(freq_count([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "../../../../tmp/tmpwezbyb71.ts(15,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count_dict[list1[i]] == undefined) {\n            count_dict[list1[i]] = 1;\n        } else {\n            count_dict[list1[i]] += 1;\n        }\n    }\n    return count_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq[list1[i]]) {\n            freq[list1[i]] += 1;\n        } else {\n            freq[list1[i]] = 1;\n        }\n    }\n    return freq;\n}\nconsole.log(freq_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "{\n  '1': 2,\n  '2': 2,\n  '3': 2,\n  '4': 2,\n  '5': 2,\n  '6': 2,\n  '7': 2,\n  '8': 2,\n  '9': 2,\n  '10': 2\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_dict = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_dict[list1[i]]) {\n            freq_dict[list1[i]] += 1;\n        } else {\n            freq_dict[list1[i]] = 1;\n        }\n    }\n    return freq_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq = {};\n    for (let i = 0; i < list1.length; i++) {\n        let element = list1[i];\n        if (freq[element]) {\n            freq[element]++;\n        } else {\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count[list1[i]]) {\n            count[list1[i]] += 1;\n        } else {\n            count[list1[i]] = 1;\n        }\n    }\n    return count;\n}\nconsole.log(freq_count([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "../../../../tmp/tmpkp_1ii0r.ts(14,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    list1.forEach(function(i) { count[i] = (count[i]||0) + 1;});\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        count[num] = count[num] ? count[num] + 1 : 1;\n    }\n    return count;\n}\nconsole.log(freq_count([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "{ '1': 4, '2': 4, '3': 4, '4': 4 }\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count_dict = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count_dict[list1[i]]) {\n            count_dict[list1[i]] += 1;\n        } else {\n            count_dict[list1[i]] = 1;\n        }\n    }\n    return count_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_dict[list1[i]]) {\n            freq_dict[list1[i]] += 1;\n        } else {\n            freq_dict[list1[i]] = 1;\n        }\n    }\n    return freq_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        if (freq_count[num]) {\n            freq_count[num] += 1;\n        } else {\n            freq_count[num] = 1;\n        }\n    }\n    return freq_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        count[num] = count[num] ? count[num] + 1 : 1;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        if (num in freq_dict) {\n            freq_dict[num] += 1;\n        } else {\n            freq_dict[num] = 1;\n        }\n    }\n    return freq_dict;\n}\n\nconsole.log(freq_count([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "../../../../tmp/tmp4dia8zzt.ts(16,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let obj: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (obj[list1[i]]) {\n            obj[list1[i]] += 1;\n        } else {\n            obj[list1[i]] = 1;\n        }\n    }\n    return obj;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        if (num in freq_dict) {\n            freq_dict[num] += 1;\n        }\n        else {\n            freq_dict[num] = 1;\n        }\n    }\n    return freq_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (dict[list1[i]]) {\n            dict[list1[i]] += 1;\n        } else {\n            dict[list1[i]] = 1;\n        }\n    }\n    return dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let key = list1[i];\n        if (freq_count_dict[key]) {\n            freq_count_dict[key] += 1;\n        } else {\n            freq_count_dict[key] = 1;\n        }\n    }\n    return freq_count_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq = {};\n    for (let i = 0; i < list1.length; i++) {\n        let element = list1[i];\n        if (freq[element]) {\n            freq[element]++;\n        } else {\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count[list1[i]]) {\n            count[list1[i]] += 1;\n        } else {\n            count[list1[i]] = 1;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for(let i = 0; i < list1.length; i++) {\n        if(freq[list1[i]] == undefined) {\n            freq[list1[i]] = 1;\n        }\n        else {\n            freq[list1[i]] += 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count[list1[i]] === undefined) {\n            count[list1[i]] = 1;\n        } else {\n            count[list1[i]] += 1;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for(let i of list1) {\n        if(freq[i]) {\n            freq[i] += 1;\n        } else {\n            freq[i] = 1;\n        }\n    }\n    return freq;\n}\n\nconsole.log(freq_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "{\n  '1': 1,\n  '2': 1,\n  '3': 1,\n  '4': 1,\n  '5': 1,\n  '6': 1,\n  '7': 1,\n  '8': 1,\n  '9': 1,\n  '10': 1,\n  '11': 1,\n  '12': 1,\n  '13': 1,\n  '14': 1,\n  '15': 1,\n  '16': 1,\n  '17': 1,\n  '18': 1,\n  '19': 1,\n  '20': 1,\n  '21': 1,\n  '22': 1,\n  '23': 1,\n  '24': 1,\n  '25': 1,\n  '26': 1,\n  '27': 1,\n  '28': 1,\n  '29': 1,\n  '30': 1,\n  '31': 1,\n  '32': 1,\n  '33': 1,\n  '34': 1,\n  '35': 1,\n  '36': 1,\n  '37': 1,\n  '38': 1,\n  '39': 1,\n  '40': 1,\n  '41': 1,\n  '42': 1,\n  '43': 1,\n  '44': 1,\n  '45': 1,\n  '46': 1,\n  '47': 1,\n  '48': 1,\n  '49': 1,\n  '50': 1,\n  '51': 1,\n  '52': 1,\n  '53': 1,\n  '54': 1,\n  '55': 1,\n  '56': 1,\n  '57': 1,\n  '58': 1,\n  '59': 1,\n  '60': 1,\n  '61': 1,\n  '62': 1,\n  '63': 1,\n  '64': 1,\n  '65': 1,\n  '66': 1,\n  '67': 1,\n  '68': 1,\n  '69': 1,\n  '70': 1,\n  '71': 1,\n  '72': 1,\n  '73': 1,\n  '74': 1,\n  '75': 1,\n  '76': 1,\n  '77': 1,\n  '78': 1,\n  '79': 1,\n  '80': 1,\n  '81': 1,\n  '82': 1,\n  '83': 1,\n  '84': 1,\n  '85': 1,\n  '86': 1,\n  '87': 1,\n  '88': 1,\n  '89': 1,\n  '90': 1,\n  '91': 1,\n  '92': 1,\n  '93': 1,\n  '94': ",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_count[list1[i]] == undefined) {\n            freq_count[list1[i]] = 1;\n        } else {\n            freq_count[list1[i]] += 1;\n        }\n    }\n    return freq_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_obj: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_obj[list1[i]]) {\n            freq_obj[list1[i]]++;\n        } else {\n            freq_obj[list1[i]] = 1;\n        }\n    }\n    return freq_obj;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count[list1[i]]) {\n            count[list1[i]] += 1;\n        } else {\n            count[list1[i]] = 1;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count[list1[i]]) {\n            count[list1[i]] += 1;\n        } else {\n            count[list1[i]] = 1;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count[list1[i]]) {\n            count[list1[i]] += 1;\n        } else {\n            count[list1[i]] = 1;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        count[num] = count[num] ? count[num] + 1 : 1;\n    }\n    return count;\n}\nconsole.log(freq_count([1, 2, 3, 1, 2, 3, 1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "{ '1': 3, '2': 3, '3': 3 }\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        count[num] = count[num] ? count[num] + 1 : 1;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq[list1[i]]) {\n            freq[list1[i]]++;\n        } else {\n            freq[list1[i]] = 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count_dict[list1[i]]) {\n            count_dict[list1[i]] += 1;\n        } else {\n            count_dict[list1[i]] = 1;\n        }\n    }\n    return count_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count: {[key: number]: number} = {};\n    for(let i=0; i<list1.length; i++){\n        if(freq_count[list1[i]] == undefined){\n            freq_count[list1[i]] = 1;\n        }\n        else{\n            freq_count[list1[i]] += 1;\n        }\n    }\n    return freq_count;\n}\n\nconsole.log(freq_count([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "{\n  '1': 3,\n  '2': 3,\n  '3': 3,\n  '4': 3,\n  '5': 3,\n  '6': 3,\n  '7': 3,\n  '8': 3,\n  '9': 3\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_count[list1[i]] === undefined) {\n            freq_count[list1[i]] = 1;\n        } else {\n            freq_count[list1[i]] += 1;\n        }\n    }\n    return freq_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    list1.forEach(function(i) { count[i] = (count[i]||0) + 1;});\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    list1.forEach(function(i) { count[i] = (count[i]||0) + 1;});\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_dict[list1[i]] == undefined) {\n            freq_dict[list1[i]] = 1;\n        }\n        else {\n            freq_dict[list1[i]] += 1;\n        }\n    }\n    return freq_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq = {};\n    for (let i = 0; i < list1.length; i++) {\n        let element = list1[i];\n        if (freq[element]) {\n            freq[element]++;\n        } else {\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_obj: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_obj[list1[i]]) {\n            freq_obj[list1[i]] += 1;\n        } else {\n            freq_obj[list1[i]] = 1;\n        }\n    }\n    return freq_obj;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq = {};\n    for (let i = 0; i < list1.length; i++) {\n        let element = list1[i];\n        if (freq[element]) {\n            freq[element]++;\n        } else {\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\n\nconsole.log(freq_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "{\n  '1': 2,\n  '2': 2,\n  '3': 2,\n  '4': 2,\n  '5': 2,\n  '6': 2,\n  '7': 2,\n  '8': 2,\n  '9': 2,\n  '10': 2\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_count_dict[list1[i]]) {\n            freq_count_dict[list1[i]] += 1;\n        } else {\n            freq_count_dict[list1[i]] = 1;\n        }\n    }\n    return freq_count_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        count[num] = count[num] ? count[num] + 1 : 1;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count[list1[i]] === undefined) {\n            count[list1[i]] = 1;\n        } else {\n            count[list1[i]] += 1;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_obj: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_obj[list1[i]]) {\n            freq_obj[list1[i]] += 1;\n        } else {\n            freq_obj[list1[i]] = 1;\n        }\n    }\n    return freq_obj;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        count[num] = count[num] ? count[num] + 1 : 1;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_obj: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_obj[list1[i]]) {\n            freq_obj[list1[i]] += 1;\n        } else {\n            freq_obj[list1[i]] = 1;\n        }\n    }\n    return freq_obj;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i of list1) {\n        if (count[i]) {\n            count[i] += 1;\n        } else {\n            count[i] = 1;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_dict[list1[i]]) {\n            freq_dict[list1[i]]++;\n        } else {\n            freq_dict[list1[i]] = 1;\n        }\n    }\n    return freq_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_count[list1[i]] == undefined) {\n            freq_count[list1[i]] = 1;\n        } else {\n            freq_count[list1[i]] += 1;\n        }\n    }\n    return freq_count;\n}\n\nconsole.log(freq_count([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "{ '1': 4, '2': 4, '3': 4, '4': 4 }\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let frequency: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        frequency[num] = 0;\n    }\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        frequency[num] += 1;\n    }\n    return frequency;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_count_dict[list1[i]] == undefined) {\n            freq_count_dict[list1[i]] = 1;\n        } else {\n            freq_count_dict[list1[i]] += 1;\n        }\n    }\n    return freq_count_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count_dict = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count_dict[list1[i]] === undefined) {\n            count_dict[list1[i]] = 1;\n        } else {\n            count_dict[list1[i]] += 1;\n        }\n    }\n    return count_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count_dict[list1[i]]) {\n            count_dict[list1[i]] += 1;\n        } else {\n            count_dict[list1[i]] = 1;\n        }\n    }\n    return count_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_dict[list1[i]] == undefined) {\n            freq_dict[list1[i]] = 1;\n        }\n        else {\n            freq_dict[list1[i]] += 1;\n        }\n    }\n    return freq_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    list1.forEach(function(i) { count[i] = (count[i]||0) + 1;});\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_dict[list1[i]]) {\n            freq_dict[list1[i]] += 1;\n        } else {\n            freq_dict[list1[i]] = 1;\n        }\n    }\n    return freq_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_count[list1[i]]) {\n            freq_count[list1[i]] += 1;\n        } else {\n            freq_count[list1[i]] = 1;\n        }\n    }\n    return freq_count;\n}\n\nconsole.log(freq_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "{\n  '1': 1,\n  '2': 1,\n  '3': 1,\n  '4': 1,\n  '5': 1,\n  '6': 1,\n  '7': 1,\n  '8': 1,\n  '9': 1,\n  '10': 1,\n  '11': 1,\n  '12': 1,\n  '13': 1\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let res: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        if (res[num] == undefined) {\n            res[num] = 1;\n        } else {\n            res[num] += 1;\n        }\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        count[num] = count[num] ? count[num] + 1 : 1;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let obj: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (obj[list1[i]]) {\n            obj[list1[i]]++;\n        } else {\n            obj[list1[i]] = 1;\n        }\n    }\n    return obj;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq[list1[i]] == undefined) {\n            freq[list1[i]] = 1;\n        } else {\n            freq[list1[i]] += 1;\n        }\n    }\n    return freq;\n}\nconsole.log(freq_count([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "{\n  '1': 2,\n  '2': 2,\n  '3': 2,\n  '4': 2,\n  '5': 2,\n  '6': 2,\n  '7': 2,\n  '8': 2,\n  '9': 2,\n  '10': 2\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_dict[list1[i]] == undefined) {\n            freq_dict[list1[i]] = 1;\n        } else {\n            freq_dict[list1[i]] += 1;\n        }\n    }\n    return freq_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    const freq_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_dict[list1[i]]) {\n            freq_dict[list1[i]] += 1;\n        }\n        else {\n            freq_dict[list1[i]] = 1;\n        }\n    }\n    return freq_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count[list1[i]]) {\n            count[list1[i]] += 1;\n        } else {\n            count[list1[i]] = 1;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_count[list1[i]] == undefined) {\n            freq_count[list1[i]] = 1;\n        } else {\n            freq_count[list1[i]] += 1;\n        }\n    }\n    return freq_count;\n}\n\nconsole.log(freq_count([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "{\n  '1': 1,\n  '2': 1,\n  '3': 1,\n  '4': 1,\n  '5': 1,\n  '6': 1,\n  '7': 1,\n  '8': 1,\n  '9': 1,\n  '10': 1,\n  '11': 1,\n  '12': 1,\n  '13': 1,\n  '14': 1,\n  '15': 1,\n  '16': 1,\n  '17': 1,\n  '18': 1,\n  '19': 1,\n  '20': 1,\n  '21': 1,\n  '22': 1,\n  '23': 1,\n  '24': 1,\n  '25': 1,\n  '26': 1,\n  '27': 1,\n  '28': 1,\n  '29': 1,\n  '30': 1,\n  '31': 1,\n  '32': 1,\n  '33': 1,\n  '34': 1,\n  '35': 1,\n  '36': 1,\n  '37': 1,\n  '38': 1,\n  '39': 1,\n  '40': 1,\n  '41': 1,\n  '42': 1,\n  '43': 1,\n  '44': 1,\n  '45': 1,\n  '46': 1,\n  '47': 1,\n  '48': 1,\n  '49': 1,\n  '50': 1,\n  '51': 1,\n  '52': 1,\n  '53': 1,\n  '54': 1,\n  '55': 1,\n  '56': 1,\n  '57': 1,\n  '58': 1,\n  '59': 1,\n  '60': 1,\n  '61': 1,\n  '62': 1,\n  '63': 1,\n  '64': 1,\n  '65': 1,\n  '66': 1,\n  '67': 1,\n  '68': 1,\n  '69': 1,\n  '70': 1,\n  '71': 1,\n  '72': 1,\n  '73': 1,\n  '74': 1,\n  '75': 1,\n  '76': 1,\n  '77': 1,\n  '78': 1,\n  '79': 1,\n  '80': 1,\n  '81': 1,\n  '82': 1,\n  '83': 1,\n  '84': 1,\n  '85': 1,\n  '86': 1,\n  '87': 1,\n  '88': 1,\n  '89': 1,\n  '90': 1,\n  '91': 1,\n  '92': 1,\n  '93': 1,\n  '94': ",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count[list1[i]]) {\n            count[list1[i]] += 1;\n        } else {\n            count[list1[i]] = 1;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        count[num] = count[num] ? count[num] + 1 : 1;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        if (num in freq) {\n            freq[num]++;\n        } else {\n            freq[num] = 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_count[list1[i]]) {\n            freq_count[list1[i]] += 1;\n        } else {\n            freq_count[list1[i]] = 1;\n        }\n    }\n    return freq_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count[list1[i]]) {\n            count[list1[i]]++;\n        } else {\n            count[list1[i]] = 1;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i of list1) {\n        if (freq[i]) {\n            freq[i] += 1;\n        } else {\n            freq[i] = 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq[list1[i]]) {\n            freq[list1[i]] += 1;\n        } else {\n            freq[list1[i]] = 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_dict: {[key: number]: number} = {};\n    for (let i of list1) {\n        if (freq_dict[i]) {\n            freq_dict[i]++;\n        } else {\n            freq_dict[i] = 1;\n        }\n    }\n    return freq_dict;\n}\n\nconsole.log(freq_count([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "../../../../tmp/tmphl4dyp6l.ts(15,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq[list1[i]]) {\n            freq[list1[i]] += 1;\n        } else {\n            freq[list1[i]] = 1;\n        }\n    }\n    return freq;\n}\n\nconsole.log(freq_count([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "../../../../tmp/tmpu32kgve8.ts(15,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (result[list1[i]]) {\n            result[list1[i]]++;\n        } else {\n            result[list1[i]] = 1;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq = {};\n    for (let i = 0; i < list1.length; i++) {\n        let element = list1[i];\n        if (freq[element]) {\n            freq[element]++;\n        } else {\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        count[num] = count[num] ? count[num] + 1 : 1;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_count[list1[i]] == undefined) {\n            freq_count[list1[i]] = 1;\n        } else {\n            freq_count[list1[i]] += 1;\n        }\n    }\n    return freq_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count[list1[i]]) {\n            count[list1[i]] += 1;\n        } else {\n            count[list1[i]] = 1;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] in count) {\n            count[list1[i]] += 1;\n        }\n        else {\n            count[list1[i]] = 1;\n        }\n    }\n    return count;\n}\n\nconsole.log(freq_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "{\n  '1': 1,\n  '2': 1,\n  '3': 1,\n  '4': 1,\n  '5': 1,\n  '6': 1,\n  '7': 1,\n  '8': 1,\n  '9': 1,\n  '10': 1,\n  '11': 1,\n  '12': 1,\n  '13': 1\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        if (num in freq) {\n            freq[num] += 1;\n        } else {\n            freq[num] = 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        count[num] = count[num] ? count[num] + 1 : 1;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_count[list1[i]] == undefined) {\n            freq_count[list1[i]] = 1;\n        }\n        else {\n            freq_count[list1[i]] += 1;\n        }\n    }\n    return freq_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count_dict = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count_dict[list1[i]] == undefined) {\n            count_dict[list1[i]] = 1;\n        }\n        else {\n            count_dict[list1[i]] += 1;\n        }\n    }\n    return count_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let dict: {[key: number]: number} = {};\n    for (let i of list1) {\n        if (dict[i]) {\n            dict[i] += 1;\n        }\n        else {\n            dict[i] = 1;\n        }\n    }\n    return dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count[list1[i]]) {\n            count[list1[i]] += 1;\n        } else {\n            count[list1[i]] = 1;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        count[num] = count[num] ? count[num] + 1 : 1;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_count[list1[i]] == undefined) {\n            freq_count[list1[i]] = 1;\n        } else {\n            freq_count[list1[i]] += 1;\n        }\n    }\n    return freq_count;\n}\n\nconsole.log(freq_count([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "../../../../tmp/tmpgw156ta7.ts(15,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_dict[list1[i]] == undefined) {\n            freq_dict[list1[i]] = 1;\n        } else {\n            freq_dict[list1[i]] += 1;\n        }\n    }\n    return freq_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_count[list1[i]] == undefined) {\n            freq_count[list1[i]] = 1;\n        } else {\n            freq_count[list1[i]] += 1;\n        }\n    }\n    return freq_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count[list1[i]] == undefined) {\n            count[list1[i]] = 1;\n        } else {\n            count[list1[i]] += 1;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (result[list1[i]]) {\n            result[list1[i]]++;\n        } else {\n            result[list1[i]] = 1;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let element = list1[i];\n        if (freq[element]) {\n            freq[element]++;\n        } else {\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        count[num] = count[num] ? count[num] + 1 : 1;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_count[list1[i]] == undefined) {\n            freq_count[list1[i]] = 1;\n        } else {\n            freq_count[list1[i]] += 1;\n        }\n    }\n    return freq_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_count_dict[list1[i]] == undefined) {\n            freq_count_dict[list1[i]] = 1;\n        } else {\n            freq_count_dict[list1[i]] += 1;\n        }\n    }\n    return freq_count_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_obj: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_obj[list1[i]] == undefined) {\n            freq_obj[list1[i]] = 1;\n        } else {\n            freq_obj[list1[i]] += 1;\n        }\n    }\n    return freq_obj;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        count[num] = count[num] ? count[num] + 1 : 1;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq[list1[i]]) {\n            freq[list1[i]]++;\n        } else {\n            freq[list1[i]] = 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_count[list1[i]] == undefined) {\n            freq_count[list1[i]] = 1;\n        } else {\n            freq_count[list1[i]] += 1;\n        }\n    }\n    return freq_count;\n}\n\nconsole.log(freq_count([1, 2, 3, 3, 2, 1, 1, 1, 1, 1, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124240,
      "stdout": "{ '1': 7, '2': 2, '3': 2 }\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        count[num] = count[num] ? count[num] + 1 : 1;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        if (freq[num]) {\n            freq[num] += 1;\n        } else {\n            freq[num] = 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        if (freq_count[num]) {\n            freq_count[num] += 1;\n        } else {\n            freq_count[num] = 1;\n        }\n    }\n    return freq_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_obj: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_obj[list1[i]] === undefined) {\n            freq_obj[list1[i]] = 1;\n        } else {\n            freq_obj[list1[i]] += 1;\n        }\n    }\n    return freq_obj;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (result[list1[i]]) {\n            result[list1[i]] += 1;\n        } else {\n            result[list1[i]] = 1;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_obj: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_obj[list1[i]] == undefined) {\n            freq_obj[list1[i]] = 1;\n        }\n        else {\n            freq_obj[list1[i]] += 1;\n        }\n    }\n    return freq_obj;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        count[num] = count[num] ? count[num] + 1 : 1;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count[list1[i]]) {\n            count[list1[i]] += 1;\n        } else {\n            count[list1[i]] = 1;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count[list1[i]] === undefined) {\n            count[list1[i]] = 1;\n        } else {\n            count[list1[i]] += 1;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_dict[list1[i]] == undefined) {\n            freq_dict[list1[i]] = 1;\n        }\n        else {\n            freq_dict[list1[i]] += 1;\n        }\n    }\n    return freq_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count[list1[i]]) {\n            count[list1[i]] += 1;\n        } else {\n            count[list1[i]] = 1;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (result[list1[i]]) {\n            result[list1[i]] += 1;\n        } else {\n            result[list1[i]] = 1;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count[list1[i]]) {\n            count[list1[i]] += 1;\n        } else {\n            count[list1[i]] = 1;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq[list1[i]] == undefined) {\n            freq[list1[i]] = 1;\n        } else {\n            freq[list1[i]] += 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_dict = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_dict[list1[i]]) {\n            freq_dict[list1[i]] += 1;\n        } else {\n            freq_dict[list1[i]] = 1;\n        }\n    }\n    return freq_dict;\n}\nconsole.log(freq_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124240,
      "stdout": "{\n  '1': 2,\n  '2': 2,\n  '3': 2,\n  '4': 2,\n  '5': 2,\n  '6': 2,\n  '7': 2,\n  '8': 2,\n  '9': 2,\n  '10': 2\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count[list1[i]] === undefined) {\n            count[list1[i]] = 1;\n        } else {\n            count[list1[i]] += 1;\n        }\n    }\n    return count;\n}\nconsole.log(freq_count([1, 2, 3, 1, 2, 3, 1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "{ '1': 3, '2': 3, '3': 3 }\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        count[num] = count[num] ? count[num] + 1 : 1;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_count[list1[i]] == undefined) {\n            freq_count[list1[i]] = 1;\n        }\n        else {\n            freq_count[list1[i]] += 1;\n        }\n    }\n    return freq_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        count[num] = count[num] ? count[num] + 1 : 1;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_count[list1[i]] == undefined) {\n            freq_count[list1[i]] = 1;\n        } else {\n            freq_count[list1[i]] += 1;\n        }\n    }\n    return freq_count;\n}\n\nconsole.log(freq_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124240,
      "stdout": "{\n  '1': 1,\n  '2': 1,\n  '3': 1,\n  '4': 1,\n  '5': 1,\n  '6': 1,\n  '7': 1,\n  '8': 1,\n  '9': 1,\n  '10': 1,\n  '11': 1,\n  '12': 1,\n  '13': 1\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (result[list1[i]]) {\n            result[list1[i]] += 1;\n        } else {\n            result[list1[i]] = 1;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count[list1[i]] === undefined) {\n            count[list1[i]] = 1;\n        } else {\n            count[list1[i]] += 1;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let result: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (result[list1[i]]) {\n            result[list1[i]] += 1;\n        } else {\n            result[list1[i]] = 1;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    list1.forEach(function(i) { count[i] = (count[i]||0) + 1;});\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        count[num] = count[num] ? count[num] + 1 : 1;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] in count) {\n            count[list1[i]] += 1;\n        } else {\n            count[list1[i]] = 1;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] in count) {\n            count[list1[i]] += 1;\n        } else {\n            count[list1[i]] = 1;\n        }\n    }\n    return count;\n}\nconsole.log(freq_count([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124240,
      "stdout": "{ '1': 3, '2': 3, '3': 3, '4': 3 }\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        count[num] = count[num] ? count[num] + 1 : 1;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        if (num in freq_count) {\n            freq_count[num] += 1;\n        } else {\n            freq_count[num] = 1;\n        }\n    }\n    return freq_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        if (num in freq_count) {\n            freq_count[num] += 1;\n        } else {\n            freq_count[num] = 1;\n        }\n    }\n    return freq_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq[list1[i]]) {\n            freq[list1[i]] += 1;\n        } else {\n            freq[list1[i]] = 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_dict[list1[i]]) {\n            freq_dict[list1[i]] += 1;\n        } else {\n            freq_dict[list1[i]] = 1;\n        }\n    }\n    return freq_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count_dict = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        if (num in count_dict) {\n            count_dict[num] += 1;\n        } else {\n            count_dict[num] = 1;\n        }\n    }\n    return count_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    const freq = {};\n    for (const item of list1) {\n        if (freq[item]) {\n            freq[item] += 1;\n        } else {\n            freq[item] = 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq[list1[i]]) {\n            freq[list1[i]]++;\n        } else {\n            freq[list1[i]] = 1;\n        }\n    }\n    return freq;\n}\nconsole.log(freq_count([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124240,
      "stdout": "../../../../tmp/tmpteuq_g6o.ts(14,1): error TS1005: ',' expected.\n../../../../tmp/tmpteuq_g6o.ts(14,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_dict[list1[i]] == undefined) {\n            freq_dict[list1[i]] = 1;\n        } else {\n            freq_dict[list1[i]] += 1;\n        }\n    }\n    return freq_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        if (freq_count[num]) {\n            freq_count[num] += 1;\n        } else {\n            freq_count[num] = 1;\n        }\n    }\n    return freq_count;\n}\nconsole.log(freq_count([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124240,
      "stdout": "{ '1': 3, '2': 3, '3': 3, '4': 3 }\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count[list1[i]]) {\n            count[list1[i]]++;\n        } else {\n            count[list1[i]] = 1;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i of list1) {\n        if (freq[i]) {\n            freq[i]++;\n        } else {\n            freq[i] = 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count[list1[i]] === undefined) {\n            count[list1[i]] = 1;\n        } else {\n            count[list1[i]] += 1;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    list1.forEach(function(i) { count[i] = (count[i]||0) + 1;});\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_dict = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_dict[list1[i]]) {\n            freq_dict[list1[i]] += 1;\n        } else {\n            freq_dict[list1[i]] = 1;\n        }\n    }\n    return freq_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_dict[list1[i]]) {\n            freq_dict[list1[i]] += 1;\n        } else {\n            freq_dict[list1[i]] = 1;\n        }\n    }\n    return freq_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count[list1[i]]) {\n            count[list1[i]] += 1;\n        } else {\n            count[list1[i]] = 1;\n        }\n    }\n    return count;\n}\n\nconsole.log(freq_count([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124241,
      "stdout": "../../../../tmp/tmpxxgmtkgu.ts(15,1): error TS1005: ',' expected.\n../../../../tmp/tmpxxgmtkgu.ts(15,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        if (num in freq) {\n            freq[num]++;\n        } else {\n            freq[num] = 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq[list1[i]] == undefined) {\n            freq[list1[i]] = 1;\n        } else {\n            freq[list1[i]] += 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_dict[list1[i]]) {\n            freq_dict[list1[i]] += 1;\n        } else {\n            freq_dict[list1[i]] = 1;\n        }\n    }\n    return freq_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq[list1[i]] == undefined) {\n            freq[list1[i]] = 1;\n        } else {\n            freq[list1[i]] += 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq[list1[i]]) {\n            freq[list1[i]] += 1;\n        } else {\n            freq[list1[i]] = 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    list1.forEach(function(i) { count[i] = (count[i]||0) + 1;});\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count[list1[i]]) {\n            count[list1[i]]++;\n        } else {\n            count[list1[i]] = 1;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (count[list1[i]]) {\n            count[list1[i]] += 1;\n        } else {\n            count[list1[i]] = 1;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq = {};\n    for (let i = 0; i < list1.length; i++) {\n        let element = list1[i];\n        if (freq[element]) {\n            freq[element]++;\n        } else {\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq = {};\n    for (let i = 0; i < list1.length; i++) {\n        let element = list1[i];\n        if (freq[element]) {\n            freq[element]++;\n        } else {\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_count_dict[list1[i]] == undefined) {\n            freq_count_dict[list1[i]] = 1;\n        }\n        else {\n            freq_count_dict[list1[i]] += 1;\n        }\n    }\n    return freq_count_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        count[num] = count[num] ? count[num] + 1 : 1;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq = {};\n    for (let i = 0; i < list1.length; i++) {\n        let element = list1[i];\n        if (freq[element]) {\n            freq[element]++;\n        } else {\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq[list1[i]] == undefined) {\n            freq[list1[i]] = 1;\n        } else {\n            freq[list1[i]] += 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_dict[list1[i]]) {\n            freq_dict[list1[i]] += 1;\n        } else {\n            freq_dict[list1[i]] = 1;\n        }\n    }\n    return freq_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_obj: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_obj[list1[i]] == undefined) {\n            freq_obj[list1[i]] = 1;\n        } else {\n            freq_obj[list1[i]] += 1;\n        }\n    }\n    return freq_obj;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    list1.forEach(function(i) { count[i] = (count[i]||0) + 1;});\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_count[list1[i]] == undefined) {\n            freq_count[list1[i]] = 1;\n        }\n        else {\n            freq_count[list1[i]] += 1;\n        }\n    }\n    return freq_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124239,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_count_dict[list1[i]] == undefined) {\n            freq_count_dict[list1[i]] = 1;\n        } else {\n            freq_count_dict[list1[i]] += 1;\n        }\n    }\n    return freq_count_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_count[list1[i]] == undefined) {\n            freq_count[list1[i]] = 1;\n        } else {\n            freq_count[list1[i]] += 1;\n        }\n    }\n    return freq_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_dict[list1[i]] == undefined) {\n            freq_dict[list1[i]] = 1;\n        } else {\n            freq_dict[list1[i]] += 1;\n        }\n    }\n    return freq_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i of list1) {\n        if (count[i]) {\n            count[i] += 1;\n        } else {\n            count[i] = 1;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        count[num] = count[num] ? count[num] + 1 : 1;\n    }\n    return count;\n}\n\nconsole.log(freq_count([1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124241,
      "stdout": "../../../../tmp/tmpzor3196a.ts(12,1): error TS1005: ',' expected.\n../../../../tmp/tmpzor3196a.ts(12,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_dict = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_dict[list1[i]]) {\n            freq_dict[list1[i]] += 1;\n        } else {\n            freq_dict[list1[i]] = 1;\n        }\n    }\n    return freq_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        count[num] = count[num] ? count[num] + 1 : 1;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_count[list1[i]] == undefined) {\n            freq_count[list1[i]] = 1;\n        } else {\n            freq_count[list1[i]] += 1;\n        }\n    }\n    return freq_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509678,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i of list1) {\n        if (count[i]) {\n            count[i] += 1;\n        } else {\n            count[i] = 1;\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_dict: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_dict[list1[i]]) {\n            freq_dict[list1[i]] += 1;\n        } else {\n            freq_dict[list1[i]] = 1;\n        }\n    }\n    return freq_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq_count[list1[i]] == undefined) {\n            freq_count[list1[i]] = 1;\n        } else {\n            freq_count[list1[i]] += 1;\n        }\n    }\n    return freq_count;\n}\n\nconsole.log(freq_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124241,
      "stdout": "{\n  '1': 2,\n  '2': 2,\n  '3': 2,\n  '4': 2,\n  '5': 2,\n  '6': 2,\n  '7': 2,\n  '8': 2,\n  '9': 2,\n  '10': 2\n}\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    list1.forEach(function(i) { count[i] = (count[i]||0) + 1;});\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq[list1[i]]) {\n            freq[list1[i]] += 1;\n        } else {\n            freq[list1[i]] = 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124237,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq = {};\n    for (let i = 0; i < list1.length; i++) {\n        let element = list1[i];\n        if (freq[element]) {\n            freq[element]++;\n        } else {\n            freq[element] = 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        if (freq[list1[i]] == undefined) {\n            freq[list1[i]] = 1;\n        } else {\n            freq[list1[i]] += 1;\n        }\n    }\n    return freq;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_dict: {[key: number]: number} = {};\n    list1.forEach(function(i) {\n        freq_dict[i] = (freq_dict[i] || 0) + 1;\n    });\n    return freq_dict;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124241,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let freq_count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        if (freq_count[num]) {\n            freq_count[num] += 1;\n        } else {\n            freq_count[num] = 1;\n        }\n    }\n    return freq_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1666124234,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        count[num] = count[num] ? count[num] + 1 : 1;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to get the frequency of all the elements in an array, returned as an object.\nfunction freq_count(list1: number[]): {[key: number]: number} {\n    let count: {[key: number]: number} = {};\n    for (let i = 0; i < list1.length; i++) {\n        let num = list1[i];\n        count[num] = count[num] ? count[num] + 1 : 1;\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = freq_count;\n  assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});\n  assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});\n  assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});\n}\n\ntest();",
      "timestamp": 1665509679,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}