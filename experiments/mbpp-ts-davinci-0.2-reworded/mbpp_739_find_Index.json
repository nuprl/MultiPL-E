{
  "name": "mbpp_739_find_Index",
  "language": "ts",
  "prompt": "//Write a tsthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunction find_Index(n: number): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_Index;\n  assert.deepEqual(candidate(2),4);\n  assert.deepEqual(candidate(3),14);\n  assert.deepEqual(candidate(4),45);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let i = 1;\n    let triangle = 0;\n    while (true) {\n        triangle += i;\n        if (triangle.toString().length == n) {\n            return i;\n        }\n        i++;\n    }\n}\n",
    "    let i = 1;\n    let triangle = 0;\n    while (true) {\n        triangle += i;\n        if (triangle.toString().length == n) {\n            return i;\n        }\n        i++;\n    }\n}\n",
    "    let i = 1;\n    let triangle = 0;\n    while (true) {\n        triangle = triangle + i;\n        if (triangle.toString().length == n) {\n            return i;\n        }\n        i++;\n    }\n}\n\nconsole.log(find_Index(3));\n",
    "    let i = 1;\n    let triangular = 0;\n    while (true) {\n        triangular = triangular + i;\n        if (triangular.toString().length == n) {\n            return i;\n        }\n        i++;\n    }\n}\n",
    "    let i = 1;\n    let triangular = 0;\n    while (triangular < Math.pow(10, n)) {\n        triangular = (i * (i + 1)) / 2;\n        i++;\n    }\n    return i - 1;\n}\n",
    "    let i = 1;\n    let triangle = 0;\n    while (true) {\n        triangle += i;\n        if (triangle.toString().length == n) {\n            return i;\n        }\n        i++;\n    }\n}\n",
    "    let i: number = 1;\n    let triangularNumber: number = 0;\n    while (true) {\n        triangularNumber = triangular_Number(i);\n        if (triangularNumber.toString().length === n) {\n            return i;\n        }\n        i++;\n    }\n}\n",
    "    let i = 1;\n    let triangle = 0;\n    while (true) {\n        triangle = (i * (i + 1)) / 2;\n        if (triangle.toString().length === n) {\n            return i;\n        }\n        i++;\n    }\n}\n\nconsole.log(find_Index(3));\nconsole.log(find_Index(4));\nconsole.log(find_Index(5));\nconsole.log(find_Index(6));\nconsole.log(find_Index(7));\n",
    "    let i = 1;\n    let tri = 0;\n    while (tri < n) {\n        tri = (i * (i + 1)) / 2;\n        i++;\n    }\n    return i - 1;\n}\n",
    "    let i = 1;\n    let tri = 0;\n    while (tri < n) {\n        tri = (i * (i + 1)) / 2;\n        i++;\n    }\n    return i - 1;\n}\n",
    "    let i = 1;\n    let triangle = 0;\n    while (true) {\n        triangle = (i * (i + 1)) / 2;\n        if (triangle.toString().length == n) {\n            return i;\n        }\n        i++;\n    }\n}\n",
    "    let i = 1;\n    let triangle = 0;\n    while (true) {\n        triangle = triangle + i;\n        if (triangle.toString().length == n) {\n            return i;\n        }\n        i++;\n    }\n}\n\nconsole.log(find_Index(3));\n",
    "    let index = 1;\n    let triangularNumber = 1;\n    while (true) {\n        if (triangularNumber.toString().length == n) {\n            return index;\n        }\n        index++;\n        triangularNumber = triangularNumber + index;\n    }\n}\n\nconsole.log(find_Index(2));\nconsole.log(find_Index(3));\nconsole.log(find_Index(4));\nconsole.log(find_Index(5));\nconsole.log(find_Index(6));\nconsole.log(find_Index(7));\nconsole.log(find_Index(8));\nconsole.log(find_Index(9));\nconsole.log(find_Index(10));\n",
    "    let i = 1;\n    let triangular = 0;\n    while (true) {\n        triangular += i;\n        if (triangular.toString().length == n) {\n            return i;\n        }\n        i++;\n    }\n}\n",
    "    let i = 1;\n    let triangularNumber = 0;\n    while (true) {\n        triangularNumber = triangularNumber + i;\n        if (triangularNumber.toString().length === n) {\n            return i;\n        }\n        i++;\n    }\n}\n\nconsole.log(find_Index(3));\n",
    "    let i = 1;\n    let tri = 0;\n    while (tri < n) {\n        tri = (i * (i + 1)) / 2;\n        i++;\n    }\n    return i - 1;\n}\n",
    "    let i = 1;\n    while (true) {\n        let tri = i * (i + 1) / 2;\n        if (tri.toString().length == n) {\n            return i;\n        }\n        i++;\n    }\n}\n",
    "    let i = 1;\n    let triangularNumber = 0;\n    while (true) {\n        triangularNumber = triangularNumber + i;\n        if (triangularNumber.toString().length === n) {\n            return i;\n        }\n        i++;\n    }\n}\n",
    "    let i = 1;\n    let triangularNumber = 0;\n    while (true) {\n        triangularNumber = triangularNumber + i;\n        if (triangularNumber.toString().length == n) {\n            return i;\n        }\n        i++;\n    }\n}\n\nconsole.log(find_Index(2));\nconsole.log(find_Index(3));\nconsole.log(find_Index(4));\nconsole.log(find_Index(5));\nconsole.log(find_Index(6));\n",
    "    let i = 1;\n    let triangle = 0;\n    while (triangle.toString().length < n) {\n        triangle += i;\n        i++;\n    }\n    return i - 1;\n}\n"
  ]
}