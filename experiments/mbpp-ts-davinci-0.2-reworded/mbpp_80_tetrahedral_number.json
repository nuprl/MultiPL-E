{
  "name": "mbpp_80_tetrahedral_number",
  "language": "ts",
  "prompt": "//Write a function to find the nth tetrahedral number.\nfunction tetrahedral_number(n: number): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_80_tetrahedral_number.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = tetrahedral_number;\n  assert.deepEqual(candidate(5),35);\n  assert.deepEqual(candidate(6),56);\n  assert.deepEqual(candidate(7),84);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "  return n * (n + 1) * (n + 2) / 6;\n}\n",
    "  return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum * (sum + 1) / 2;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum * (sum + 1) / 2;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum * (sum + 1) / 2;\n}\n",
    "  return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    let sum: number = 0;\n    for (let i = 0; i <= n; i++) {\n        sum += i;\n    }\n    return sum * (sum + 1) / 2;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    let sum: number = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum * (sum + 1) / 2;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    if (n === 1) {\n        return 1;\n    }\n    return n + tetrahedral_number(n - 1);\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\nconsole.log(tetrahedral_number(5));\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return n * (n + 1) * (n + 2) / 6;\n}\n",
    "  return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "  return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "  return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "  return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n\nconsole.log(tetrahedral_number(1));\nconsole.log(tetrahedral_number(2));\nconsole.log(tetrahedral_number(3));\nconsole.log(tetrahedral_number(4));\nconsole.log(tetrahedral_number(5));\nconsole.log(tetrahedral_number(6));\nconsole.log(tetrahedral_number(7));\nconsole.log(tetrahedral_number(8));\nconsole.log(tetrahedral_number(9));\nconsole.log(tetrahedral_number(10));\n",
    "    return n * (n + 1) * (n + 2) / 6;\n}\n",
    "    return (n * (n + 1) * (n + 2)) / 6;\n}\n"
  ]
}