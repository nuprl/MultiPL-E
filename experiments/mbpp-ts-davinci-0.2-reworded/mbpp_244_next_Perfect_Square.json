{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "ts",
  "prompt": "//Write a tsthon function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(15));\n",
    "    var i = 1;\n    var result = 0;\n    while (result < N) {\n        result = i * i;\n        i++;\n    }\n    return result;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let next_perfect_square: number = 0;\n    let i: number = 1;\n    while (next_perfect_square < N) {\n        next_perfect_square = i * i;\n        i++;\n    }\n    return next_perfect_square;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n",
    "    var i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(15));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let next_Perfect_Square: number = 0;\n    let i: number = 1;\n    while (next_Perfect_Square < N) {\n        next_Perfect_Square = i * i;\n        i++;\n    }\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    let result: number = 0;\n    while (result < N) {\n        result = i * i;\n        i++;\n    }\n    return result;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(37));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var i: number = 1;\n    var result: number = 0;\n    while (result < N) {\n        result = i * i;\n        i++;\n    }\n    return result;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(36));\n",
    "    let i = 1;\n    let result = 0;\n    while (result < N) {\n        result = i * i;\n        i++;\n    }\n    return result;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var num = 1;\n    var i = 1;\n    while (num < N) {\n        num = i * i;\n        i++;\n    }\n    return num;\n}\nconsole.log(next_Perfect_Square(25));\n"
  ]
}