{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "ts",
  "prompt": "//Write a tsthon function to find the next perfect square greater than a given number.\nfunction next_Perfect_Square(N: number): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = next_Perfect_Square;\n  assert.deepEqual(candidate(35),36);\n  assert.deepEqual(candidate(6),9);\n  assert.deepEqual(candidate(9),16);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(15));\n",
    "    var i = 1;\n    var result = 0;\n    while (result < N) {\n        result = i * i;\n        i++;\n    }\n    return result;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let next_perfect_square: number = 0;\n    let i: number = 1;\n    while (next_perfect_square < N) {\n        next_perfect_square = i * i;\n        i++;\n    }\n    return next_perfect_square;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n",
    "    var i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(15));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let next_Perfect_Square: number = 0;\n    let i: number = 1;\n    while (next_Perfect_Square < N) {\n        next_Perfect_Square = i * i;\n        i++;\n    }\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    let result: number = 0;\n    while (result < N) {\n        result = i * i;\n        i++;\n    }\n    return result;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(37));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var i: number = 1;\n    var result: number = 0;\n    while (result < N) {\n        result = i * i;\n        i++;\n    }\n    return result;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(36));\n",
    "    let i = 1;\n    let result = 0;\n    while (result < N) {\n        result = i * i;\n        i++;\n    }\n    return result;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var num = 1;\n    var i = 1;\n    while (num < N) {\n        num = i * i;\n        i++;\n    }\n    return num;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect_Square(45));\nconsole.log(next_Perfect_Square(50));\nconsole.log(next_Perfect_Square(55));\nconsole.log(next_Perfect_Square(60));\nconsole.log(next_Perfect_Square(65));\nconsole.log(next_Perfect_Square(70));\nconsole.log(next_Perfect_Square(75));\nconsole.log(next_Perfect_Square(80));\nconsole.log(next_Perfect_Square(85));\nconsole.log(next_Perfect_Square(90));\nconsole.log(next_Perfect_Square(95));\nconsole.log(next_Perfect_Square(100));\nconsole.log(next_Perfect_Square(105));\nconsole.log(next_Perfect_Square(110));\nconsole.log(next_Perfect_Square(115));\nconsole.log(next_Perfect_Square(120));\nconsole.log(next_Perfect_Square(125));\nconsole.log(next_Perfect_Square(130));\nconsole.log(next_Perfect_Square(135));\nconsole.log(next_Perfect_Square(140));\nconsole.log(next_Perfect_Square(145));\nconsole.log(next_Perfect_Square(150));\nconsole.log(next_Perfect_Square(155));\nconsole.log(next_Perfect_Square(160));\nconsole.log(next_Perfect_Square(165));\nconsole.log(next_Perfect_Square(170));\nconsole.log(next_Perfect_Square(175));\nconsole.log(next_Perfect_Square(180));\nconsole.log(next_Perfect_",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(15));\n",
    "    let i = 1;\n    while (true) {\n        if (i * i > N) {\n            return i * i;\n        }\n        i++;\n    }\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n",
    "    let i: number = 1;\n    let result: number = 0;\n    while (result < N) {\n        result = i * i;\n        i++;\n    }\n    return result;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let next_Perfect_Square: number = 0;\n    let i: number = 1;\n    while (true) {\n        if (i * i > N) {\n            next_Perfect_Square = i * i;\n            break;\n        }\n        i++;\n    }\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    let j: number = 1;\n    while (i < N) {\n        i = i + j;\n        j = j + 2;\n    }\n    return i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect",
    "    var i: number = 1;\n    var num: number = 0;\n    while (num < N) {\n        num = i * i;\n        i++;\n    }\n    return num;\n}\nconsole.log(\"Next Perfect Square is: \" + next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(36));\n",
    "    var i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(15));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let sqrt_N: number = Math.sqrt(N);\n    let next_Perfect_Square: number = Math.pow((sqrt_N + 1), 2);\n    return next_Perfect_Square;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (true) {\n        if (i * i > N) {\n            return i * i;\n        }\n        i++;\n    }\n}\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect_Square",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var sqrt = Math.sqrt(N);\n    var next_Perfect_Square = Math.ceil(sqrt);\n    return next_Perfect_Square * next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect_",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(36));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(15));\n",
    "    let next_Perfect_Square = 0;\n    let i = 1;\n    while (next_Perfect_Square < N) {\n        next_Perfect_Square = i * i;\n        i++;\n    }\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let next_Perfect_Square: number = 0;\n    let i: number = 1;\n    while (i <= N) {\n        if (i * i > N) {\n            next_Perfect_Square = i * i;\n            break;\n        }\n        i++;\n    }\n    return next_Perfect_Square;\n}\n",
    "    let i: number = 1;\n    let perfect_Square: number = 0;\n    while (perfect_Square < N) {\n        perfect_Square = i * i;\n        i++;\n    }\n    return perfect_Square;\n}\nconsole.log(\"Next Perfect Square greater than \" + N + \" is \" + next_Perfect_Square(N));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(37));\n",
    "    let i = 1;\n    let result = 0;\n    while (result < N) {\n        result = i * i;\n        i++;\n    }\n    return result;\n}\n\nconsole.log(next_Perfect_Square(10));\n",
    "    let x = 1;\n    while (true) {\n        if (x * x > N) {\n            return x * x;\n        }\n        x++;\n    }\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(15));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(10));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(36));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var next_Perfect_Square = 0;\n    var i = 1;\n    while (next_Perfect_Square < N) {\n        next_Perfect_Square = i * i;\n        i++;\n    }\n    return next_Perfect_Square;\n}\nconsole.log(\"Next Perfect Square is : \" + next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(36));\n",
    "    let i: number = 1;\n    let num: number = 0;\n    while (num < N) {\n        num = i * i;\n        i++;\n    }\n    return num;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let square = 1;\n    let count = 1;\n    while (square < N) {\n        count += 2;\n        square += count;\n    }\n    return square;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    var next_Perfect_Square = 0;\n    var i = 1;\n    while (next_Perfect_Square < N) {\n        next_Perfect_Square = i * i;\n        i++;\n    }\n    return next_Perfect_Square;\n}\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(15));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(15));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect_",
    "    let i = 1;\n    while (true) {\n        if (i * i > N) {\n            return i * i;\n        }\n        i++;\n    }\n}\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let next_Perfect_Square = 0;\n    let i = 1;\n    while (next_Perfect_Square < N) {\n        next_Perfect_Square = i * i;\n        i++;\n    }\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (true) {\n        if (i * i > N) {\n            return i * i;\n        }\n        i++;\n    }\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n",
    "    let num: number = N;\n    let sqrt: number = Math.sqrt(num);\n    let next_Perfect_Square: number = Math.ceil(sqrt);\n    return next_Perfect_Square * next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(15));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let next_Perfect_Square = 0;\n    let i = 1;\n    while (next_Perfect_Square < N) {\n        next_Perfect_Square = i * i;\n        i++;\n    }\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    let result: number = 0;\n    while (result < N) {\n        result = i * i;\n        i++;\n    }\n    return result;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(10));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect_Square(45));\nconsole.log(next_Perfect_Square(50));\nconsole.log(next_Perfect_Square(55));\nconsole.log(next_Perfect_Square(60));\nconsole.log(next_Perfect_Square(65));\nconsole.log(next_Perfect_Square(70));\nconsole.log(next_Perfect_Square(75));\nconsole.log(next_Perfect_Square(80));\nconsole.log(next_Perfect_Square(85));\nconsole.log(next_Perfect_Square(90));\nconsole.log(next_Perfect_Square(95));\nconsole.log(next_Perfect_Square(100));\nconsole.log(next_Perfect_Square(105));\nconsole.log(next_Perfect_Square(110));\nconsole.log(next_Perfect_Square(115));\nconsole.log(next_Perfect_Square(120));\nconsole.log(next_Perfect_Square(125));\nconsole.log(next_Perfect_Square(130));\nconsole.log(next_Perfect_Square(135));\nconsole.log(next_Perfect_Square(140));\nconsole.log(next_Perfect_Square(145));\nconsole.log(next_Perfect_Square(150));\nconsole.log(next_Perfect_Square(155));\nconsole.log(next_Perfect_Square(160));\nconsole.log(next_Perfect_Square(165));\nconsole.log(next_Perfect_Square(170));\nconsole.log(next_Perfect_Square(175));\nconsole.log(next_Perfect_Square(180));\nconsole.log(next_Perfect",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(87));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(15));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let num = N;\n    while (true) {\n        let sqrt = Math.sqrt(num);\n        if (sqrt % 1 === 0) {\n            return num;\n        }\n        num++;\n    }\n}\n\nconsole.log(next_Perfect_Square(10));\n",
    "    let next_Perfect_Square: number = 0;\n    let i: number = 1;\n    while (i <= N) {\n        if (i * i > N) {\n            next_Perfect_Square = i * i;\n            break;\n        }\n        i++;\n    }\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (true) {\n        if (i * i > N) {\n            return i * i;\n        }\n        i++;\n    }\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39));\nconsole.log(next_Perfect_Square(40",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(\"Next perfect square greater than given number is \" + next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let i = 1;\n    while (true) {\n        if (i * i > N) {\n            return i * i;\n        }\n        i++;\n    }\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    let result = 0;\n    while (result < N) {\n        result = i * i;\n        i++;\n    }\n    return result;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    let result: number = 0;\n    while (result < N) {\n        result = i * i;\n        i++;\n    }\n    return result;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (true) {\n        if (i * i > N) {\n            return i * i;\n        }\n        i++;\n    }\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(8));\n",
    "    let sqrt_N = Math.sqrt(N);\n    let next_Perfect_Square = Math.ceil(sqrt_N);\n    return next_Perfect_Square * next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(36));\n",
    "    let sqrt = Math.sqrt(N);\n    let next_Perfect_Square = Math.ceil(sqrt);\n    return next_Perfect_Square * next_Perfect_Square;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let next_Perfect_Square: number = 0;\n    let i: number = 1;\n    while (true) {\n        if (i * i > N) {\n            next_Perfect_Square = i * i;\n            break;\n        }\n        i++;\n    }\n    return next_Perfect_Square;\n}\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let next_perfect_square = 0;\n    let i = 1;\n    while (next_perfect_square < N) {\n        next_perfect_square = i * i;\n        i++;\n    }\n    return next_perfect_square;\n}\nconsole.log(next_Perfect_Square(8));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let next_perfect_square = 0;\n    let i = 1;\n    while (next_perfect_square < N) {\n        next_perfect_square = i * i;\n        i++;\n    }\n    return next_perfect_square;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(10));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(40));\nconsole.log(next_Perfect_Square(45));\nconsole.log(next_Perfect_Square(50));\nconsole.log(next_Perfect_Square(55));\nconsole.log(next_Perfect_Square(60));\nconsole.log(next_Perfect_Square(65));\nconsole.log(next_Perfect_Square(70));\nconsole.log(next_Perfect_Square(75));\nconsole.log(next_Perfect_Square(80));\nconsole.log(next_Perfect_Square(85));\nconsole.log(next_Perfect_Square(90));\nconsole.log(next_Perfect_Square(95));\nconsole.log(next_Perfect_Square(100));\nconsole.log(next_Perfect_Square(105));\nconsole.log(next_Perfect_Square(110));\nconsole.log(next_Perfect_Square(115));\nconsole.log(next_Perfect_Square(120));\nconsole.log(next_Perfect_Square(125));\nconsole.log(next_Perfect_Square(130));\nconsole.log(next_Perfect_Square(135));\nconsole.log(next_Perfect_Square(140));\nconsole.log(next_Perfect_Square(145));\nconsole.log(next_Perfect_Square(150));\nconsole.log(next_Perfect_Square(155));\nconsole.log(next_Perfect_Square(160));\nconsole.log(next_Perfect_Square(165));\nconsole.log(next_Perfect_Square(170));\nconsole.log(next_Perfect_Square(175));\nconsole.log(next_Perfect_Square(180));\nconsole.log(next_Perfect_",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let sqrt_N = Math.sqrt(N);\n    let next_Perfect_Square = Math.ceil(sqrt_N) * Math.ceil(sqrt_N);\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(6));\nconsole.log(next_Perfect_Square(7));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(9));\nconsole.log(next_Perfect_Square(10));\nconsole.log(next_Perfect_Square(11));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(13));\nconsole.log(next_Perfect_Square(14));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(16));\nconsole.log(next_Perfect_Square(17));\nconsole.log(next_Perfect_Square(18));\nconsole.log(next_Perfect_Square(19));\nconsole.log(next_Perfect_Square(20));\nconsole.log(next_Perfect_Square(21));\nconsole.log(next_Perfect_Square(22));\nconsole.log(next_Perfect_Square(23));\nconsole.log(next_Perfect_Square(24));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(26));\nconsole.log(next_Perfect_Square(27));\nconsole.log(next_Perfect_Square(28));\nconsole.log(next_Perfect_Square(29));\nconsole.log(next_Perfect_Square(30));\nconsole.log(next_Perfect_Square(31));\nconsole.log(next_Perfect_Square(32));\nconsole.log(next_Perfect_Square(33));\nconsole.log(next_Perfect_Square(34));\nconsole.log(next_Perfect_Square(35));\nconsole.log(next_Perfect_Square(36));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(38));\nconsole.log(next_Perfect_Square(39));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let sqrt_N = Math.sqrt(N);\n    let next_Perfect_Square = Math.ceil(sqrt_N) * Math.ceil(sqrt_N);\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let sqrt_N = Math.sqrt(N);\n    let next_Perfect_Square = Math.ceil(sqrt_N) * Math.ceil(sqrt_N);\n    return next_Perfect_Square;\n}\n\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(15));\nconsole.log(next_Perfect_Square(25));\nconsole.log(next_Perfect_Square(37));\nconsole.log(next_Perfect_Square(48));\nconsole.log(next_Perfect_Square(57));\nconsole.log(next_Perfect_Square(68));\nconsole.log(next_Perfect_Square(79));\nconsole.log(next_Perfect_Square(90));\nconsole.log(next_Perfect_Square(101));\nconsole.log(next_Perfect_Square(112));\nconsole.log(next_Perfect_Square(123));\nconsole.log(next_Perfect_Square(134));\nconsole.log(next_Perfect_Square(145));\nconsole.log(next_Perfect_Square(156));\nconsole.log(next_Perfect_Square(167));\nconsole.log(next_Perfect_Square(178));\nconsole.log(next_Perfect_Square(189));\nconsole.log(next_Perfect_Square(200));\nconsole.log(next_Perfect_Square(211));\nconsole.log(next_Perfect_Square(222));\nconsole.log(next_Perfect_Square(233));\nconsole.log(next_Perfect_Square(244));\nconsole.log(next_Perfect_Square(255));\nconsole.log(next_Perfect_Square(266));\nconsole.log(next_Perfect_Square(277));\nconsole.log(next_Perfect_Square(288));\nconsole.log(next_Perfect_Square(299));\nconsole.log(next_Perfect_Square(310));\nconsole.log(next_Perfect_Square(321));\nconsole.log(next_Perfect_Square(332));\nconsole.log(next_Perfect_Square(343));\nconsole.log(next_Perfect_Square(354));\nconsole.log(next_Perfect_Square(365));",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(10));\n",
    "    var i = 1;\n    var j = 1;\n    while (i < N) {\n        i = i + j;\n        j = j + 2;\n    }\n    return i;\n}\nconsole.log(\"Next perfect square greater than given number is \" + next_Perfect_Square(25));\n",
    "    var i = 1;\n    while (true) {\n        if (i * i > N) {\n            return i * i;\n        }\n        i++;\n    }\n}\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let x = 1;\n    while (true) {\n        if (x * x > N) {\n            return x * x;\n        }\n        else {\n            x++;\n        }\n    }\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(10));\n",
    "    var sqrt_N = Math.sqrt(N);\n    var next_Perfect_Square = Math.ceil(sqrt_N) * Math.ceil(sqrt_N);\n    return next_Perfect_Square;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let sqrt_N: number = Math.sqrt(N);\n    let next_Perfect_Square: number = Math.pow(sqrt_N + 1, 2);\n    return next_Perfect_Square;\n}\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    var i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(10));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let i: number = 1;\n    let result: number = 0;\n    while (result < N) {\n        result = i * i;\n        i++;\n    }\n    return result;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(15));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(\"Next perfect square greater than given number is: \" + next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    let result: number = 0;\n    while (result < N) {\n        result = i * i;\n        i++;\n    }\n    return result;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(8));\nconsole.log(next_Perfect_Square(15));\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (i * i < N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(\"Next Perfect Square is : \" + next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    let result: number = 0;\n    while (result < N) {\n        result = i * i;\n        i++;\n    }\n    return result;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i: number = 1;\n    while (N > 0) {\n        N = N - i;\n        i = i + 2;\n    }\n    return i - 2;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\nconsole.log(next_Perfect_Square(15));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(25));\n",
    "    let i = 1;\n    while (true) {\n        if (i * i > N) {\n            return i * i;\n        }\n        i++;\n    }\n}\n",
    "    let i: number = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\nconsole.log(next_Perfect_Square(5));\nconsole.log(next_Perfect_Square(12));\n",
    "    let i = 1;\n    while (i * i <= N) {\n        i++;\n    }\n    return i * i;\n}\n\nconsole.log(next_Perfect_Square(25));\n"
  ]
}