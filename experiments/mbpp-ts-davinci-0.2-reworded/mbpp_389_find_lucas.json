{
  "name": "mbpp_389_find_lucas",
  "language": "ts",
  "prompt": "//Write a function to find the n'th lucas number.\nfunction find_lucas(n: number): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_389_find_lucas.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_lucas;\n  assert.deepEqual(candidate(9),76);\n  assert.deepEqual(candidate(4),7);\n  assert.deepEqual(candidate(3),4);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n === 1) {\n        return 2;\n    } else if (n === 2) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "  if (n === 0) {\n    return 2;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    return find_lucas(n - 1) + find_lucas(n - 2);\n  }\n}\n",
    "    if (n === 1) {\n        return 2;\n    }\n    else if (n === 2) {\n        return 1;\n    }\n    else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n == 0) {\n        return 2;\n    }\n    else if (n == 1) {\n        return 1;\n    }\n    else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 1) {\n        return 2;\n    } else if (n === 2) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 1) {\n        return 2;\n    } else if (n === 2) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n == 1) {\n        return 2;\n    } else if (n == 2) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n == 0) {\n        return 2;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "  if (n === 1) {\n    return 2;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return find_lucas(n - 1) + find_lucas(n - 2);\n  }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    }\n    else if (n === 1) {\n        return 1;\n    }\n    else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n === 0) {\n        return 2;\n    }\n    else if (n === 1) {\n        return 1;\n    }\n    else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 1) {\n        return 2;\n    }\n    if (n == 2) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n == 0) {\n        return 2;\n    }\n    else if (n == 1) {\n        return 1;\n    }\n    else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "  let lucas_numbers: number[] = [2, 1];\n  if (n === 1) {\n    return lucas_numbers[0];\n  } else if (n === 2) {\n    return lucas_numbers[1];\n  } else {\n    for (let i: number = 2; i < n; i++) {\n      lucas_numbers.push(lucas_numbers[i - 1] + lucas_numbers[i - 2]);\n    }\n    return lucas_numbers[n - 1];\n  }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    }\n    else if (n == 1) {\n        return 1;\n    }\n    else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n == 0) {\n        return 2;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    }\n    else if (n == 1) {\n        return 1;\n    }\n    else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "  if (n === 1) {\n    return 2;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return find_lucas(n - 1) + find_lucas(n - 2);\n  }\n}\n",
    "    if (n == 1) {\n        return 2;\n    } else if (n == 2) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    let lucas: number[] = [2, 1];\n    for (let i: number = 2; i < n; i++) {\n        lucas[i] = lucas[i - 1] + lucas[i - 2];\n    }\n    return lucas[n - 1];\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 1) {\n        return 2;\n    }\n    else if (n == 2) {\n        return 1;\n    }\n    else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    }\n    else if (n == 1) {\n        return 1;\n    }\n    else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "  if (n === 0) {\n    return 2;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    return find_lucas(n - 1) + find_lucas(n - 2);\n  }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "  if (n == 0) {\n    return 2;\n  } else if (n == 1) {\n    return 1;\n  } else {\n    return find_lucas(n - 1) + find_lucas(n - 2);\n  }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    let lucas: number = 2;\n    let lucas_prev: number = 1;\n    let lucas_prev_prev: number = 2;\n    if (n == 0) {\n        return 2;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    for (let i: number = 2; i <= n; i++) {\n        lucas = lucas_prev + lucas_prev_prev;\n        lucas_prev_prev = lucas_prev;\n        lucas_prev = lucas;\n    }\n    return lucas;\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "  if (n === 0) {\n    return 2;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    return find_lucas(n - 1) + find_lucas(n - 2);\n  }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n === 0) {\n        return 2;\n    }\n    else if (n === 1) {\n        return 1;\n    }\n    else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n == 0) {\n        return 2;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    let lucas_array: number[] = [2, 1];\n    if (n === 1) {\n        return lucas_array[0];\n    }\n    if (n === 2) {\n        return lucas_array[1];\n    }\n    for (let i: number = 2; i < n; i++) {\n        lucas_array.push(lucas_array[i - 1] + lucas_array[i - 2]);\n    }\n    return lucas_array[n - 1];\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    let lucas: number[] = [2, 1];\n    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        for (let i: number = 2; i <= n; i++) {\n            lucas.push(lucas[i - 1] + lucas[i - 2]);\n        }\n        return lucas[n];\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n === 0) {\n        return 2;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "  if (n === 0) {\n    return 2;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    return find_lucas(n - 1) + find_lucas(n - 2);\n  }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 1) {\n        return 2;\n    } else if (n === 2) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "  if (n === 0) {\n    return 2;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    return find_lucas(n - 1) + find_lucas(n - 2);\n  }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 1) {\n        return 2;\n    } else if (n == 2) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n == 0) {\n        return 2;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    }\n    else if (n == 1) {\n        return 1;\n    }\n    else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n == 0) {\n        return 2;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "  if (n === 0) {\n    return 2;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    return find_lucas(n - 1) + find_lucas(n - 2);\n  }\n}\n",
    "    if (n === 0) {\n        return 2;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n == 1) {\n        return 2;\n    } else if (n == 2) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 1) {\n        return 2;\n    } else if (n === 2) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 1) {\n        return 2;\n    }\n    else if (n == 2) {\n        return 1;\n    }\n    else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    }\n    else if (n === 1) {\n        return 1;\n    }\n    else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 1) {\n        return 2;\n    } else if (n === 2) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "  if (n === 1) {\n    return 2;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return find_lucas(n - 1) + find_lucas(n - 2);\n  }\n}\n",
    "    let lucas: number[] = [2, 1];\n    if (n === 1) {\n        return lucas[0];\n    }\n    if (n === 2) {\n        return lucas[1];\n    }\n    for (let i: number = 2; i < n; i++) {\n        lucas.push(lucas[i - 1] + lucas[i - 2]);\n    }\n    return lucas[n - 1];\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    }\n    else if (n == 1) {\n        return 1;\n    }\n    else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n == 0) {\n        return 2;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    }\n    else if (n == 1) {\n        return 1;\n    }\n    else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    }\n    else if (n == 1) {\n        return 1;\n    }\n    else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\nconsole.log(find_lucas(5));\n",
    "    if (n == 0) {\n        return 2;\n    }\n    else if (n == 1) {\n        return 1;\n    }\n    else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    }\n    else if (n == 1) {\n        return 1;\n    }\n    else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n === 0) {\n        return 2;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n == 0) {\n        return 2;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    }\n    else if (n == 1) {\n        return 1;\n    }\n    else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n === 1) {\n        return 2;\n    } else if (n === 2) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    }\n    else if (n == 1) {\n        return 1;\n    }\n    else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "  if (n === 0) {\n    return 2;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    return find_lucas(n - 1) + find_lucas(n - 2);\n  }\n}\n",
    "    if (n == 0) {\n        return 2;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    }\n    else if (n === 1) {\n        return 1;\n    }\n    else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "  if (n === 0) {\n    return 2;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    return find_lucas(n - 1) + find_lucas(n - 2);\n  }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n == 0) {\n        return 2;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "  if (n === 0) {\n    return 2;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    return find_lucas(n - 1) + find_lucas(n - 2);\n  }\n}\n",
    "    if (n === 0) {\n        return 2;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n == 0) {\n        return 2;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 1) {\n        return 2;\n    } else if (n === 2) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "  if (n === 0) {\n    return 2;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    return find_lucas(n - 1) + find_lucas(n - 2);\n  }\n}\n",
    "    if (n == 0) {\n        return 2;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "  if (n === 0) {\n    return 2;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    return find_lucas(n - 1) + find_lucas(n - 2);\n  }\n}\n",
    "    if (n == 0) {\n        return 2;\n    }\n    else if (n == 1) {\n        return 1;\n    }\n    else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n === 0) {\n        return 2;\n    }\n    else if (n === 1) {\n        return 1;\n    }\n    else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "  if (n === 1) {\n    return 2;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return find_lucas(n - 1) + find_lucas(n - 2);\n  }\n}\n",
    "    let lucas: number[] = [2, 1];\n    if (n < 3) {\n        return lucas[n - 1];\n    }\n    for (let i: number = 2; i < n; i++) {\n        lucas.push(lucas[i - 1] + lucas[i - 2]);\n    }\n    return lucas[n - 1];\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    } else if (n == 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 1) {\n        return 2;\n    }\n    else if (n == 2) {\n        return 1;\n    }\n    else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n == 0) {\n        return 2;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "  if (n === 0) {\n    return 2;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n === 1) {\n        return 2;\n    }\n    if (n === 2) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "  if (n === 0) {\n    return 2;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    return find_lucas(n - 1) + find_lucas(n - 2);\n  }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    let lucas_num: number = 0;\n    if (n === 0) {\n        lucas_num = 2;\n    } else if (n === 1) {\n        lucas_num = 1;\n    } else {\n        lucas_num = find_lucas(n - 1) + find_lucas(n - 2);\n    }\n    return lucas_num;\n}\n",
    "    if (n === 0) {\n        return 2;\n    }\n    else if (n === 1) {\n        return 1;\n    }\n    else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 0) {\n        return 2;\n    } else if (n === 1) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "    if (n === 1) {\n        return 2;\n    } else if (n === 2) {\n        return 1;\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2);\n    }\n}\n",
    "  if (n === 0) {\n    return 2;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    return find_lucas(n - 1) + find_lucas(n - 2);\n  }\n}\n"
  ]
}