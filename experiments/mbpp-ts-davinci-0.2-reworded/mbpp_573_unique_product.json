{
  "name": "mbpp_573_unique_product",
  "language": "ts",
  "prompt": "//Write a tsthon function to calculate the product of the unique numbers in a given array.\nfunction unique_product(list_data: number[]): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_product;\n  assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);\n  assert.deepEqual(candidate([1, 2, 3, 1]),6);\n  assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let unique_list: number[] = [];\n    let product: number = 1;\n    for (let i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    for (let i = 0; i < unique_list.length; i++) {\n        product = product * unique_list[i];\n    }\n    return product;\n}\n\nconsole.log(unique_product([1, 2, 3, 4, 5]));\nconsole.log(unique_product([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]));\nconsole.log(unique_product([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]));\n",
    "    let result: number = 1;\n    let unique_data: number[] = [];\n    for (let i = 0; i < list_data.length; i++) {\n        if (unique_data.indexOf(list_data[i]) == -1) {\n            unique_data.push(list_data[i]);\n        }\n    }\n    for (let i = 0; i < unique_data.length; i++) {\n        result = result * unique_data[i];\n    }\n    return result;\n}\nconsole.log(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "    let unique_list = [];\n    for (let i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    return unique_list.reduce((a, b) => a * b);\n}\nconsole.log(unique_product([1, 2, 3, 4, 5]));\nconsole.log(unique_product([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]));\n",
    "    let unique_list = [];\n    for (let i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    let product = 1;\n    for (let i = 0; i < unique_list.length; i++) {\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconsole.log(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "    let unique_list = [];\n    for (let i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    return unique_list.reduce((a, b) => a * b);\n}\nconsole.log(unique_product([1, 2, 3, 3, 2, 5]));\n",
    "    let unique_list = [];\n    let product = 1;\n    for (let i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    for (let i = 0; i < unique_list.length; i++) {\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconsole.log(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "    let unique_list = [];\n    for (let i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    return unique_list.reduce(function (a, b) {\n        return a * b;\n    });\n}\nconsole.log(unique_product([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,",
    "    let unique_list = list_data.filter(function (elem, index, self) {\n        return index === self.indexOf(elem);\n    });\n    return unique_list.reduce(function (a, b) {\n        return a * b;\n    });\n}\n\nconsole.log(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,",
    "    let unique_list = [];\n    for (let i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    return unique_list.reduce((a, b) => a * b);\n}\nconsole.log(unique_product([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,",
    "    var unique_list = [];\n    for (var i = 0; i < list_data.length; i++) {\n        if (list_data.indexOf(list_data[i]) == i) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    var product = 1;\n    for (var i = 0; i < unique_list.length; i++) {\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconsole.log(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9",
    "    let unique_list = [];\n    for (let i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    return unique_list.reduce((a, b) => a * b);\n}\n\nconsole.log(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "    let unique_list = [];\n    for (let i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    return unique_list.reduce((a, b) => a * b);\n}\nconsole.log(unique_product([1, 2, 3, 4, 5]));\nconsole.log(unique_product([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]));\n",
    "    let unique_list = [];\n    for (let i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    return unique_list.reduce((a, b) => a * b);\n}\nconsole.log(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "    let unique_list = [];\n    for (let i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    return unique_list.reduce((a, b) => a * b);\n}\nconsole.log(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,",
    "    let unique_list = [];\n    for (let i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    return unique_list.reduce(function (a, b) { return a * b; });\n}\nconsole.log(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,",
    "    var result: number = 1;\n    var unique_list: number[] = [];\n    for (var i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    for (var i = 0; i < unique_list.length; i++) {\n        result = result * unique_list[i];\n    }\n    return result;\n}\nconsole.log(unique_product([1, 9, 6, 8, 4]));\nconsole.log(unique_product([2, 1, 2, 3, 3]));\n",
    "    let unique_list = [];\n    for (let i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    let product = 1;\n    for (let i = 0; i < unique_list.length; i++) {\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconsole.log(unique_product([1, 9, 6, 8, 4]));\nconsole.log(unique_product([2, 1, 2, 3, 3]));\nconsole.log(unique_product([-2, -1, -2, -3, -3]));\nconsole.log(unique_product([2, 1, 2, 3, 4]));\n",
    "    let unique_list = [];\n    let product = 1;\n    for (let i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    for (let i = 0; i < unique_list.length; i++) {\n        product = product * unique_list[i];\n    }\n    return product;\n}\nconsole.log(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,",
    "    let unique_list = [];\n    for (let i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    return unique_list.reduce((a, b) => a * b);\n}\nconsole.log(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,",
    "    let unique_list = [];\n    for (let i = 0; i < list_data.length; i++) {\n        if (unique_list.indexOf(list_data[i]) == -1) {\n            unique_list.push(list_data[i]);\n        }\n    }\n    return unique_list.reduce((a, b) => a * b);\n}\nconsole.log(unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,"
  ]
}