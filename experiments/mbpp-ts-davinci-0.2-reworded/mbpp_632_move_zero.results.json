{
  "name": "mbpp_632_move_zero",
  "language": "ts",
  "prompt": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([10, 20, 0, 30, 0, 10, 20]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 1,\n  2, 0, 0\n]\n[\n  10, 20, 30, 10,\n  20,  0,  0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        }\n        else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zeros: number[] = [];\n    let non_zeros: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zeros.push(num_list[i]);\n        } else {\n            non_zeros.push(num_list[i]);\n        }\n    }\n    return non_zeros.concat(zeros);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let count = 0;\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            num_list[count++] = num_list[i];\n        }\n    }\n    while (count < num_list.length) {\n        num_list[count++] = 0;\n    }\n    return num_list;\n}\n\nconsole.log(move_zero([12, 0, 10, 0, 8, 12, 7, 6, 0, 4, 10, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  12, 10,  8, 12, 7,\n   6,  4, 10, 12, 0,\n   0,  0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        }\n        else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([9, 0.0, 0, 9, 1, 2, 0, 1, 0, 1, 0.0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([\"a\", 0, 0, \"b\", \"c\", \"d\", 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([\"a\", 0, 0, \"b\", null, \"c\", \"d\", 0, 1, false, 0, 1, 0, 3, [], 0, 1, 9, 0, 0, {}, 0, 0, 9]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([\"a\", \"b\"]));\nconsole.log(move_zero([\"a\"]));\nconsole.log(move_zero([0, 0]));\nconsole.log(move_zero([0]));\nconsole.log(move_zero([false]));\nconsole.log(move_zero([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "../../../../tmp/tmpcv42rncw.ts(17,24): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpcv42rncw.ts(17,35): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpcv42rncw.ts(17,40): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpcv42rncw.ts(17,45): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpcv42rncw.ts(18,24): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpcv42rncw.ts(18,35): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpcv42rncw.ts(18,46): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpcv42rncw.ts(18,51): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpcv42rncw.ts(18,62): error TS2322: Type 'false' is not assignable to type 'number'.\n../../../../tmp/tmpcv42rncw.ts(18,81): error TS2322: Type 'undefined[]' is not assignable to type ",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let count = 0;\n    let new_list = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            new_list[count] = num_list[i];\n            count++;\n        }\n    }\n    for (let i = count; i < num_list.length; i++) {\n        new_list[i] = 0;\n    }\n    return new_list;\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([9, 0.0, 0, 9, 1, 2, 0, 1, 0, 1, 0.0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([\"a\", 0, 0, \"b\", \"c\", \"d\", 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([\"a\", 0, 0, \"b\", null, \"c\", \"d\", 0, 1, false, 0, 1, 0, 3, [], 0, 1, 9, 0, 0, {}, 0, 0, 9]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "../../../../tmp/tmph9j49yvh.ts(28,1): error TS1005: ',' expected.\n../../../../tmp/tmph9j49yvh.ts(28,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([9, 0.0, 0, 9, 1, 2, 0, 1, 0, 1, 0.0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([\"a\", 0, 0, \"b\", \"c\", \"d\", 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([\"a\", 0, 0, \"b\", null, \"c\", \"d\", 0, 1, false, 0, 1, 0, 3, [], 0, 1, 9, 0, 0, {}, 0, 0, 9]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "../../../../tmp/tmppa8ikxem.ts(28,1): error TS1005: ',' expected.\n../../../../tmp/tmppa8ikxem.ts(28,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([9, 0.0, 0, 9, 1, 2, 0, 1, 0, 1, 0.0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([\"a\", 0, 0, \"b\", \"c\", \"d\", 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([\"a\", 0, 0, \"b\", null, \"c\", \"d\", 0, 1, false, 0, 1, 0, 3, [], 0, 1, 9, 0, 0, {}, 0, 0, 9]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([\"a\", \"b\"]));\nconsole.log(move_zero([\"a\"]));\nconsole.log(move_zero([0, 0]));\nconsole.log(move_zero([0]));\nconsole.log(move_zero([false]));\nconsole.log(move_zero([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "../../../../tmp/tmpjprtw4jd.ts(17,24): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpjprtw4jd.ts(17,35): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpjprtw4jd.ts(17,40): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpjprtw4jd.ts(17,45): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpjprtw4jd.ts(18,24): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpjprtw4jd.ts(18,35): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpjprtw4jd.ts(18,46): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpjprtw4jd.ts(18,51): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpjprtw4jd.ts(18,62): error TS2322: Type 'false' is not assignable to type 'number'.\n../../../../tmp/tmpjprtw4jd.ts(18,81): error TS2322: Type 'undefined[]' is not assignable to type ",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            num_list_new.push(num_list[i]);\n        }\n        else {\n            zero_list.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([9, 0.0, 0, 9, 1, 2, 0, 1, 0, 1, 0.0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(move_zero([1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 1,\n  2, 0, 0\n]\n[\n  9, 9, 1, 2, 1, 1, 3,\n  1, 9, 9, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0\n]\n[\n  0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0\n]\n[ 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let count = 0;\n    let result = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            result[count] = num_list[i];\n            count++;\n        }\n    }\n    for (let i = count; i < num_list.length; i++) {\n        result[i] = 0;\n    }\n    return result;\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([9, 0.0, 0, 9, 1, 2, 0, 1, 0, 1, 0.0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(move_zero([1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "[\n  1, 2, 3, 1,\n  2, 0, 0\n]\n[\n  9, 9, 1, 2, 1, 1, 3,\n  1, 9, 9, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0\n]\n[\n  0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0\n]\n[ 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123932,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        }\n        else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([10, 20, 0, 30, 0, 10, 20]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "[\n  1, 2, 3, 1,\n  2, 0, 0\n]\n[\n  10, 20, 30, 10,\n  20,  0,  0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(0);\n        } else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let count: number = 0;\n    let temp: number = 0;\n    for (let i: number = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            temp = num_list[count];\n            num_list[count] = num_list[i];\n            num_list[i] = temp;\n            count = count + 1;\n        }\n    }\n    return num_list;\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123932,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n  let zero_list: number[] = [];\n  let num_list_new: number[] = [];\n  for (let i = 0; i < num_list.length; i++) {\n    if (num_list[i] === 0) {\n      zero_list.push(num_list[i]);\n    } else {\n      num_list_new.push(num_list[i]);\n    }\n  }\n  return num_list_new.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let count = 0;\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            num_list[count++] = num_list[i];\n        }\n    }\n    while (count < num_list.length) {\n        num_list[count++] = 0;\n    }\n    return num_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        }\n        else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(move_zero([1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "[\n  1, 2, 3, 1,\n  2, 0, 0\n]\n[\n  0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0\n]\n[ 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        }\n        else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([9, 0.0, 0, 9, 1, 2, 0, 1, 0, 1, 0.0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([\"a\", 0, 0, \"b\", \"c\", \"d\", 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([\"a\", 0, 0, \"b\", null, \"c\", \"d\", 0, 1, false, 0, 1, 0, 3, [], 0, 1, 9, 0, 0, {}, 0, 0, 9]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "../../../../tmp/tmpyiplng1e.ts(28,1): error TS1005: ',' expected.\n../../../../tmp/tmpyiplng1e.ts(28,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([9, 0.0, 0, 9, 1, 2, 0, 1, 0, 1, 0.0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(move_zero([1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 1,\n  2, 0, 0\n]\n[\n  9, 9, 1, 2, 1, 1, 3,\n  1, 9, 9, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0\n]\n[\n  0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0\n]\n[ 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([9, 0.0, 0, 9, 1, 2, 0, 1, 0, 1, 0.0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(move_zero([1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 1,\n  2, 0, 0\n]\n[\n  9, 9, 1, 2, 1, 1, 3,\n  1, 9, 9, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0\n]\n[\n  0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0\n]\n[ 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123932,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([9, 0.0, 0, 9, 1, 2, 0, 1, 0, 1, 0.0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([0, 1, None, 2, False, 1, 0]));\nconsole.log(move_zero([\"a\", \"b\"]));\nconsole.log(move_zero([\"a\"]));\nconsole.log(move_zero([0, 0]));\nconsole.log(move_zero([0]));\nconsole.log(move_zero([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "../../../../tmp/tmpa45ydtyx.ts(17,30): error TS2304: Cannot find name 'None'.\n../../../../tmp/tmpa45ydtyx.ts(17,39): error TS2304: Cannot find name 'False'.\n../../../../tmp/tmpa45ydtyx.ts(18,24): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpa45ydtyx.ts(18,29): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpa45ydtyx.ts(19,24): error TS2322: Type 'string' is not assignable to type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([9, 0.0, 0, 9, 1, 2, 0, 1, 0, 1, 0.0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([\"a\", 0, 0, \"b\", \"c\", \"d\", 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([\"a\", 0, 0, \"b\", null, \"c\", \"d\", 0, 1, false, 0, 1, 0, 3, [], 0, 1, 9, 0, 0, {}, 0, 0, 9]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([\"a\", \"b\"]));\nconsole.log(move_zero([\"a\"]));\nconsole.log(move_zero([0, 0]));\nconsole.log(move_zero([0]));\nconsole.log(move_zero([false]));\nconsole.log(move_zero([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "../../../../tmp/tmp0rtdt2iv.ts(17,24): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(17,35): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(17,40): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(17,45): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(18,24): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(18,35): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(18,46): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(18,51): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(18,62): error TS2322: Type 'false' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(18,81): error TS2322: Type 'undefined[]' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(18,100): error TS2322: Type '{}' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(19,39): error TS2322: Type 'false' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(20,24): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(20,29): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(21,24): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(24,24): error TS2322: Type 'false' is not assignable to type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        }\n        else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123932,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let a: number[] = [];\n    let b: number[] = [];\n    let c: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            a.push(num_list[i]);\n        } else {\n            b.push(num_list[i]);\n        }\n    }\n    c = b.concat(a);\n    return c;\n}\nconsole.log(move_zero([0, 1, 0, 2, 0, 3, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "[\n  1, 2, 3, 0,\n  0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        }\n        else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([9, 0.0, 0, 9, 1, 2, 0, 1, 0, 1, 0.0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([\"a\", 0, 0, \"b\", \"c\", \"d\", 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([\"a\", 0, 0, \"b\", null, \"c\", \"d\", 0, 1, false, 0, 1, 0, 3, [], 0, 1, 9, 0, 0, {}, 0, 0, 9]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([\"a\", \"b\"]));\nconsole.log(move_zero([\"a\"]));\nconsole.log(move_zero([0, 0]));\nconsole.log(move_zero([0]));\nconsole.log(move_zero([false]));\nconsole.log(move_zero([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "../../../../tmp/tmpo9d9oc4w.ts(17,24): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpo9d9oc4w.ts(17,35): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpo9d9oc4w.ts(17,40): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpo9d9oc4w.ts(17,45): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpo9d9oc4w.ts(18,24): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpo9d9oc4w.ts(18,35): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpo9d9oc4w.ts(18,46): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpo9d9oc4w.ts(18,51): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpo9d9oc4w.ts(18,62): error TS2322: Type 'false' is not assignable to type 'number'.\n../../../../tmp/tmpo9d9oc4w.ts(18,81): error TS2322: Type 'undefined[]' is not assignable to type ",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n  let zero_list: number[] = [];\n  let non_zero_list: number[] = [];\n  for (let i = 0; i < num_list.length; i++) {\n    if (num_list[i] == 0) {\n      zero_list.push(num_list[i]);\n    } else {\n      non_zero_list.push(num_list[i]);\n    }\n  }\n  return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([10, 20, 0, 30, 0, 10, 20]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 1,\n  2, 0, 0\n]\n[\n  10, 20, 30, 10,\n  20,  0,  0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([10, 20, 0, 30, 0, 10, 20]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123932,
      "stdout": "[\n  1, 2, 3, 1,\n  2, 0, 0\n]\n[\n  10, 20, 30, 10,\n  20,  0,  0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let count = 0;\n    let length = num_list.length;\n    for (let i = 0; i < length; i++) {\n        if (num_list[i] != 0) {\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while (count < length) {\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        }\n        else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123933,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let count: number = 0;\n    let result: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            result[count] = num_list[i];\n            count++;\n        }\n    }\n    for (let i = count; i < num_list.length; i++) {\n        result[i] = 0;\n    }\n    return result;\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123934,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123934,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123932,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let count = 0;\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            num_list[count++] = num_list[i];\n        }\n    }\n    while (count < num_list.length) {\n        num_list[count++] = 0;\n    }\n    return num_list;\n}\n\nconsole.log(move_zero([1, 2, 0, 4, 3, 0, 5, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123934,
      "stdout": "[\n  1, 2, 4, 3,\n  5, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123932,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([9, 0.0, 0, 9, 1, 2, 0, 1, 0, 1, 0.0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([\"a\", 0, 0, \"b\", \"c\", \"d\", 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([\"a\", 0, 0, \"b\", null, \"c\", \"d\", 0, 1, false, 0, 1, 0, 3, [], 0, 1, 9, 0, 0, {}, 0, 0, 9]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([\"a\", \"b\"]));\nconsole.log(move_zero([\"a\"]));\nconsole.log(move_zero([0, 0]));\nconsole.log(move_zero([0]));\nconsole.log(move_zero([false]));\nconsole.log(move_zero([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123934,
      "stdout": "../../../../tmp/tmp8pd971ti.ts(17,24): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp8pd971ti.ts(17,35): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp8pd971ti.ts(17,40): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp8pd971ti.ts(17,45): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp8pd971ti.ts(18,24): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp8pd971ti.ts(18,35): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp8pd971ti.ts(18,46): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp8pd971ti.ts(18,51): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp8pd971ti.ts(18,62): error TS2322: Type 'false' is not assignable to type 'number'.\n../../../../tmp/tmp8pd971ti.ts(18,81): error TS2322: Type 'undefined[]' is not assignable to type ",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        }\n        else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([10, 20, 0, 30, 0, 10, 20]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123932,
      "stdout": "[\n  1, 2, 3, 1,\n  2, 0, 0\n]\n[\n  10, 20, 30, 10,\n  20,  0,  0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let count: number = 0;\n    let temp: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            temp[count] = num_list[i];\n            count++;\n        }\n    }\n    while (count < num_list.length) {\n        temp[count] = 0;\n        count++;\n    }\n    return temp;\n}\n\nconsole.log(move_zero([0, 1, 0, 2, 0, 3, 0, 4, 0, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123934,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  0, 0, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        }\n        else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123934,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        }\n        else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        }\n        else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([10, 20, 0, 30, 0, 10, 20]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "[\n  1, 2, 3, 1,\n  2, 0, 0\n]\n[\n  10, 20, 30, 10,\n  20,  0,  0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        }\n        else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123932,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n  let zero_list: number[] = [];\n  let non_zero_list: number[] = [];\n  for (let i = 0; i < num_list.length; i++) {\n    if (num_list[i] === 0) {\n      zero_list.push(num_list[i]);\n    } else {\n      non_zero_list.push(num_list[i]);\n    }\n  }\n  return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123934,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([10, 20, 0, 30, 0, 10, 20]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 1,\n  2, 0, 0\n]\n[\n  10, 20, 30, 10,\n  20,  0,  0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([10, 20, 0, 30, 0, 10, 20]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123934,
      "stdout": "[\n  1, 2, 3, 1,\n  2, 0, 0\n]\n[\n  10, 20, 30, 10,\n  20,  0,  0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123932,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    var temp: number[] = [];\n    var count: number = 0;\n    for (var i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            temp[count++] = num_list[i];\n        }\n    }\n    while (count < num_list.length) {\n        temp[count++] = 0;\n    }\n    return temp;\n}\n\nconsole.log(move_zero([1, 2, 0, 4, 3, 0, 5, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123934,
      "stdout": "[\n  1, 2, 4, 3,\n  5, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123934,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([10, 20, 0, 30, 0, 10, 20]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 1,\n  2, 0, 0\n]\n[\n  10, 20, 30, 10,\n  20,  0,  0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        }\n        else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([10, 20, 0, 30, 0, 10, 20]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 1,\n  2, 0, 0\n]\n[\n  10, 20, 30, 10,\n  20,  0,  0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list2: number[] = [];\n    for (let i: number = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        }\n        else {\n            num_list2.push(num_list[i]);\n        }\n    }\n    return num_list2.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123934,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123934,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123932,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        }\n        else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        }\n        else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let count = 0;\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while (count < num_list.length) {\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123934,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            num_list_new.push(num_list[i]);\n        }\n        else {\n            zero_list.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123934,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        }\n        else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123934,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let count = 0;\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while (count < num_list.length) {\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123934,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123932,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let result: number[] = [];\n    let zeros: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zeros.push(num_list[i]);\n        } else {\n            result.push(num_list[i]);\n        }\n    }\n    return result.concat(zeros);\n}\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123934,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123932,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123934,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let count = 0;\n    let result = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            result[count] = num_list[i];\n            count++;\n        }\n    }\n    while (count < num_list.length) {\n        result[count] = 0;\n        count++;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123934,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let count = 0;\n    let result = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            result[count++] = num_list[i];\n        }\n    }\n    while (count < num_list.length) {\n        result[count++] = 0;\n    }\n    return result;\n}\n\nconsole.log(move_zero([0, 1, 0, 2, 0, 3, 0, 4, 0, 5]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123934,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  0, 0, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let count: number = 0;\n    let result: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            result[count] = num_list[i];\n            count++;\n        }\n    }\n    while (count < num_list.length) {\n        result[count] = 0;\n        count++;\n    }\n    return result;\n}\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([9, 0.0, 0, 9, 1, 2, 0, 1, 0, 1, 0.0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(move_zero([1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123934,
      "stdout": "[\n  1, 2, 3, 1,\n  2, 0, 0\n]\n[\n  9, 9, 1, 2, 1, 1, 3,\n  1, 9, 9, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0\n]\n[\n  0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0\n]\n[ 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let count = 0;\n    let result = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            result[count] = num_list[i];\n            count++;\n        }\n    }\n    while (count < num_list.length) {\n        result[count] = 0;\n        count++;\n    }\n    return result;\n}\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123934,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        }\n        else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123935,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 0, 0, 3, 6]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123936,
      "stdout": "[\n  1, 2, 3, 6,\n  0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let count: number = 0;\n    let result: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            result[count] = num_list[i];\n            count++;\n        }\n    }\n    while (count < num_list.length) {\n        result[count] = 0;\n        count++;\n    }\n    return result;\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123936,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([10, 20, 0, 30, 0, 10, 20]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 1,\n  2, 0, 0\n]\n[\n  10, 20, 30, 10,\n  20,  0,  0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([9, 0.0, 0, 9, 1, 2, 0, 1, 0, 1, 0.0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([0, 1, None, 2, False, 1, 0]));\nconsole.log(move_zero([\"a\", \"b\"]));\nconsole.log(move_zero([\"a\"]));\nconsole.log(move_zero([0, 0]));\nconsole.log(move_zero([0]));\nconsole.log(move_zero([False]));\nconsole.log(move_zero([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123936,
      "stdout": "../../../../tmp/tmpibbzm9wh.ts(17,30): error TS2304: Cannot find name 'None'.\n../../../../tmp/tmpibbzm9wh.ts(17,39): error TS2304: Cannot find name 'False'.\n../../../../tmp/tmpibbzm9wh.ts(18,24): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpibbzm9wh.ts(18,29): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpibbzm9wh.ts(19,24): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpibbzm9wh.ts(22,24): error TS2304: Cannot find name 'False'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        }\n        else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123934,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123933,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([9, 0.0, 0, 9, 1, 2, 0, 1, 0, 1, 0.0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(move_zero([1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 1,\n  2, 0, 0\n]\n[\n  9, 9, 1, 2, 1, 1, 3,\n  1, 9, 9, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0\n]\n[\n  0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0\n]\n[ 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(0);\n        }\n        else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123937,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let count: number = 0;\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            num_list[count++] = num_list[i];\n        }\n    }\n    while (count < num_list.length) {\n        num_list[count++] = 0;\n    }\n    return num_list;\n}\nconsole.log(move_zero([12, 0, 10, 0, 8, 12, 7, 6, 0, 4, 10, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123937,
      "stdout": "[\n  12, 10,  8, 12, 7,\n   6,  4, 10, 12, 0,\n   0,  0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let result: number[] = [];\n    let zeros: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zeros.push(num_list[i]);\n        } else {\n            result.push(num_list[i]);\n        }\n    }\n    return result.concat(zeros);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123937,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let count: number = 0;\n    let new_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            new_list.push(num_list[i]);\n        }\n        else {\n            count++;\n        }\n    }\n    for (let i = 0; i < count; i++) {\n        new_list.push(0);\n    }\n    return new_list;\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123937,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([9, 0.0, 0, 9, 1, 2, 0, 1, 0, 1, 0.0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(move_zero([1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 1,\n  2, 0, 0\n]\n[\n  9, 9, 1, 2, 1, 1, 3,\n  1, 9, 9, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0\n]\n[\n  0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0\n]\n[ 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        }\n        else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let count = 0;\n    let len = num_list.length;\n    for (let i = 0; i < len; i++) {\n        if (num_list[i] != 0) {\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while (count < len) {\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\n\nconsole.log(move_zero([12, 0, 10, 0, 8, 12, 7, 6, 0, 4, 10, 12]));\nconsole.log(move_zero([12, 0, 10, 0, 8, 12, 7, 6, 0, 4, 10, 12]));\nconsole.log(move_zero([12, 0, 10, 0, 8, 12, 7, 6, 0, 4, 10, 12]));\nconsole.log(move_zero([12, 0, 10, 0, 8, 12, 7, 6, 0, 4, 10, 12]));\nconsole.log(move_zero([12, 0, 10, 0, 8, 12, 7, 6, 0, 4, 10, 12]));\nconsole.log(move_zero([12, 0, 10, 0, 8, 12, 7, 6, 0, 4, 10, 12]));\nconsole.log(move_zero([12, 0, 10, 0, 8, 12, 7, 6, 0, 4, 10, 12]));\nconsole.log(move_zero([12, 0, 10, 0, 8, 12, 7, 6, 0, 4, 10, 12]));\nconsole.log(move_zero([12, 0, 10, 0, 8, 12, 7, 6, 0, 4, 10, 12]));\nconsole.log(move_zero([12, 0, 10, 0, 8, 12, 7, 6, 0, 4, 10, 12]));\nconsole.log(move_zero([12, 0, 10, 0, 8, 12, 7, 6, 0, 4, 10, 12]));\nconsole.log(move_zero([12, 0, 10, 0, 8, 12, 7, 6, 0, 4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123937,
      "stdout": "../../../../tmp/tmpccz8q_de.ts(30,1): error TS1005: ',' expected.\n../../../../tmp/tmpccz8q_de.ts(30,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i: number = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 1, 0, 1, 0, 3, 0, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123937,
      "stdout": "[\n  1, 2, 1, 1, 3,\n  1, 0, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zeros: number[] = [];\n    let non_zeros: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zeros.push(num_list[i]);\n        } else {\n            non_zeros.push(num_list[i]);\n        }\n    }\n    return non_zeros.concat(zeros);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123937,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([9, 0.0, 0, 9, 1, 2, 0, 1, 0, 1, 0.0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([\"a\", 0, 0, \"b\", \"c\", \"d\", 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([\"a\", 0, 0, \"b\", null, \"c\", \"d\", 0, 1, false, 0, 1, 0, 3, [], 0, 1, 9, 0, 0, {}, 0, 0, 9]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([\"a\", \"b\"]));\nconsole.log(move_zero([\"a\"]));\nconsole.log(move_zero([0, 0]));\nconsole.log(move_zero([0]));\nconsole.log(move_zero([false]));\nconsole.log(move_zero([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "../../../../tmp/tmp0rtdt2iv.ts(17,24): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(17,35): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(17,40): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(17,45): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(18,24): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(18,35): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(18,46): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(18,51): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(18,62): error TS2322: Type 'false' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(18,81): error TS2322: Type 'undefined[]' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(18,100): error TS2322: Type '{}' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(19,39): error TS2322: Type 'false' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(20,24): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(20,29): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(21,24): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp0rtdt2iv.ts(24,24): error TS2322: Type 'false' is not assignable to type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        }\n        else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123935,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n  let zero_list: number[] = [];\n  let non_zero_list: number[] = [];\n  for (let i = 0; i < num_list.length; i++) {\n    if (num_list[i] === 0) {\n      zero_list.push(num_list[i]);\n    } else {\n      non_zero_list.push(num_list[i]);\n    }\n  }\n  return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123937,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123934,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(0);\n        } else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123937,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123932,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123934,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        }\n        else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123937,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([10, 20, 0, 30, 0, 10, 20]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 1,\n  2, 0, 0\n]\n[\n  10, 20, 30, 10,\n  20,  0,  0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123937,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let count: number = 0;\n    let new_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            new_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while (count < num_list.length) {\n        new_list[count] = 0;\n        count++;\n    }\n    return new_list;\n}\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123937,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123934,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([9, 0.0, 0, 9, 1, 2, 0, 1, 0, 1, 0.0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([\"a\", 0, 0, \"b\", \"c\", \"d\", 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([\"a\", 0, 0, \"b\", null, \"c\", \"d\", 0, 1, false, 0, 1, 0, 3, [], 0, 1, 9, 0, 0, {}, 0, 0, 9]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([\"a\", \"b\"]));\nconsole.log(move_zero([\"a\"]));\nconsole.log(move_zero([0, 0]));\nconsole.log(move_zero([0]));\nconsole.log(move_zero([false]));\nconsole.log(move_zero([]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123934,
      "stdout": "../../../../tmp/tmp8pd971ti.ts(17,24): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp8pd971ti.ts(17,35): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp8pd971ti.ts(17,40): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp8pd971ti.ts(17,45): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp8pd971ti.ts(18,24): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp8pd971ti.ts(18,35): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp8pd971ti.ts(18,46): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp8pd971ti.ts(18,51): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmp8pd971ti.ts(18,62): error TS2322: Type 'false' is not assignable to type 'number'.\n../../../../tmp/tmp8pd971ti.ts(18,81): error TS2322: Type 'undefined[]' is not assignable to type ",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let count = 0;\n    let length = num_list.length;\n    for (let i = 0; i < length; i++) {\n        if (num_list[i] != 0) {\n            num_list[count] = num_list[i];\n            count++;\n        }\n    }\n    while (count < length) {\n        num_list[count] = 0;\n        count++;\n    }\n    return num_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i: number = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123937,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123932,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([9, 0.0, 0, 9, 1, 2, 0, 1, 0, 1, 0.0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([\"a\", 0, 0, \"b\", \"c\", \"d\", 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([\"a\", 0, 0, \"b\", null, \"c\", \"d\", 0, 1, false, 0, 1, 0, 3, [], 0, 1, 9, 0, 0, {}, 0, 0, 9]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([0, 1, null, 2, false, 1, 0]));\nconsole.log(move_zero([\"a\", \"b\"]));\nconsole.log(move_zero([\"a\"]));\nconsole.log(move_zero([0, 0]));\nconsole.log(move_zero([0]));\nconsole.log(move_zero([false]));\nconsole.log(move_zero([]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123937,
      "stdout": "../../../../tmp/tmpg5azahy0.ts(17,24): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpg5azahy0.ts(17,35): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpg5azahy0.ts(17,40): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpg5azahy0.ts(17,45): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpg5azahy0.ts(18,24): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpg5azahy0.ts(18,35): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpg5azahy0.ts(18,46): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpg5azahy0.ts(18,51): error TS2322: Type 'string' is not assignable to type 'number'.\n../../../../tmp/tmpg5azahy0.ts(18,62): error TS2322: Type 'false' is not assignable to type 'number'.\n../../../../tmp/tmpg5azahy0.ts(18,81): error TS2322: Type 'undefined[]' is not assignable to type ",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123932,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let count: number = 0;\n    let temp: number = 0;\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            temp = num_list[count];\n            num_list[count] = num_list[i];\n            num_list[i] = temp;\n            count++;\n        }\n    }\n    return num_list;\n}\nconsole.log(move_zero([1, 2, 0, 4, 3, 0, 5, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123937,
      "stdout": "[\n  1, 2, 4, 3,\n  5, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123932,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([9, 0.0, 0, 9, 1, 2, 0, 1, 0, 1, 0.0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(move_zero([1, 2, 3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 1,\n  2, 0, 0\n]\n[\n  9, 9, 1, 2, 1, 1, 3,\n  1, 9, 9, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0\n]\n[\n  0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0\n]\n[ 1, 2, 3 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 0, 1, 2]));\nconsole.log(move_zero([9, 0.0, 0, 9, 1, 2, 0, 1, 0, 1, 0.0, 3, 0, 1, 9, 0, 0, 0, 0, 9]));\nconsole.log(move_zero([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nconsole.log(move_zero([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123937,
      "stdout": "[\n  1, 2, 3, 1,\n  2, 0, 0\n]\n[\n  9, 9, 1, 2, 1, 1, 3,\n  1, 9, 9, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0\n]\n[\n  0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0\n]\n[\n  1, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123931,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n  let zero_list: number[] = [];\n  let non_zero_list: number[] = [];\n  for (let i = 0; i < num_list.length; i++) {\n    if (num_list[i] === 0) {\n      zero_list.push(num_list[i]);\n    } else {\n      non_zero_list.push(num_list[i]);\n    }\n  }\n  return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 1, 0, 1, 0, 3, 0, 1]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123937,
      "stdout": "[\n  1, 2, 1, 1, 3,\n  1, 0, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let count: number = 0;\n    let new_list: number[] = [];\n    for (let i: number = 0; i < num_list.length; i++) {\n        if (num_list[i] != 0) {\n            new_list[count] = num_list[i];\n            count++;\n        }\n    }\n    for (let i: number = count; i < num_list.length; i++) {\n        new_list[i] = 0;\n    }\n    return new_list;\n}\nconsole.log(move_zero([0, 1, 0, 3, 12]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123937,
      "stdout": "[ 1, 3, 12, 0, 0 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        }\n        else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123935,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let num_list_new: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            num_list_new.push(num_list[i]);\n        }\n    }\n    return num_list_new.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123932,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] === 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1666123932,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to move all zeroes to the end of the given array.\nfunction move_zero(num_list: number[]): number[] {\n    let zero_list: number[] = [];\n    let non_zero_list: number[] = [];\n    for (let i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            zero_list.push(num_list[i]);\n        } else {\n            non_zero_list.push(num_list[i]);\n        }\n    }\n    return non_zero_list.concat(zero_list);\n}\n\nconsole.log(move_zero([1, 2, 0, 3, 4, 0, 5, 6, 0]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = move_zero;\n  assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);\n  assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);\n}\n\ntest();",
      "timestamp": 1665510525,
      "stdout": "[\n  1, 2, 3, 4, 5,\n  6, 0, 0, 0\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}