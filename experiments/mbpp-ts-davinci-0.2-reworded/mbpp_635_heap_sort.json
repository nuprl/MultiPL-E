{
  "name": "mbpp_635_heap_sort",
  "language": "ts",
  "prompt": "//Write a function to sort the given array.\nfunction heap_sort(iterable: number[]): number[] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = heap_sort;\n  assert.deepEqual(candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]),[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 25, 58]),[14, 22, 25, 25, 35, 58, 65, 75, 85]);\n  assert.deepEqual(candidate([7, 1, 9, 5]),[1, 5, 7, 9]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    const heap = new Heap(iterable);\n    const result = [];\n    while (heap.size() > 0) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "    let heap = new Heap(iterable);\n    let result: number[] = [];\n    while (heap.size > 0) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "    let heap = new Heap(iterable);\n    let sorted = [];\n    while (heap.size() > 0) {\n        sorted.push(heap.pop());\n    }\n    return sorted;\n}\n",
    "    let heap = new Heap(iterable);\n    let result: number[] = [];\n    while (heap.size() > 0) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "    let heap = new Heap(iterable);\n    let result: number[] = [];\n    while (heap.size() > 0) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "    let heap = new Heap(iterable);\n    let result = [];\n    while (heap.size() > 0) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "    let heap = new Heap(iterable);\n    let result = [];\n    while (heap.size() > 0) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "    let heap = new Heap(iterable);\n    let result: number[] = [];\n    while (heap.size() > 0) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "    let heap = new Heap(iterable);\n    let result: number[] = [];\n    while (heap.size() > 0) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "    let heap = new Heap(iterable);\n    let sorted = [];\n    while (heap.size() > 0) {\n        sorted.push(heap.pop());\n    }\n    return sorted;\n}\n",
    "    let heap = new Heap(iterable);\n    let sorted: number[] = [];\n    while (heap.size() > 0) {\n        sorted.push(heap.pop());\n    }\n    return sorted;\n}\n",
    "    let heap = new Heap(iterable);\n    let sorted = [];\n    while (heap.size() > 0) {\n        sorted.push(heap.pop());\n    }\n    return sorted;\n}\n",
    "    let heap = new Heap(iterable);\n    let sorted = [];\n    while (heap.size() > 0) {\n        sorted.push(heap.pop());\n    }\n    return sorted;\n}\n",
    "    const heap = new Heap(iterable);\n    const result = [];\n    while (heap.size() > 0) {\n        result.push(heap.pop());\n    }\n    return result;\n}\n",
    "    let heap = new Heap(iterable);\n    let sorted = [];\n    while (heap.size() > 0) {\n        sorted.push(heap.pop());\n    }\n    return sorted;\n}\n",
    "    let heap = new Heap(iterable);\n    let sorted = [];\n    while (heap.size > 0) {\n        sorted.push(heap.pop());\n    }\n    return sorted;\n}\n",
    "    let heap = new Heap(iterable);\n    let sorted: number[] = [];\n    while (heap.size() > 0) {\n        sorted.push(heap.pop());\n    }\n    return sorted;\n}\n",
    "    let heap = new Heap(iterable);\n    let sorted = [];\n    while (heap.size > 0) {\n        sorted.push(heap.pop());\n    }\n    return sorted;\n}\n",
    "    let heap = new Heap(iterable);\n    let sorted: number[] = [];\n    while (heap.size > 0) {\n        sorted.push(heap.pop());\n    }\n    return sorted;\n}\n",
    "    let heap = new Heap(iterable);\n    let sorted = [];\n    while (heap.size() > 0) {\n        sorted.push(heap.pop());\n    }\n    return sorted;\n}\n"
  ]
}