{
  "name": "mbpp_128_long_words",
  "language": "ts",
  "prompt": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_128_long_words.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            result.push(strArr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            result.push(strArr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let str_array: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < str_array.length; i++) {\n        if (str_array[i].length > n) {\n            result.push(str_array[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[\n  'The',   'quick',\n  'brown', 'fox',\n  'jumps', 'over',\n  'the',   'lazy',\n  'dog'\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr = str.split(\" \");\n    let result = [];\n\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            result.push(strArr[i]);\n        }\n    }\n\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"Google do a barrel roll\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'Google', 'barrel', 'roll' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let longWords = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[\n  'The',   'quick',\n  'brown', 'fox',\n  'jumps', 'over',\n  'the',   'lazy',\n  'dog'\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(' ');\n    let longWords: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[\n  'The',   'quick',\n  'brown', 'fox',\n  'jumps', 'over',\n  'the',   'lazy',\n  'dog'\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let str_array: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < str_array.length; i++) {\n        if (str_array[i].length > n) {\n            result.push(str_array[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    var words = str.split(\" \");\n    var result = [];\n    for (var i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\").length);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n5\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let str_array: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < str_array.length; i++) {\n        if (str_array[i].length > n) {\n            result.push(str_array[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let result: string[] = [];\n\n    for (let i: number = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let str_arr: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < str_arr.length; i++) {\n        if (str_arr[i].length > n) {\n            result.push(str_arr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            longWords.push(strArr[i]);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            result.push(strArr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"Google do a barrel roll\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'Google', 'barrel', 'roll' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let str_array: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < str_array.length; i++) {\n        if (str_array[i].length > n) {\n            result.push(str_array[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let str_array: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < str_array.length; i++) {\n        if (str_array[i].length > n) {\n            result.push(str_array[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[\n  'The',   'quick',\n  'brown', 'fox',\n  'jumps', 'over',\n  'the',   'lazy',\n  'dog'\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let longWords = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strSplit = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < strSplit.length; i++) {\n        if (strSplit[i].length > n) {\n            result.push(strSplit[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i: number = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let longWords = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let str_arr: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < str_arr.length; i++) {\n        if (str_arr[i].length > n) {\n            result.push(str_arr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    var str_array: string[] = str.split(\" \");\n    var result: string[] = [];\n    for (var i = 0; i < str_array.length; i++) {\n        if (str_array[i].length > n) {\n            result.push(str_array[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            result.push(strArr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[\n  'The',   'quick',\n  'brown', 'fox',\n  'jumps', 'over',\n  'the',   'lazy',\n  'dog'\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            result.push(strArr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr: string[] = str.split(\" \");\n    let result: string[] = [];\n\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            result.push(strArr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            result.push(strArr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"Google do a roll\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'Google', 'roll' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            result.push(strArr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let arr = str.split(\" \");\n    let newArr = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > n) {\n            newArr.push(arr[i]);\n        }\n    }\n    return newArr;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"Google do a roll\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'Google' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let longWords = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[\n  'The',   'quick',\n  'brown', 'fox',\n  'jumps', 'over',\n  'the',   'lazy',\n  'dog'\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            result.push(strArr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n\n    words.forEach(function (element) {\n        if (element.length > n) {\n            result.push(element);\n        }\n    });\n\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let result: string[] = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            longWords.push(strArr[i]);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let str_array: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < str_array.length; i++) {\n        if (str_array[i].length > n) {\n            result.push(str_array[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let word of words) {\n        if (word.length > n) {\n            longWords.push(word);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let str_array: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < str_array.length; i++) {\n        if (str_array[i].length > n) {\n            result.push(str_array[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            result.push(strArr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[\n  'The',   'quick',\n  'brown', 'fox',\n  'jumps', 'over',\n  'the',   'lazy',\n  'dog'\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strSplit = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < strSplit.length; i++) {\n        if (strSplit[i].length > n) {\n            result.push(strSplit[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let str_array: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < str_array.length; i++) {\n        if (str_array[i].length > n) {\n            result.push(str_array[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let result: string[] = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    var str_array: string[] = str.split(\" \");\n    var result: string[] = [];\n    for (var i = 0; i < str_array.length; i++) {\n        if (str_array[i].length > n) {\n            result.push(str_array[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            result.push(strArr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let str_arr: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < str_arr.length; i++) {\n        if (str_arr[i].length > n) {\n            result.push(str_arr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            result.push(strArr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let longWords = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let str_array: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < str_array.length; i++) {\n        if (str_array[i].length > n) {\n            result.push(str_array[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            result.push(strArr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            result.push(strArr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr: string[] = str.split(\" \");\n    let newArr: string[] = [];\n    for (let i: number = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            newArr.push(strArr[i]);\n        }\n    }\n    return newArr;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[\n  'The',   'quick',\n  'brown', 'fox',\n  'jumps', 'over',\n  'the',   'lazy',\n  'dog'\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            result.push(strArr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            result.push(strArr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strSplit: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < strSplit.length; i++) {\n        if (strSplit[i].length > n) {\n            result.push(strSplit[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let arr: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > n) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(' ');\n    let result: string[] = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n\n    return result;\n}\n\nconsole.log(long_words(3, 'The quick brown fox jumps over the lazy dog'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"Google do a barrel roll\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'Google', 'barrel', 'roll' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let word = str.split(\" \");\n    let longWords = [];\n    for (let i = 0; i < word.length; i++) {\n        if (word[i].length > n) {\n            longWords.push(word[i]);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            longWords.push(strArr[i]);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr = str.split(' ');\n    let result = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            result.push(strArr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, 'The quick brown fox jumps over the lazy dog'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[\n  'The',   'quick',\n  'brown', 'fox',\n  'jumps', 'over',\n  'the',   'lazy',\n  'dog'\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let longWords = [];\n    for (let word of words) {\n        if (word.length > n) {\n            longWords.push(word);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[\n  'The',   'quick',\n  'brown', 'fox',\n  'jumps', 'over',\n  'the',   'lazy',\n  'dog'\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strSplit = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < strSplit.length; i++) {\n        if (strSplit[i].length > n) {\n            result.push(strSplit[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let str_arr: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < str_arr.length; i++) {\n        if (str_arr[i].length > n) {\n            result.push(str_arr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n\n    for (let i: number = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strSplit = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < strSplit.length; i++) {\n        if (strSplit[i].length > n) {\n            result.push(strSplit[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[\n  'The',   'quick',\n  'brown', 'fox',\n  'jumps', 'over',\n  'the',   'lazy',\n  'dog'\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            result.push(strArr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(' ');\n    let result = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n\n    return result;\n}\n\nconsole.log(long_words(3, 'The quick brown fox jumps over the lazy dog'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let result: string[] = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let result: string[] = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let result: string[] = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124165,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"Google do a barrel roll\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'Google', 'barrel', 'roll' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            longWords.push(strArr[i]);\n        }\n    }\n    return longWords;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let word = str.split(\" \");\n    let words = [];\n    for (let i = 0; i < word.length; i++) {\n        if (word[i].length > n) {\n            words.push(word[i]);\n        }\n    }\n    return words;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"Google do a roll\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'Google' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    var arr = str.split(\" \");\n    var result = [];\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i].length > n) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let arr: string[] = str.split(\" \");\n    let newArr: string[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > n) {\n            newArr.push(arr[i]);\n        }\n    }\n    return newArr;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let longWords = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let arr = str.split(\" \");\n    let newArr = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > n) {\n            newArr.push(arr[i]);\n        }\n    }\n    return newArr;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[\n  'The',   'quick',\n  'brown', 'fox',\n  'jumps', 'over',\n  'the',   'lazy',\n  'dog'\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let word of words) {\n        if (word.length > n) {\n            longWords.push(word);\n        }\n    }\n    return longWords;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let str_arr: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < str_arr.length; i++) {\n        if (str_arr[i].length > n) {\n            result.push(str_arr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[\n  'The',   'quick',\n  'brown', 'fox',\n  'jumps', 'over',\n  'the',   'lazy',\n  'dog'\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[\n  'The',   'quick',\n  'brown', 'fox',\n  'jumps', 'over',\n  'the',   'lazy',\n  'dog'\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            result.push(strArr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let longWords = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let longWords = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let str_array: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < str_array.length; i++) {\n        if (str_array[i].length > n) {\n            result.push(str_array[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"Google do a barrel roll\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'Google', 'barrel', 'roll' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let str_arr: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < str_arr.length; i++) {\n        if (str_arr[i].length > n) {\n            result.push(str_arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[\n  'The',   'quick',\n  'brown', 'fox',\n  'jumps', 'over',\n  'the',   'lazy',\n  'dog'\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"Google do a barrel roll\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'Google', 'barrel', 'roll' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let str_arr: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < str_arr.length; i++) {\n        if (str_arr[i].length > n) {\n            result.push(str_arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[\n  'The',   'quick',\n  'brown', 'fox',\n  'jumps', 'over',\n  'the',   'lazy',\n  'dog'\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let str_arr: string[] = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < str_arr.length; i++) {\n        if (str_arr[i].length > n) {\n            result.push(str_arr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i: number = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[\n  'The',   'quick',\n  'brown', 'fox',\n  'jumps', 'over',\n  'the',   'lazy',\n  'dog'\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            longWords.push(strArr[i]);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            result.push(strArr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr: string[] = str.split(\" \");\n    let newArr: string[] = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            newArr.push(strArr[i]);\n        }\n    }\n    return newArr;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"Google do a barrel roll\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'Google', 'barrel' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[\n  'The',   'quick',\n  'brown', 'fox',\n  'jumps', 'over',\n  'the',   'lazy',\n  'dog'\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            result.push(strArr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let result: string[] = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let longWords = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    var str_array: string[] = str.split(\" \");\n    var result: string[] = [];\n    for (var i = 0; i < str_array.length; i++) {\n        if (str_array[i].length > n) {\n            result.push(str_array[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(' ');\n    let result: string[] = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[\n  'The',   'quick',\n  'brown', 'fox',\n  'jumps', 'over',\n  'the',   'lazy',\n  'dog'\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            result.push(strArr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            result.push(strArr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            result.push(strArr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let longWords = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strSplit = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < strSplit.length; i++) {\n        if (strSplit[i].length > n) {\n            result.push(strSplit[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            result.push(strArr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[\n  'The',   'quick',\n  'brown', 'fox',\n  'jumps', 'over',\n  'the',   'lazy',\n  'dog'\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            result.push(strArr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let word of words) {\n        if (word.length > n) {\n            longWords.push(word);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let word of words) {\n        if (word.length > n) {\n            longWords.push(word);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            result.push(strArr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(' ');\n    let longWords: string[] = [];\n    for (let word of words) {\n        if (word.length > n) {\n            longWords.push(word);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[\n  'The',   'quick',\n  'brown', 'fox',\n  'jumps', 'over',\n  'the',   'lazy',\n  'dog'\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let arr: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > n) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let str_array: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < str_array.length; i++) {\n        if (str_array[i].length > n) {\n            result.push(str_array[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let long_words: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            long_words.push(words[i]);\n        }\n    }\n    return long_words;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let arr: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].length > n) {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"Google do a barrel roll\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'Google', 'barrel', 'roll' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let result: string[] = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let word of words) {\n        if (word.length > n) {\n            longWords.push(word);\n        }\n    }\n    return longWords;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let result: string[] = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let result: string[] = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"Google do a barrel roll\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124160,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'Google', 'barrel', 'roll' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[\n  'The',   'quick',\n  'brown', 'fox',\n  'jumps', 'over',\n  'the',   'lazy',\n  'dog'\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let strArr = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i].length > n) {\n            result.push(strArr[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let str_array: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < str_array.length; i++) {\n        if (str_array[i].length > n) {\n            result.push(str_array[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124163,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let result: string[] = [];\n\n    for (let i: number = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let word of words) {\n        if (word.length > n) {\n            longWords.push(word);\n        }\n    }\n    return longWords;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words: string[] = str.split(\" \");\n    let longWords: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            longWords.push(words[i]);\n        }\n    }\n    return longWords;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1665509924,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let words = str.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n}\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(4, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[ 'quick', 'brown', 'jumps' ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find words that are longer than n characters from a given array of words.\nfunction long_words(n: number, str: string): string[] {\n    let str_arr: string[] = str.split(\" \");\n    let result: string[] = [];\n    for (let i = 0; i < str_arr.length; i++) {\n        if (str_arr[i].length > n) {\n            result.push(str_arr[i]);\n        }\n    }\n    return result;\n}\n\nconsole.log(long_words(3, \"The quick brown fox jumps over the lazy dog\"));\nconsole.log(long_words(2, \"The quick brown fox jumps over the lazy dog\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = long_words;\n  assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);\n  assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);\n  assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "[ 'quick', 'brown', 'jumps', 'over', 'lazy' ]\n[\n  'The',   'quick',\n  'brown', 'fox',\n  'jumps', 'over',\n  'the',   'lazy',\n  'dog'\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}