{
  "name": "mbpp_439_multiple_to_single",
  "language": "ts",
  "prompt": "//Write a function to join an array of multiple integers into a single integer.\nfunction multiple_to_single(L: number[]): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = multiple_to_single;\n  assert.deepEqual(candidate([11, 33, 50]),113350);\n  assert.deepEqual(candidate([-1, 2, 3, 4, 5, 6]),-123456);\n  assert.deepEqual(candidate([10, 15, 20, 25]),10152025);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "  return L.reduce((a, b) => a * b);\n}\n",
    "    return parseInt(L.join(''));\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result += L[i] * Math.pow(10, L.length - i - 1);\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "  let result = 0;\n  for (let i = 0; i < L.length; i++) {\n    result = result * 10 + L[i];\n  }\n  return result;\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let s = \"\";\n    for (let i = 0; i < L.length; i++) {\n        s += L[i].toString();\n    }\n    return parseInt(s);\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result += L[i] * Math.pow(10, L.length - i - 1);\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    var result = 0;\n    for (var i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return parseInt(L.join(''));\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i: number = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return parseInt(L.join(''));\n}\n",
    "    let result: number = 0;\n    for (let i: number = 0; i < L.length; i++) {\n        result += L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result += L[i] * Math.pow(10, L.length - i - 1);\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return L.reduce((a, b) => a * 10 + b, 0);\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return L.reduce((a, b) => a * 10 + b);\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i: number = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "  let result = 0;\n  for (let i = 0; i < L.length; i++) {\n    result = result * 10 + L[i];\n  }\n  return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let s: string = \"\";\n    for (let i = 0; i < L.length; i++) {\n        s += L[i];\n    }\n    return parseInt(s);\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "  return L.reduce((a, b) => a * b);\n}\n",
    "  return L.reduce((acc, cur) => acc * 10 + cur);\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "  let result = 0;\n  for (let i = 0; i < L.length; i++) {\n    result = result * 10 + L[i];\n  }\n  return result;\n}\n",
    "    return L.reduce((a, b) => a * 10 + b);\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "  let result = 0;\n  for (let i = 0; i < L.length; i++) {\n    result = result * 10 + L[i];\n  }\n  return result;\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "  let result = 0;\n  for (let i = 0; i < L.length; i++) {\n    result = result * 10 + L[i];\n  }\n  return result;\n}\n",
    "    var result = 0;\n    for (var i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "  let result: number = 0;\n  for (let i = 0; i < L.length; i++) {\n    result = result * 10 + L[i];\n  }\n  return result;\n}\n",
    "    var sum = 0;\n    for (var i = 0; i < L.length; i++) {\n        sum = sum * 10 + L[i];\n    }\n    return sum;\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return L.reduce((a, b) => a * 10 + b);\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "  let result: number = 0;\n  for (let i = 0; i < L.length; i++) {\n    result = result * 10 + L[i];\n  }\n  return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "  return L.reduce((a, b) => a * b);\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return parseInt(L.join(''));\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return parseInt(L.join(''));\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result += L[i] * Math.pow(10, L.length - i - 1);\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "    return Number(L.join(\"\"));\n}\n",
    "    let result: number = 0;\n    for (let i: number = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result += L[i] * Math.pow(10, L.length - i - 1);\n    }\n    return result;\n}\n",
    "    return L.reduce((a, b) => a * 10 + b);\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return parseInt(L.join(''));\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return parseInt(L.join(''));\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i: number = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i: number = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    var result: number = 0;\n    var i: number = 0;\n    var len: number = L.length;\n    while (i < len) {\n        result = result * 10 + L[i];\n        i = i + 1;\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "    let result: number = 0;\n    let i: number = 0;\n    while (i < L.length) {\n        result = result * 10 + L[i];\n        i = i + 1;\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i: number = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result += L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i: number = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return L.reduce((a, b) => a * 10 + b, 0);\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let s: string = \"\";\n    for (let i of L) {\n        s += i;\n    }\n    return parseInt(s);\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let sum = 0;\n    for (let i = 0; i < L.length; i++) {\n        sum += L[i];\n    }\n    return sum;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let s: string = \"\";\n    for (let i = 0; i < L.length; i++) {\n        s += L[i];\n    }\n    return parseInt(s);\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return L.join('');\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    var result = 0;\n    for (var i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return L.reduce((a, b) => a * 10 + b);\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return L.reduce((a, b) => a * 10 + b);\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result += L[i] * Math.pow(10, L.length - i - 1);\n    }\n    return result;\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "    return L.join('');\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result += L[i] * Math.pow(10, L.length - i - 1);\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "    let res: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        res = res * 10 + L[i];\n    }\n    return res;\n}\n",
    "    return L.reduce((a, b) => a * b);\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    for (let i = 0; i < L.length; i++) {\n        result = result * 10 + L[i];\n    }\n    return result;\n}\n"
  ]
}