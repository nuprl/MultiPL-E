{
  "name": "mbpp_103_eulerian_num",
  "language": "ts",
  "prompt": "//Write a function to find the Eulerian number a(n, m).\nfunction eulerian_num(n: number, m: number): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = eulerian_num;\n  assert.deepEqual(candidate(3, 1),4);\n  assert.deepEqual(candidate(4, 1),11);\n  assert.deepEqual(candidate(5, 3),26);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let a = [];\n    for (let i = 0; i <= n; i++) {\n        a[i] = [];\n        for (let j = 0; j <= m; j++) {\n            if (i == 0 || j == 0) {\n                a[i][j] = 1;\n            } else {\n                a[i][j] = a[i - 1][j] + (i * a[i - 1][j - 1]);\n            }\n        }\n    }\n    return a[n][m];\n}\n",
    "    let eulerian_nums: number[][] = [];\n    for (let i = 0; i <= n; i++) {\n        eulerian_nums[i] = [];\n        for (let j = 0; j <= m; j++) {\n            if (i == 0 && j == 0) {\n                eulerian_nums[i][j] = 1;\n            } else if (i == 0) {\n                eulerian_nums[i][j] = 0;\n            } else if (j == 0) {\n                eulerian_nums[i][j] = 1;\n            } else {\n                eulerian_nums[i][j] = (i - j + 1) * eulerian_nums[i - 1][j - 1] + j * eulerian_nums[i - 1][j];\n            }\n        }\n    }\n    return eulerian_nums[n][m];\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let result = 1;\n    for (let i = 0; i < m; i++) {\n        result *= (n - i);\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    let factorial: number = 1;\n    let binomial: number = 1;\n    for (let i: number = 0; i <= m; i++) {\n        factorial *= (n - i);\n        binomial *= (m - i);\n        result += (factorial / binomial);\n    }\n    return result;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let eulerian_num = 0;\n    let factorial = 1;\n    let factorial_n = 1;\n    let factorial_m = 1;\n    let factorial_n_m = 1;\n    for (let i = 1; i <= n; i++) {\n        factorial_n *= i;\n    }\n    for (let i = 1; i <= m; i++) {\n        factorial_m *= i;\n    }\n    for (let i = 1; i <= n - m; i++) {\n        factorial_n_m *= i;\n    }\n    for (let i = 1; i <= n + 1; i++) {\n        factorial *= i;\n    }\n    eulerian_num = factorial / (factorial_n * factorial_m * factorial_n_m);\n    return eulerian_num;\n}\n",
    "    if (n === 0) {\n        return 1;\n    }\n    if (m === 0) {\n        return 0;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let result: number = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let res: number = 0;\n    for (let k = 0; k <= m; k++) {\n        res += Math.pow(-1, k) * binomial(m, k) * binomial(n + m - k - 1, n - 1);\n    }\n    return res;\n}\n",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    if (n < m) return 0;\n    if (n == m) return 1;\n    if (m == 1) return factorial(n);\n    return (n - m + 1) * eulerian_num(n - 1, m) + m * eulerian_num(n - 1, m - 1);\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let arr = [];\n    for (let i = 0; i <= n; i++) {\n        arr[i] = [];\n        for (let j = 0; j <= m; j++) {\n            if (i == 0 || j == 0) {\n                arr[i][j] = 1;\n            } else {\n                arr[i][j] = arr[i - 1][j - 1] + (i * arr[i - 1][j]);\n            }\n        }\n    }\n    return arr[n][m];\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    if (n == 0) {\n        return 1;\n    }\n    if (m == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (m == 1) {\n        return 1;\n    }\n    if (n < m) {\n        return 0;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + m * eulerian_num(n - 1, m - 1);\n}\n"
  ]
}