{
  "name": "mbpp_103_eulerian_num",
  "language": "ts",
  "prompt": "//Write a function to find the Eulerian number a(n, m).\nfunction eulerian_num(n: number, m: number): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = eulerian_num;\n  assert.deepEqual(candidate(3, 1),4);\n  assert.deepEqual(candidate(4, 1),11);\n  assert.deepEqual(candidate(5, 3),26);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let a = [];\n    for (let i = 0; i <= n; i++) {\n        a[i] = [];\n        for (let j = 0; j <= m; j++) {\n            if (i == 0 || j == 0) {\n                a[i][j] = 1;\n            } else {\n                a[i][j] = a[i - 1][j] + (i * a[i - 1][j - 1]);\n            }\n        }\n    }\n    return a[n][m];\n}\n",
    "    let eulerian_nums: number[][] = [];\n    for (let i = 0; i <= n; i++) {\n        eulerian_nums[i] = [];\n        for (let j = 0; j <= m; j++) {\n            if (i == 0 && j == 0) {\n                eulerian_nums[i][j] = 1;\n            } else if (i == 0) {\n                eulerian_nums[i][j] = 0;\n            } else if (j == 0) {\n                eulerian_nums[i][j] = 1;\n            } else {\n                eulerian_nums[i][j] = (i - j + 1) * eulerian_nums[i - 1][j - 1] + j * eulerian_nums[i - 1][j];\n            }\n        }\n    }\n    return eulerian_nums[n][m];\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let result = 1;\n    for (let i = 0; i < m; i++) {\n        result *= (n - i);\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    let factorial: number = 1;\n    let binomial: number = 1;\n    for (let i: number = 0; i <= m; i++) {\n        factorial *= (n - i);\n        binomial *= (m - i);\n        result += (factorial / binomial);\n    }\n    return result;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let eulerian_num = 0;\n    let factorial = 1;\n    let factorial_n = 1;\n    let factorial_m = 1;\n    let factorial_n_m = 1;\n    for (let i = 1; i <= n; i++) {\n        factorial_n *= i;\n    }\n    for (let i = 1; i <= m; i++) {\n        factorial_m *= i;\n    }\n    for (let i = 1; i <= n - m; i++) {\n        factorial_n_m *= i;\n    }\n    for (let i = 1; i <= n + 1; i++) {\n        factorial *= i;\n    }\n    eulerian_num = factorial / (factorial_n * factorial_m * factorial_n_m);\n    return eulerian_num;\n}\n",
    "    if (n === 0) {\n        return 1;\n    }\n    if (m === 0) {\n        return 0;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let result: number = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let res: number = 0;\n    for (let k = 0; k <= m; k++) {\n        res += Math.pow(-1, k) * binomial(m, k) * binomial(n + m - k - 1, n - 1);\n    }\n    return res;\n}\n",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    if (n < m) return 0;\n    if (n == m) return 1;\n    if (m == 1) return factorial(n);\n    return (n - m + 1) * eulerian_num(n - 1, m) + m * eulerian_num(n - 1, m - 1);\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let arr = [];\n    for (let i = 0; i <= n; i++) {\n        arr[i] = [];\n        for (let j = 0; j <= m; j++) {\n            if (i == 0 || j == 0) {\n                arr[i][j] = 1;\n            } else {\n                arr[i][j] = arr[i - 1][j - 1] + (i * arr[i - 1][j]);\n            }\n        }\n    }\n    return arr[n][m];\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    if (n == 0) {\n        return 1;\n    }\n    if (m == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (m == 1) {\n        return 1;\n    }\n    if (n < m) {\n        return 0;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + m * eulerian_num(n - 1, m - 1);\n}\n",
    "    let res: number = 0;\n    if (n == m) {\n        res = 1;\n    } else if (n > m) {\n        res = 0;\n    } else {\n        res = (m - n + 1) * eulerian_num(n - 1, m - 1) + (n + 1) * eulerian_num(n, m - 1);\n    }\n    return res;\n}\n",
    "    let result = 1;\n    for (let i = 0; i < m; i++) {\n        result *= (n - i);\n    }\n    return result;\n}\n",
    "    if (n < 0 || m < 0) {\n        return 0;\n    }\n    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (m == 0) {\n        return 0;\n    }\n    return (m - 1) * eulerian_num(n - 1, m) + (n + 1) * eulerian_num(n, m - 1);\n}\n",
    "    if (n < 0 || m < 0 || n < m) {\n        return 0;\n    }\n    if (n == 0 && m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    if (n < m) return 0;\n    if (n == m) return 1;\n    if (m == 0) return 1;\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let res = 1;\n    for (let i = 0; i < m; i++) {\n        res = res * (n - i) / (i + 1);\n    }\n    return res;\n}\n",
    "    let result: number = 0;\n    if (m > n) {\n        return 0;\n    }\n    if (m == n) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    result = (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n    return result;\n}\n",
    "    if (n === 0 && m === 0) return 1;\n    if (n === 0 || m === 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    let res = 0;\n    if (m == 0 || m == n) {\n        res = 1;\n    } else {\n        res = (m * eulerian_num(n - 1, m) + (n - m) * eulerian_num(n - 1, m - 1)) / n;\n    }\n    return res;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n === m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let num: number = 0;\n    let denom: number = 0;\n    for (let i = 0; i <= m; i++) {\n        num += factorial(n + 1) / (factorial(i) * factorial(n + 1 - i));\n        denom += factorial(n) / (factorial(i) * factorial(n - i));\n    }\n    return num / denom;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    if (n < 0 || m < 0 || n < m) {\n        return 0;\n    }\n    if (n == 0 && m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n === m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (n < 0 || m < 0) {\n        return 0;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    let result: number = 0;\n    if (n == m) {\n        result = 1;\n    }\n    else if (n > m) {\n        result = (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n    }\n    return result;\n}\n",
    "    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        res = res * (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    let res: number = 0;\n    if (n == 0) {\n        return 1;\n    }\n    if (n == 1) {\n        return m;\n    }\n    if (n > 1) {\n        for (let i = 0; i <= m; i++) {\n            res += eulerian_num(n - 1, i);\n        }\n    }\n    return res;\n}\n",
    "    let result = 1;\n    for (let i = 0; i < m; i++) {\n        result *= (n - i);\n    }\n    return result;\n}\n",
    "    if (m > n) {\n        return 0;\n    }\n    if (m == n) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m + 1) + (m + 1) * eulerian_num(n, m + 2);\n}\n",
    "    let a: number[][] = [];\n    for (let i = 0; i <= n; i++) {\n        a[i] = [];\n        for (let j = 0; j <= m; j++) {\n            if (i == 0 || j == 0) {\n                a[i][j] = 1;\n            } else {\n                a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j];\n            }\n        }\n    }\n    return a[n][m];\n}\n",
    "    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        res = res * (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    let res: number = 1;\n    for (let i = 1; i <= m; i++) {\n        res *= (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let result: number = 0;\n    if (n === m) {\n        result = 1;\n    } else if (n > m) {\n        result = (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m + 1);\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    if (n == m) {\n        result = 1;\n    }\n    else if (m == 1) {\n        result = 1;\n    }\n    else if (m == 0) {\n        result = 0;\n    }\n    else {\n        result = (m * eulerian_num(n - 1, m)) + (n - m + 1) * eulerian_num(n - 1, m - 1);\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 0; i < m; i++) {\n        result *= (n - i);\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    if (n == m) {\n        result = 1;\n    } else if (m == 1) {\n        result = 1;\n    } else if (m == 0) {\n        result = 0;\n    } else {\n        result = (m * eulerian_num(n - 1, m)) + (n - m + 1) * eulerian_num(n - 1, m - 1);\n    }\n    return result;\n}\n",
    "    if (n === 0 || m === 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n === m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let eulerian_num = 0;\n    for (let i = 0; i <= m; i++) {\n        eulerian_num += binomial_coefficient(n + 1, i) * Math.pow(-1, i);\n    }\n    return eulerian_num;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let a: number[][] = [];\n    for (let i = 0; i <= n; i++) {\n        a[i] = [];\n        for (let j = 0; j <= m; j++) {\n            if (i == 0 || j == 0) {\n                a[i][j] = 1;\n            } else {\n                a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j];\n            }\n        }\n    }\n    return a[n][m];\n}\n",
    "    let a = [];\n    for (let i = 0; i <= n; i++) {\n        a[i] = [];\n        for (let j = 0; j <= m; j++) {\n            if (j == 0) {\n                a[i][j] = 1;\n            } else if (i == 0) {\n                a[i][j] = 0;\n            } else {\n                a[i][j] = (j * a[i - 1][j] + a[i - 1][j - 1]) % 1000000;\n            }\n        }\n    }\n    return a[n][m];\n}\n",
    "    let res = 0;\n    for (let k = 0; k <= m; k++) {\n        res += Math.pow(-1, k) * binomial(m, k) * binomial(n + m - k, m);\n    }\n    return res;\n}\n",
    "    let result = 1;\n    for (let i = 0; i < m; i++) {\n        result = result * (n - i) / (i + 1);\n    }\n    return result;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        res *= (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    let res = 0;\n    for (let i = 0; i <= m; i++) {\n        res += Math.pow(-1, i) * binomial(m, i) * binomial(n + m - i, m);\n    }\n    return res;\n}\n",
    "    if (m < 0 || m > n) return 0;\n    if (m == 0 || m == n) return 1;\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let eulerian_num_arr = [[1]];\n    for (let i = 1; i <= n; i++) {\n        eulerian_num_arr[i] = [];\n        for (let j = 0; j <= m; j++) {\n            if (j === 0) {\n                eulerian_num_arr[i][j] = eulerian_num_arr[i - 1][j] * (m - i + 1) / i;\n            } else {\n                eulerian_num_arr[i][j] = eulerian_num_arr[i - 1][j - 1] + eulerian_num_arr[i][j - 1] * (m - j + 1) / j;\n            }\n        }\n    }\n    return eulerian_num_arr[n][m];\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let res = 0;\n    for (let k = 0; k <= m; k++) {\n        res += binomial(m, k) * binomial(n + k, n);\n    }\n    return res;\n}\n",
    "    let result: number = 0;\n    if (n == 0 && m == 0) {\n        result = 1;\n    } else if (n == 0 || m == 0) {\n        result = 0;\n    } else {\n        result = (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let c = 1;\n    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        c = c * (n - i + 1) / i;\n        res += c;\n    }\n    return res;\n}\n",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        res = res * (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let res: number = 1;\n    for (let i = 1; i <= m; i++) {\n        res *= (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    let result = 1;\n    for (let i = 0; i < m; i++) {\n        result *= (n - i);\n    }\n    return result;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    if (n < 0 || m < 0 || n < m) {\n        return 0;\n    }\n    if (n == 0 && m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n === m) {\n        return 1;\n    }\n    if (m === 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        res = res * (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let result = 0;\n    for (let k = 0; k <= m; k++) {\n        result += binomial_coefficient(m, k) * (k ** n);\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n + 1 - i) / i;\n    }\n    return result;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n === m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let dp: number[][] = [];\n    for (let i = 0; i <= n; i++) {\n        dp[i] = [];\n        for (let j = 0; j <= m; j++) {\n            dp[i][j] = 0;\n        }\n    }\n    dp[0][0] = 1;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= m; j++) {\n            dp[i][j] = (i - 1) * dp[i - 1][j] + (j + 1) * dp[i - 1][j - 1];\n        }\n    }\n    return dp[n][m];\n}\n",
    "    if (n < 0 || m < 0 || n < m) {\n        return 0;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    if (n == 0) {\n        return 1;\n    }\n    if (m == 0) {\n        return 0;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n === m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "  if (m > n) {\n    return 0;\n  }\n  if (m === 0 || m === n) {\n    return 1;\n  }\n  return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let res: number = 0;\n    if (n == 0 && m == 0) {\n        res = 1;\n    } else if (n == 0 || m == 0) {\n        res = 0;\n    } else {\n        res = (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n    }\n    return res;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    if (m < 0 || m > n) {\n        return 0;\n    }\n    if (m === 0 || m === n) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + m * eulerian_num(n, m - 1);\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n + 1 - i) / i;\n    }\n    return result;\n}\n",
    "    let res: number = 0;\n    if (n == 0) {\n        res = 1;\n    } else if (m == 0) {\n        res = 0;\n    } else {\n        res = (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n    }\n    return res;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let res = 1;\n    for (let i = 0; i < m; i++) {\n        res *= (n - i);\n    }\n    return res;\n}\n",
    "    let result: number = 0;\n    if (n == 0 || m == 0) {\n        return 1;\n    }\n    if (m > n) {\n        return 0;\n    }\n    result = eulerian_num(n - 1, m - 1) + (n - m) * eulerian_num(n - 1, m);\n    return result;\n}\n",
    "    let result: number = 0;\n    if (n === m) {\n        result = 1;\n    } else if (m === 1) {\n        result = 1;\n    } else if (m > n) {\n        result = 0;\n    } else {\n        result = (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        res *= (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    if (m > n) {\n        return 0;\n    }\n    if (m == n) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m + 1) + (m + 1) * eulerian_num(n, m + 2);\n}\n",
    "    let result: number = 0;\n    if (n == 0 && m == 0) {\n        result = 1;\n    } else if (n == 0 || m == 0) {\n        result = 0;\n    } else {\n        result = (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "  let result = 1;\n  for (let i = 1; i <= m; i++) {\n    result *= (n - i + 1) / i;\n  }\n  return result;\n}\n",
    "    let result: number = 0;\n    if (n === m) {\n        result = 1;\n    } else if (m === 1) {\n        result = 1;\n    } else if (m > n) {\n        result = 0;\n    } else {\n        result = (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n    }\n    return result;\n}\n",
    "    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        res = res * (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    if (n < 0 || m < 0 || n < m) {\n        return 0;\n    }\n    if (n == 0 && m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    if (n < 0 || m < 0) {\n        return 0;\n    }\n    if (n == 0 && m == 0) {\n        return 1;\n    }\n    if (n == 0 || m == 0) {\n        return 0;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    let result: number = 0;\n    if (n == m) {\n        result = 1;\n    } else if (n > m) {\n        result = 0;\n    } else {\n        result = (m + 1) * eulerian_num(n, m - 1) - (m - n) * eulerian_num(n - 1, m - 1);\n    }\n    return result;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (m + 1) * eulerian_num(n - 1, m) + (n - m) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let res: number = 0;\n    if (m == 0 || m == n) {\n        res = 1;\n    } else if (m == 1 || m == n - 1) {\n        res = n;\n    } else {\n        res = (n - m) * eulerian_num(n - 1, m - 1) + m * eulerian_num(n - 1, m);\n    }\n    return res;\n}\n",
    "    let res = 0;\n    for (let k = 0; k <= m; k++) {\n        res += binomial(m, k) * Math.pow(-1, k) * (factorial(n + k) / factorial(k));\n    }\n    return res;\n}\n",
    "    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        res = res * (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result = result * (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result = result * (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    if (n < 0 || m < 0 || n < m) {\n        return 0;\n    }\n    if (n === 0 && m === 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    let result = 0;\n    let factorial = (n) => {\n        if (n === 0) {\n            return 1;\n        }\n        return n * factorial(n - 1);\n    }\n    for (let k = 0; k <= m; k++) {\n        result += Math.pow(-1, k) * factorial(m) / (factorial(k) * factorial(m - k) * factorial(n - k));\n    }\n    return result;\n}\n",
    "    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        res = res * (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    if (n < 0 || m < 0 || n < m) return 0;\n    if (n == 0 && m == 0) return 1;\n    return (n - m) * eulerian_num(n - 1, m) + m * eulerian_num(n - 1, m - 1);\n}\n",
    "    if (n < 0 || m < 0) {\n        return 0;\n    }\n    if (n == 0 || m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n === m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (m + 1) * eulerian_num(n - 1, m) + (n - m) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let res = 0;\n    for (let i = 0; i <= m; i++) {\n        res += Math.pow(-1, i) * binomial(m, i) * binomial(n + m - i, m);\n    }\n    return res;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let result: number = 0;\n    if (n == m) {\n        result = 1;\n    } else if (n > m) {\n        result = (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m + 1);\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let i = 0; i <= m; i++) {\n        result += binomial_coefficient(n + 1, i) * Math.pow(-1, i);\n    }\n    return result;\n}\n",
    "    if (n < m) return 0;\n    if (n == m) return 1;\n    if (m == 1) return factorial(n);\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    let result = 0;\n    for (let i = 0; i <= m; i++) {\n        result += binomial(n + 1, i) * binomial(n - i, m - i);\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let eulerian_num = 0;\n    for (let k = 0; k <= m; k++) {\n        eulerian_num += binomial(n + 1, k) * binomial(n - k + 1, m - k);\n    }\n    return eulerian_num;\n}\n",
    "    if (n < 0 || m < 0 || n < m) {\n        return 0;\n    }\n    if (n == 0 && m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        res *= (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    let result: number = 0;\n    if (n == m) {\n        result = 1;\n    } else if (m == 1) {\n        result = 1;\n    } else if (m > n) {\n        result = 0;\n    } else {\n        result = (m * eulerian_num(n - 1, m)) + (n - m + 1) * eulerian_num(n - 1, m - 1);\n    }\n    return result;\n}\n",
    "    let result = 0;\n    for (let k = 0; k <= m; k++) {\n        result += binomial_coefficient(m, k) * binomial_coefficient(n - k + m - 1, m - 1);\n    }\n    return result;\n}\n",
    "    let res: number = 1;\n    for (let i = 1; i <= m; i++) {\n        res *= (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    let res: number = 0;\n    for (let k = 0; k <= m; k++) {\n        res += binomial(m, k) * Math.pow(-1, k) * (factorial(n + k) / factorial(n));\n    }\n    return res;\n}\n",
    "    let result: number = 1;\n    for (let i: number = 1; i <= m; i++) {\n        result = result * (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let result = 1;\n    for (let i = 0; i < m; i++) {\n        result *= (n - i) / (i + 1);\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 0; i < m; i++) {\n        result *= (n - i);\n    }\n    return result;\n}\n",
    "    if (n < 0 || m < 0 || n < m) {\n        return 0;\n    }\n    if (n == 0 && m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let result = 0;\n    if (m == 0) {\n        result = 1;\n    } else if (m == 1) {\n        result = n;\n    } else if (m == n) {\n        result = 1;\n    } else if (m > n) {\n        result = 0;\n    } else {\n        result = (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n    }\n    return result;\n}\n",
    "    let result: number = 1;\n    for (let i: number = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let res: number = 1;\n    for (let i = 1; i <= m; i++) {\n        res *= (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    let result: number = 0;\n    if (m == 0) {\n        result = 1;\n    } else if (n == 0) {\n        result = 0;\n    } else {\n        result = (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n + 1 - i) / i;\n    }\n    return result;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n === m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        res *= (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    let result: number = 0;\n    let factorial: number = 1;\n    let factorial_n: number = 1;\n    let factorial_m: number = 1;\n    let factorial_n_m: number = 1;\n    for (let i = 1; i <= n; i++) {\n        factorial_n *= i;\n    }\n    for (let i = 1; i <= m; i++) {\n        factorial_m *= i;\n    }\n    for (let i = 1; i <= n - m; i++) {\n        factorial_n_m *= i;\n    }\n    for (let i = 1; i <= n + 1; i++) {\n        factorial *= i;\n    }\n    result = factorial / (factorial_n * factorial_m * factorial_n_m);\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let result = 0;\n    if (m > n) {\n        return result;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    for (let i = 0; i <= m; i++) {\n        result += Math.pow(-1, i) * binomial(m, i) * eulerian_num(n - i, m - i);\n    }\n    return result;\n}\n",
    "    let res = 1;\n    for (let i = 1; i <= m; i++) {\n        res = res * (n - i + 1) / i;\n    }\n    return res;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + m * eulerian_num(n - 1, m - 1);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n === m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    if (n < 0 || m < 0 || n < m) return 0;\n    if (n == 0 && m == 0) return 1;\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n === m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    if (m === 0 || m === n) {\n        return 1;\n    }\n    return eulerian_num(n - 1, m - 1) + (n - m) * eulerian_num(n - 1, m);\n}\n",
    "    if (n === 0 && m === 0) {\n        return 1;\n    }\n    if (n < 0 || m < 0) {\n        return 0;\n    }\n    return (n + 1 - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    let result: number = 0;\n    if (m > n) {\n        return result;\n    }\n    if (m === 0 || m === n) {\n        return 1;\n    }\n    result = eulerian_num(n - 1, m - 1) + (n - m) * eulerian_num(n - 1, m);\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    if (m > n) {\n        return 0;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n === m) {\n        return 1;\n    }\n    if (m === 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    if (n < 0 || m < 0)\n        return 0;\n    if (n == 0 && m == 0)\n        return 1;\n    if (n == 0 || m == 0)\n        return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    let res = 0;\n    for (let k = 0; k <= m; k++) {\n        res += Math.pow(-1, k) * binomial(m, k) * binomial(m - k + n - 1, n - 1);\n    }\n    return res;\n}\n",
    "    let a = [];\n    for (let i = 0; i <= n; i++) {\n        a[i] = [];\n        for (let j = 0; j <= m; j++) {\n            if (i == 0 || j == 0) {\n                a[i][j] = 1;\n            } else {\n                a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j];\n            }\n        }\n    }\n    return a[n][m];\n}\n",
    "    let res: number = 0;\n    if (n == 0 && m == 0) {\n        res = 1;\n    } else if (n == 0 || m == 0) {\n        res = 0;\n    } else {\n        res = (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n    }\n    return res;\n}\n",
    "    if (n < m) return 0;\n    if (n == m) return 1;\n    if (m == 0) return 1;\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let result = 1;\n    for (let i = 0; i < m; i++) {\n        result *= (n - i) / (i + 1);\n    }\n    return result;\n}\n",
    "    let res: number = 0;\n    if (m > n) {\n        return 0;\n    }\n    if (m === n) {\n        return 1;\n    }\n    if (m === 0) {\n        return 1;\n    }\n    res = (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n    return res;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let result = 1;\n    for (let i = 1; i <= m; i++) {\n        result *= (n - i + 1) / i;\n    }\n    return result;\n}\n",
    "    if (m > n) {\n        return 0;\n    }\n    if (m == n) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m + 1) + (m + 1) * eulerian_num(n, m + 2);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let result = 1;\n    for (let i = 0; i < m; i++) {\n        result *= (n - i);\n    }\n    return result;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n, m - 1) + (m + 1) * eulerian_num(n, m + 1);\n}\n",
    "    let result: number = 0;\n    let factorial: number = 1;\n    for (let i = 0; i <= m; i++) {\n        factorial *= (n - i);\n        result += (factorial / factorial_num(i));\n    }\n    return result;\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n === m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    if (n == 0 && m == 0) return 1;\n    if (n == 0 || m == 0) return 0;\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n",
    "    if (n < m) {\n        return 0;\n    }\n    if (n == m) {\n        return 1;\n    }\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1);\n}\n",
    "    let res = 0;\n    for (let i = 0; i <= m; i++) {\n        res += Math.pow(-1, i) * binomial(m, i) * Math.pow(m - i, n);\n    }\n    return res / factorial(m);\n}\n",
    "    let result: number = 0;\n    if (n == 0 && m == 0) {\n        result = 1;\n    } else if (n == 0 || m == 0) {\n        result = 0;\n    } else {\n        result = (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n    }\n    return result;\n}\n",
    "    if (n < 0 || m < 0) {\n        return 0;\n    }\n    if (n === 0 && m === 0) {\n        return 1;\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m);\n}\n"
  ]
}