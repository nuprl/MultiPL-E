{
  "name": "mbpp_91_find_substring",
  "language": "ts",
  "prompt": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_91_find_substring.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'my'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'Trinity'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'name'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'hello'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'world'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'is'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'Trinity'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'Trinity'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'Trinity'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'Trinity'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'Trinity'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'Trinity'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'],\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "../../../../tmp/tmppow51w95.ts(25,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nlet str1: string[] = [\"hello\", \"world\", \"hi\"];\nlet sub_str: string = \"hello\";\nconsole.log(find_substring(str1, sub_str));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let found: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\nconsole.log(find_substring([\"hello\", \"world\", \"lorem\", \"ipsum\"], \"ips\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            flag = true;\n            break;\n        }\n    }\n    return flag;\n}\n\nlet str1: string[] = [\"hello\", \"world\", \"hi\"];\nlet sub_str: string = \"hello\";\nconsole.log(find_substring(str1, sub_str));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122696,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122696,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) >= 0) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122696,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122696,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring(['hello', 'world'], 'he'));\nconsole.log(find_substring(['hello', 'world'], 'ld'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122696,
      "stdout": "true\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or'));\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or1'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122697,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122696,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nlet str1: string[] = [\"hello\", \"world\", \"hi\"];\nlet sub_str: string = \"hi\";\nconsole.log(find_substring(str1, sub_str));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122696,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i].includes(sub_str)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122696,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122697,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122697,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"hello\", \"world\"], \"hello\"));\nconsole.log(find_substring([\"hello\", \"world\"], \"hi\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122697,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or'));\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'orx'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122697,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let found: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122696,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'is'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122696,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122696,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122697,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or'));\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or1'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122697,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'is'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122696,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122696,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let found: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122696,
      "stdout": "false\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nlet str1: string[] = [\"hello\", \"world\", \"lorem\", \"ipsum\"];\nlet sub_str: string = \"hello\";\nconsole.log(find_substring(str1, sub_str));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122696,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122696,
      "stdout": "false\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"hello\", \"world\"], \"hello\"));\nconsole.log(find_substring([\"hello\", \"world\"], \"bye\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122696,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'is'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122696,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or'));\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or1'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122697,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            flag = true;\n        }\n    }\n    return flag;\n}\n\nlet str1: string[] = [\"hello\", \"world\", \"hi\"];\nlet sub_str: string = \"world\";\nconsole.log(find_substring(str1, sub_str));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"hello\", \"world\"], \"hello\"));\nconsole.log(find_substring([\"hello\", \"world\"], \"bye\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nlet str1: string[] = [\"hello\", \"world\", \"hi\"];\nlet sub_str: string = \"hello\";\nconsole.log(find_substring(str1, sub_str));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122697,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            flag = true;\n            break;\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let found: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'my'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'hello'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'Trinity'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'name'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'is'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'world'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'Trinity'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'Trinity'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'Trinity'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'Trinity'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'Trinity'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'], 'Trinity'));\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Trinity'\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "../../../../tmp/tmpk_2qcv0v.ts(26,1): error TS1005: ',' expected.\n../../../../tmp/tmpk_2qcv0v.ts(26,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nlet str1 = [\"hello\", \"world\", \"welcome\"];\nlet sub_str = \"come\";\nconsole.log(find_substring(str1, sub_str));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"hello\", \"world\", \"lorem\"], \"or\"));\nconsole.log(find_substring([\"hello\", \"world\", \"lorem\"], \"or1\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let i: number = 0;\n    let j: number = 0;\n    let flag: boolean = false;\n    for (i = 0; i < str1.length; i++) {\n        for (j = 0; j < sub_str.length; j++) {\n            if (str1[i] == sub_str[j]) {\n                flag = true;\n                break;\n            }\n        }\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpto1qwqci.js:19:12)\n    at Object.<anonymous> (/tmp/tmpto1qwqci.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring(['hello', 'world', 'my', 'name', 'is', 'Anna'], 'name'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let str_len = str1.length;\n    let sub_str_len = sub_str.length;\n    let i = 0;\n    let j = 0;\n    for (i = 0; i < str_len; i++) {\n        for (j = 0; j < sub_str_len; j++) {\n            if (str1[i] == sub_str[j]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nconsole.log(find_substring([\"hello\", \"world\"], \"or\"));\nconsole.log(find_substring([\"hello\", \"world\"], \"orl\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "false\nfalse\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpcp56g847.js:21:12)\n    at Object.<anonymous> (/tmp/tmpcp56g847.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'is'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"hello\", \"world\"], \"hello\"));\nconsole.log(find_substring([\"hello\", \"world\"], \"hi\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring(['hello', 'world'], 'hello'));\nconsole.log(find_substring(['hello', 'world'], 'hi'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let found: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\nconsole.log(find_substring([\"hello\", \"world\"], \"hello\"));\nconsole.log(find_substring([\"hello\", \"world\"], \"hi\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122700,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let found: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let found: boolean = false;\n    str1.forEach(function (value) {\n        if (value.indexOf(sub_str) != -1) {\n            found = true;\n        }\n    });\n    return found;\n}\n\nconsole.log(find_substring([\"this\", \"not\", \"what\", \"you're\", \"looking\", \"for\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring(['hello', 'world'], 'he'));\nconsole.log(find_substring(['hello', 'world'], 'hi'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'is'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122696,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            flag = true;\n            break;\n        }\n    }\n    return flag;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122700,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"hello\", \"world\"], \"or\"));\nconsole.log(find_substring([\"hello\", \"world\"], \"orl\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122702,
      "stdout": "true\ntrue\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\nlet str1: string[] = [\"hello\", \"world\", \"lorem\"];\nlet sub_str: string = \"or\";\nconsole.log(find_substring(str1, sub_str));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122702,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122697,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let found: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring(['hello', 'world'], 'llo'));\nconsole.log(find_substring(['hello', 'world'], 'lloo'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122702,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122702,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let str2: string = str1.join(\"\");\n    if (str2.includes(sub_str)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nconsole.log(find_substring([\"hello\", \"world\"], \"hello\"));\nconsole.log(find_substring([\"hello\", \"world\"], \"hi\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122702,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or'));\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or1'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122697,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or'));\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or1'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122697,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nlet str1: string[] = [\"hello\", \"world\", \"lorem\", \"ipsum\"];\nlet sub_str: string = \"lo\";\nconsole.log(find_substring(str1, sub_str));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122702,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or'));\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or1'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122702,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring(['hello', 'world'], 'hello'));\nconsole.log(find_substring(['hello', 'world'], 'hi'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122702,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let found: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            found = true;\n        }\n    }\n    return found;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122702,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122702,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122696,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122697,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122702,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world'], 'ello'));\nconsole.log(find_substring(['hello', 'world'], 'hi'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122702,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'is'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122696,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"hello\", \"world\"], \"hello\"));\nconsole.log(find_substring([\"hello\", \"world\"], \"hi\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122697,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) !== -1) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'is'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122702,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"hello\", \"world\"], \"hello\"));\nconsole.log(find_substring([\"hello\", \"world\"], \"hi\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122702,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(find_substring(['hello', 'world'], 'ello'));\nconsole.log(find_substring(['hello', 'world'], 'abc'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122702,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let found: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or'));\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'orz'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122702,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122697,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or'));\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or1'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122697,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122702,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122702,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122702,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122702,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"hello\", \"world\"], \"llo\"));\nconsole.log(find_substring([\"hello\", \"world\"], \"abc\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122702,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i].includes(sub_str)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122696,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nlet str1: string[] = [\"hello\", \"world\", \"lorem\", \"ipsum\"];\nlet sub_str: string = \"lo\";\nconsole.log(find_substring(str1, sub_str));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122704,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let flag: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            flag = true;\n            break;\n        }\n    }\n    return flag;\n}\nconsole.log(find_substring([\"hello\", \"world\", \"lorem\"], \"ipsum\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122704,
      "stdout": "false\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) > -1) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"not\", \"what\", \"you're\", \"looking\", \"for\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122704,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let found: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\nlet str1: string[] = [\"hello\", \"world\", \"lorem\", \"ipsum\"];\nlet sub_str: string = \"ipsum\";\nconsole.log(find_substring(str1, sub_str));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122704,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122697,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) != -1) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122704,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['this', 'is', 'what', 'I\\'m', 'searching', 'in'], 'is'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122696,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122696,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nlet str1: string[] = [\"hello\", \"world\", \"lorem\", \"ipsum\"];\nlet sub_str: string = \"ipsum\";\nconsole.log(find_substring(str1, sub_str));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122704,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122697,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nlet str1 = [\"hello\", \"world\", \"lorem\", \"ipsum\"];\nlet sub_str = \"ips\";\nconsole.log(find_substring(str1, sub_str));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122704,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122696,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nlet str1: string[] = [\"hello\", \"world\", \"lorem\"];\nlet sub_str: string = \"lo\";\nconsole.log(find_substring(str1, sub_str));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122704,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or'));\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'orx'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122704,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or'));\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or1'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122697,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"hello\", \"world\"], \"hello\"));\nconsole.log(find_substring([\"hello\", \"world\"], \"hi\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122697,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122699,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring(['hello', 'world'], 'owo'));\nconsole.log(find_substring(['hello', 'world'], 'owo'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122704,
      "stdout": "false\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"not\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].indexOf(sub_str) >= 0) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'or'));\nconsole.log(find_substring(['hello', 'world', 'lorem'], 'ipsum'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1666122704,
      "stdout": "true\nfalse\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to check if a string is present as a substring in a given array of string values.\nfunction find_substring(str1: string[], sub_str: string): boolean {\n    let result: boolean = false;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i].includes(sub_str)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(find_substring([\"this\", \"is\", \"what\", \"I'm\", \"searching\", \"in\"], \"is\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_substring;\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);\n  assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);\n}\n\ntest();",
      "timestamp": 1665510187,
      "stdout": "true\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}