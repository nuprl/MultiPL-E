{
  "name": "mbpp_123_amicable_numbers_sum",
  "language": "ts",
  "prompt": "//Write a function to sum all amicable numbers from 1 to a specified number.\nfunction amicable_numbers_sum(limit: number): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_123_amicable_numbers_sum.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = amicable_numbers_sum;\n  assert.deepEqual(candidate(999),504);\n  assert.deepEqual(candidate(9999),31626);\n  assert.deepEqual(candidate(99),0);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let sum = 0;\n    for (let i = 1; i <= limit; i++) {\n        let divisors_sum = divisors_sum_of(i);\n        if (divisors_sum > i && divisors_sum_of(divisors_sum) == i) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= limit; i++) {\n        let divisors_sum = sum_of_divisors(i);\n        if (divisors_sum > i && sum_of_divisors(divisors_sum) == i) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i < limit; i++) {\n        let a = sum_of_divisors(i);\n        let b = sum_of_divisors(a);\n        if (b == i && a != b) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i < limit; i++) {\n        let a = sum_of_divisors(i);\n        if (a > i && sum_of_divisors(a) == i) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n",
    "    let result: number = 0;\n    for (let i: number = 1; i < limit; i++) {\n        let sum_of_divisors: number = sum_of_divisors_of(i);\n        if (sum_of_divisors > i) {\n            let sum_of_divisors_of_sum_of_divisors: number = sum_of_divisors_of(sum_of_divisors);\n            if (sum_of_divisors_of_sum_of_divisors == i) {\n                result += i;\n            }\n        }\n    }\n    return result;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= limit; i++) {\n        let a = sum_of_divisors(i);\n        let b = sum_of_divisors(a);\n        if (b == i && a != b) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i < limit; i++) {\n        if (is_amicable(i)) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i < limit; i++) {\n        let divisors = get_divisors(i);\n        let divisors_sum = divisors.reduce((a, b) => a + b);\n        let divisors_divisors = get_divisors(divisors_sum);\n        let divisors_divisors_sum = divisors_divisors.reduce((a, b) => a + b);\n        if (divisors_divisors_sum === i && divisors_sum !== i) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n",
    "    let sum: number = 0;\n    for (let i = 1; i <= limit; i++) {\n        let sum_divisors_i: number = sum_divisors(i);\n        if (sum_divisors_i > i) {\n            let sum_divisors_sum_divisors_i: number = sum_divisors(sum_divisors_i);\n            if (sum_divisors_sum_divisors_i === i) {\n                sum += i;\n            }\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i < limit; i++) {\n        let sum_of_divisors = sum_of_divisors_of(i);\n        if (sum_of_divisors > i) {\n            let sum_of_divisors_of_sum_of_divisors = sum_of_divisors_of(sum_of_divisors);\n            if (sum_of_divisors_of_sum_of_divisors == i) {\n                sum += i;\n            }\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= limit; i++) {\n        if (is_amicable_number(i)) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n",
    "    let sum: number = 0;\n    for (let i: number = 1; i <= limit; i++) {\n        let a: number = sum_of_divisors(i);\n        let b: number = sum_of_divisors(a);\n        if (b == i && a != b) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= limit; i++) {\n        let a = sum_of_divisors(i);\n        let b = sum_of_divisors(a);\n        if (i == b && i != a) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i < limit; i++) {\n        let a = sum_of_divisors(i);\n        let b = sum_of_divisors(a);\n        if (i === b && i !== a) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i < limit; i++) {\n        let a = sum_of_divisors(i);\n        if (a > i && sum_of_divisors(a) == i) {\n            sum += i + a;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i < limit; i++) {\n        let a = sum_of_divisors(i);\n        let b = sum_of_divisors(a);\n        if (b == i && a != b) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n",
    "    let sum: number = 0;\n    for (let i = 1; i <= limit; i++) {\n        let a: number = sum_of_divisors(i);\n        let b: number = sum_of_divisors(a);\n        if (i == b && i != a) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i <= limit; i++) {\n        let a = sum_proper_divisors(i);\n        let b = sum_proper_divisors(a);\n        if (b == i && a != b) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i < limit; i++) {\n        if (is_amicable(i)) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n",
    "    let sum = 0;\n    for (let i = 1; i < limit; i++) {\n        let a = sum_of_divisors(i);\n        if (a > i && sum_of_divisors(a) == i) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n"
  ]
}