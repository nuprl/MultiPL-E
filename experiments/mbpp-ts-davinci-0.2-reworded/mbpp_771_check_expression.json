{
  "name": "mbpp_771_check_expression",
  "language": "ts",
  "prompt": "//Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunction check_expression(exp: string): boolean {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_expression;\n  assert.deepEqual(candidate(\"{()}[{}]\"),true);\n  assert.deepEqual(candidate(\"{()}[{]\"),false);\n  assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] == ')' && top != '(') {\n                return false;\n            }\n            if (exp[i] == '}' && top != '{') {\n                return false;\n            }\n            if (exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length != 0) {\n        return false;\n    }\n    return true;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] === ')' && top !== '(') {\n                return false;\n            }\n            if (exp[i] === '}' && top !== '{') {\n                return false;\n            }\n            if (exp[i] === ']' && top !== '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length === 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] == ')' && top != '(') {\n                return false;\n            }\n            if (exp[i] == '}' && top != '{') {\n                return false;\n            }\n            if (exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack: string[] = [];\n    let open: string[] = ['(', '{', '['];\n    let close: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open.indexOf(exp[i]) > -1) {\n            stack.push(exp[i]);\n        } else if (close.indexOf(exp[i]) > -1) {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (open.indexOf(top) !== close.indexOf(exp[i])) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            } else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            } else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if ((top === '(' && exp[i] !== ')') || (top === '{' && exp[i] !== '}') || (top === '[' && exp[i] !== ']')) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    let open_brackets: string[] = [\"(\", \"{\", \"[\"];\n    let close_brackets: string[] = [\")\", \"}\", \"]\"];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.includes(exp[i])) {\n            stack.push(exp[i]);\n        } else if (close_brackets.includes(exp[i])) {\n            let index = close_brackets.indexOf(exp[i]);\n            if (stack.length == 0 || stack.pop() != open_brackets[index]) {\n                return false;\n            }\n        }\n    }\n    return stack.length == 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (exp[i] === ')' && stack[stack.length - 1] === '(') {\n                stack.pop();\n            } else if (exp[i] === '}' && stack[stack.length - 1] === '{') {\n                stack.pop();\n            } else if (exp[i] === ']' && stack[stack.length - 1] === '[') {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            }\n            if (top == '{' && exp[i] != '}') {\n                return false;\n            }\n            if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else {\n                let top = stack.pop();\n                if (top == '(' && exp[i] != ')') {\n                    return false;\n                }\n                else if (top == '{' && exp[i] != '}') {\n                    return false;\n                }\n                else if (top == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "  let stack: string[] = [];\n  for (let i = 0; i < exp.length; i++) {\n    if (exp[i] === \"(\" || exp[i] === \"{\" || exp[i] === \"[\") {\n      stack.push(exp[i]);\n    } else if (exp[i] === \")\" || exp[i] === \"}\" || exp[i] === \"]\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (\n        (exp[i] === \")\" && stack[stack.length - 1] === \"(\") ||\n        (exp[i] === \"}\" && stack[stack.length - 1] === \"{\") ||\n        (exp[i] === \"]\" && stack[stack.length - 1] === \"[\")\n      ) {\n        stack.pop();\n      } else {\n        return false;\n      }\n    }\n  }\n  if (stack.length === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else {\n                let top = stack.pop();\n                if (top == '(' && exp[i] != ')') {\n                    return false;\n                }\n                else if (top == '{' && exp[i] != '}') {\n                    return false;\n                }\n                else if (top == '[' && exp[i] != ']') {\n                    return false;\n                }\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.indexOf(exp[i]) > -1) {\n            stack.push(exp[i]);\n        } else if (close_brackets.indexOf(exp[i]) > -1) {\n            let top = stack.pop();\n            if (open_brackets.indexOf(top) !== close_brackets.indexOf(exp[i])) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (exp[i] == ')' && top != '(') {\n                return false;\n            }\n            if (exp[i] == '}' && top != '{') {\n                return false;\n            }\n            if (exp[i] == ']' && top != '[') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        ']': '[',\n        '}': '{'\n    }\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '[' || exp[i] === '{') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === ']' || exp[i] === '}') {\n            if (stack.length === 0 || stack[stack.length - 1] !== map[exp[i]]) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (stack[stack.length - 1] === map[exp[i]]) {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            let top = stack.pop();\n            if (top == '(' && exp[i] != ')') {\n                return false;\n            } else if (top == '{' && exp[i] != '}') {\n                return false;\n            } else if (top == '[' && exp[i] != ']') {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    return false;\n}\n",
    "    let stack: string[] = [];\n    let open_brackets: string[] = ['(', '{', '['];\n    let close_brackets: string[] = [')', '}', ']'];\n    for (let i = 0; i < exp.length; i++) {\n        if (open_brackets.includes(exp[i])) {\n            stack.push(exp[i]);\n        } else if (close_brackets.includes(exp[i])) {\n            let index = close_brackets.indexOf(exp[i]);\n            if (stack.length > 0 && stack[stack.length - 1] == open_brackets[index]) {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack.push(exp[i]);\n        }\n        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (stack.length == 0) {\n                return false;\n            }\n            else if (exp[i] == ')' && stack[stack.length - 1] == '(') {\n                stack.pop();\n            }\n            else if (exp[i] == '}' && stack[stack.length - 1] == '{') {\n                stack.pop();\n            }\n            else if (exp[i] == ']' && stack[stack.length - 1] == '[') {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    if (stack.length == 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
    "    let stack: string[] = [];\n    let map: { [key: string]: string } = {\n        '}': '{',\n        ')': '(',\n        ']': '['\n    };\n    for (let i = 0; i < exp.length; i++) {\n        if (exp[i] === '(' || exp[i] === '{' || exp[i] === '[') {\n            stack.push(exp[i]);\n        } else if (exp[i] === ')' || exp[i] === '}' || exp[i] === ']') {\n            if (stack.length === 0) {\n                return false;\n            }\n            if (stack[stack.length - 1] === map[exp[i]]) {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n"
  ]
}