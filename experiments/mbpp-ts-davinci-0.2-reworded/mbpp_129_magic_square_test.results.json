{
  "name": "mbpp_129_magic_square_test",
  "language": "ts",
  "prompt": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_row != sum_column) {\n            return false;\n        }\n        if (i == 0) {\n            sum = sum_row;\n        }\n        if (sum != sum_row) {\n            return false;\n        }\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_diagonal_1 != sum_diagonal_2) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal_1 = 0;\n    let sum_diagonal_2 = 0;\n    let sum_row = 0;\n    let sum_column = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n        sum_row = 0;\n        sum_column = 0;\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_row !== sum_diagonal_1 || sum_column !== sum_diagonal_1) {\n            return false;\n        }\n    }\n    if (sum_diagonal_1 !== sum_diagonal_2) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp57eybu0k.js:28:12)\n    at Object.<anonymous> (/tmp/tmp57eybu0k.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_first_row: number = 0;\n    let sum_of_first_col: number = 0;\n    let sum_of_second_row: number = 0;\n    let sum_of_second_col: number = 0;\n    let sum_of_third_row: number = 0;\n    let sum_of_third_col: number = 0;\n    let sum_of_diagonal1: number = 0;\n    let sum_of_diagonal2: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            if (i == 0) {\n                sum_of_first_row += my_matrix[i][j];\n            }\n            if (i == 1) {\n                sum_of_second_row += my_matrix[i][j];\n            }\n            if (i == 2) {\n                sum_of_third_row += my_matrix[i][j];\n            }\n            if (j == 0) {\n                sum_of_first_col += my_matrix[i][j];\n            }\n            if (j == 1) {\n                sum_of_second_col += my_matrix[i][j];\n            }\n            if (j == 2) {\n                sum_of_third_col += my_matrix[i][j];\n            }\n            if (i == j) {\n                sum_of_diagonal1 += my_matrix[i][j];\n            }\n            if (i + j == 2) {\n                sum_of_diagonal2 += my_matrix[i][j];\n            }\n        }\n    }\n    if (sum_of_first_row == sum_of_second_row && sum_of_second_row == sum_of_third_row && sum_of_first_col == sum_of_second_col && sum_of_second_col == sum_of_third_col && sum_of_diagonal1 == sum_of_diagonal2) {\n        return\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "../../../../tmp/tmp7mv0euux.ts(52,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_row: number[] = [];\n    let sum_of_col: number[] = [];\n    let sum_of_diag: number[] = [];\n    let sum: number = 0;\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let l: number = 0;\n    let m: number = 0;\n    let n: number = 0;\n    let o: number = 0;\n    let p: number = 0;\n    let q: number = 0;\n    let r: number = 0;\n    let s: number = 0;\n    let t: number = 0;\n    let u: number = 0;\n    let v: number = 0;\n    let w: number = 0;\n    let x: number = 0;\n    let y: number = 0;\n    let z: number = 0;\n    let aa: number = 0;\n    let bb: number = 0;\n    let cc: number = 0;\n    let dd: number = 0;\n    let ee: number = 0;\n    let ff: number = 0;\n    let gg: number = 0;\n    let hh: number = 0;\n    let ii: number = 0;\n    let jj: number = 0;\n    let kk: number = 0;\n    let ll: number = 0;\n    let mm: number = 0;\n    let nn: number = 0;\n    let oo: number = 0;\n    let pp: number = 0;\n    let qq: number = 0;\n    let rr: number = 0;\n    let ss: number = 0;\n    let tt: number = 0;\n    let uu: number = 0;\n    let vv: number = 0;\n    let ww: number = 0;\n    let xx: number = 0;\n    let yy: number = 0;\n    let zz: number = 0;\n    let aaa: number = 0;\n    let bbb: number = 0;\n    let ccc: number = 0;\n    let ddd: number = 0;\n    let eee: number = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "../../../../tmp/tmp0c0hs79l.ts(67,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_first_row: number = 0;\n    let sum_of_first_column: number = 0;\n    let sum_of_second_column: number = 0;\n    let sum_of_second_row: number = 0;\n    let sum_of_third_column: number = 0;\n    let sum_of_third_row: number = 0;\n    let sum_of_fourth_column: number = 0;\n    let sum_of_fourth_row: number = 0;\n    let sum_of_fifth_column: number = 0;\n    let sum_of_fifth_row: number = 0;\n    let sum_of_sixth_column: number = 0;\n    let sum_of_sixth_row: number = 0;\n    let sum_of_seventh_column: number = 0;\n    let sum_of_seventh_row: number = 0;\n    let sum_of_eighth_column: number = 0;\n    let sum_of_eighth_row: number = 0;\n    let sum_of_ninth_column: number = 0;\n    let sum_of_ninth_row: number = 0;\n    let sum_of_first_diagonal: number = 0;\n    let sum_of_second_diagonal: number = 0;\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_columns: number = 0;\n    let sum_of_all_diagonals: number = 0;\n    let sum_of_all_elements: number = 0;\n    let magic_square: boolean = false;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_of_all_elements += my_matrix[i][j];\n        }\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_of_first_row\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "../../../../tmp/tmpfg2jdib7.ts(49,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_row: number = 0;\n    let sum_of_all_elements_in_column: number = 0;\n    let sum_of_all_elements_in_diagonal: number = 0;\n    let sum_of_all_elements_in_diagonal_2: number = 0;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_elements += my_matrix[i][j];\n            sum_of_all_elements_in_row += my_matrix[i][j];\n            sum_of_all_elements_in_column += my_matrix[j][i];\n            if (i == j) {\n                sum_of_all_elements_in_diagonal += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_of_all_elements_in_diagonal_2 += my_matrix[i][j];\n            }\n        }\n        sum_of_rows.push(sum_of_all_elements_in_row);\n        sum_of_columns.push(sum_of_all_elements_in_column);\n        sum_of_all_elements_in_row = 0;\n        sum_of_all_elements_in_column = 0;\n    }\n    sum_of_diagonals.push(sum_of_all_elements_in_diagonal);\n    sum_of_diagonals.push(sum_of_all_elements_in_diagonal_2);\n\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "../../../../tmp/tmpwhl0vlo0.ts(34,9): error TS1005: ']' expected.\n../../../../tmp/tmpwhl0vlo0.ts(45,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal: number = 0;\n    let sum_reverse_diagonal: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum === 0) {\n            sum = sum_row;\n        }\n        if (sum !== sum_row || sum !== sum_column) {\n            return false;\n        }\n        sum_diagonal += my_matrix[i][i];\n        sum_reverse_diagonal += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum !== sum_diagonal || sum !== sum_reverse_diagonal) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let is_magic_square: boolean = false;\n\n    //Calculate the sum of each row\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n\n    //Calculate the sum of each column\n    for (let i: number = 0; i < my_matrix[0].length; i++) {\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n\n    //Calculate the sum of each diagonal\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n\n    //Check if the sum of each row, column and diagonal are equal\n    if (sum_of_rows.every(x => x === sum_of_rows[0]) && sum_of_columns.every(x => x === sum_of_columns[0]) && sum_of_diagonals.every(x => x === sum_of_diagonals[0])) {\n        is_magic_square = true;\n    }\n\n    return is_magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let diag1: number = 0;\n    let diag2: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        let row: number = 0;\n        let col: number = 0;\n        diag1 += my_matrix[i][i];\n        diag2 += my_matrix[i][my_matrix.length - i - 1];\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            row += my_matrix[i][j];\n            col += my_matrix[j][i];\n        }\n        if (i === 0) {\n            sum = row;\n        }\n        if (sum !== row || sum !== col) {\n            return false;\n        }\n    }\n    if (sum !== diag1 || sum !== diag2) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows = 0;\n    let sum_of_cols = 0;\n    let sum_of_diagonals = 0;\n    let sum_of_diagonals2 = 0;\n    let sum_of_all = 0;\n    let sum_of_all2 = 0;\n    let sum_of_all3 = 0;\n    let sum_of_all4 = 0;\n    let sum_of_all5 = 0;\n    let sum_of_all6 = 0;\n    let sum_of_all7 = 0;\n    let sum_of_all8 = 0;\n    let sum_of_all9 = 0;\n    let sum_of_all10 = 0;\n    let sum_of_all11 = 0;\n    let sum_of_all12 = 0;\n    let sum_of_all13 = 0;\n    let sum_of_all14 = 0;\n    let sum_of_all15 = 0;\n    let sum_of_all16 = 0;\n    let sum_of_all17 = 0;\n    let sum_of_all18 = 0;\n    let sum_of_all19 = 0;\n    let sum_of_all20 = 0;\n    let sum_of_all21 = 0;\n    let sum_of_all22 = 0;\n    let sum_of_all23 = 0;\n    let sum_of_all24 = 0;\n    let sum_of_all25 = 0;\n    let sum_of_all26 = 0;\n    let sum_of_all27 = 0;\n    let sum_of_all28 = 0;\n    let sum_of_all29 = 0;\n    let sum_of_all30 = 0;\n    let sum_of_all31 = 0;\n    let sum_of_all32 = 0;\n    let sum_of_all33 = 0;\n    let sum_of_all34 = 0;\n    let sum_of_all35 = 0;\n    let sum_of_all36 = 0;\n    let sum_of_all37 = 0;\n    let sum_of_all38 = 0;\n    let sum_of_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "../../../../tmp/tmp4k2dnfyv.ts(57,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal1: number = 0;\n    let sum_diagonal2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let is_magic_square: boolean = true;\n    //calculate sum of first row\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row += my_matrix[0][i];\n    }\n    //calculate sum of first column\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_column += my_matrix[i][0];\n    }\n    //calculate sum of diagonal1\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal1 += my_matrix[i][i];\n    }\n    //calculate sum of diagonal2\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    //check if all sums are equal\n    if (sum_row != sum_column || sum_row != sum_diagonal1 || sum_row != sum_diagonal2) {\n        is_magic_square = false;\n    }\n    //check if all rows are equal\n    for (let i: number = 1; i < my_matrix.length; i++) {\n        sum = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum += my_matrix[i][j];\n        }\n        if (sum != sum_row) {\n            is_magic_square = false;\n        }\n    }\n    //check if all columns are equal\n    for (let i: number = 1; i < my_matrix.length; i++) {\n        sum = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum += my\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "../../../../tmp/tmppv4z4wht.ts(55,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let is_magic_square: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < sum_of_rows.length - 1; i++) {\n        if (sum_of_rows[i] != sum_of_rows[i + 1]) {\n            is_magic_square = false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_columns.length - 1; i++) {\n        if (sum_of_columns[i] != sum_of_columns[i + 1]) {\n            is_magic_square = false;\n        }\n    }\n    for (let i: number = 0; i < sum_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "../../../../tmp/tmp7o_ajhn4.ts(43,1): error TS1005: ';' expected.\n../../../../tmp/tmp7o_ajhn4.ts(43,9): error TS1005: ')' expected.\n../../../../tmp/tmp7o_ajhn4.ts(54,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_diag: number = 0;\n    let sum_diag2: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_col = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum_diag = sum_row;\n            sum_diag2 = sum_col;\n        }\n        if (sum_row != sum_diag || sum_col != sum_diag2) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let sum_of_first_diagonal: number = 0;\n    let sum_of_second_diagonal: number = 0;\n    let sum_of_first_row: number = 0;\n    let sum_of_second_row: number = 0;\n    let sum_of_third_row: number = 0;\n    let sum_of_first_column: number = 0;\n    let sum_of_second_column: number = 0;\n    let sum_of_third_column: number = 0;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_first_diagonal += my_matrix[i][i];\n            sum_of_second_diagonal += my_matrix[i][my_matrix.length - i - 1];\n            sum_of_first_row += my_matrix[0][j];\n            sum_of_second_row += my_matrix[1][j];\n            sum_of_third_row += my_matrix[2][j];\n            sum_of_first_column += my_matrix[j][0];\n            sum_of_second_column += my_matrix[j][1];\n            sum_of_third_column += my_matrix[j][2];\n        }\n    }\n    sum_of_rows.push(sum_of_first_row, sum_of_second_row, sum_of_third_row);\n    sum_of_columns.push(sum_of_first_column, sum_of_second_column, sum_of_third_column);\n    sum_of_diagonals.push(sum_of_first_diagonal, sum_of_second_diagonal);\n\n    for (let i: number = 0; i < sum_of_rows.length; i++)\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "../../../../tmp/tmp9e64fc_s.ts(44,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_first_row = 0;\n    let sum_of_first_column = 0;\n    let sum_of_second_row = 0;\n    let sum_of_second_column = 0;\n    let sum_of_third_row = 0;\n    let sum_of_third_column = 0;\n    let sum_of_first_diagonal = 0;\n    let sum_of_second_diagonal = 0;\n    let sum_of_all_rows = 0;\n    let sum_of_all_columns = 0;\n    let sum_of_all_diagonals = 0;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_first_row += my_matrix[0][i];\n        sum_of_first_column += my_matrix[i][0];\n        sum_of_second_row += my_matrix[1][i];\n        sum_of_second_column += my_matrix[i][1];\n        sum_of_third_row += my_matrix[2][i];\n        sum_of_third_column += my_matrix[i][2];\n        sum_of_first_diagonal += my_matrix[i][i];\n        sum_of_second_diagonal += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_all_rows = sum_of_first_row + sum_of_second_row + sum_of_third_row;\n    sum_of_all_columns = sum_of_first_column + sum_of_second_column + sum_of_third_column;\n    sum_of_all_diagonals = sum_of_first_diagonal + sum_of_second_diagonal;\n\n    if (sum_of_all_rows === sum_of_all_columns && sum_of_all_rows === sum_of_all_diagonals) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp45nvf_iq.js:37:12)\n    at Object.<anonymous> (/tmp/tmp45nvf_iq.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let is_magic_square: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (i === 0) {\n            sum = sum_row;\n        }\n        if (sum !== sum_row || sum !== sum_column) {\n            is_magic_square = false;\n            break;\n        }\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum !== sum_diagonal_1 || sum !== sum_diagonal_2) {\n        is_magic_square = false;\n    }\n    return is_magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum2: number = 0;\n    let sum3: number = 0;\n    let sum4: number = 0;\n    let sum5: number = 0;\n    let sum6: number = 0;\n    let sum7: number = 0;\n    let sum8: number = 0;\n    let sum9: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n            sum2 += my_matrix[j][i];\n            if (i == j) {\n                sum3 += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum4 += my_matrix[i][j];\n            }\n            if (i == 0) {\n                sum5 += my_matrix[i][j];\n            }\n            if (i == 1) {\n                sum6 += my_matrix[i][j];\n            }\n            if (i == 2) {\n                sum7 += my_matrix[i][j];\n            }\n            if (j == 0) {\n                sum8 += my_matrix[i][j];\n            }\n            if (j == 1) {\n                sum9 += my_matrix[i][j];\n            }\n        }\n    }\n    if (sum == sum2 && sum == sum3 && sum == sum4 && sum == sum5 && sum == sum6 && sum == sum7 && sum == sum8 && sum == sum9) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_mbl45fz.js:49:12)\n    at Object.<anonymous> (/tmp/tmp_mbl45fz.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let sum_all: number = 0;\n    let magic_square: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_row != sum_column) {\n            magic_square = false;\n            break;\n        }\n        sum_all += sum_row;\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_diagonal_1 != sum_diagonal_2) {\n        magic_square = false;\n    }\n    if (sum_all != sum_diagonal_1 * my_matrix.length) {\n        magic_square = false;\n    }\n    return magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diag: number[] = [];\n    let sum_of_rev_diag: number[] = [];\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_cols: number = 0;\n    let sum_of_all_diag: number = 0;\n    let sum_of_all_rev_diag: number = 0;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_of_rows[i] = 0;\n        sum_of_cols[i] = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_rows[i] += my_matrix[i][j];\n            sum_of_cols[i] += my_matrix[j][i];\n        }\n        sum_of_all_rows += sum_of_rows[i];\n        sum_of_all_cols += sum_of_cols[i];\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_of_diag[i] = 0;\n        sum_of_rev_diag[i] = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            if (i === j) {\n                sum_of_diag[i] += my_matrix[i][j];\n            }\n            if (i + j === my_matrix.length - 1) {\n                sum_of_rev_diag[i] += my_matrix[i][j];\n            }\n        }\n        sum_of_all_diag += sum_of_diag[i];\n        sum_of_all_rev_diag += sum_of_rev_diag[i];\n    }\n\n    if (sum_of_all_rows === sum_of_all_cols && sum_of_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "../../../../tmp/tmpr0stzzzz.ts(39,1): error TS1005: ')' expected.\n../../../../tmp/tmpr0stzzzz.ts(50,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_diagonals_reverse: number[] = [];\n    let sum_of_all: number;\n    let sum_of_all_reverse: number;\n    let sum_of_all_diagonals: number;\n    let sum_of_all_diagonals_reverse: number;\n    let sum_of_all_rows: number;\n    let sum_of_all_columns: number;\n    let sum_of_all_columns_reverse: number;\n    let sum_of_all_rows_reverse: number;\n    let sum_of_all_columns_reverse_reverse: number;\n    let sum_of_all_rows_reverse_reverse: number;\n    let sum_of_all_columns_reverse_reverse_reverse: number;\n    let sum_of_all_rows_reverse_reverse_reverse: number;\n    let sum_of_all_columns_reverse_reverse_reverse_reverse: number;\n    let sum_of_all_rows_reverse_reverse_reverse_reverse: number;\n    let sum_of_all_columns_reverse_reverse_reverse_reverse_reverse: number;\n    let sum_of_all_rows_reverse_reverse_reverse_reverse_reverse: number;\n    let sum_of_all_columns_reverse_reverse_reverse_reverse_reverse_reverse: number;\n    let sum_of_all_rows_reverse_reverse_reverse_reverse_reverse_reverse: number;\n    let sum_of_all_columns_reverse_reverse_reverse_reverse_reverse_reverse_reverse: number;\n    let sum_of_all_rows_reverse_reverse_reverse_reverse_reverse_reverse_reverse: number;\n    let sum_of_all_columns_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse: number;\n    let sum_of_all_rows_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse: number;\n    let sum_of_all_column\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1665510049,
      "stdout": "../../../../tmp/tmpqh0ud7hf.ts(41,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let l: number = 0;\n    let m: number = 0;\n    let n: number = 0;\n    let o: number = 0;\n    let p: number = 0;\n    let q: number = 0;\n    let r: number = 0;\n    let s: number = 0;\n    let t: number = 0;\n    let u: number = 0;\n    let v: number = 0;\n    let w: number = 0;\n    let x: number = 0;\n    let y: number = 0;\n    let z: number = 0;\n    let aa: number = 0;\n    let bb: number = 0;\n    let cc: number = 0;\n    let dd: number = 0;\n    let ee: number = 0;\n    let ff: number = 0;\n    let gg: number = 0;\n    let hh: number = 0;\n    let ii: number = 0;\n    let jj: number = 0;\n    let kk: number = 0;\n    let ll: number = 0;\n    let mm: number = 0;\n    let nn: number = 0;\n    let oo: number = 0;\n    let pp: number = 0;\n    let qq: number = 0;\n    let rr: number = 0;\n    let ss: number = 0;\n    let tt: number = 0;\n    let uu: number = 0;\n    let vv: number = 0;\n    let ww: number = 0;\n    let xx: number = 0;\n    let yy: number = 0;\n    let zz: number = 0;\n    let aaa: number = 0;\n    let bbb: number = 0;\n    let ccc: number = 0;\n    let ddd: number = 0;\n    let eee: number =\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123138,
      "stdout": "../../../../tmp/tmpemsgsigz.ts(56,9): error TS1005: ',' expected.\n../../../../tmp/tmpemsgsigz.ts(67,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_column: number = 0;\n    let sum_row: number = 0;\n    let result: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_column = 0;\n        sum_row = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_column += my_matrix[j][i];\n            sum_row += my_matrix[i][j];\n        }\n        if (i === 0) {\n            sum = sum_column;\n        }\n        if (sum_column !== sum || sum_row !== sum) {\n            result = false;\n        }\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_diagonal !== sum || sum_diagonal_2 !== sum) {\n        result = false;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_diag: number = 0;\n    let sum_diag2: number = 0;\n    let row: number = 0;\n    let col: number = 0;\n    let i: number = 0;\n    let j: number = 0;\n\n    for (i = 0; i < my_matrix.length; i++) {\n        for (j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n    }\n\n    for (i = 0; i < my_matrix.length; i++) {\n        for (j = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n        }\n        if (sum_row != sum) {\n            return false;\n        }\n        sum_row = 0;\n    }\n\n    for (i = 0; i < my_matrix.length; i++) {\n        for (j = 0; j < my_matrix[i].length; j++) {\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_col != sum) {\n            return false;\n        }\n        sum_col = 0;\n    }\n\n    for (i = 0; i < my_matrix.length; i++) {\n        for (j = 0; j < my_matrix[i].length; j++) {\n            if (i == j) {\n                sum_diag += my_matrix[i][j];\n            }\n        }\n    }\n    if (sum_diag != sum) {\n        return false;\n    }\n\n    for (i = 0; i < my_matrix.length; i++) {\n        for (j = 0; j < my_matrix[i].length; j++) {\n            if (i + j == my_matrix.length - 1) {\n                sum_diag2 += my_matrix[i][j];\n            }\n        }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123138,
      "stdout": "../../../../tmp/tmp_qasi7cy.ts(67,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_diag: number = 0;\n    let sum_diag_2: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_col = 0;\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_row != sum || sum_col != sum) {\n            return false;\n        }\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_diag += my_matrix[i][i];\n        sum_diag_2 += my_matrix[i][my_matrix.length - i - 1];\n    }\n    if (sum_diag != sum || sum_diag_2 != sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_of_rows.push(0);\n        sum_of_cols.push(0);\n    }\n    sum_of_diagonals.push(0);\n    sum_of_diagonals.push(0);\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_rows[i] += my_matrix[i][j];\n            sum_of_cols[j] += my_matrix[i][j];\n            if (i == j) {\n                sum_of_diagonals[0] += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_of_diagonals[1] += my_matrix[i][j];\n            }\n        }\n    }\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] != sum_of_rows[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_cols.length; i++) {\n        if (sum_of_cols[i] != sum_of_cols[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_diagonals.length; i++) {\n        if (sum_of_diagonals[i] != sum_of_diagonals[0]) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_matrix: number = 0;\n    let is_magic_square: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_elements_in_matrix += my_matrix[i][j];\n        }\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_rows[i] += my_matrix[i][j];\n            sum_of_columns[j] += my_matrix[i][j];\n        }\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_of_diagonals[0] += my_matrix[i][i];\n        sum_of_diagonals[1] += my_matrix[i][my_matrix.length - 1 - i];\n    }\n\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_all_elements_in_matrix / my_matrix.length) {\n            is_magic_square = false;\n        }\n    }\n\n    for (let i: number = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] !== sum_of_all_elements_in_matrix / my_matrix.length) {\n            is_magic_square = false;\n        }\n    }\n\n    for (let i: number = 0; i <\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123138,
      "stdout": "../../../../tmp/tmpdqtyv7uj.ts(41,9): error TS1005: ';' expected.\n../../../../tmp/tmpdqtyv7uj.ts(52,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_row = 0;\n    let sum_of_col = 0;\n    let sum_of_diagonal = 0;\n    let sum_of_other_diagonal = 0;\n    let n = my_matrix.length;\n    for (let i = 0; i < n; i++) {\n        sum_of_row = 0;\n        sum_of_col = 0;\n        for (let j = 0; j < n; j++) {\n            sum_of_row += my_matrix[i][j];\n            sum_of_col += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum_of_diagonal = sum_of_row;\n            sum_of_other_diagonal = sum_of_col;\n        }\n        if (sum_of_row != sum_of_diagonal || sum_of_col != sum_of_other_diagonal) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum === 0) {\n            sum = sum_row;\n        } else if (sum !== sum_row) {\n            return false;\n        }\n        if (sum !== sum_column) {\n            return false;\n        }\n        sum_diagonal += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum !== sum_diagonal || sum !== sum_diagonal_2) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diag: number[] = [];\n    let sum_of_diag_inverse: number[] = [];\n    let sum_of_all: number = 0;\n    let sum_of_all_inverse: number = 0;\n    let sum_of_all_diag: number = 0;\n    let sum_of_all_diag_inverse: number = 0;\n    let sum_of_all_cols: number = 0;\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_rows_inverse: number = 0;\n    let sum_of_all_cols_inverse: number = 0;\n    let sum_of_all_rows_diag: number = 0;\n    let sum_of_all_rows_diag_inverse: number = 0;\n    let sum_of_all_cols_diag: number = 0;\n    let sum_of_all_cols_diag_inverse: number = 0;\n    let sum_of_all_rows_cols: number = 0;\n    let sum_of_all_rows_cols_inverse: number = 0;\n    let sum_of_all_rows_cols_diag: number = 0;\n    let sum_of_all_rows_cols_diag_inverse: number = 0;\n    let sum_of_all_rows_cols_diag_inverse_inverse: number = 0;\n    let sum_of_all_rows_cols_diag_inverse_inverse_inverse: number = 0;\n    let sum_of_all_rows_cols_diag_inverse_inverse_inverse_inverse: number = 0;\n    let sum_of_all_rows_cols_diag_inverse_inverse_inverse_inverse_inverse: number = 0;\n    let sum_of_all_rows_cols_diag_inverse_inverse_inverse_inverse_inverse_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123138,
      "stdout": "../../../../tmp/tmpzrz1fr3v.ts(39,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum = 0;\n    let sum_diagonal = 0;\n    let sum_diagonal_2 = 0;\n    let sum_row = 0;\n    let sum_column = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum == 0) {\n            sum = sum_row;\n        }\n        if (sum != sum_row || sum != sum_column) {\n            return false;\n        }\n        sum_diagonal += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[my_matrix.length - 1 - i][i];\n    }\n    if (sum != sum_diagonal || sum != sum_diagonal_2) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let is_magic_square: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[0] || sum_of_columns[i] !== sum_of_columns[0] || sum_of_diagonals[i] !== sum_of_diagonals[0]) {\n            is_magic_square = false;\n        }\n    }\n\n    return is_magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123138,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoh35m02t.js:42:12)\n    at Object.<anonymous> (/tmp/tmpoh35m02t.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_first_row: number = 0;\n    let sum_of_first_column: number = 0;\n    let sum_of_second_diagonal: number = 0;\n    let sum_of_third_diagonal: number = 0;\n    let is_magic_square: boolean = false;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_first_row += my_matrix[0][j];\n            sum_of_first_column += my_matrix[i][0];\n            sum_of_second_diagonal += my_matrix[i][i];\n            sum_of_third_diagonal += my_matrix[i][my_matrix.length - 1 - i];\n            sum_of_all_elements += my_matrix[i][j];\n            if (i == my_matrix.length - 1) {\n                sum_of_rows.push(sum_of_all_elements);\n                sum_of_all_elements = 0;\n            }\n            if (j == my_matrix[i].length - 1) {\n                sum_of_columns.push(sum_of_all_elements);\n                sum_of_all_elements = 0;\n            }\n        }\n    }\n    sum_of_diagonals.push(sum_of_second_diagonal);\n    sum_of_diagonals.push(sum_of_third_diagonal);\n    if (sum_of_first_row == sum_of_first_column && sum_of_first_row == sum_of_second_diagonal && sum_of_first_row == sum_of_third_diagonal) {\n        for (let i: number = 0; i < sum_of\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123138,
      "stdout": "../../../../tmp/tmprniwlkwn.ts(33,1): error TS1005: ';' expected.\n../../../../tmp/tmprniwlkwn.ts(33,9): error TS1005: ')' expected.\n../../../../tmp/tmprniwlkwn.ts(44,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diag: number[] = [];\n    let sum_of_rev_diag: number[] = [];\n    let sum_of_all: number = 0;\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_cols: number = 0;\n    let sum_of_all_diag: number = 0;\n    let sum_of_all_rev_diag: number = 0;\n    let sum_of_all_matrix: number = 0;\n    let sum_of_all_matrix_rows: number = 0;\n    let sum_of_all_matrix_cols: number = 0;\n    let sum_of_all_matrix_diag: number = 0;\n    let sum_of_all_matrix_rev_diag: number = 0;\n    let is_magic_square: boolean = false;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_matrix += my_matrix[i][j];\n        }\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_matrix_rows += my_matrix[i][j];\n        }\n        sum_of_all_rows += sum_of_all_matrix_rows;\n        sum_of_rows.push(sum_of_all_matrix_rows);\n        sum_of_all_matrix_rows = 0;\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_matrix_cols += my_matrix[j][i];\n        }\n       \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123138,
      "stdout": "../../../../tmp/tmpaojbalf6.ts(50,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_row != sum || sum_column != sum) {\n            return false;\n        }\n        sum_row = 0;\n        sum_column = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_diagonal_1 != sum || sum_diagonal_2 != sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123138,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxnved1ax.js:36:12)\n    at Object.<anonymous> (/tmp/tmpxnved1ax.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum = 0;\n    let sum_diag = 0;\n    let sum_diag2 = 0;\n    let sum_row = 0;\n    let sum_col = 0;\n    let n = my_matrix.length;\n    for (let i = 0; i < n; i++) {\n        sum = sum + my_matrix[i][i];\n        sum_diag = sum_diag + my_matrix[i][n - i - 1];\n    }\n    if (sum !== sum_diag) {\n        return false;\n    }\n    for (let i = 0; i < n; i++) {\n        sum_row = 0;\n        sum_col = 0;\n        for (let j = 0; j < n; j++) {\n            sum_row = sum_row + my_matrix[i][j];\n            sum_col = sum_col + my_matrix[j][i];\n        }\n        if (sum_row !== sum || sum_col !== sum) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal: number = 0;\n    let sum_reverse_diagonal: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let flag: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum = sum_row;\n        }\n        if (sum != sum_row || sum != sum_column) {\n            flag = false;\n            break;\n        }\n        sum_diagonal += my_matrix[i][i];\n        sum_reverse_diagonal += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum != sum_diagonal || sum != sum_reverse_diagonal) {\n        flag = false;\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_all += my_matrix[i][j];\n        }\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        let sum_of_row: number = 0;\n        let sum_of_column: number = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_row += my_matrix[i][j];\n            sum_of_column += my_matrix[j][i];\n        }\n        sum_of_rows.push(sum_of_row);\n        sum_of_columns.push(sum_of_column);\n    }\n    let sum_of_diagonal_1: number = 0;\n    let sum_of_diagonal_2: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_diagonal_1 += my_matrix[i][i];\n        sum_of_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum_of_diagonal_1);\n    sum_of_diagonals.push(sum_of_diagonal_2);\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] != sum_of_all || sum_of_columns[i] != sum_of_all || sum_of_diagonals[i] != sum_of_all) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123138,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpftkc0og6.js:40:12)\n    at Object.<anonymous> (/tmp/tmpftkc0og6.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_first_row = 0;\n    let sum_of_first_column = 0;\n    let sum_of_second_row = 0;\n    let sum_of_second_column = 0;\n    let sum_of_third_row = 0;\n    let sum_of_third_column = 0;\n    let sum_of_first_diagonal = 0;\n    let sum_of_second_diagonal = 0;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            if (i == 0) {\n                sum_of_first_row += my_matrix[i][j];\n            }\n            if (i == 1) {\n                sum_of_second_row += my_matrix[i][j];\n            }\n            if (i == 2) {\n                sum_of_third_row += my_matrix[i][j];\n            }\n            if (j == 0) {\n                sum_of_first_column += my_matrix[i][j];\n            }\n            if (j == 1) {\n                sum_of_second_column += my_matrix[i][j];\n            }\n            if (j == 2) {\n                sum_of_third_column += my_matrix[i][j];\n            }\n            if (i == j) {\n                sum_of_first_diagonal += my_matrix[i][j];\n            }\n            if (i + j == 2) {\n                sum_of_second_diagonal += my_matrix[i][j];\n            }\n        }\n    }\n    if (sum_of_first_row == sum_of_second_row && sum_of_second_row == sum_of_third_row && sum_of_first_row == sum_of_first_column && sum_of_first_column == sum_of_second_column && sum_of_second_column == sum_of_third_column && sum_of_first_row == sum_of_first_diagonal && sum_of\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123138,
      "stdout": "../../../../tmp/tmpcej9dw0q.ts(41,1): error TS1005: ')' expected.\n../../../../tmp/tmpcej9dw0q.ts(52,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let diagonal1: number = 0;\n    let diagonal2: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        let row: number = 0;\n        let column: number = 0;\n        diagonal1 += my_matrix[i][i];\n        diagonal2 += my_matrix[i][my_matrix.length - i - 1];\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            row += my_matrix[i][j];\n            column += my_matrix[j][i];\n        }\n        if (i === 0) {\n            sum = row;\n        }\n        if (sum !== row || sum !== column) {\n            return false;\n        }\n    }\n    if (diagonal1 !== sum || diagonal2 !== sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[0] || sum_of_columns[i] !== sum_of_columns[0] || sum_of_diagonals[i] !== sum_of_diagonals[0]) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123138,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpdf0wbbzu.js:40:12)\n    at Object.<anonymous> (/tmp/tmpdf0wbbzu.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_matrix: number = 0;\n    let is_magic_square: boolean = true;\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_elements_in_matrix += my_matrix[i][j];\n        }\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_rows[i] += my_matrix[i][j];\n            sum_of_columns[j] += my_matrix[i][j];\n            if (i == j) {\n                sum_of_diagonals[0] += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_of_diagonals[1] += my_matrix[i][j];\n            }\n        }\n    }\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] != sum_of_all_elements) {\n            is_magic_square = false;\n        }\n    }\n    for (let i = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] != sum_of_all_elements) {\n            is_magic_square = false;\n        }\n    }\n    for (let i = 0; i < sum_of_diagonals.length; i++) {\n        if (sum_of_diagonals[i] != sum_of_all_elements) {\n            is_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123138,
      "stdout": "../../../../tmp/tmphp7_x_mk.ts(50,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_elements_in_row: number = 0;\n    let sum_of_elements_in_column: number = 0;\n    let sum_of_elements_in_diagonal: number = 0;\n    let sum_of_elements_in_anti_diagonal: number = 0;\n    let sum_of_elements_in_square: number = 0;\n    let is_magic_square: boolean = false;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_elements += my_matrix[i][j];\n        }\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_elements_in_row += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum_of_elements_in_row);\n        sum_of_elements_in_row = 0;\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_elements_in_column += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum_of_elements_in_column);\n        sum_of_elements_in_column = 0;\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123138,
      "stdout": "../../../../tmp/tmp16rlbwgc.ts(49,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_diag: number = 0;\n    let sum_diag2: number = 0;\n    let sum_row_prev: number = 0;\n    let sum_col_prev: number = 0;\n    let sum_diag_prev: number = 0;\n    let sum_diag2_prev: number = 0;\n    let is_magic: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n            if (i === j) {\n                sum_diag += my_matrix[i][j];\n            }\n            if (i + j === my_matrix.length - 1) {\n                sum_diag2 += my_matrix[i][j];\n            }\n        }\n        if (i > 0) {\n            if (sum_row !== sum_row_prev || sum_col !== sum_col_prev || sum_diag !== sum_diag_prev || sum_diag2 !== sum_diag2_prev) {\n                is_magic = false;\n            }\n        }\n        sum_row_prev = sum_row;\n        sum_col_prev = sum_col;\n        sum_diag_prev = sum_diag;\n        sum_diag2_prev = sum_diag2;\n        sum_row = 0;\n        sum_col = 0;\n        sum_diag = 0;\n        sum_diag2 = 0;\n    }\n    return is_magic;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123138,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgfpck3a5.js:42:12)\n    at Object.<anonymous> (/tmp/tmpgfpck3a5.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_elements: number = 0;\n    let sum_of_elements_in_row: number = 0;\n    let sum_of_elements_in_column: number = 0;\n    let sum_of_elements_in_diagonal: number = 0;\n    let sum_of_elements_in_diagonal_2: number = 0;\n    let sum_of_elements_in_diagonal_3: number = 0;\n    let sum_of_elements_in_diagonal_4: number = 0;\n    let sum_of_elements_in_diagonal_5: number = 0;\n    let sum_of_elements_in_diagonal_6: number = 0;\n    let sum_of_elements_in_diagonal_7: number = 0;\n    let sum_of_elements_in_diagonal_8: number = 0;\n    let sum_of_elements_in_diagonal_9: number = 0;\n    let sum_of_elements_in_diagonal_10: number = 0;\n    let sum_of_elements_in_diagonal_11: number = 0;\n    let sum_of_elements_in_diagonal_12: number = 0;\n    let sum_of_elements_in_diagonal_13: number = 0;\n    let sum_of_elements_in_diagonal_14: number = 0;\n    let sum_of_elements_in_diagonal_15: number = 0;\n    let sum_of_elements_in_diagonal_16: number = 0;\n    let sum_of_elements_in_diagonal_17: number = 0;\n    let sum_of_elements_in_diagonal_18: number = 0;\n    let sum_of_elements_in_diagonal_19: number = 0;\n    let sum_of_elements_in_diagonal_20: number = 0;\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123140,
      "stdout": "../../../../tmp/tmps5oop4si.ts(41,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_matrix: number = 0;\n    let is_magic_square: boolean = false;\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let l: number = 0;\n\n    //calculate sum of all elements in matrix\n    for (i = 0; i < my_matrix.length; i++) {\n        for (j = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_elements_in_matrix += my_matrix[i][j];\n        }\n    }\n\n    //calculate sum of rows\n    for (i = 0; i < my_matrix.length; i++) {\n        for (j = 0; j < my_matrix[i].length; j++) {\n            sum_of_rows[i] += my_matrix[i][j];\n        }\n    }\n\n    //calculate sum of columns\n    for (i = 0; i < my_matrix.length; i++) {\n        for (j = 0; j < my_matrix[i].length; j++) {\n            sum_of_columns[i] += my_matrix[j][i];\n        }\n    }\n\n    //calculate sum of diagonals\n    for (i = 0; i < my_matrix.length; i++) {\n        for (j = 0; j < my_matrix[i].length; j++) {\n            if (i === j) {\n                sum_of_diagonals[0] += my_matrix[i][j];\n            }\n            if (i + j === my_matrix.length - 1) {\n                sum_of_diagonals[1] += my_matrix[i][j];\n            }\n        }\n    }\n\n    //check if all sums are\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123141,
      "stdout": "../../../../tmp/tmp5_yan4cu.ts(59,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_elements: number = 0;\n    let sum_of_elements_in_row: number = 0;\n    let sum_of_elements_in_column: number = 0;\n    let sum_of_elements_in_diagonal: number = 0;\n    let sum_of_elements_in_diagonal_2: number = 0;\n    let is_magic_square: boolean = false;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_elements += my_matrix[i][j];\n        }\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_elements_in_row += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum_of_elements_in_row);\n        sum_of_elements_in_row = 0;\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_elements_in_column += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum_of_elements_in_column);\n        sum_of_elements_in_column = 0;\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            if (i == j) {\n                sum_of_elements_in_diagonal += my_matrix[i][j];\n            }\n        }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123141,
      "stdout": "../../../../tmp/tmpocapgx0l.ts(52,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_columns: number = 0;\n    let sum_of_all_diagonals: number = 0;\n    let sum_of_all_elements: number = 0;\n    let is_magic_square: boolean = false;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_elements += my_matrix[i][j];\n            if (i === j) {\n                sum_of_diagonals[0] += my_matrix[i][j];\n            }\n            if (i + j === my_matrix.length - 1) {\n                sum_of_diagonals[1] += my_matrix[i][j];\n            }\n            sum_of_rows[i] += my_matrix[i][j];\n            sum_of_columns[j] += my_matrix[i][j];\n        }\n    }\n    sum_of_all_rows = sum_of_rows.reduce((a, b) => a + b, 0);\n    sum_of_all_columns = sum_of_columns.reduce((a, b) => a + b, 0);\n    sum_of_all_diagonals = sum_of_diagonals.reduce((a, b) => a + b, 0);\n    if (sum_of_all_rows === sum_of_all_columns && sum_of_all_columns === sum_of_all_diagonals && sum_of_all_diagonals === sum_of_all_elements) {\n        is_magic_square = true;\n    }\n    return is_magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpw_mny41u.js:35:12)\n    at Object.<anonymous> (/tmp/tmpw_mny41u.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_elements: number = 0;\n    let sum_of_diagonal_left_to_right: number = 0;\n    let sum_of_diagonal_right_to_left: number = 0;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        let sum_of_row: number = 0;\n        let sum_of_column: number = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_of_row += my_matrix[i][j];\n            sum_of_column += my_matrix[j][i];\n            sum_of_elements += my_matrix[i][j];\n            if (i === j) {\n                sum_of_diagonal_left_to_right += my_matrix[i][j];\n            }\n            if (i + j === my_matrix.length - 1) {\n                sum_of_diagonal_right_to_left += my_matrix[i][j];\n            }\n        }\n        sum_of_rows.push(sum_of_row);\n        sum_of_columns.push(sum_of_column);\n    }\n    sum_of_diagonals.push(sum_of_diagonal_left_to_right);\n    sum_of_diagonals.push(sum_of_diagonal_right_to_left);\n\n    let sum_of_rows_set: Set<number> = new Set(sum_of_rows);\n    let sum_of_columns_set: Set<number> = new Set(sum_of_columns);\n    let sum_of_diagonals_set: Set<number> = new Set(sum_of_diagonals);\n\n    if (sum_of_rows_set.size === 1 && sum_of_columns_set.size === 1 && sum_of_diagonals_set.size ===\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123141,
      "stdout": "../../../../tmp/tmp6b9nlu35.ts(35,9): error TS1005: ')' expected.\n../../../../tmp/tmp6b9nlu35.ts(46,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum = 0;\n    let sum_row = 0;\n    let sum_col = 0;\n    let sum_diag = 0;\n    let sum_diag_2 = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_col = 0;\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n            if (i == j) {\n                sum_diag += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_diag_2 += my_matrix[i][j];\n            }\n        }\n        if (sum_row != sum || sum_col != sum) {\n            return false;\n        }\n    }\n    if (sum_diag != sum || sum_diag_2 != sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let is_magic_square: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (i === 0) {\n            sum = sum_row;\n        }\n        if (sum !== sum_row || sum !== sum_column) {\n            is_magic_square = false;\n        }\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum !== sum_diagonal_1 || sum !== sum_diagonal_2) {\n        is_magic_square = false;\n    }\n    return is_magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n\n    //Sum of rows\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n\n    //Sum of columns\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n\n    //Sum of diagonals\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n\n    //Check if all sums are equal\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[0]) {\n            return false;\n        }\n    }\n\n    for (let i: number = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] !== sum_of_columns[0]) {\n            return false;\n        }\n    }\n\n    for (let i: number = 0; i < sum_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123141,
      "stdout": "../../../../tmp/tmprtdch80q.ts(53,1): error TS1005: ';' expected.\n../../../../tmp/tmprtdch80q.ts(53,9): error TS1005: ')' expected.\n../../../../tmp/tmprtdch80q.ts(64,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_matrix: number = 0;\n    let is_magic_square: boolean = true;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_elements_in_matrix += my_matrix[i][j];\n        }\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        sum_of_all_elements += sum_of_rows[i];\n    }\n\n    if (sum_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123141,
      "stdout": "../../../../tmp/tmp3aooumxm.ts(50,1): error TS1005: ')' expected.\n../../../../tmp/tmp3aooumxm.ts(61,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_rows: number[] = [];\n    let sum_cols: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_diag2: number[] = [];\n    let sum_all: number[] = [];\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_rows[i] = 0;\n        sum_cols[i] = 0;\n        sum_diag[i] = 0;\n        sum_diag2[i] = 0;\n        sum_all[i] = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_rows[i] += my_matrix[i][j];\n            sum_cols[i] += my_matrix[j][i];\n            if (i == j) {\n                sum_diag[i] += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_diag2[i] += my_matrix[i][j];\n            }\n        }\n        sum_all[i] = sum_rows[i] + sum_cols[i] + sum_diag[i] + sum_diag2[i];\n    }\n    for (let i: number = 0; i < sum_all.length; i++) {\n        if (sum_all[i] != sum_all[0]) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpkzgh0096.js:36:12)\n    at Object.<anonymous> (/tmp/tmpkzgh0096.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal: number = 0;\n    let sum_reverse_diagonal: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let result: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum === 0) {\n            sum = sum_row;\n        }\n        if (sum_row !== sum || sum_column !== sum) {\n            result = false;\n            break;\n        }\n        sum_diagonal += my_matrix[i][i];\n        sum_reverse_diagonal += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_diagonal !== sum || sum_reverse_diagonal !== sum) {\n        result = false;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum === 0) {\n            sum = sum_row;\n        }\n        if (sum !== sum_row || sum !== sum_column) {\n            return false;\n        }\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum !== sum_diagonal_1 || sum !== sum_diagonal_2) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let result: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_row != sum || sum_column != sum) {\n            result = false;\n        }\n    }\n    if (sum_diagonal_1 != sum || sum_diagonal_2 != sum) {\n        result = false;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp70vziyvq.js:37:12)\n    at Object.<anonymous> (/tmp/tmp70vziyvq.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let result: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (i === 0) {\n            sum = sum_row;\n        }\n        if (sum_row !== sum || sum_column !== sum) {\n            result = false;\n        }\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_diagonal !== sum || sum_diagonal_2 !== sum) {\n        result = false;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum = 0;\n    let sum_diag1 = 0;\n    let sum_diag2 = 0;\n    let sum_row = 0;\n    let sum_col = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_diag1 += my_matrix[i][i];\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_diag2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n        }\n        if (sum_row !== sum) {\n            return false;\n        }\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_col = 0;\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_col !== sum) {\n            return false;\n        }\n    }\n    if (sum_diag1 !== sum || sum_diag2 !== sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal1: number = 0;\n    let sum_diagonal2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let is_magic_square: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (i === 0) {\n            sum = sum_row;\n        }\n        if (sum_row !== sum || sum_column !== sum) {\n            is_magic_square = false;\n            break;\n        }\n        sum_diagonal1 += my_matrix[i][i];\n        sum_diagonal2 += my_matrix[i][my_matrix.length - i - 1];\n    }\n    if (sum_diagonal1 !== sum || sum_diagonal2 !== sum) {\n        is_magic_square = false;\n    }\n    return is_magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] != sum_of_rows[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] != sum_of_columns[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_diagonals.length; i++) {\n        if (sum_of_diagonals[i] != sum_of_di\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123141,
      "stdout": "../../../../tmp/tmpma3cd1lp.ts(43,1): error TS1005: ')' expected.\n../../../../tmp/tmpma3cd1lp.ts(54,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let result: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (i === 0) {\n            sum = sum_row;\n        }\n        if (sum_row !== sum || sum_column !== sum) {\n            result = false;\n        }\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - i - 1];\n    }\n\n    if (sum_diagonal !== sum || sum_diagonal_2 !== sum) {\n        result = false;\n    }\n\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_columns: number = 0;\n    let sum_of_all_diagonals: number = 0;\n    let sum_of_all_elements: number = 0;\n    let magic_square_test_result: boolean = true;\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let l: number = 0;\n    let m: number = 0;\n    let n: number = 0;\n    let o: number = 0;\n    let p: number = 0;\n    let q: number = 0;\n    let r: number = 0;\n    let s: number = 0;\n    let t: number = 0;\n    let u: number = 0;\n    let v: number = 0;\n    let w: number = 0;\n    let x: number = 0;\n    let y: number = 0;\n    let z: number = 0;\n    let aa: number = 0;\n    let bb: number = 0;\n    let cc: number = 0;\n    let dd: number = 0;\n    let ee: number = 0;\n    let ff: number = 0;\n    let gg: number = 0;\n    let hh: number = 0;\n    let ii: number = 0;\n    let jj: number = 0;\n    let kk: number = 0;\n    let ll: number = 0;\n    let mm: number = 0;\n    let nn: number = 0;\n    let oo: number = 0;\n    let pp: number = 0;\n    let qq: number = 0;\n    let rr: number = 0;\n    let ss: number = 0;\n    let tt: number = 0;\n    let uu: number = 0;\n    let vv: number = 0;\n    let ww: number = 0;\n    let xx: number =\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123141,
      "stdout": "../../../../tmp/tmpz0rr8cms.ts(53,9): error TS1005: ',' expected.\n../../../../tmp/tmpz0rr8cms.ts(64,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let n: number = my_matrix.length;\n\n    for (let i = 0; i < n; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_row != sum_column) {\n            return false;\n        }\n        if (i == 0) {\n            sum = sum_row;\n        }\n        if (sum_row != sum) {\n            return false;\n        }\n        sum_diagonal += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][n - i - 1];\n    }\n    if (sum_diagonal != sum || sum_diagonal_2 != sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diag: number[] = [];\n    let sum_of_diag_2: number[] = [];\n    let sum_of_all: number = 0;\n    let sum_of_all_2: number = 0;\n    let sum_of_all_3: number = 0;\n    let sum_of_all_4: number = 0;\n    let sum_of_all_5: number = 0;\n    let sum_of_all_6: number = 0;\n    let sum_of_all_7: number = 0;\n    let sum_of_all_8: number = 0;\n    let sum_of_all_9: number = 0;\n    let sum_of_all_10: number = 0;\n    let sum_of_all_11: number = 0;\n    let sum_of_all_12: number = 0;\n    let sum_of_all_13: number = 0;\n    let sum_of_all_14: number = 0;\n    let sum_of_all_15: number = 0;\n    let sum_of_all_16: number = 0;\n    let sum_of_all_17: number = 0;\n    let sum_of_all_18: number = 0;\n    let sum_of_all_19: number = 0;\n    let sum_of_all_20: number = 0;\n    let sum_of_all_21: number = 0;\n    let sum_of_all_22: number = 0;\n    let sum_of_all_23: number = 0;\n    let sum_of_all_24: number = 0;\n    let sum_of_all_25: number = 0;\n    let sum_of_all_26: number = 0;\n    let sum_of_all_27: number = 0;\n    let sum_of_all_28: number = 0;\n    let sum_of_all_29: number = 0;\n    let sum_of_all_30: number = 0;\n    let sum_of_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123141,
      "stdout": "../../../../tmp/tmp_r7uyc32.ts(49,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_row: number = 0;\n    let sum_of_column: number = 0;\n    let sum_of_diagonal: number = 0;\n    let sum_of_diagonal_2: number = 0;\n    let sum_of_matrix: number = 0;\n    let sum_of_matrix_2: number = 0;\n    let sum_of_matrix_3: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_of_row += my_matrix[i][j];\n            sum_of_column += my_matrix[j][i];\n            sum_of_matrix += my_matrix[i][j];\n            sum_of_matrix_2 += my_matrix[j][i];\n            sum_of_matrix_3 += my_matrix[i][j];\n        }\n        sum_of_diagonal += my_matrix[i][i];\n        sum_of_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_of_row == sum_of_column && sum_of_column == sum_of_diagonal && sum_of_diagonal == sum_of_diagonal_2 && sum_of_diagonal_2 == sum_of_matrix && sum_of_matrix == sum_of_matrix_2 && sum_of_matrix_2 == sum_of_matrix_3) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp59gv1crf.js:31:12)\n    at Object.<anonymous> (/tmp/tmp59gv1crf.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let result: boolean = true;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[0]) {\n            result = false;\n        }\n    }\n\n    for (let i = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] !== sum_of_columns[0]) {\n            result = false;\n        }\n    }\n\n    for (let i = 0; i < sum_of_diagonals.length; i++) {\n        if (sum_of_diagonals[i] !== sum_of_diagonals[0]) {\n           \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123141,
      "stdout": "../../../../tmp/tmpor38xwj1.ts(63,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let sum_of_first_diagonal: number = 0;\n    let sum_of_second_diagonal: number = 0;\n    let is_magic_square: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum += my_matrix[i][j];\n            if (i === j) {\n                sum_of_first_diagonal += my_matrix[i][j];\n            }\n            if (i + j === my_matrix.length - 1) {\n                sum_of_second_diagonal += my_matrix[i][j];\n            }\n        }\n        sum_of_rows.push(sum);\n        sum_of_diagonals.push(sum_of_first_diagonal);\n        sum_of_diagonals.push(sum_of_second_diagonal);\n        sum = 0;\n        sum_of_first_diagonal = 0;\n        sum_of_second_diagonal = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[0] || sum_of_columns[i] !== sum_of_columns[0] || sum_of_diagonals[i] !== sum_of_diagonals[0]) {\n            is_magic_square = false;\n        }\n    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123143,
      "stdout": "../../../../tmp/tmpp1rbx_7t.ts(51,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_anti_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_a_row: number = 0;\n    let sum_of_all_elements_in_a_column: number = 0;\n    let sum_of_all_elements_in_a_diagonal: number = 0;\n    let sum_of_all_elements_in_a_anti_diagonal: number = 0;\n    let is_magic_square: boolean = false;\n\n    //calculate the sum of all elements in the matrix\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_elements += my_matrix[i][j];\n        }\n    }\n\n    //calculate the sum of all elements in each row\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_elements_in_a_row += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum_of_all_elements_in_a_row);\n        sum_of_all_elements_in_a_row = 0;\n    }\n\n    //calculate the sum of all elements in each column\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_elements_in_a_column += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum_of_all_elements_in_a_column);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123143,
      "stdout": "../../../../tmp/tmp9in_m4zy.ts(48,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_reverse_diagonals: number[] = [];\n    let sum: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            if (i == j) {\n                sum += my_matrix[i][j];\n            }\n        }\n        sum_of_diagonals.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            if (i + j == my_matrix.length - 1) {\n                sum += my_matrix[i][j];\n            }\n        }\n        sum_of_reverse_diagonals.push(sum);\n        sum = 0;\n    }\n    if (sum_of_rows.every(function (value, index, array) {\n        return value == array[0];\n    }) && sum_of_columns.every(function (value, index, array) {\n        return value == array[0];\n    })\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123143,
      "stdout": "../../../../tmp/tmprpb56zmy.ts(45,1): error TS1005: ')' expected.\n../../../../tmp/tmprpb56zmy.ts(56,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_rows: number = 0;\n    let sum_cols: number = 0;\n    let sum_diag: number = 0;\n    let sum_diag2: number = 0;\n    let sum_magic: number = 0;\n    let magic_square: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_rows = 0;\n        sum_cols = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_rows += my_matrix[i][j];\n            sum_cols += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum_magic = sum_rows;\n        }\n        if (sum_magic != sum_rows || sum_magic != sum_cols) {\n            magic_square = false;\n        }\n        sum_diag += my_matrix[i][i];\n        sum_diag2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_diag != sum_diag2 || sum_diag != sum_magic) {\n        magic_square = false;\n    }\n    return magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123143,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let n: number = my_matrix.length;\n    for (let i: number = 0; i < n; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_row != sum_column) {\n            return false;\n        }\n        if (i == 0) {\n            sum = sum_row;\n        }\n        if (sum_row != sum) {\n            return false;\n        }\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][n - 1 - i];\n    }\n    if (sum_diagonal_1 != sum_diagonal_2) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123143,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let sum_row_1: number = 0;\n    let sum_row_2: number = 0;\n    let sum_row_3: number = 0;\n    let sum_column_1: number = 0;\n    let sum_column_2: number = 0;\n    let sum_column_3: number = 0;\n    let sum_row_1_1: number = 0;\n    let sum_row_1_2: number = 0;\n    let sum_row_1_3: number = 0;\n    let sum_row_2_1: number = 0;\n    let sum_row_2_2: number = 0;\n    let sum_row_2_3: number = 0;\n    let sum_row_3_1: number = 0;\n    let sum_row_3_2: number = 0;\n    let sum_row_3_3: number = 0;\n    let sum_column_1_1: number = 0;\n    let sum_column_1_2: number = 0;\n    let sum_column_1_3: number = 0;\n    let sum_column_2_1: number = 0;\n    let sum_column_2_2: number = 0;\n    let sum_column_2_3: number = 0;\n    let sum_column_3_1: number = 0;\n    let sum_column_3_2: number = 0;\n    let sum_column_3_3: number = 0;\n    let sum_diagonal_1_1: number = 0;\n    let sum_diagonal_1_2: number = 0;\n    let sum_diagonal_1_3: number = 0;\n    let sum_diagonal_2_1: number = 0;\n    let sum_diagonal_2_2: number = 0;\n    let sum_diagonal_2_3: number = 0;\n\n    for (let i = 0; i < my_matrix.length;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123143,
      "stdout": "../../../../tmp/tmp0yokemqr.ts(39,9): error TS1005: ')' expected.\n../../../../tmp/tmp0yokemqr.ts(50,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum = 0;\n    let sum_diagonal = 0;\n    let sum_diagonal_2 = 0;\n    let sum_row = 0;\n    let sum_column = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_diagonal += my_matrix[i][i];\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - i - 1];\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n        }\n        if (sum_row != sum) {\n            return false;\n        }\n        sum_row = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_column != sum) {\n            return false;\n        }\n        sum_column = 0;\n    }\n    if (sum_diagonal != sum || sum_diagonal_2 != sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_rows: number[] = [];\n    let sum_cols: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_diag_rev: number[] = [];\n    let sum_all: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_rows[i] = 0;\n        sum_cols[i] = 0;\n        sum_diag[i] = 0;\n        sum_diag_rev[i] = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_rows[i] += my_matrix[i][j];\n            sum_cols[i] += my_matrix[j][i];\n            sum_diag[i] += my_matrix[i][i];\n            sum_diag_rev[i] += my_matrix[i][my_matrix.length - 1 - i];\n            sum_all += my_matrix[i][j];\n        }\n    }\n    let sum_rows_set = new Set(sum_rows);\n    let sum_cols_set = new Set(sum_cols);\n    let sum_diag_set = new Set(sum_diag);\n    let sum_diag_rev_set = new Set(sum_diag_rev);\n    if (sum_rows_set.size == 1 && sum_cols_set.size == 1 && sum_diag_set.size == 1 && sum_diag_rev_set.size == 1) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123143,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6g1m1cdi.js:33:12)\n    at Object.<anonymous> (/tmp/tmp6g1m1cdi.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_diag: number = 0;\n    let sum_diag2: number = 0;\n    let sum_row_check: number = 0;\n    let sum_col_check: number = 0;\n    let sum_diag_check: number = 0;\n    let sum_diag2_check: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_col = 0;\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum_row_check = sum_row;\n            sum_col_check = sum_col;\n        }\n        if (sum_row != sum_row_check || sum_col != sum_col_check) {\n            return false;\n        }\n        sum_diag += my_matrix[i][i];\n        sum_diag2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_diag != sum_row_check || sum_diag2 != sum_row_check) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let sum_row_2: number = 0;\n    let sum_column_2: number = 0;\n    let sum_row_3: number = 0;\n    let sum_column_3: number = 0;\n    let sum_row_4: number = 0;\n    let sum_column_4: number = 0;\n    let sum_row_5: number = 0;\n    let sum_column_5: number = 0;\n    let sum_row_6: number = 0;\n    let sum_column_6: number = 0;\n    let sum_row_7: number = 0;\n    let sum_column_7: number = 0;\n    let sum_row_8: number = 0;\n    let sum_column_8: number = 0;\n    let sum_row_9: number = 0;\n    let sum_column_9: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n            if (i == j) {\n                sum_diagonal_1 += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_diagonal_2 += my_matrix[i][j];\n            }\n            if (i == 0) {\n                sum_row += my_matrix[i][j];\n            }\n            if (j == 0) {\n                sum_column += my_matrix[i][j];\n            }\n            if (i == 1) {\n                sum_row_2 += my_matrix[i][j];\n            }\n            if (j == 1) {\n                sum_column_2 += my_matrix[i][j];\n            }\n            if\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123144,
      "stdout": "../../../../tmp/tmpfu6bhbqv.ts(46,1): error TS1005: '(' expected.\n../../../../tmp/tmpfu6bhbqv.ts(46,9): error TS1005: ')' expected.\n../../../../tmp/tmpfu6bhbqv.ts(57,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum = 0;\n    let sum_diagonal = 0;\n    let sum_diagonal2 = 0;\n    let sum_row = 0;\n    let sum_column = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_diagonal += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_diagonal2 += my_matrix[my_matrix.length - 1 - i][i];\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n        }\n        if (sum_row !== sum) {\n            return false;\n        }\n        sum_row = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_column !== sum) {\n            return false;\n        }\n        sum_column = 0;\n    }\n    if (sum === sum_diagonal && sum === sum_diagonal2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_columns: number = 0;\n    let sum_of_all_diagonals: number = 0;\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_matrix: number = 0;\n    let sum_of_all_elements_in_matrix_2: number = 0;\n    let sum_of_all_elements_in_matrix_3: number = 0;\n    let sum_of_all_elements_in_matrix_4: number = 0;\n    let sum_of_all_elements_in_matrix_5: number = 0;\n    let sum_of_all_elements_in_matrix_6: number = 0;\n    let sum_of_all_elements_in_matrix_7: number = 0;\n    let sum_of_all_elements_in_matrix_8: number = 0;\n    let sum_of_all_elements_in_matrix_9: number = 0;\n    let sum_of_all_elements_in_matrix_10: number = 0;\n    let sum_of_all_elements_in_matrix_11: number = 0;\n    let sum_of_all_elements_in_matrix_12: number = 0;\n    let sum_of_all_elements_in_matrix_13: number = 0;\n    let sum_of_all_elements_in_matrix_14: number = 0;\n    let sum_of_all_elements_in_matrix_15: number = 0;\n    let sum_of_all_elements_in_matrix_16: number = 0;\n    let sum_of_all_elements_in_matrix_17: number = 0;\n    let sum_of_all\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123143,
      "stdout": "../../../../tmp/tmp5w8sf48x.ts(40,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diag1 = 0;\n    let sum_diag2 = 0;\n    let sum_row = 0;\n    let sum_col = 0;\n    let sum_row_prev = 0;\n    let sum_col_prev = 0;\n    let sum_diag1_prev = 0;\n    let sum_diag2_prev = 0;\n    let sum_row_next = 0;\n    let sum_col_next = 0;\n    let sum_diag1_next = 0;\n    let sum_diag2_next = 0;\n    let sum_row_next_next = 0;\n    let sum_col_next_next = 0;\n    let sum_diag1_next_next = 0;\n    let sum_diag2_next_next = 0;\n    let sum_row_next_next_next = 0;\n    let sum_col_next_next_next = 0;\n    let sum_diag1_next_next_next = 0;\n    let sum_diag2_next_next_next = 0;\n    let sum_row_next_next_next_next = 0;\n    let sum_col_next_next_next_next = 0;\n    let sum_diag1_next_next_next_next = 0;\n    let sum_diag2_next_next_next_next = 0;\n    let sum_row_next_next_next_next_next = 0;\n    let sum_col_next_next_next_next_next = 0;\n    let sum_diag1_next_next_next_next_next = 0;\n    let sum_diag2_next_next_next_next_next = 0;\n    let sum_row_next_next_next_next_next_next = 0;\n    let sum_col_next_next_next_next_next_next = 0;\n    let sum_diag1_next_next_next_next_next_next = 0;\n    let sum_diag2_next_next_next_next_next_next = 0;\n    let sum_row_next_next_next_next_next\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123144,
      "stdout": "../../../../tmp/tmpcahs0fn7.ts(47,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number[] = [];\n    let sum_col: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_diag_rev: number[] = [];\n    let sum: number = 0;\n    let sum_row_col: number = 0;\n    let sum_diag_rev_col: number = 0;\n    let sum_diag_rev_row: number = 0;\n    let sum_diag_col: number = 0;\n    let sum_diag_row: number = 0;\n    let sum_diag_rev_row_col: number = 0;\n    let sum_diag_row_col: number = 0;\n    let sum_row_col_diag: number = 0;\n    let sum_row_col_diag_rev: number = 0;\n    let sum_row_col_diag_rev_row: number = 0;\n    let sum_row_col_diag_row: number = 0;\n    let sum_row_col_diag_rev_col: number = 0;\n    let sum_row_col_diag_col: number = 0;\n    let sum_row_col_diag_rev_row_col: number = 0;\n    let sum_row_col_diag_row_col: number = 0;\n    let sum_row_col_diag_rev_row_col_row: number = 0;\n    let sum_row_col_diag_row_col_row: number = 0;\n    let sum_row_col_diag_rev_row_col_col: number = 0;\n    let sum_row_col_diag_row_col_col: number = 0;\n    let sum_row_col_diag_rev_row_col_row_col: number = 0;\n    let sum_row_col_diag_row_col_row_col: number = 0;\n    let sum_row_col_diag_rev_row_col_row_col_row: number = 0;\n    let sum_row_col_diag_row_col_row_col_row: number = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123144,
      "stdout": "../../../../tmp/tmp98_180he.ts(42,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_row: number[] = [];\n    let sum_of_col: number[] = [];\n    let sum_of_diag: number[] = [];\n    let sum_of_anti_diag: number[] = [];\n    let sum: number = 0;\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let l: number = 0;\n    let m: number = 0;\n    let n: number = 0;\n    let o: number = 0;\n    let p: number = 0;\n    let q: number = 0;\n    let r: number = 0;\n    let s: number = 0;\n    let t: number = 0;\n    let u: number = 0;\n    let v: number = 0;\n    let w: number = 0;\n    let x: number = 0;\n    let y: number = 0;\n    let z: number = 0;\n    let aa: number = 0;\n    let bb: number = 0;\n    let cc: number = 0;\n    let dd: number = 0;\n    let ee: number = 0;\n    let ff: number = 0;\n    let gg: number = 0;\n    let hh: number = 0;\n    let ii: number = 0;\n    let jj: number = 0;\n    let kk: number = 0;\n    let ll: number = 0;\n    let mm: number = 0;\n    let nn: number = 0;\n    let oo: number = 0;\n    let pp: number = 0;\n    let qq: number = 0;\n    let rr: number = 0;\n    let ss: number = 0;\n    let tt: number = 0;\n    let uu: number = 0;\n    let vv: number = 0;\n    let ww: number = 0;\n    let xx: number = 0;\n    let yy: number = 0;\n    let zz: number = 0;\n    let aaa: number = 0;\n    let bbb: number = 0;\n    let ccc: number = 0;\n    let d\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123144,
      "stdout": "../../../../tmp/tmpbfqzx6p3.ts(67,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_cols.push(sum);\n        sum = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] != sum_of_rows[0]) {\n            return false;\n        }\n    }\n    for (let i = 0; i < sum_of_cols.length; i++) {\n        if (sum_of_cols[i] != sum_of_cols[0]) {\n            return false;\n        }\n    }\n    for (let i = 0; i < sum_of_diagonals.length; i++) {\n        if (sum_of_diagonals[i] != sum_of_diagonals[0]) {\n            return false;\n        }\n    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123144,
      "stdout": "../../../../tmp/tmpho837grc.ts(58,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_elements: number = 0;\n    let sum_of_elements_in_row: number = 0;\n    let sum_of_elements_in_column: number = 0;\n    let sum_of_elements_in_diagonal: number = 0;\n    let sum_of_elements_in_diagonal_2: number = 0;\n    let is_magic_square: boolean = true;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_elements += my_matrix[i][j];\n        }\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_elements_in_row += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum_of_elements_in_row);\n        sum_of_elements_in_row = 0;\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_elements_in_column += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum_of_elements_in_column);\n        sum_of_elements_in_column = 0;\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_elements_in_diagonal += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum_of_elements_in_diagonal);\n\n    for (let i = 0; i <\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123144,
      "stdout": "../../../../tmp/tmp4jyhv4a4.ts(41,9): error TS1005: ';' expected.\n../../../../tmp/tmp4jyhv4a4.ts(52,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_row != sum_column) {\n            return false;\n        }\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_diagonal_1 != sum_diagonal_2) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let sum_array: number[] = [];\n    let sum_array_index: number = 0;\n    let magic_square: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        sum_array[sum_array_index] = sum_row;\n        sum_array_index++;\n        sum_array[sum_array_index] = sum_column;\n        sum_array_index++;\n        sum_row = 0;\n        sum_column = 0;\n    }\n    sum_array[sum_array_index] = sum_diagonal_1;\n    sum_array_index++;\n    sum_array[sum_array_index] = sum_diagonal_2;\n    for (let i: number = 0; i < sum_array.length - 1; i++) {\n        if (sum_array[i] !== sum_array[i + 1]) {\n            magic_square = false;\n        }\n    }\n    return magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123144,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let n: number = my_matrix.length;\n    for (let i: number = 0; i < n; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_row != sum) {\n            return false;\n        }\n        if (sum_column != sum) {\n            return false;\n        }\n        sum = sum_row;\n    }\n    for (let i: number = 0; i < n; i++) {\n        sum_diagonal += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][n - i - 1];\n    }\n    if (sum_diagonal != sum) {\n        return false;\n    }\n    if (sum_diagonal_2 != sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123144,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpn0irkh7f.js:39:12)\n    at Object.<anonymous> (/tmp/tmpn0irkh7f.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_columns: number = 0;\n    let sum_of_all_diagonals: number = 0;\n    let is_magic_square: boolean = false;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_rows += my_matrix[i][j];\n            sum_of_all_columns += my_matrix[j][i];\n            if (i == j) {\n                sum_of_all_diagonals += my_matrix[i][j];\n            }\n        }\n        sum_of_rows.push(sum_of_all_rows);\n        sum_of_columns.push(sum_of_all_columns);\n        sum_of_diagonals.push(sum_of_all_diagonals);\n        sum_of_all_rows = 0;\n        sum_of_all_columns = 0;\n        sum_of_all_diagonals = 0;\n    }\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] == sum_of_columns[i] && sum_of_rows[i] == sum_of_diagonals[i]) {\n            is_magic_square = true;\n        } else {\n            is_magic_square = false;\n            break;\n        }\n    }\n    return is_magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123144,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmphs_r0pn7.js:39:12)\n    at Object.<anonymous> (/tmp/tmphs_r0pn7.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let is_magic_square: boolean = true;\n\n    //calculate the sum of the first row\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row += my_matrix[0][i];\n    }\n\n    //calculate the sum of the first column\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_column += my_matrix[i][0];\n    }\n\n    //calculate the sum of the diagonal from left to right\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal_1 += my_matrix[i][i];\n    }\n\n    //calculate the sum of the diagonal from right to left\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n\n    //calculate the sum of the rows\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum += my_matrix[i][j];\n        }\n        if (sum != sum_row) {\n            is_magic_square = false;\n        }\n    }\n\n    //calculate the sum of the columns\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum += my_matrix[j][i];\n        }\n        if (sum != sum_column) {\n            is_magic_square = false;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123144,
      "stdout": "../../../../tmp/tmpc2wrt8r5.ts(61,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number[] = [];\n    let sum_col: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_diag_rev: number[] = [];\n    let sum_row_col: number = 0;\n    let sum_row_col_rev: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row[i] = 0;\n        sum_col[i] = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row[i] += my_matrix[i][j];\n            sum_col[i] += my_matrix[j][i];\n            if (i === j) {\n                sum_diag[i] = my_matrix[i][j];\n            }\n            if (i + j === my_matrix.length - 1) {\n                sum_diag_rev[i] = my_matrix[i][j];\n            }\n        }\n        sum_row_col += sum_row[i];\n        sum_row_col_rev += sum_col[i];\n    }\n    let sum_diag_rev_total: number = 0;\n    for (let i: number = 0; i < sum_diag_rev.length; i++) {\n        sum_diag_rev_total += sum_diag_rev[i];\n    }\n    let sum_diag_total: number = 0;\n    for (let i: number = 0; i < sum_diag.length; i++) {\n        sum_diag_total += sum_diag[i];\n    }\n    if (sum_diag_total === sum_diag_rev_total && sum_diag_rev_total === sum_row_col && sum_row_col === sum_row_col_rev) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123144,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpletyhsqm.js:41:12)\n    at Object.<anonymous> (/tmp/tmpletyhsqm.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum = 0;\n    let sum_row = 0;\n    let sum_col = 0;\n    let sum_diag = 0;\n    let sum_diag2 = 0;\n    let n = my_matrix.length;\n    for (let i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (let i = 0; i < n; i++) {\n        sum_row = 0;\n        sum_col = 0;\n        for (let j = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_row != sum || sum_col != sum) {\n            return false;\n        }\n    }\n    for (let i = 0; i < n; i++) {\n        sum_diag += my_matrix[i][i];\n        sum_diag2 += my_matrix[i][n - i - 1];\n    }\n    if (sum_diag != sum || sum_diag2 != sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123146,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let n: number = my_matrix.length;\n    let sum: number = 0;\n    let sum2: number = 0;\n    let sum3: number = 0;\n    let sum4: number = 0;\n    let sum5: number = 0;\n    let sum6: number = 0;\n    let sum7: number = 0;\n    let sum8: number = 0;\n    for (let i: number = 0; i < n; i++) {\n        sum = sum + my_matrix[i][i];\n        sum2 = sum2 + my_matrix[i][n - i - 1];\n        for (let j: number = 0; j < n; j++) {\n            sum3 = sum3 + my_matrix[i][j];\n            sum4 = sum4 + my_matrix[j][i];\n            if (i == j) {\n                sum5 = sum5 + my_matrix[i][j];\n            }\n            if (i + j == n - 1) {\n                sum6 = sum6 + my_matrix[i][j];\n            }\n            if (i < j) {\n                sum7 = sum7 + my_matrix[i][j];\n            }\n            if (i > j) {\n                sum8 = sum8 + my_matrix[i][j];\n            }\n        }\n    }\n    if (sum == sum2 && sum == sum3 && sum == sum4 && sum == sum5 && sum == sum6 && sum == sum7 && sum == sum8) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123146,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpz0qzeomg.js:42:12)\n    at Object.<anonymous> (/tmp/tmpz0qzeomg.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum = 0;\n    let diagonal1 = 0;\n    let diagonal2 = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        let row = 0;\n        let column = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            row += my_matrix[i][j];\n            column += my_matrix[j][i];\n            if (i == j) {\n                diagonal1 += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                diagonal2 += my_matrix[i][j];\n            }\n        }\n        if (i == 0) {\n            sum = row;\n        }\n        if (row != sum || column != sum) {\n            return false;\n        }\n    }\n    if (diagonal1 != sum || diagonal2 != sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123146,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diag_1: number = 0;\n    let sum_diag_2: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diag_1 += my_matrix[i][i];\n        sum_diag_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_diag_1 != sum_diag_2) {\n        return false;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        let sum_row: number = 0;\n        let sum_col: number = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (sum == 0) {\n            sum = sum_row;\n        }\n        if (sum != sum_row || sum != sum_col) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123146,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number[] = [];\n    let sum_col: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_diag_rev: number[] = [];\n    let sum: number = 0;\n    let sum_row_i: number = 0;\n    let sum_col_i: number = 0;\n    let sum_diag_i: number = 0;\n    let sum_diag_rev_i: number = 0;\n    let sum_row_j: number = 0;\n    let sum_col_j: number = 0;\n    let sum_diag_j: number = 0;\n    let sum_diag_rev_j: number = 0;\n    let sum_row_k: number = 0;\n    let sum_col_k: number = 0;\n    let sum_diag_k: number = 0;\n    let sum_diag_rev_k: number = 0;\n    let sum_row_l: number = 0;\n    let sum_col_l: number = 0;\n    let sum_diag_l: number = 0;\n    let sum_diag_rev_l: number = 0;\n    let sum_row_m: number = 0;\n    let sum_col_m: number = 0;\n    let sum_diag_m: number = 0;\n    let sum_diag_rev_m: number = 0;\n    let sum_row_n: number = 0;\n    let sum_col_n: number = 0;\n    let sum_diag_n: number = 0;\n    let sum_diag_rev_n: number = 0;\n    let sum_row_o: number = 0;\n    let sum_col_o: number = 0;\n    let sum_diag_o: number = 0;\n    let sum_diag_rev_o: number = 0;\n    let sum_row_p: number = 0;\n    let sum_col_p: number = 0;\n    let sum_diag_p: number = 0;\n    let sum_diag_rev_p: number = 0;\n    let sum_row_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123146,
      "stdout": "../../../../tmp/tmp9k_ouaj6.ts(52,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_column: number = 0;\n    let sum_row: number = 0;\n    let result: boolean = true;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_column = 0;\n        sum_row = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_column += my_matrix[j][i];\n            sum_row += my_matrix[i][j];\n        }\n        if (i == 0) {\n            sum = sum_column;\n        }\n        if (sum != sum_column || sum != sum_row) {\n            result = false;\n            break;\n        }\n        sum_diagonal += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - i - 1];\n    }\n    if (sum != sum_diagonal || sum != sum_diagonal_2) {\n        result = false;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123146,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let result: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum = sum_row;\n        }\n        if (sum_row != sum || sum_column != sum) {\n            result = false;\n        }\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_diagonal_1 != sum || sum_diagonal_2 != sum) {\n        result = false;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123146,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diags: number[] = [];\n    let sum: number = 0;\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let l: number = 0;\n    let m: number = 0;\n    let n: number = 0;\n    let o: number = 0;\n    let p: number = 0;\n    let q: number = 0;\n    let r: number = 0;\n    let s: number = 0;\n    let t: number = 0;\n    let u: number = 0;\n    let v: number = 0;\n    let w: number = 0;\n    let x: number = 0;\n    let y: number = 0;\n    let z: number = 0;\n    let aa: number = 0;\n    let bb: number = 0;\n    let cc: number = 0;\n    let dd: number = 0;\n    let ee: number = 0;\n    let ff: number = 0;\n    let gg: number = 0;\n    let hh: number = 0;\n    let ii: number = 0;\n    let jj: number = 0;\n    let kk: number = 0;\n    let ll: number = 0;\n    let mm: number = 0;\n    let nn: number = 0;\n    let oo: number = 0;\n    let pp: number = 0;\n    let qq: number = 0;\n    let rr: number = 0;\n    let ss: number = 0;\n    let tt: number = 0;\n    let uu: number = 0;\n    let vv: number = 0;\n    let ww: number = 0;\n    let xx: number = 0;\n    let yy: number = 0;\n    let zz: number = 0;\n    let aaa: number = 0;\n    let bbb: number = 0;\n    let ccc: number = 0;\n    let ddd: number = 0;\n    let eee: number = 0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123146,
      "stdout": "../../../../tmp/tmp2jio01et.ts(67,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_row: number = 0;\n    let sum_of_all_elements_in_column: number = 0;\n    let sum_of_all_elements_in_diagonals: number = 0;\n    let sum_of_all_elements_in_diagonals_2: number = 0;\n    let sum_of_all_elements_in_diagonals_3: number = 0;\n    let sum_of_all_elements_in_diagonals_4: number = 0;\n    let sum_of_all_elements_in_diagonals_5: number = 0;\n    let sum_of_all_elements_in_diagonals_6: number = 0;\n    let sum_of_all_elements_in_diagonals_7: number = 0;\n    let sum_of_all_elements_in_diagonals_8: number = 0;\n    let sum_of_all_elements_in_diagonals_9: number = 0;\n    let sum_of_all_elements_in_diagonals_10: number = 0;\n    let sum_of_all_elements_in_diagonals_11: number = 0;\n    let sum_of_all_elements_in_diagonals_12: number = 0;\n    let sum_of_all_elements_in_diagonals_13: number = 0;\n    let sum_of_all_elements_in_diagonals_14: number = 0;\n    let sum_of_all_elements_in_diagonals_15: number = 0;\n    let sum_of_all_elements_in_diagonals_16: number = 0;\n    let sum_of_all_elements_in_diagonals_17: number = 0;\n    let sum_of_all\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123146,
      "stdout": "../../../../tmp/tmpfx6p9fp2.ts(38,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diags: number[] = [];\n    let sum: number = 0;\n    let is_magic_square: boolean = false;\n\n    //calculate sum of rows\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n\n    //calculate sum of columns\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_cols.push(sum);\n        sum = 0;\n    }\n\n    //calculate sum of diagonals\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diags.push(sum);\n    sum = 0;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diags.push(sum);\n    sum = 0;\n\n    //check if all sums are equal\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] === sum_of_rows[0] && sum_of_cols[i] === sum_of_cols[0] && sum_of_diags[i] === sum_of_diags[0]) {\n            is_magic_square = true;\n        } else {\n            is_magic_square = false;\n            break;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123146,
      "stdout": "../../../../tmp/tmpsczstye0.ts(58,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let flag: boolean = true;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_row != sum_column) {\n            flag = false;\n            break;\n        }\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_diagonal_1 != sum_diagonal_2) {\n        flag = false;\n    }\n    sum = sum_diagonal_1;\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix.length; j++) {\n            if (my_matrix[i][j] < 1 || my_matrix[i][j] > my_matrix.length * my_matrix.length) {\n                flag = false;\n                break;\n            }\n        }\n    }\n    if (flag) {\n        console.log(\"The matrix is a magic square and the sum of each row, column and diagonal is: \" + sum);\n    }\n    else {\n        console.log(\"The matrix is not a magic square\");\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123147,
      "stdout": "The matrix is a magic square and the sum of each row, column and diagonal is: 34\nThe matrix is a magic square and the sum of each row, column and diagonal is: 15\nThe matrix is not a magic square\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_row: number = 0;\n    let sum_of_all_elements_in_column: number = 0;\n    let sum_of_all_elements_in_diagonal: number = 0;\n    let sum_of_all_elements_in_diagonal_2: number = 0;\n    let sum_of_all_elements_in_diagonal_3: number = 0;\n    let sum_of_all_elements_in_diagonal_4: number = 0;\n    let sum_of_all_elements_in_diagonal_5: number = 0;\n    let sum_of_all_elements_in_diagonal_6: number = 0;\n    let sum_of_all_elements_in_diagonal_7: number = 0;\n    let sum_of_all_elements_in_diagonal_8: number = 0;\n    let sum_of_all_elements_in_diagonal_9: number = 0;\n    let sum_of_all_elements_in_diagonal_10: number = 0;\n    let sum_of_all_elements_in_diagonal_11: number = 0;\n    let sum_of_all_elements_in_diagonal_12: number = 0;\n    let sum_of_all_elements_in_diagonal_13: number = 0;\n    let sum_of_all_elements_in_diagonal_14: number = 0;\n    let sum_of_all_elements_in_diagonal_15: number = 0;\n    let sum_of_all_elements_in_diagonal_16: number = 0;\n    let sum_of_all_elements_in_diagonal_17: number = 0;\n    let sum_of_all_elements_in_diagonal_18: number = 0;\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123146,
      "stdout": "../../../../tmp/tmpzlbwanqc.ts(39,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number[] = [];\n    let sum_col: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_diag2: number[] = [];\n    let sum_row_col: number = 0;\n    let sum_row_col2: number = 0;\n    let sum_row_col3: number = 0;\n    let sum_row_col4: number = 0;\n    let sum_row_col5: number = 0;\n    let sum_row_col6: number = 0;\n    let sum_row_col7: number = 0;\n    let sum_row_col8: number = 0;\n    let sum_row_col9: number = 0;\n    let sum_row_col10: number = 0;\n    let sum_row_col11: number = 0;\n    let sum_row_col12: number = 0;\n    let sum_row_col13: number = 0;\n    let sum_row_col14: number = 0;\n    let sum_row_col15: number = 0;\n    let sum_row_col16: number = 0;\n    let sum_row_col17: number = 0;\n    let sum_row_col18: number = 0;\n    let sum_row_col19: number = 0;\n    let sum_row_col20: number = 0;\n    let sum_row_col21: number = 0;\n    let sum_row_col22: number = 0;\n    let sum_row_col23: number = 0;\n    let sum_row_col24: number = 0;\n    let sum_row_col25: number = 0;\n    let sum_row_col26: number = 0;\n    let sum_row_col27: number = 0;\n    let sum_row_col28: number = 0;\n    let sum_row_col29: number = 0;\n    let sum_row_col30: number = 0;\n    let sum_row_col31: number = 0;\n    let sum_row_col32: number = 0;\n    let sum_row_col33: number = 0;\n    let sum\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123146,
      "stdout": "../../../../tmp/tmp6a4e7ppz.ts(52,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n    }\n    sum = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    for (let i = 1; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] != sum_of_rows[i - 1]) {\n            return false;\n        }\n    }\n    for (let i = 1; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] != sum_of_columns[i - 1]) {\n            return false;\n        }\n    }\n    for (let i = 1; i < sum_of_diagonals.length; i++) {\n        if (sum_of_diagonals[i] != sum_of_diagonals[i - 1]) {\n            return false;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123146,
      "stdout": "../../../../tmp/tmpox1pc6z8.ts(56,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let sum_all: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_row != sum_column) {\n            return false;\n        }\n        sum_all += sum_row;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_diagonal_1 != sum_diagonal_2) {\n        return false;\n    }\n    if (sum_diagonal_1 != sum_all / my_matrix.length) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_diagonals_inverted: number[] = [];\n    let sum_of_all: number = 0;\n    let sum_of_all_inverted: number = 0;\n    let sum_of_all_diagonals: number = 0;\n    let sum_of_all_diagonals_inverted: number = 0;\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_columns: number = 0;\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_inverted: number = 0;\n    let sum_of_all_elements_diagonals: number = 0;\n    let sum_of_all_elements_diagonals_inverted: number = 0;\n    let sum_of_all_elements_rows: number = 0;\n    let sum_of_all_elements_columns: number = 0;\n    let sum_of_all_elements_all: number = 0;\n    let sum_of_all_elements_all_inverted: number = 0;\n    let sum_of_all_elements_all_diagonals: number = 0;\n    let sum_of_all_elements_all_diagonals_inverted: number = 0;\n    let sum_of_all_elements_all_rows: number = 0;\n    let sum_of_all_elements_all_columns: number = 0;\n    let sum_of_all_elements_all_all: number = 0;\n    let sum_of_all_elements_all_all_inverted: number = 0;\n    let sum_of_all_elements_all_all_diagonals: number = 0;\n    let sum_of_all_elements_all_all_diagonals_inverted: number = 0;\n    let sum_of_all_elements_all_all_rows: number\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123146,
      "stdout": "../../../../tmp/tmp01x6lzlh.ts(41,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_column: number = 0;\n    let sum_row: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n            if (i == j) {\n                sum_diagonal += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_diagonal_2 += my_matrix[i][j];\n            }\n            sum_column += my_matrix[j][i];\n            sum_row += my_matrix[i][j];\n        }\n        if (sum_row != sum || sum_column != sum) {\n            return false;\n        }\n        sum_row = 0;\n        sum_column = 0;\n    }\n    if (sum_diagonal != sum || sum_diagonal_2 != sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpe4q4abkf.js:34:12)\n    at Object.<anonymous> (/tmp/tmpe4q4abkf.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_row: number = 0;\n    let sum_of_column: number = 0;\n    let sum_of_diagonal: number = 0;\n    let sum_of_reverse_diagonal: number = 0;\n    let sum_of_all: number = 0;\n    let flag: boolean = false;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_row = 0;\n        sum_of_column = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_row += my_matrix[i][j];\n            sum_of_column += my_matrix[j][i];\n            if (i == j) {\n                sum_of_diagonal += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_of_reverse_diagonal += my_matrix[i][j];\n            }\n        }\n        if (sum_of_row != sum_of_column) {\n            flag = false;\n        } else {\n            flag = true;\n        }\n    }\n    if (sum_of_diagonal != sum_of_reverse_diagonal) {\n        flag = false;\n    } else {\n        flag = true;\n    }\n    return flag;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diag_1: number = 0;\n    let sum_diag_2: number = 0;\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let n: number = my_matrix.length;\n    for (let i: number = 0; i < n; i++) {\n        sum_row = 0;\n        sum_col = 0;\n        for (let j: number = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (sum == 0) {\n            sum = sum_row;\n        }\n        if (sum != sum_row || sum != sum_col) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < n; i++) {\n        sum_diag_1 += my_matrix[i][i];\n        sum_diag_2 += my_matrix[i][n - i - 1];\n    }\n    if (sum != sum_diag_1 || sum != sum_diag_2) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number[] = [];\n    let sum_col: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_diag_rev: number[] = [];\n    let sum_row_col: number = 0;\n    let sum_row_col_rev: number = 0;\n    let sum_diag_rev_col: number = 0;\n    let sum_diag_rev_row: number = 0;\n    let sum_diag_col: number = 0;\n    let sum_diag_row: number = 0;\n    let sum_diag_rev_col_rev: number = 0;\n    let sum_diag_rev_row_rev: number = 0;\n    let sum_diag_col_rev: number = 0;\n    let sum_diag_row_rev: number = 0;\n    let sum_diag_rev_col_rev_rev: number = 0;\n    let sum_diag_rev_row_rev_rev: number = 0;\n    let sum_diag_col_rev_rev: number = 0;\n    let sum_diag_row_rev_rev: number = 0;\n    let sum_diag_rev_col_rev_rev_rev: number = 0;\n    let sum_diag_rev_row_rev_rev_rev: number = 0;\n    let sum_diag_col_rev_rev_rev: number = 0;\n    let sum_diag_row_rev_rev_rev: number = 0;\n    let sum_diag_rev_col_rev_rev_rev_rev: number = 0;\n    let sum_diag_rev_row_rev_rev_rev_rev: number = 0;\n    let sum_diag_col_rev_rev_rev_rev: number = 0;\n    let sum_diag_row_rev_rev_rev_rev: number = 0;\n    let sum_diag_rev_col_rev_rev_rev_rev_rev: number = 0;\n    let sum_diag_rev_row_rev_rev_rev_rev_rev: number = 0;\n    let sum\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123146,
      "stdout": "../../../../tmp/tmpk1d6inzl.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_diag: number = 0;\n    let sum_diag2: number = 0;\n    let sum_row_temp: number = 0;\n    let sum_col_temp: number = 0;\n    let sum_diag_temp: number = 0;\n    let sum_diag2_temp: number = 0;\n    let is_magic: boolean = true;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row_temp = 0;\n        sum_col_temp = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_row_temp += my_matrix[i][j];\n            sum_col_temp += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum_row = sum_row_temp;\n            sum_col = sum_col_temp;\n        }\n        if (sum_row != sum_row_temp || sum_col != sum_col_temp) {\n            is_magic = false;\n            break;\n        }\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_diag_temp += my_matrix[i][i];\n        sum_diag2_temp += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_diag_temp != sum_diag || sum_diag2_temp != sum_diag2) {\n        is_magic = false;\n    }\n    return is_magic;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp94u3s6jy.js:40:12)\n    at Object.<anonymous> (/tmp/tmp94u3s6jy.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let result: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_row !== sum || sum_column !== sum) {\n            result = false;\n            break;\n        }\n    }\n    if (sum_diagonal_1 !== sum || sum_diagonal_2 !== sum) {\n        result = false;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpm24jfjbm.js:38:12)\n    at Object.<anonymous> (/tmp/tmpm24jfjbm.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_rows_and_columns: number[] = [];\n    let sum_of_diagonals_and_columns: number[] = [];\n    let sum_of_diagonals_and_rows: number[] = [];\n    let sum_of_diagonals_and_rows_and_columns: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_a_row: number = 0;\n    let sum_of_all_elements_in_a_column: number = 0;\n    let sum_of_all_elements_in_a_diagonal: number = 0;\n    let sum_of_all_elements_in_a_diagonal_and_row: number = 0;\n    let sum_of_all_elements_in_a_diagonal_and_column: number = 0;\n    let sum_of_all_elements_in_a_diagonal_and_row_and_column: number = 0;\n    let sum_of_all_elements_in_a_row_and_column: number = 0;\n    let sum_of_all_elements_in_a_row_and_column_and_diagonal: number = 0;\n    let sum_of_all_elements_in_a_row_and_diagonal: number = 0;\n    let sum_of_all_elements_in_a_column_and_diagonal: number = 0;\n    let sum_of_all_elements_in_a_column_and_row: number = 0;\n    let sum_of_all_elements_in_a_column_and_row_and_diagonal: number = 0;\n    let sum_of_all_elements_in_a_column_and_diagonal_and_row: number = 0;\n    let sum_of_all_elements_in_a_diagonal_and_column\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123147,
      "stdout": "../../../../tmp/tmph44lq43n.ts(36,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal_1 = 0;\n    let sum_diagonal_2 = 0;\n    let sum_row = 0;\n    let sum_column = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n        sum_row = 0;\n        sum_column = 0;\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_row != sum_diagonal_1 || sum_column != sum_diagonal_1) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123149,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfnpp4r9z.js:25:12)\n    at Object.<anonymous> (/tmp/tmpfnpp4r9z.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number[] = [];\n    let sum_col: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_diag2: number[] = [];\n    let sum_all: number[] = [];\n    let sum_all2: number[] = [];\n    let sum_all3: number[] = [];\n    let sum_all4: number[] = [];\n    let sum_all5: number[] = [];\n    let sum_all6: number[] = [];\n    let sum_all7: number[] = [];\n    let sum_all8: number[] = [];\n    let sum_all9: number[] = [];\n    let sum_all10: number[] = [];\n    let sum_all11: number[] = [];\n    let sum_all12: number[] = [];\n    let sum_all13: number[] = [];\n    let sum_all14: number[] = [];\n    let sum_all15: number[] = [];\n    let sum_all16: number[] = [];\n    let sum_all17: number[] = [];\n    let sum_all18: number[] = [];\n    let sum_all19: number[] = [];\n    let sum_all20: number[] = [];\n    let sum_all21: number[] = [];\n    let sum_all22: number[] = [];\n    let sum_all23: number[] = [];\n    let sum_all24: number[] = [];\n    let sum_all25: number[] = [];\n    let sum_all26: number[] = [];\n    let sum_all27: number[] = [];\n    let sum_all28: number[] = [];\n    let sum_all29: number[] = [];\n    let sum_all30: number[] = [];\n    let sum_all31: number[] = [];\n    let sum_all32: number[] = [];\n    let sum_all33: number[] = [];\n    let sum_all34: number[] = [];\n    let sum_all35: number[] = [];\n    let sum_all36: number[] = [];\n    let sum_all37: number[] = [];\n    let sum_all38: number[] = [];\n    let sum_all39: number[]\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123148,
      "stdout": "../../../../tmp/tmpzyp3ohc6.ts(57,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let l: number = 0;\n    let m: number = 0;\n    let n: number = 0;\n    let o: number = 0;\n    let p: number = 0;\n    let q: number = 0;\n    let r: number = 0;\n    let s: number = 0;\n    let t: number = 0;\n    let u: number = 0;\n    let v: number = 0;\n    let w: number = 0;\n    let x: number = 0;\n    let y: number = 0;\n    let z: number = 0;\n    let aa: number = 0;\n    let bb: number = 0;\n    let cc: number = 0;\n    let dd: number = 0;\n    let ee: number = 0;\n    let ff: number = 0;\n    let gg: number = 0;\n    let hh: number = 0;\n    let ii: number = 0;\n    let jj: number = 0;\n    let kk: number = 0;\n    let ll: number = 0;\n    let mm: number = 0;\n    let nn: number = 0;\n    let oo: number = 0;\n    let pp: number = 0;\n    let qq: number = 0;\n    let rr: number = 0;\n    let ss: number = 0;\n    let tt: number = 0;\n    let uu: number = 0;\n    let vv: number = 0;\n    let ww: number = 0;\n    let xx: number = 0;\n    let yy: number = 0;\n    let zz: number = 0;\n    let aaa: number = 0;\n    let bbb: number = 0;\n    let ccc: number = 0;\n    let ddd: number = 0;\n    let eee: number =\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123138,
      "stdout": "../../../../tmp/tmpemsgsigz.ts(56,9): error TS1005: ',' expected.\n../../../../tmp/tmpemsgsigz.ts(67,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diag: number = 0;\n    let sum_of_rev_diag: number = 0;\n    let sum: number = 0;\n    let magic_square: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_of_rows[i] = 0;\n        sum_of_cols[i] = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_rows[i] += my_matrix[i][j];\n            sum_of_cols[i] += my_matrix[j][i];\n            if (i == j) {\n                sum_of_diag += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_of_rev_diag += my_matrix[i][j];\n            }\n        }\n    }\n    sum = sum_of_rows[0];\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] != sum || sum_of_cols[i] != sum) {\n            magic_square = false;\n        }\n    }\n    if (sum_of_diag != sum || sum_of_rev_diag != sum) {\n        magic_square = false;\n    }\n    return magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_reverse_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_first_row: number = 0;\n    let sum_of_first_column: number = 0;\n    let sum_of_first_diagonal: number = 0;\n    let sum_of_first_reverse_diagonal: number = 0;\n    let magic_square_test_result: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_of_rows.push(0);\n        sum_of_columns.push(0);\n        sum_of_diagonals.push(0);\n        sum_of_reverse_diagonals.push(0);\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_rows[i] += my_matrix[i][j];\n            sum_of_columns[j] += my_matrix[i][j];\n            sum_of_all_elements += my_matrix[i][j];\n            if (i === j) {\n                sum_of_diagonals[i] += my_matrix[i][j];\n            }\n            if (i + j === my_matrix.length - 1) {\n                sum_of_reverse_diagonals[i] += my_matrix[i][j];\n            }\n        }\n    }\n\n    sum_of_first_row = sum_of_rows[0];\n    sum_of_first_column = sum_of_columns[0];\n    sum_of_first_diagonal = sum_of_diagonals[0];\n    sum_of_first_reverse_diagonal = sum_of_reverse_diagonals[0];\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123149,
      "stdout": "../../../../tmp/tmp9c_w1s8u.ts(50,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diag: number[] = [];\n    let sum_of_diag_2: number[] = [];\n    let sum_of_elements: number = 0;\n    let sum_of_elements_2: number = 0;\n    let sum_of_elements_3: number = 0;\n    let sum_of_elements_4: number = 0;\n    let sum_of_elements_5: number = 0;\n    let sum_of_elements_6: number = 0;\n    let sum_of_elements_7: number = 0;\n    let sum_of_elements_8: number = 0;\n    let sum_of_elements_9: number = 0;\n    let sum_of_elements_10: number = 0;\n    let sum_of_elements_11: number = 0;\n    let sum_of_elements_12: number = 0;\n    let sum_of_elements_13: number = 0;\n    let sum_of_elements_14: number = 0;\n    let sum_of_elements_15: number = 0;\n    let sum_of_elements_16: number = 0;\n    let sum_of_elements_17: number = 0;\n    let sum_of_elements_18: number = 0;\n    let sum_of_elements_19: number = 0;\n    let sum_of_elements_20: number = 0;\n    let sum_of_elements_21: number = 0;\n    let sum_of_elements_22: number = 0;\n    let sum_of_elements_23: number = 0;\n    let sum_of_elements_24: number = 0;\n    let sum_of_elements_25: number = 0;\n    let sum_of_elements_26: number = 0;\n    let sum_of_elements_27: number = 0;\n    let sum_of_elements_28: number = 0;\n    let sum_of_elements\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123149,
      "stdout": "../../../../tmp/tmppyh2_2fu.ts(47,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_elements: number = 0;\n    let sum_of_rows_columns_diagonals: number[] = [];\n    let sum_of_elements_in_row: number = 0;\n    let sum_of_elements_in_column: number = 0;\n    let sum_of_elements_in_diagonal: number = 0;\n    let sum_of_elements_in_diagonal_2: number = 0;\n    let sum_of_elements_in_diagonal_3: number = 0;\n    let sum_of_elements_in_diagonal_4: number = 0;\n    let sum_of_elements_in_diagonal_5: number = 0;\n    let sum_of_elements_in_diagonal_6: number = 0;\n    let sum_of_elements_in_diagonal_7: number = 0;\n    let sum_of_elements_in_diagonal_8: number = 0;\n    let sum_of_elements_in_diagonal_9: number = 0;\n    let sum_of_elements_in_diagonal_10: number = 0;\n    let sum_of_elements_in_diagonal_11: number = 0;\n    let sum_of_elements_in_diagonal_12: number = 0;\n    let sum_of_elements_in_diagonal_13: number = 0;\n    let sum_of_elements_in_diagonal_14: number = 0;\n    let sum_of_elements_in_diagonal_15: number = 0;\n    let sum_of_elements_in_diagonal_16: number = 0;\n    let sum_of_elements_in_diagonal_17: number = 0;\n    let sum_of_elements_in_diagonal_18: number = 0;\n    let sum_of_elements_in_diagonal_19: number = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123149,
      "stdout": "../../../../tmp/tmput3xqsy8.ts(30,9): error TS1005: ',' expected.\n../../../../tmp/tmput3xqsy8.ts(41,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let is_magic_square: boolean = true;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum == 0) {\n            sum = sum_row;\n        }\n        if (sum_row != sum || sum_column != sum) {\n            is_magic_square = false;\n            break;\n        }\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n\n    if (sum_diagonal_1 != sum || sum_diagonal_2 != sum) {\n        is_magic_square = false;\n    }\n\n    return is_magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number[] = [];\n    let sum_col: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_diag_rev: number[] = [];\n    let sum_row_col: number = 0;\n    let sum_row_col_rev: number = 0;\n    let sum_diag_rev_row: number = 0;\n    let sum_diag_rev_col: number = 0;\n    let sum_diag_row: number = 0;\n    let sum_diag_col: number = 0;\n    let sum_diag_rev_row_col: number = 0;\n    let sum_diag_row_col: number = 0;\n    let sum_diag_rev_row_col_rev: number = 0;\n    let sum_diag_row_col_rev: number = 0;\n    let sum_diag_rev_row_col_rev_row: number = 0;\n    let sum_diag_row_col_rev_row: number = 0;\n    let sum_diag_rev_row_col_rev_col: number = 0;\n    let sum_diag_row_col_rev_col: number = 0;\n    let sum_diag_rev_row_col_rev_row_col: number = 0;\n    let sum_diag_row_col_rev_row_col: number = 0;\n    let sum_diag_rev_row_col_rev_row_col_rev: number = 0;\n    let sum_diag_row_col_rev_row_col_rev: number = 0;\n    let sum_diag_rev_row_col_rev_row_col_rev_row: number = 0;\n    let sum_diag_row_col_rev_row_col_rev_row: number = 0;\n    let sum_diag_rev_row_col_rev_row_col_rev_col: number = 0;\n    let sum_diag_row_col_rev_row_col_rev_col: number = 0;\n    let sum_diag_rev_row_col_rev_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123149,
      "stdout": "../../../../tmp/tmpc1_g1v7h.ts(41,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number[] = [];\n    let sum_col: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_diag_rev: number[] = [];\n    let sum_row_col: number = 0;\n    let sum_row_col_rev: number = 0;\n    let sum_diag_1: number = 0;\n    let sum_diag_2: number = 0;\n    let sum_diag_3: number = 0;\n    let sum_diag_4: number = 0;\n    let sum_diag_5: number = 0;\n    let sum_diag_6: number = 0;\n    let sum_diag_7: number = 0;\n    let sum_diag_8: number = 0;\n    let sum_diag_9: number = 0;\n    let sum_diag_10: number = 0;\n    let sum_diag_11: number = 0;\n    let sum_diag_12: number = 0;\n    let sum_diag_13: number = 0;\n    let sum_diag_14: number = 0;\n    let sum_diag_15: number = 0;\n    let sum_diag_16: number = 0;\n    let sum_diag_17: number = 0;\n    let sum_diag_18: number = 0;\n    let sum_diag_19: number = 0;\n    let sum_diag_20: number = 0;\n    let sum_diag_21: number = 0;\n    let sum_diag_22: number = 0;\n    let sum_diag_23: number = 0;\n    let sum_diag_24: number = 0;\n    let sum_diag_25: number = 0;\n    let sum_diag_26: number = 0;\n    let sum_diag_27: number = 0;\n    let sum_diag_28: number = 0;\n    let sum_diag_29: number = 0;\n    let sum_diag_30: number = 0;\n    let sum_diag_31: number = 0;\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123149,
      "stdout": "../../../../tmp/tmpx64kw7q3.ts(52,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal: number = 0;\n    let sum_reverse_diagonal: number = 0;\n    let i: number;\n    let j: number;\n    for (i = 0; i < my_matrix.length; i++) {\n        sum = 0;\n        for (j = 0; j < my_matrix[i].length; j++) {\n            sum = sum + my_matrix[i][j];\n        }\n        if (i === 0) {\n            sum_diagonal = sum_diagonal + my_matrix[i][i];\n            sum_reverse_diagonal = sum_reverse_diagonal + my_matrix[i][my_matrix.length - 1 - i];\n        }\n        if (sum !== sum_diagonal) {\n            return false;\n        }\n    }\n    if (sum_diagonal !== sum_reverse_diagonal) {\n        return false;\n    }\n    for (j = 0; j < my_matrix.length; j++) {\n        sum = 0;\n        for (i = 0; i < my_matrix[j].length; i++) {\n            sum = sum + my_matrix[i][j];\n        }\n        if (sum !== sum_diagonal) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123149,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpojejq0tx.js:38:12)\n    at Object.<anonymous> (/tmp/tmpojejq0tx.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number[] = [];\n    let sum_col: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_diag2: number[] = [];\n    let sum_row_col: number = 0;\n    let sum_row_col2: number = 0;\n    let sum_row_col3: number = 0;\n    let sum_row_col4: number = 0;\n    let sum_row_col5: number = 0;\n    let sum_row_col6: number = 0;\n    let sum_row_col7: number = 0;\n    let sum_row_col8: number = 0;\n    let sum_row_col9: number = 0;\n    let sum_row_col10: number = 0;\n    let sum_row_col11: number = 0;\n    let sum_row_col12: number = 0;\n    let sum_row_col13: number = 0;\n    let sum_row_col14: number = 0;\n    let sum_row_col15: number = 0;\n    let sum_row_col16: number = 0;\n    let sum_row_col17: number = 0;\n    let sum_row_col18: number = 0;\n    let sum_row_col19: number = 0;\n    let sum_row_col20: number = 0;\n    let sum_row_col21: number = 0;\n    let sum_row_col22: number = 0;\n    let sum_row_col23: number = 0;\n    let sum_row_col24: number = 0;\n    let sum_row_col25: number = 0;\n    let sum_row_col26: number = 0;\n    let sum_row_col27: number = 0;\n    let sum_row_col28: number = 0;\n    let sum_row_col29: number = 0;\n    let sum_row_col30: number = 0;\n    let sum_row_col31: number = 0;\n    let sum_row_col32: number = 0;\n    let sum_row_col33: number = 0;\n    let sum\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123146,
      "stdout": "../../../../tmp/tmp6a4e7ppz.ts(52,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number = 0;\n    let sum_of_columns: number = 0;\n    let sum_of_diagonals: number = 0;\n    let sum_of_diagonals_2: number = 0;\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_2: number = 0;\n    let sum_of_all_elements_3: number = 0;\n    let sum_of_all_elements_4: number = 0;\n    let sum_of_all_elements_5: number = 0;\n    let sum_of_all_elements_6: number = 0;\n    let sum_of_all_elements_7: number = 0;\n    let sum_of_all_elements_8: number = 0;\n    let sum_of_all_elements_9: number = 0;\n    let sum_of_all_elements_10: number = 0;\n    let sum_of_all_elements_11: number = 0;\n    let sum_of_all_elements_12: number = 0;\n    let sum_of_all_elements_13: number = 0;\n    let sum_of_all_elements_14: number = 0;\n    let sum_of_all_elements_15: number = 0;\n    let sum_of_all_elements_16: number = 0;\n    let sum_of_all_elements_17: number = 0;\n    let sum_of_all_elements_18: number = 0;\n    let sum_of_all_elements_19: number = 0;\n    let sum_of_all_elements_20: number = 0;\n    let sum_of_all_elements_21: number = 0;\n    let sum_of_all_elements_22: number = 0;\n    let sum_of_all_elements_23: number = 0;\n    let sum_of_all_elements_24: number = 0;\n    let sum_of_all_elements_25: number = 0;\n    let sum_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123149,
      "stdout": "../../../../tmp/tmpqopv_ktr.ts(44,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let sum_row_temp: number = 0;\n    let sum_column_temp: number = 0;\n    let sum_diagonal_1_temp: number = 0;\n    let sum_diagonal_2_temp: number = 0;\n    let sum_row_temp_2: number = 0;\n    let sum_column_temp_2: number = 0;\n    let sum_diagonal_1_temp_2: number = 0;\n    let sum_diagonal_2_temp_2: number = 0;\n    let sum_row_temp_3: number = 0;\n    let sum_column_temp_3: number = 0;\n    let sum_diagonal_1_temp_3: number = 0;\n    let sum_diagonal_2_temp_3: number = 0;\n    let sum_row_temp_4: number = 0;\n    let sum_column_temp_4: number = 0;\n    let sum_diagonal_1_temp_4: number = 0;\n    let sum_diagonal_2_temp_4: number = 0;\n    let sum_row_temp_5: number = 0;\n    let sum_column_temp_5: number = 0;\n    let sum_diagonal_1_temp_5: number = 0;\n    let sum_diagonal_2_temp_5: number = 0;\n    let sum_row_temp_6: number = 0;\n    let sum_column_temp_6: number = 0;\n    let sum_diagonal_1_temp_6: number = 0;\n    let sum_diagonal_2_temp_6: number = 0;\n    let sum_row_temp_7: number = 0;\n    let sum_column_temp_7: number = 0;\n    let sum_diagonal_1_temp_7: number = 0;\n    let sum_diagonal_2_temp_7: number = 0;\n    let sum_row_temp\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123149,
      "stdout": "../../../../tmp/tmpdhcddncq.ts(47,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let result: boolean = true;\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] != sum_of_rows[0] || sum_of_columns[i] != sum_of_columns[0] || sum_of_diagonals[i] != sum_of_diagonals[0]) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123149,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9z1tbtec.js:42:12)\n    at Object.<anonymous> (/tmp/tmp9z1tbtec.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum = 0;\n    let sum_row = 0;\n    let sum_col = 0;\n    let sum_diag = 0;\n    let sum_diag2 = 0;\n    let n = my_matrix.length;\n    let m = my_matrix[0].length;\n    for (let i = 0; i < n; i++) {\n        sum_row = 0;\n        sum_col = 0;\n        for (let j = 0; j < m; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum = sum_row;\n        }\n        if (sum_row != sum || sum_col != sum) {\n            return false;\n        }\n        sum_diag += my_matrix[i][i];\n        sum_diag2 += my_matrix[i][n - i - 1];\n    }\n    if (sum_diag != sum || sum_diag2 != sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        let sum_of_row: number = 0;\n        let sum_of_column: number = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_row += my_matrix[i][j];\n            sum_of_column += my_matrix[j][i];\n            if (i === j) {\n                sum_of_diagonals[0] += my_matrix[i][j];\n            }\n            if (i + j === my_matrix.length - 1) {\n                sum_of_diagonals[1] += my_matrix[i][j];\n            }\n            sum_of_all += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum_of_row);\n        sum_of_columns.push(sum_of_column);\n    }\n    if (sum_of_rows.every(sum => sum === sum_of_rows[0]) && sum_of_columns.every(sum => sum === sum_of_columns[0]) && sum_of_diagonals.every(sum => sum === sum_of_diagonals[0]) && sum_of_diagonals[0] === sum_of_all / my_matrix.length) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123150,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp5f6n7hlf.js:32:12)\n    at Object.<anonymous> (/tmp/tmp5f6n7hlf.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let diagonal1: number = 0;\n    let diagonal2: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        let row_sum: number = 0;\n        let column_sum: number = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            row_sum += my_matrix[i][j];\n            column_sum += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum = row_sum;\n        }\n        if (row_sum != sum || column_sum != sum) {\n            return false;\n        }\n        diagonal1 += my_matrix[i][i];\n        diagonal2 += my_matrix[i][my_matrix.length - i - 1];\n    }\n    if (diagonal1 != sum || diagonal2 != sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row_1 = 0;\n    let sum_row_2 = 0;\n    let sum_row_3 = 0;\n    let sum_col_1 = 0;\n    let sum_col_2 = 0;\n    let sum_col_3 = 0;\n    let sum_diag_1 = 0;\n    let sum_diag_2 = 0;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row_1 += my_matrix[0][i];\n        sum_row_2 += my_matrix[1][i];\n        sum_row_3 += my_matrix[2][i];\n        sum_col_1 += my_matrix[i][0];\n        sum_col_2 += my_matrix[i][1];\n        sum_col_3 += my_matrix[i][2];\n        sum_diag_1 += my_matrix[i][i];\n        sum_diag_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n\n    if (sum_row_1 === sum_row_2 && sum_row_2 === sum_row_3 && sum_row_3 === sum_col_1 && sum_col_1 === sum_col_2 && sum_col_2 === sum_col_3 && sum_col_3 === sum_diag_1 && sum_diag_1 === sum_diag_2) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_diag: number = 0;\n    let sum_diag2: number = 0;\n    let magic_number: number = 0;\n    let is_magic: boolean = true;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_col = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (i == 0) {\n            magic_number = sum_row;\n        }\n        if (magic_number != sum_row || magic_number != sum_col) {\n            is_magic = false;\n            break;\n        }\n        sum_diag += my_matrix[i][i];\n        sum_diag2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (magic_number != sum_diag || magic_number != sum_diag2) {\n        is_magic = false;\n    }\n    return is_magic;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < sum_of_rows.length - 1; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[i + 1]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_columns.length - 1; i++) {\n        if (sum_of_columns[i] !== sum_of_columns[i + 1]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_diagonals.length - 1; i++) {\n        if (sum_of_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123149,
      "stdout": "../../../../tmp/tmp9pg5pqj_.ts(43,1): error TS1005: ')' expected.\n../../../../tmp/tmp9pg5pqj_.ts(54,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let sum_all: number = 0;\n    let is_magic_square: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_diagonal_1 != sum_diagonal_2) {\n        is_magic_square = false;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_row != sum_diagonal_1 || sum_column != sum_diagonal_1) {\n            is_magic_square = false;\n        }\n    }\n    return is_magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diags: number[] = [];\n    let sum_of_all: number = 0;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_rows[i] = 0;\n        sum_of_cols[i] = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_rows[i] += my_matrix[i][j];\n            sum_of_cols[i] += my_matrix[j][i];\n            sum_of_all += my_matrix[i][j];\n        }\n    }\n    sum_of_diags[0] = 0;\n    sum_of_diags[1] = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_diags[0] += my_matrix[i][i];\n        sum_of_diags[1] += my_matrix[i][my_matrix.length - 1 - i];\n    }\n\n    for (let i = 0; i < sum_of_rows.length - 1; i++) {\n        if (sum_of_rows[i] != sum_of_rows[i + 1]) {\n            return false;\n        }\n    }\n    for (let i = 0; i < sum_of_cols.length - 1; i++) {\n        if (sum_of_cols[i] != sum_of_cols[i + 1]) {\n            return false;\n        }\n    }\n    if (sum_of_diags[0] != sum_of_diags[1]) {\n        return false;\n    }\n    if (sum_of_diags[0] != sum_of_all / my_matrix.length) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number = 0;\n    let sum_of_columns: number = 0;\n    let sum_of_diagonals: number = 0;\n    let sum_of_diagonals_2: number = 0;\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_columns: number = 0;\n    let sum_of_all_diagonals: number = 0;\n    let sum_of_all_diagonals_2: number = 0;\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_2: number = 0;\n    let sum_of_all_elements_3: number = 0;\n    let sum_of_all_elements_4: number = 0;\n    let sum_of_all_elements_5: number = 0;\n    let sum_of_all_elements_6: number = 0;\n    let sum_of_all_elements_7: number = 0;\n    let sum_of_all_elements_8: number = 0;\n    let sum_of_all_elements_9: number = 0;\n    let sum_of_all_elements_10: number = 0;\n    let sum_of_all_elements_11: number = 0;\n    let sum_of_all_elements_12: number = 0;\n    let sum_of_all_elements_13: number = 0;\n    let sum_of_all_elements_14: number = 0;\n    let sum_of_all_elements_15: number = 0;\n    let sum_of_all_elements_16: number = 0;\n    let sum_of_all_elements_17: number = 0;\n    let sum_of_all_elements_18: number = 0;\n    let sum_of_all_elements_19: number = 0;\n    let sum_of_all_elements_20: number = 0;\n    let sum_of_all_elements_21: number = 0;\n    let sum_of_all_e\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123150,
      "stdout": "../../../../tmp/tmppanv8d07.ts(44,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let sum_all: number = 0;\n    let sum_all_row: number = 0;\n    let sum_all_column: number = 0;\n    let sum_all_diagonal: number = 0;\n    let sum_all_diagonal_2: number = 0;\n    let sum_all_diagonal_1: number = 0;\n    let sum_all_row_1: number = 0;\n    let sum_all_column_1: number = 0;\n    let sum_all_row_2: number = 0;\n    let sum_all_column_2: number = 0;\n    let sum_all_row_3: number = 0;\n    let sum_all_column_3: number = 0;\n    let sum_all_row_4: number = 0;\n    let sum_all_column_4: number = 0;\n    let sum_all_row_5: number = 0;\n    let sum_all_column_5: number = 0;\n    let sum_all_row_6: number = 0;\n    let sum_all_column_6: number = 0;\n    let sum_all_row_7: number = 0;\n    let sum_all_column_7: number = 0;\n    let sum_all_row_8: number = 0;\n    let sum_all_column_8: number = 0;\n    let sum_all_row_9: number = 0;\n    let sum_all_column_9: number = 0;\n    let sum_all_row_10: number = 0;\n    let sum_all_column_10: number = 0;\n    let sum_all_row_11: number = 0;\n    let sum_all_column_11: number = 0;\n    let sum_all_row_12: number = 0;\n    let sum_all_column_12: number = 0;\n    let sum_all_row_13: number = 0;\n    let sum\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123149,
      "stdout": "../../../../tmp/tmpxdpl38ty.ts(50,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_diag: number = 0;\n    let sum_diag2: number = 0;\n    let sum_row_temp: number = 0;\n    let sum_col_temp: number = 0;\n    let sum_diag_temp: number = 0;\n    let sum_diag2_temp: number = 0;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row_temp += my_matrix[i][j];\n        }\n        if (sum_row_temp !== sum_row && sum_row !== 0) {\n            return false;\n        }\n        sum_row = sum_row_temp;\n        sum_row_temp = 0;\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_col_temp += my_matrix[j][i];\n        }\n        if (sum_col_temp !== sum_col && sum_col !== 0) {\n            return false;\n        }\n        sum_col = sum_col_temp;\n        sum_col_temp = 0;\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diag_temp += my_matrix[i][i];\n    }\n    if (sum_diag_temp !== sum_diag && sum_diag !== 0) {\n        return false;\n    }\n    sum_diag = sum_diag_temp;\n    sum_diag_temp = 0;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diag2_temp += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123151,
      "stdout": "../../../../tmp/tmpzpacef5a.ts(47,1): error TS1005: ')' expected.\n../../../../tmp/tmpzpacef5a.ts(58,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_2: number = 0;\n    let sum_3: number = 0;\n    let sum_4: number = 0;\n    let sum_5: number = 0;\n    let sum_6: number = 0;\n    let sum_7: number = 0;\n    let sum_8: number = 0;\n    let sum_9: number = 0;\n    let sum_10: number = 0;\n    let sum_11: number = 0;\n    let sum_12: number = 0;\n    let sum_13: number = 0;\n    let sum_14: number = 0;\n    let sum_15: number = 0;\n    let sum_16: number = 0;\n    let sum_17: number = 0;\n    let sum_18: number = 0;\n    let sum_19: number = 0;\n    let sum_20: number = 0;\n    let sum_21: number = 0;\n    let sum_22: number = 0;\n    let sum_23: number = 0;\n    let sum_24: number = 0;\n    let sum_25: number = 0;\n    let sum_26: number = 0;\n    let sum_27: number = 0;\n    let sum_28: number = 0;\n    let sum_29: number = 0;\n    let sum_30: number = 0;\n    let sum_31: number = 0;\n    let sum_32: number = 0;\n    let sum_33: number = 0;\n    let sum_34: number = 0;\n    let sum_35: number = 0;\n    let sum_36: number = 0;\n    let sum_37: number = 0;\n    let sum_38: number = 0;\n    let sum_39: number = 0;\n    let sum_40: number = 0;\n    let sum_41: number = 0;\n    let sum_42: number = 0;\n    let sum_43: number = 0;\n    let sum_44: number = 0;\n    let sum_45: number = 0;\n    let sum_46: number = 0;\n    let sum_47: number\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123151,
      "stdout": "../../../../tmp/tmpwcn7jwms.ts(61,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diag1: number = 0;\n    let sum_diag2: number = 0;\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_row_temp: number = 0;\n    let sum_col_temp: number = 0;\n    let sum_diag1_temp: number = 0;\n    let sum_diag2_temp: number = 0;\n    let sum_row_temp_2: number = 0;\n    let sum_col_temp_2: number = 0;\n    let sum_diag1_temp_2: number = 0;\n    let sum_diag2_temp_2: number = 0;\n    let sum_row_temp_3: number = 0;\n    let sum_col_temp_3: number = 0;\n    let sum_diag1_temp_3: number = 0;\n    let sum_diag2_temp_3: number = 0;\n    let sum_row_temp_4: number = 0;\n    let sum_col_temp_4: number = 0;\n    let sum_diag1_temp_4: number = 0;\n    let sum_diag2_temp_4: number = 0;\n    let sum_row_temp_5: number = 0;\n    let sum_col_temp_5: number = 0;\n    let sum_diag1_temp_5: number = 0;\n    let sum_diag2_temp_5: number = 0;\n    let sum_row_temp_6: number = 0;\n    let sum_col_temp_6: number = 0;\n    let sum_diag1_temp_6: number = 0;\n    let sum_diag2_temp_6: number = 0;\n    let sum_row_temp_7: number = 0;\n    let sum_col_temp_7: number = 0;\n    let sum_diag1_temp_7: number = 0;\n    let sum_diag2_temp_7: number = 0;\n    let sum_row_temp_8: number = 0;\n    let sum_col_temp_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123151,
      "stdout": "../../../../tmp/tmp290st288.ts(48,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_one_row: number = 0;\n    let sum_of_one_column: number = 0;\n    let sum_of_one_diagonal: number = 0;\n    let sum_of_other_diagonal: number = 0;\n    let is_magic_square: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_elements += my_matrix[i][j];\n        }\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_one_row += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum_of_one_row);\n        sum_of_one_row = 0;\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_one_column += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum_of_one_column);\n        sum_of_one_column = 0;\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_of_one_diagonal += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum_of_one_diagonal);\n    sum_of_one_diagonal = 0;\n\n    for (let i: number = 0; i < my_matrix.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123151,
      "stdout": "../../../../tmp/tmpbcnzn67a.ts(41,43): error TS1003: Identifier expected.\n../../../../tmp/tmpbcnzn67a.ts(42,1): error TS1005: ';' expected.\n../../../../tmp/tmpbcnzn67a.ts(42,9): error TS1005: ')' expected.\n../../../../tmp/tmpbcnzn67a.ts(53,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let is_magic_square: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[0]) {\n            is_magic_square = false;\n            break;\n        }\n    }\n\n    for (let i: number = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] !== sum_of_columns[0]) {\n            is_magic_square = false;\n            break;\n        }\n    }\n\n    for (let i: number = 0; i < sum_of_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123151,
      "stdout": "../../../../tmp/tmpmmv3dxgx.ts(52,1): error TS1005: ';' expected.\n../../../../tmp/tmpmmv3dxgx.ts(52,9): error TS1005: ')' expected.\n../../../../tmp/tmpmmv3dxgx.ts(63,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diags: number[] = [];\n    let sum_of_elements: number = 0;\n    let sum_of_diag_1: number = 0;\n    let sum_of_diag_2: number = 0;\n    let sum_of_row: number = 0;\n    let sum_of_col: number = 0;\n    let is_magic_square: boolean = true;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_elements += my_matrix[i][j];\n        }\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_row += my_matrix[i][j];\n            sum_of_col += my_matrix[j][i];\n        }\n        sum_of_rows.push(sum_of_row);\n        sum_of_cols.push(sum_of_col);\n        sum_of_row = 0;\n        sum_of_col = 0;\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_diag_1 += my_matrix[i][i];\n        sum_of_diag_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diags.push(sum_of_diag_1);\n    sum_of_diags.push(sum_of_diag_2);\n\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_elements || sum_of_cols[i] !== sum_of_elements || sum_of_diags[\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123151,
      "stdout": "../../../../tmp/tmpajzb921p.ts(39,9): error TS1005: ']' expected.\n../../../../tmp/tmpajzb921p.ts(50,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let square_size: number = my_matrix.length;\n    for (let i: number = 0; i < square_size; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < square_size; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (i === 0) {\n            sum = sum_row;\n        }\n        if (sum_row !== sum || sum_column !== sum) {\n            return false;\n        }\n        sum_diagonal += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][square_size - i - 1];\n    }\n    if (sum_diagonal !== sum || sum_diagonal_2 !== sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number[] = [];\n    let sum_col: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_diag2: number[] = [];\n    let sum: number = 0;\n    let sum_row_col: number = 0;\n    let sum_diag_diag2: number = 0;\n    let is_magic_square: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row[i] = 0;\n        sum_col[i] = 0;\n        sum_diag[i] = 0;\n        sum_diag2[i] = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_row[i] += my_matrix[i][j];\n            sum_col[i] += my_matrix[j][i];\n            sum_diag[i] += my_matrix[i][i];\n            sum_diag2[i] += my_matrix[i][my_matrix.length - 1 - i];\n        }\n    }\n    sum_row_col = sum_row[0];\n    sum_diag_diag2 = sum_diag[0];\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        if (sum_row[i] != sum_row_col || sum_col[i] != sum_row_col || sum_diag[i] != sum_diag_diag2 || sum_diag2[i] != sum_diag_diag2) {\n            is_magic_square = false;\n        }\n    }\n    return is_magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpsi_p80kg.js:35:12)\n    at Object.<anonymous> (/tmp/tmpsi_p80kg.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal_1 = 0;\n    let sum_diagonal_2 = 0;\n    let sum_row_1 = 0;\n    let sum_row_2 = 0;\n    let sum_row_3 = 0;\n    let sum_column_1 = 0;\n    let sum_column_2 = 0;\n    let sum_column_3 = 0;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            if (i == j) {\n                sum_diagonal_1 += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_diagonal_2 += my_matrix[i][j];\n            }\n            if (i == 0) {\n                sum_row_1 += my_matrix[i][j];\n            }\n            if (i == 1) {\n                sum_row_2 += my_matrix[i][j];\n            }\n            if (i == 2) {\n                sum_row_3 += my_matrix[i][j];\n            }\n            if (j == 0) {\n                sum_column_1 += my_matrix[i][j];\n            }\n            if (j == 1) {\n                sum_column_2 += my_matrix[i][j];\n            }\n            if (j == 2) {\n                sum_column_3 += my_matrix[i][j];\n            }\n        }\n    }\n\n    if (sum_diagonal_1 == sum_diagonal_2 && sum_diagonal_1 == sum_row_1 && sum_diagonal_1 == sum_row_2 && sum_diagonal_1 == sum_row_3 && sum_diagonal_1 == sum_column_1 && sum_diagonal_1 == sum_column_2 && sum_diagonal_1 == sum_column_3) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all: number = 0;\n    let sum_of_all_test: number = 0;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_rows.push(0);\n        sum_of_cols.push(0);\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_rows[i] += my_matrix[i][j];\n            sum_of_cols[j] += my_matrix[i][j];\n        }\n    }\n\n    sum_of_diagonals.push(0);\n    sum_of_diagonals.push(0);\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_diagonals[0] += my_matrix[i][i];\n        sum_of_diagonals[1] += my_matrix[i][my_matrix.length - 1 - i];\n    }\n\n    sum_of_all = sum_of_rows[0];\n    sum_of_all_test = sum_of_rows[0];\n\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] != sum_of_all) {\n            return false;\n        }\n    }\n\n    for (let i = 0; i < sum_of_cols.length; i++) {\n        if (sum_of_cols[i] != sum_of_all) {\n            return false;\n        }\n    }\n\n    for (let i = 0; i < sum_of_diagonals.length; i++) {\n        if (sum_of_diagonals[i] != sum_of_all) {\n            return false;\n        }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123152,
      "stdout": "../../../../tmp/tmp_k0o6kxc.ts(60,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number[] = [];\n    let sum_col: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_diag2: number[] = [];\n    let sum_row_col: number = 0;\n    let sum_row_col2: number = 0;\n    let sum_row_col3: number = 0;\n    let sum_row_col4: number = 0;\n    let sum_row_col5: number = 0;\n    let sum_row_col6: number = 0;\n    let sum_row_col7: number = 0;\n    let sum_row_col8: number = 0;\n    let sum_row_col9: number = 0;\n    let sum_row_col10: number = 0;\n    let sum_row_col11: number = 0;\n    let sum_row_col12: number = 0;\n    let sum_row_col13: number = 0;\n    let sum_row_col14: number = 0;\n    let sum_row_col15: number = 0;\n    let sum_row_col16: number = 0;\n    let sum_row_col17: number = 0;\n    let sum_row_col18: number = 0;\n    let sum_row_col19: number = 0;\n    let sum_row_col20: number = 0;\n    let sum_row_col21: number = 0;\n    let sum_row_col22: number = 0;\n    let sum_row_col23: number = 0;\n    let sum_row_col24: number = 0;\n    let sum_row_col25: number = 0;\n    let sum_row_col26: number = 0;\n    let sum_row_col27: number = 0;\n    let sum_row_col28: number = 0;\n    let sum_row_col29: number = 0;\n    let sum_row_col30: number = 0;\n    let sum_row_col31: number = 0;\n    let sum_row_col32: number = 0;\n    let sum_row_col33: number = 0;\n    let sum\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123146,
      "stdout": "../../../../tmp/tmp6a4e7ppz.ts(52,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal: number = 0;\n    let sum_reverse_diagonal: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let n: number = my_matrix.length;\n    for (let i: number = 0; i < n; i++) {\n        sum += my_matrix[i][i];\n        sum_reverse_diagonal += my_matrix[i][n - i - 1];\n    }\n    if (sum != sum_reverse_diagonal) {\n        return false;\n    }\n    for (let i: number = 0; i < n; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_row != sum || sum_column != sum) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_matrix: number = 0;\n    let sum_of_all_elements_in_matrix_is_equal_to_sum_of_all_elements: boolean = true;\n    let sum_of_rows_is_equal: boolean = true;\n    let sum_of_columns_is_equal: boolean = true;\n    let sum_of_diagonals_is_equal: boolean = true;\n    let sum_of_all_elements_in_matrix_is_equal_to_sum_of_all_elements_is_equal: boolean = true;\n    let sum_of_rows_is_equal_is_equal: boolean = true;\n    let sum_of_columns_is_equal_is_equal: boolean = true;\n    let sum_of_diagonals_is_equal_is_equal: boolean = true;\n    let result: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_elements += my_matrix[i][j];\n        }\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_elements_in_matrix += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum_of_all_elements_in_matrix);\n        sum_of_all_elements_in_matrix = 0;\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123152,
      "stdout": "../../../../tmp/tmpdi9ii4tl.ts(34,1): error TS1005: ';' expected.\n../../../../tmp/tmpdi9ii4tl.ts(34,9): error TS1005: ';' expected.\n../../../../tmp/tmpdi9ii4tl.ts(45,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let diagonal1: number = 0;\n    let diagonal2: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        let row_sum: number = 0;\n        let column_sum: number = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            row_sum += my_matrix[i][j];\n            column_sum += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum = row_sum;\n        }\n        if (row_sum != sum || column_sum != sum) {\n            return false;\n        }\n        diagonal1 += my_matrix[i][i];\n        diagonal2 += my_matrix[i][my_matrix.length - i - 1];\n    }\n    if (diagonal1 != sum || diagonal2 != sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_elements: number = 0;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_elements += my_matrix[0][i];\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        let sum_of_row: number = 0;\n        let sum_of_column: number = 0;\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_of_row += my_matrix[i][j];\n            sum_of_column += my_matrix[j][i];\n        }\n        sum_of_rows.push(sum_of_row);\n        sum_of_columns.push(sum_of_column);\n    }\n\n    let sum_of_diagonal_1: number = 0;\n    let sum_of_diagonal_2: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_diagonal_1 += my_matrix[i][i];\n        sum_of_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum_of_diagonal_1);\n    sum_of_diagonals.push(sum_of_diagonal_2);\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        if (sum_of_elements != sum_of_rows[i] || sum_of_elements != sum_of_columns[i] || sum_of_elements != sum_of_diagonals[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmp7mugtyjs.js:38:12)\n    at Object.<anonymous> (/tmp/tmp7mugtyjs.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum2: number = 0;\n    let sum3: number = 0;\n    let sum4: number = 0;\n    let sum5: number = 0;\n    let sum6: number = 0;\n    let sum7: number = 0;\n    let sum8: number = 0;\n    let sum9: number = 0;\n    let sum10: number = 0;\n    let sum11: number = 0;\n    let sum12: number = 0;\n    let sum13: number = 0;\n    let sum14: number = 0;\n    let sum15: number = 0;\n    let sum16: number = 0;\n    let sum17: number = 0;\n    let sum18: number = 0;\n    let sum19: number = 0;\n    let sum20: number = 0;\n    let sum21: number = 0;\n    let sum22: number = 0;\n    let sum23: number = 0;\n    let sum24: number = 0;\n    let sum25: number = 0;\n    let sum26: number = 0;\n    let sum27: number = 0;\n    let sum28: number = 0;\n    let sum29: number = 0;\n    let sum30: number = 0;\n    let sum31: number = 0;\n    let sum32: number = 0;\n    let sum33: number = 0;\n    let sum34: number = 0;\n    let sum35: number = 0;\n    let sum36: number = 0;\n    let sum37: number = 0;\n    let sum38: number = 0;\n    let sum39: number = 0;\n    let sum40: number = 0;\n    let sum41: number = 0;\n    let sum42: number = 0;\n    let sum43: number = 0;\n    let sum44: number = 0;\n    let sum45: number = 0;\n    let sum46: number = 0;\n    let sum47: number = 0;\n    let sum48: number = 0;\n    let sum49: number = 0;\n    let sum50: number = 0;\n    let sum51: number = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123152,
      "stdout": "../../../../tmp/tmph9jpihyw.ts(55,9): error TS1005: ',' expected.\n../../../../tmp/tmph9jpihyw.ts(66,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_row: number = 0;\n    let sum_of_all_elements_in_column: number = 0;\n    let sum_of_all_elements_in_diagonal: number = 0;\n    let sum_of_all_elements_in_diagonal_2: number = 0;\n    let sum_of_all_elements_in_diagonal_3: number = 0;\n    let sum_of_all_elements_in_diagonal_4: number = 0;\n    let sum_of_all_elements_in_diagonal_5: number = 0;\n    let sum_of_all_elements_in_diagonal_6: number = 0;\n    let sum_of_all_elements_in_diagonal_7: number = 0;\n    let sum_of_all_elements_in_diagonal_8: number = 0;\n    let sum_of_all_elements_in_diagonal_9: number = 0;\n    let sum_of_all_elements_in_diagonal_10: number = 0;\n    let sum_of_all_elements_in_diagonal_11: number = 0;\n    let sum_of_all_elements_in_diagonal_12: number = 0;\n    let sum_of_all_elements_in_diagonal_13: number = 0;\n    let sum_of_all_elements_in_diagonal_14: number = 0;\n    let sum_of_all_elements_in_diagonal_15: number = 0;\n    let sum_of_all_elements_in_diagonal_16: number = 0;\n    let sum_of_all_elements_in_diagonal_17: number = 0;\n    let sum_of_all_elements_in_diagonal_18: number = 0;\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123146,
      "stdout": "../../../../tmp/tmpzlbwanqc.ts(39,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - i - 1];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] !== sum_of_columns[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_diagonals.length; i++) {\n        if (sum_of_diagonals[i] !== sum_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123152,
      "stdout": "../../../../tmp/tmpf9ekf9fp.ts(43,1): error TS1005: ')' expected.\n../../../../tmp/tmpf9ekf9fp.ts(54,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let result: boolean = true;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_diagonal += my_matrix[i][i];\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n        }\n        if (sum_row != sum) {\n            result = false;\n        }\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_column = 0;\n        for (let j = 0; j < my_matrix.length; j++) {\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_column != sum) {\n            result = false;\n        }\n    }\n    if (sum_diagonal != sum || sum_diagonal_2 != sum) {\n        result = false;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123152,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_columns: number = 0;\n    let sum_of_all_diagonals: number = 0;\n    let sum_of_all_elements: number = 0;\n    let number_of_elements: number = 0;\n    let is_magic_square: boolean = false;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_elements += my_matrix[i][j];\n            number_of_elements++;\n            if (i == j) {\n                sum_of_diagonals[0] += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_of_diagonals[1] += my_matrix[i][j];\n            }\n            if (i == 0) {\n                sum_of_rows[i] = 0;\n            }\n            if (j == 0) {\n                sum_of_columns[i] = 0;\n            }\n            sum_of_rows[i] += my_matrix[i][j];\n            sum_of_columns[i] += my_matrix[j][i];\n        }\n    }\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        sum_of_all_rows += sum_of_rows[i];\n        sum_of_all_columns += sum_of_columns[i];\n    }\n    for (let i: number = 0; i < sum_of_diagonals.length; i++) {\n        sum_of_all_diagonals += sum_of_diagonals[i];\n    }\n    if (sum_of_all_rows\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123152,
      "stdout": "../../../../tmp/tmplo7xa7sc.ts(41,1): error TS1005: ')' expected.\n../../../../tmp/tmplo7xa7sc.ts(52,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < sum_of_rows.length - 1; i++) {\n        if (sum_of_rows[i] != sum_of_rows[i + 1]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_columns.length - 1; i++) {\n        if (sum_of_columns[i] != sum_of_columns[i + 1]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_diagonals.length - 1; i++) {\n        if (sum_of_diagon\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123152,
      "stdout": "../../../../tmp/tmpyoygvuz6.ts(43,1): error TS1005: ')' expected.\n../../../../tmp/tmpyoygvuz6.ts(54,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - i - 1];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i = 0; i < sum_of_rows.length - 1; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[i + 1]) {\n            return false;\n        }\n    }\n    for (let i = 0; i < sum_of_columns.length - 1; i++) {\n        if (sum_of_columns[i] !== sum_of_columns[i + 1]) {\n            return false;\n        }\n    }\n    for (let i = 0; i < sum_of_diagonals.length - 1; i++) {\n        if (sum_of_diagonals[i] !== sum_of_diagonals[i +\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123152,
      "stdout": "../../../../tmp/tmpgmtlbz7p.ts(43,9): error TS1005: ']' expected.\n../../../../tmp/tmpgmtlbz7p.ts(54,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let sum_of_diagonals_counter: number = 0;\n    let sum_of_cols_counter: number = 0;\n    let sum_of_rows_counter: number = 0;\n    let sum_of_diagonals_counter2: number = 0;\n    let sum_of_cols_counter2: number = 0;\n    let sum_of_rows_counter2: number = 0;\n    let sum_of_diagonals_counter3: number = 0;\n    let sum_of_cols_counter3: number = 0;\n    let sum_of_rows_counter3: number = 0;\n    let sum_of_diagonals_counter4: number = 0;\n    let sum_of_cols_counter4: number = 0;\n    let sum_of_rows_counter4: number = 0;\n    let sum_of_diagonals_counter5: number = 0;\n    let sum_of_cols_counter5: number = 0;\n    let sum_of_rows_counter5: number = 0;\n    let sum_of_diagonals_counter6: number = 0;\n    let sum_of_cols_counter6: number = 0;\n    let sum_of_rows_counter6: number = 0;\n    let sum_of_diagonals_counter7: number = 0;\n    let sum_of_cols_counter7: number = 0;\n    let sum_of_rows_counter7: number = 0;\n    let sum_of_diagonals_counter8: number = 0;\n    let sum_of_cols_counter8: number = 0;\n    let sum_of_rows_counter8: number = 0;\n    let sum_of_diagonals_counter9: number = 0;\n    let sum_of_cols_counter9: number = 0;\n    let sum_of_rows_counter9: number = 0;\n    let sum_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123152,
      "stdout": "../../../../tmp/tmpg2zyrgre.ts(46,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let is_magic_square: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_row != sum_column) {\n            is_magic_square = false;\n            break;\n        }\n        if (i == 0) {\n            sum = sum_row;\n        } else {\n            if (sum != sum_row) {\n                is_magic_square = false;\n                break;\n            }\n        }\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_diagonal != sum_diagonal_2) {\n        is_magic_square = false;\n    }\n    return is_magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_cols: number[] = [];\n    let sum_of_diags: number[] = [];\n    let sum_of_all: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_of_rows[i] = 0;\n        sum_of_cols[i] = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_rows[i] += my_matrix[i][j];\n            sum_of_cols[i] += my_matrix[j][i];\n            if (i === j) {\n                sum_of_diags[0] += my_matrix[i][j];\n            }\n            if (i + j === my_matrix.length - 1) {\n                sum_of_diags[1] += my_matrix[i][j];\n            }\n        }\n        sum_of_all += sum_of_rows[i];\n    }\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_all || sum_of_cols[i] !== sum_of_all || sum_of_diags[0] !== sum_of_all || sum_of_diags[1] !== sum_of_all) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123153,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfjzxovu_.js:32:12)\n    at Object.<anonymous> (/tmp/tmpfjzxovu_.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_diag: number = 0;\n    let sum_diag2: number = 0;\n    let sum_row_temp: number = 0;\n    let sum_col_temp: number = 0;\n    let sum_diag_temp: number = 0;\n    let sum_diag2_temp: number = 0;\n    let sum_row_check: boolean = true;\n    let sum_col_check: boolean = true;\n    let sum_diag_check: boolean = true;\n    let sum_diag2_check: boolean = true;\n    let sum_row_check_temp: boolean = true;\n    let sum_col_check_temp: boolean = true;\n    let sum_diag_check_temp: boolean = true;\n    let sum_diag2_check_temp: boolean = true;\n    let sum_row_check_final: boolean = true;\n    let sum_col_check_final: boolean = true;\n    let sum_diag_check_final: boolean = true;\n    let sum_diag2_check_final: boolean = true;\n    let sum_row_check_final_temp: boolean = true;\n    let sum_col_check_final_temp: boolean = true;\n    let sum_diag_check_final_temp: boolean = true;\n    let sum_diag2_check_final_temp: boolean = true;\n    let sum_row_check_final_temp2: boolean = true;\n    let sum_col_check_final_temp2: boolean = true;\n    let sum_diag_check_final_temp2: boolean = true;\n    let sum_diag2_check_final_temp2: boolean = true;\n    let sum_row_check_final_temp3: boolean = true;\n    let sum_col_check_final_temp3: boolean = true;\n    let sum_diag_check_final_temp3: boolean = true;\n    let sum_diag2_check_final_temp3: boolean = true;\n    let sum_row_check\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123152,
      "stdout": "../../../../tmp/tmp9er2u2e4.ts(47,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum = 0;\n    let sum_diagonal = 0;\n    let sum_reverse_diagonal = 0;\n    let sum_row = 0;\n    let sum_column = 0;\n    let i: number;\n    let j: number;\n    let k: number;\n    let l: number;\n    let m: number;\n    let n: number;\n    let o: number;\n    let p: number;\n    let q: number;\n    let r: number;\n    let s: number;\n    let t: number;\n    let u: number;\n    let v: number;\n    let w: number;\n    let x: number;\n    let y: number;\n    let z: number;\n    let a: number;\n    let b: number;\n    let c: number;\n    let d: number;\n    let e: number;\n    let f: number;\n    let g: number;\n    let h: number;\n    let ii: number;\n    let jj: number;\n    let kk: number;\n    let ll: number;\n    let mm: number;\n    let nn: number;\n    let oo: number;\n    let pp: number;\n    let qq: number;\n    let rr: number;\n    let ss: number;\n    let tt: number;\n    let uu: number;\n    let vv: number;\n    let ww: number;\n    let xx: number;\n    let yy: number;\n    let zz: number;\n    let aa: number;\n    let bb: number;\n    let cc: number;\n    let dd: number;\n    let ee: number;\n    let ff: number;\n    let gg: number;\n    let hh: number;\n    let iii: number;\n    let jjj: number;\n    let kkk: number;\n    let lll: number;\n    let mmm: number;\n    let nnn: number;\n    let ooo: number;\n    let ppp: number;\n    let qqq: number;\n    let rrr: number;\n    let sss\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123153,
      "stdout": "../../../../tmp/tmpwby3yqqv.ts(82,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal1: number = 0;\n    let sum_diagonal2: number = 0;\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_row_check: number = 0;\n    let sum_col_check: number = 0;\n    let sum_diagonal1_check: number = 0;\n    let sum_diagonal2_check: number = 0;\n    let magic_square: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row += my_matrix[i][0];\n        sum_col += my_matrix[0][i];\n        sum_diagonal1 += my_matrix[i][i];\n        sum_diagonal2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_row_check += my_matrix[i][j];\n            sum_col_check += my_matrix[j][i];\n        }\n        if (sum_row_check != sum_row || sum_col_check != sum_col) {\n            magic_square = false;\n        }\n        sum_row_check = 0;\n        sum_col_check = 0;\n    }\n\n    if (sum_diagonal1 != sum_diagonal2) {\n        magic_square = false;\n    }\n\n    return magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123154,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let is_magic_square: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum_row != sum || sum_column != sum) {\n            is_magic_square = false;\n        }\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_diagonal_1 != sum || sum_diagonal_2 != sum) {\n        is_magic_square = false;\n    }\n    return is_magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123154,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpf2losth3.js:37:12)\n    at Object.<anonymous> (/tmp/tmpf2losth3.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diag_1: number = 0;\n    let sum_diag_2: number = 0;\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_row_col: number = 0;\n    let sum_row_col_2: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_col = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum_row_col = sum_row;\n            sum_row_col_2 = sum_col;\n        }\n        if (sum_row != sum_row_col || sum_col != sum_row_col_2) {\n            return false;\n        }\n        sum_diag_1 += my_matrix[i][i];\n        sum_diag_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_diag_1 != sum_diag_2) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123154,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_first_row = 0;\n    let sum_of_first_column = 0;\n    let sum_of_second_row = 0;\n    let sum_of_second_column = 0;\n    let sum_of_third_row = 0;\n    let sum_of_third_column = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            if (i == 0) {\n                sum_of_first_row += my_matrix[i][j];\n            }\n            if (i == 1) {\n                sum_of_second_row += my_matrix[i][j];\n            }\n            if (i == 2) {\n                sum_of_third_row += my_matrix[i][j];\n            }\n            if (j == 0) {\n                sum_of_first_column += my_matrix[i][j];\n            }\n            if (j == 1) {\n                sum_of_second_column += my_matrix[i][j];\n            }\n            if (j == 2) {\n                sum_of_third_column += my_matrix[i][j];\n            }\n        }\n    }\n    if (sum_of_first_row == sum_of_second_row && sum_of_first_row == sum_of_third_row && sum_of_first_row == sum_of_first_column && sum_of_first_row == sum_of_second_column && sum_of_first_row == sum_of_third_column) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123154,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum = 0;\n    let sum_row = 0;\n    let sum_col = 0;\n    let sum_diag = 0;\n    let sum_diag2 = 0;\n    let n = my_matrix.length;\n    for (let i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (let i = 0; i < n; i++) {\n        sum_row = 0;\n        sum_col = 0;\n        for (let j = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n            if (i == j) {\n                sum_diag += my_matrix[i][j];\n            }\n            if (i + j == n - 1) {\n                sum_diag2 += my_matrix[i][j];\n            }\n        }\n        if (sum_row != sum || sum_col != sum) {\n            return false;\n        }\n    }\n    if (sum_diag != sum || sum_diag2 != sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123154,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let is_magic_square: boolean = true;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (sum === 0) {\n            sum = sum_row;\n        }\n        if (sum !== sum_row || sum !== sum_column) {\n            is_magic_square = false;\n        }\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum !== sum_diagonal_1 || sum !== sum_diagonal_2) {\n        is_magic_square = false;\n    }\n    return is_magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[0][i];\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    if (sum_diagonal_1 !== sum || sum_diagonal_2 !== sum) {\n        return false;\n    }\n    for (let i: number = 1; i < my_matrix.length; i++) {\n        let sum_row: number = 0;\n        let sum_col: number = 0;\n        for (let j: number = 0; j < my_matrix.length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_row !== sum || sum_col !== sum) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_row: number = 0;\n    let sum_of_all_elements_in_column: number = 0;\n    let sum_of_all_elements_in_diagonal: number = 0;\n    let sum_of_all_elements_in_diagonal_2: number = 0;\n    let sum_of_all_elements_in_diagonal_3: number = 0;\n    let sum_of_all_elements_in_diagonal_4: number = 0;\n    let sum_of_all_elements_in_diagonal_5: number = 0;\n    let sum_of_all_elements_in_diagonal_6: number = 0;\n    let sum_of_all_elements_in_diagonal_7: number = 0;\n    let sum_of_all_elements_in_diagonal_8: number = 0;\n    let sum_of_all_elements_in_diagonal_9: number = 0;\n    let sum_of_all_elements_in_diagonal_10: number = 0;\n    let sum_of_all_elements_in_diagonal_11: number = 0;\n    let sum_of_all_elements_in_diagonal_12: number = 0;\n    let sum_of_all_elements_in_diagonal_13: number = 0;\n    let sum_of_all_elements_in_diagonal_14: number = 0;\n    let sum_of_all_elements_in_diagonal_15: number = 0;\n    let sum_of_all_elements_in_diagonal_16: number = 0;\n    let sum_of_all_elements_in_diagonal_17: number = 0;\n    let sum_of_all_elements_in_diagonal_18: number = 0;\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123146,
      "stdout": "../../../../tmp/tmpzlbwanqc.ts(39,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_matrix: number = 0;\n    let is_magic_square: boolean = false;\n\n    //Calculate sum of all elements in matrix\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_elements_in_matrix += my_matrix[i][j];\n        }\n    }\n\n    //Calculate sum of rows\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_rows[i] += my_matrix[i][j];\n        }\n    }\n\n    //Calculate sum of columns\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_columns[i] += my_matrix[j][i];\n        }\n    }\n\n    //Calculate sum of diagonals\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            if (i == j) {\n                sum_of_diagonals[0] += my_matrix[i][j];\n            }\n            if (i + j == my_matrix.length - 1) {\n                sum_of_diagonals[1] += my_matrix[i][j];\n            }\n        }\n    }\n\n    //Check if all elements in matrix are equal\n    if (sum_of_all_elements_in_matrix / my_matrix.length ==\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123154,
      "stdout": "../../../../tmp/tmpnms3i0g1.ts(45,9): error TS1005: ')' expected.\n../../../../tmp/tmpnms3i0g1.ts(56,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_row: number[] = [];\n    let sum_of_col: number[] = [];\n    let sum_of_diag: number[] = [];\n    let sum: number = 0;\n    let flag: boolean = true;\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let l: number = 0;\n    let m: number = 0;\n    let n: number = 0;\n    let o: number = 0;\n    let p: number = 0;\n    let q: number = 0;\n    let r: number = 0;\n    let s: number = 0;\n    let t: number = 0;\n    let u: number = 0;\n    let v: number = 0;\n    let w: number = 0;\n    let x: number = 0;\n    let y: number = 0;\n    let z: number = 0;\n    let aa: number = 0;\n    let bb: number = 0;\n    let cc: number = 0;\n    let dd: number = 0;\n    let ee: number = 0;\n    let ff: number = 0;\n    let gg: number = 0;\n    let hh: number = 0;\n    let ii: number = 0;\n    let jj: number = 0;\n    let kk: number = 0;\n    let ll: number = 0;\n    let mm: number = 0;\n    let nn: number = 0;\n    let oo: number = 0;\n    let pp: number = 0;\n    let qq: number = 0;\n    let rr: number = 0;\n    let ss: number = 0;\n    let tt: number = 0;\n    let uu: number = 0;\n    let vv: number = 0;\n    let ww: number = 0;\n    let xx: number = 0;\n    let yy: number = 0;\n    let zz: number = 0;\n    let aaa: number = 0;\n    let bbb: number = 0;\n    let ccc: number = 0;\n    let ddd: number = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123155,
      "stdout": "../../../../tmp/tmpsy_al6il.ts(68,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_columns: number = 0;\n    let sum_of_all_diagonals: number = 0;\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_matrix: number = 0;\n    let sum_of_all_elements_in_matrix_check: number = 0;\n    let sum_of_all_elements_in_matrix_check_2: number = 0;\n    let sum_of_all_elements_in_matrix_check_3: number = 0;\n    let sum_of_all_elements_in_matrix_check_4: number = 0;\n    let sum_of_all_elements_in_matrix_check_5: number = 0;\n    let sum_of_all_elements_in_matrix_check_6: number = 0;\n    let sum_of_all_elements_in_matrix_check_7: number = 0;\n    let sum_of_all_elements_in_matrix_check_8: number = 0;\n    let sum_of_all_elements_in_matrix_check_9: number = 0;\n    let sum_of_all_elements_in_matrix_check_10: number = 0;\n    let sum_of_all_elements_in_matrix_check_11: number = 0;\n    let sum_of_all_elements_in_matrix_check_12: number = 0;\n    let sum_of_all_elements_in_matrix_check_13: number = 0;\n    let sum_of_all_elements_in_matrix_check_14: number = 0;\n    let sum_of_all_elements_in_matrix_check_15: number = 0;\n    let sum_of_all_elements_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123154,
      "stdout": "../../../../tmp/tmp5u6q6dv4.ts(38,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all: number = 0;\n    let sum_of_all_diagonals: number = 0;\n    let sum_of_all_columns: number = 0;\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_diagonals: number = 0;\n    let sum_of_all_elements_columns: number = 0;\n    let sum_of_all_elements_rows: number = 0;\n    let sum_of_all_elements_diagonals_2: number = 0;\n    let sum_of_all_elements_columns_2: number = 0;\n    let sum_of_all_elements_rows_2: number = 0;\n    let sum_of_all_elements_diagonals_3: number = 0;\n    let sum_of_all_elements_columns_3: number = 0;\n    let sum_of_all_elements_rows_3: number = 0;\n    let sum_of_all_elements_diagonals_4: number = 0;\n    let sum_of_all_elements_columns_4: number = 0;\n    let sum_of_all_elements_rows_4: number = 0;\n    let sum_of_all_elements_diagonals_5: number = 0;\n    let sum_of_all_elements_columns_5: number = 0;\n    let sum_of_all_elements_rows_5: number = 0;\n    let sum_of_all_elements_diagonals_6: number = 0;\n    let sum_of_all_elements_columns_6: number = 0;\n    let sum_of_all_elements_rows_6: number = 0;\n    let sum_of_all_elements_diagonals_7: number = 0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123155,
      "stdout": "../../../../tmp/tmprc375qyi.ts(41,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let result: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (i === 0) {\n            sum = sum_row;\n        }\n        if (sum_row !== sum || sum_column !== sum) {\n            result = false;\n            break;\n        }\n        sum_diagonal += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][my_matrix.length - i - 1];\n    }\n    if (sum_diagonal !== sum || sum_diagonal_2 !== sum) {\n        result = false;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let sum_of_diagonals_index: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n            if (i == j) {\n                sum_of_diagonals[sum_of_diagonals_index] = my_matrix[i][j];\n            }\n        }\n        sum_of_rows[i] = sum;\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns[i] = sum;\n        sum = 0;\n    }\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] != sum_of_rows[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] != sum_of_columns[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_diagonals.length; i++) {\n        if (sum_of_diagonals[i] != sum_of_diagonals[0]) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] !== sum_of_columns[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_diagonals.length; i++) {\n        if (sum_of_diagonals[i] !== sum_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123155,
      "stdout": "../../../../tmp/tmprxly6hnn.ts(43,1): error TS1005: ')' expected.\n../../../../tmp/tmprxly6hnn.ts(54,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] !== sum_of_columns[0]) {\n            return false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_diagonals.length; i++) {\n        if (sum_of_diagonals[i] !== sum_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123155,
      "stdout": "../../../../tmp/tmprxly6hnn.ts(43,1): error TS1005: ')' expected.\n../../../../tmp/tmprxly6hnn.ts(54,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum = 0;\n    let sum_row = 0;\n    let sum_col = 0;\n    let sum_diag = 0;\n    let sum_rev_diag = 0;\n    let n = my_matrix.length;\n    for (let i = 0; i < n; i++) {\n        sum += my_matrix[0][i];\n    }\n    for (let i = 0; i < n; i++) {\n        sum_row = 0;\n        sum_col = 0;\n        for (let j = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if (sum_row != sum || sum_col != sum) {\n            return false;\n        }\n    }\n    for (let i = 0; i < n; i++) {\n        sum_diag += my_matrix[i][i];\n        sum_rev_diag += my_matrix[i][n - i - 1];\n    }\n    if (sum_diag != sum || sum_rev_diag != sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_rows: number = 0;\n    let sum_of_all_columns: number = 0;\n    let sum_of_all_diagonals: number = 0;\n    let sum_of_all_elements: number = 0;\n    let number_of_elements: number = 0;\n    let magic_square: boolean = true;\n\n    //calculate sum of rows\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_rows += my_matrix[i][j];\n            number_of_elements++;\n        }\n        sum_of_rows.push(sum_of_all_rows);\n        sum_of_all_rows = 0;\n    }\n\n    //calculate sum of columns\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_columns += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum_of_all_columns);\n        sum_of_all_columns = 0;\n    }\n\n    //calculate sum of diagonals\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_of_all_diagonals += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum_of_all_diagonals);\n    sum_of_all_diagonals = 0;\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_of_all_diagonals += my_matrix[i][my_matrix.length - 1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123155,
      "stdout": "../../../../tmp/tmpezuwlo84.ts(41,1): error TS1005: ']' expected.\n../../../../tmp/tmpezuwlo84.ts(52,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let sum_diagonal: number = 0;\n    let sum_diagonal2: number = 0;\n    let sum_row_array: number[] = [];\n    let sum_column_array: number[] = [];\n    let sum_diagonal_array: number[] = [];\n    let sum_diagonal2_array: number[] = [];\n\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n            if (i === j) {\n                sum_diagonal += my_matrix[i][j];\n            }\n            if (i + j === my_matrix.length - 1) {\n                sum_diagonal2 += my_matrix[i][j];\n            }\n        }\n        sum_row_array.push(sum_row);\n        sum_column_array.push(sum_column);\n        sum_diagonal_array.push(sum_diagonal);\n        sum_diagonal2_array.push(sum_diagonal2);\n        sum_row = 0;\n        sum_column = 0;\n        sum_diagonal = 0;\n        sum_diagonal2 = 0;\n    }\n    if (sum_row_array.every(elem => elem === sum_row_array[0]) && sum_column_array.every(elem => elem === sum_column_array[0]) && sum_diagonal_array.every(elem => elem === sum_diagonal_array[0]) && sum_diagonal2_array.every(elem => elem === sum_diagonal2_array[0])) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpa5ebwv9d.js:41:12)\n    at Object.<anonymous> (/tmp/tmpa5ebwv9d.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        let row_sum: number = 0;\n        let column_sum: number = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            row_sum += my_matrix[i][j];\n            column_sum += my_matrix[j][i];\n        }\n        sum_of_rows.push(row_sum);\n        sum_of_columns.push(column_sum);\n    }\n\n    let diagonal_sum: number = 0;\n    let reverse_diagonal_sum: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        diagonal_sum += my_matrix[i][i];\n        reverse_diagonal_sum += my_matrix[i][my_matrix.length - i - 1];\n    }\n    sum_of_diagonals.push(diagonal_sum);\n    sum_of_diagonals.push(reverse_diagonal_sum);\n\n    let sum_of_rows_set = new Set(sum_of_rows);\n    let sum_of_columns_set = new Set(sum_of_columns);\n    let sum_of_diagonals_set = new Set(sum_of_diagonals);\n\n    if (sum_of_rows_set.size === 1 && sum_of_columns_set.size === 1 && sum_of_diagonals_set.size === 1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let sum_of_elements: number = 0;\n    let sum_of_elements_in_diagonal: number = 0;\n    let sum_of_elements_in_column: number = 0;\n    let sum_of_elements_in_row: number = 0;\n    let sum_of_elements_in_reverse_diagonal: number = 0;\n    let sum_of_elements_in_reverse_column: number = 0;\n    let sum_of_elements_in_reverse_row: number = 0;\n    let is_magic_square: boolean = false;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum_of_elements += my_matrix[i][j];\n            if (i === j) {\n                sum_of_elements_in_diagonal += my_matrix[i][j];\n            }\n            if (i === 0) {\n                sum_of_elements_in_column += my_matrix[i][j];\n            }\n            if (j === 0) {\n                sum_of_elements_in_row += my_matrix[i][j];\n            }\n            if (i + j === my_matrix.length - 1) {\n                sum_of_elements_in_reverse_diagonal += my_matrix[i][j];\n            }\n            if (i === my_matrix.length - 1) {\n                sum_of_elements_in_reverse_column += my_matrix[i][j];\n            }\n            if (j === my_matrix.length - 1) {\n                sum_of_elements_in_reverse_row += my_matrix[i][j];\n            }\n        }\n        sum_of_rows.push(sum_of_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123155,
      "stdout": "../../../../tmp/tmpxw5jbic6.ts(38,1): error TS1005: ',' expected.\n../../../../tmp/tmpxw5jbic6.ts(38,9): error TS1005: ',' expected.\n../../../../tmp/tmpxw5jbic6.ts(49,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_reverse_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_matrix: number = 0;\n    let sum_of_all_elements_in_matrix_calculated: boolean = false;\n    let sum_of_all_elements_in_matrix_calculated_once: boolean = false;\n    let sum_of_all_elements_in_matrix_calculated_twice: boolean = false;\n    let sum_of_all_elements_in_matrix_calculated_thrice: boolean = false;\n    let sum_of_all_elements_in_matrix_calculated_fourth_time: boolean = false;\n    let sum_of_all_elements_in_matrix_calculated_fifth_time: boolean = false;\n    let sum_of_all_elements_in_matrix_calculated_sixth_time: boolean = false;\n    let sum_of_all_elements_in_matrix_calculated_seventh_time: boolean = false;\n    let sum_of_all_elements_in_matrix_calculated_eighth_time: boolean = false;\n    let sum_of_all_elements_in_matrix_calculated_ninth_time: boolean = false;\n    let sum_of_all_elements_in_matrix_calculated_tenth_time: boolean = false;\n    let sum_of_all_elements_in_matrix_calculated_eleventh_time: boolean = false;\n    let sum_of_all_elements_in_matrix_calculated_twelfth_time: boolean = false;\n    let sum_of_all_elements_in_matrix_calculated_thirteenth_time: boolean = false;\n    let sum_of_all_elements_in_matrix_calculated_fourteenth_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123155,
      "stdout": "../../../../tmp/tmphr5cikgr.ts(35,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_row: number[] = [];\n    let sum_col: number[] = [];\n    let sum_diag: number[] = [];\n    let sum_diag_rev: number[] = [];\n    let sum: number = 0;\n    let sum_row_col: number = 0;\n    let sum_diag_rev_col: number = 0;\n    let sum_diag_rev_row: number = 0;\n    let sum_diag_col: number = 0;\n    let sum_diag_row: number = 0;\n    let sum_diag_rev_row_col: number = 0;\n    let sum_diag_row_col: number = 0;\n    let sum_row_col_rev: number = 0;\n    let sum_diag_col_rev: number = 0;\n    let sum_diag_row_rev: number = 0;\n    let sum_diag_rev_row_col_rev: number = 0;\n    let sum_diag_row_col_rev: number = 0;\n    let sum_diag_col_rev_row: number = 0;\n    let sum_diag_row_rev_col: number = 0;\n    let sum_diag_rev_row_col_rev_row: number = 0;\n    let sum_diag_row_col_rev_row: number = 0;\n    let sum_diag_col_rev_row_col: number = 0;\n    let sum_diag_row_rev_col_row: number = 0;\n    let sum_diag_rev_row_col_rev_row_col: number = 0;\n    let sum_diag_row_col_rev_row_col: number = 0;\n    let sum_diag_col_rev_row_col_rev: number = 0;\n    let sum_diag_row_rev_col_row_rev: number = 0;\n    let sum_diag_rev_row_col_rev_row_col_rev: number = 0;\n    let sum_diag_row_col_rev_row_col_rev: number = 0;\n    let sum_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123155,
      "stdout": "../../../../tmp/tmpg_1a7qe3.ts(44,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        let row_sum: number = 0;\n        let column_sum: number = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            row_sum += my_matrix[i][j];\n            column_sum += my_matrix[j][i];\n        }\n        sum_of_rows.push(row_sum);\n        sum_of_columns.push(column_sum);\n    }\n\n    let diagonal_sum_1: number = 0;\n    let diagonal_sum_2: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        diagonal_sum_1 += my_matrix[i][i];\n        diagonal_sum_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(diagonal_sum_1);\n    sum_of_diagonals.push(diagonal_sum_2);\n\n    let sum_of_all: number[] = sum_of_rows.concat(sum_of_columns, sum_of_diagonals);\n    let sum_of_all_set: Set<number> = new Set(sum_of_all);\n    if (sum_of_all_set.size === 1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123155,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diagonal_1: number = 0;\n    let sum_diagonal_2: number = 0;\n    let sum_row: number = 0;\n    let sum_column: number = 0;\n    let is_magic_square: boolean = true;\n    let n: number = my_matrix.length;\n    for (let i: number = 0; i < n; i++) {\n        sum_row = 0;\n        sum_column = 0;\n        for (let j: number = 0; j < n; j++) {\n            sum_row += my_matrix[i][j];\n            sum_column += my_matrix[j][i];\n        }\n        if (i == 0) {\n            sum = sum_row;\n        }\n        if (sum_row != sum || sum_column != sum) {\n            is_magic_square = false;\n            break;\n        }\n        sum_diagonal_1 += my_matrix[i][i];\n        sum_diagonal_2 += my_matrix[i][n - 1 - i];\n    }\n    if (sum_diagonal_1 != sum || sum_diagonal_2 != sum) {\n        is_magic_square = false;\n    }\n    return is_magic_square;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let diagonal1: number = 0;\n    let diagonal2: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        let row_sum: number = 0;\n        let column_sum: number = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            row_sum += my_matrix[i][j];\n            column_sum += my_matrix[j][i];\n        }\n        if (i === 0) {\n            sum = row_sum;\n        }\n        if (row_sum !== sum || column_sum !== sum) {\n            return false;\n        }\n        diagonal1 += my_matrix[i][i];\n        diagonal2 += my_matrix[i][my_matrix.length - i - 1];\n    }\n    if (diagonal1 !== sum || diagonal2 !== sum) {\n        return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_all_rows: number[] = [];\n    let sum_of_all_cols: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let is_magic_square: boolean = false;\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_all_elements += my_matrix[i][j];\n        }\n    }\n\n    for (let i = 0; i < my_matrix.length; i++) {\n        let sum_of_row: number = 0;\n        let sum_of_col: number = 0;\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum_of_row += my_matrix[i][j];\n            sum_of_col += my_matrix[j][i];\n        }\n        sum_of_all_rows.push(sum_of_row);\n        sum_of_all_cols.push(sum_of_col);\n    }\n\n    let sum_of_diagonal_1: number = 0;\n    let sum_of_diagonal_2: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum_of_diagonal_1 += my_matrix[i][i];\n        sum_of_diagonal_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum_of_diagonal_1);\n    sum_of_diagonals.push(sum_of_diagonal_2);\n\n    let sum_of_all_rows_set: Set<number> = new Set(sum_of_all_rows);\n    let sum_of_all_cols_set: Set<number> = new Set(sum_of_all_cols);\n    let sum_of_diagonals_set:\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123156,
      "stdout": "../../../../tmp/tmpbc5w3co5.ts(38,9): error TS1005: ',' expected.\n../../../../tmp/tmpbc5w3co5.ts(49,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let diagonal1: number = 0;\n    let diagonal2: number = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        let row_sum: number = 0;\n        let column_sum: number = 0;\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            row_sum += my_matrix[i][j];\n            column_sum += my_matrix[j][i];\n        }\n        if (i === 0) {\n            sum = row_sum;\n        }\n        if (row_sum !== sum || column_sum !== sum) {\n            return false;\n        }\n        diagonal1 += my_matrix[i][i];\n        diagonal2 += my_matrix[i][my_matrix.length - i - 1];\n    }\n    return (diagonal1 === sum && diagonal2 === sum);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let result: boolean = true;\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] != sum_of_rows[0]) {\n            result = false;\n        }\n    }\n    for (let i = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] != sum_of_columns[0]) {\n            result = false;\n        }\n    }\n    for (let i = 0; i < sum_of_diagonals.length; i++) {\n        if (sum_of_diagonals[i] != sum_of_diagonals[0]) {\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123156,
      "stdout": "../../../../tmp/tmpcoceg33m.ts(56,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum_of_all_elements: number = 0;\n    let sum_of_all_elements_in_matrix: number = 0;\n    let sum_of_all_elements_in_matrix_is_equal: boolean = false;\n    let sum_of_rows_is_equal: boolean = false;\n    let sum_of_columns_is_equal: boolean = false;\n    let sum_of_diagonals_is_equal: boolean = false;\n    let sum_of_all_elements_in_matrix_is_equal_to_sum_of_rows: boolean = false;\n    let sum_of_all_elements_in_matrix_is_equal_to_sum_of_columns: boolean = false;\n    let sum_of_all_elements_in_matrix_is_equal_to_sum_of_diagonals: boolean = false;\n    let sum_of_rows_is_equal_to_sum_of_columns: boolean = false;\n    let sum_of_rows_is_equal_to_sum_of_diagonals: boolean = false;\n    let sum_of_columns_is_equal_to_sum_of_diagonals: boolean = false;\n    let is_magic_square: boolean = false;\n    let number_of_rows: number = my_matrix.length;\n    let number_of_columns: number = my_matrix[0].length;\n\n    //calculate sum of all elements in matrix\n    for (let i = 0; i < number_of_rows; i++) {\n        for (let j = 0; j < number_of_columns; j++) {\n            sum_of_all_elements_in_matrix += my_matrix[i][j];\n        }\n    }\n\n    //calculate sum of rows\n    for (let i = 0; i < number_of_rows; i++) {\n        for (let j\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123156,
      "stdout": "../../../../tmp/tmpx4o7ow1w.ts(32,1): error TS1005: ';' expected.\n../../../../tmp/tmpx4o7ow1w.ts(32,9): error TS1005: ';' expected.\n../../../../tmp/tmpx4o7ow1w.ts(43,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    let is_magic_square: boolean = true;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        for (let j: number = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i: number = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[0]) {\n            is_magic_square = false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_columns.length; i++) {\n        if (sum_of_columns[i] !== sum_of_columns[0]) {\n            is_magic_square = false;\n        }\n    }\n    for (let i: number = 0; i < sum_of_diagonals.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123156,
      "stdout": "../../../../tmp/tmpwx6dtx5w.ts(42,50): error TS1003: Identifier expected.\n../../../../tmp/tmpwx6dtx5w.ts(43,1): error TS1005: ';' expected.\n../../../../tmp/tmpwx6dtx5w.ts(43,9): error TS1005: ')' expected.\n../../../../tmp/tmpwx6dtx5w.ts(54,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum: number = 0;\n    let sum_diag_1: number = 0;\n    let sum_diag_2: number = 0;\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let is_magic_square: boolean = true;\n\n    //Calculate the sum of the first row\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[0][i];\n    }\n\n    //Calculate the sum of the first column\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_col += my_matrix[i][0];\n    }\n\n    //Calculate the sum of the first diagonal\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diag_1 += my_matrix[i][i];\n    }\n\n    //Calculate the sum of the second diagonal\n    for (let i: number = 0; i < my_matrix.length; i++) {\n        sum_diag_2 += my_matrix[i][my_matrix.length - 1 - i];\n    }\n\n    //Check if the sum of the first row is equal to the sum of the first column\n    if (sum != sum_col) {\n        is_magic_square = false;\n    }\n\n    //Check if the sum of the first diagonal is equal to the sum of the second diagonal\n    if (sum_diag_1 != sum_diag_2) {\n        is_magic_square = false;\n    }\n\n    //Check if the sum of the first row is equal to the sum of the first diagonal\n    if (sum != sum_diag_1) {\n        is_magic_square = false;\n    }\n\n    //Check if the sum of the first row is equal to the sum of the second diagonal\n    if (sum != sum_diag_2) {\n        is_magic_square = false;\n    }\n\n    //Check if the sum of the first column is equal to the sum of the first diagonal\n    if (sum\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123156,
      "stdout": "../../../../tmp/tmpycvuo70w.ts(52,1): error TS1005: ')' expected.\n../../../../tmp/tmpycvuo70w.ts(63,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diagonal1: number = 0;\n    let sum_diagonal2: number = 0;\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_row_check: number = 0;\n    let sum_col_check: number = 0;\n    let sum_diagonal1_check: number = 0;\n    let sum_diagonal2_check: number = 0;\n    let sum_check: number = 0;\n    let sum_check_row: number = 0;\n    let sum_check_col: number = 0;\n    let sum_check_diagonal1: number = 0;\n    let sum_check_diagonal2: number = 0;\n    let sum_check_diagonal1_check: number = 0;\n    let sum_check_diagonal2_check: number = 0;\n    let sum_check_row_check: number = 0;\n    let sum_check_col_check: number = 0;\n    let sum_check_check: number = 0;\n    let sum_check_check_row: number = 0;\n    let sum_check_check_col: number = 0;\n    let sum_check_check_diagonal1: number = 0;\n    let sum_check_check_diagonal2: number = 0;\n    let sum_check_check_diagonal1_check: number = 0;\n    let sum_check_check_diagonal2_check: number = 0;\n    let sum_check_check_row_check: number = 0;\n    let sum_check_check_col_check: number = 0;\n    let sum_check_check_check: number = 0;\n    let sum_check_check_check_row: number = 0;\n    let sum_check_check_check_col: number = 0;\n    let sum_check_check_check_diagonal1: number = 0;\n    let sum_check_check_check_diagonal2: number = 0;\n    let sum_check_check_check_diagonal1_check: number = 0;\n    let sum_check_check_check_diagonal2_check: number = 0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123156,
      "stdout": "../../../../tmp/tmpadj44iir.ts(47,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    // TODO: implement this function\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123157,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpigqv8a76.js:9:12)\n    at Object.<anonymous> (/tmp/tmpigqv8a76.js:13:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_of_rows: number[] = [];\n    let sum_of_columns: number[] = [];\n    let sum_of_diagonals: number[] = [];\n    let sum: number = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[i][j];\n        }\n        sum_of_rows.push(sum);\n        sum = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        for (let j = 0; j < my_matrix[i].length; j++) {\n            sum += my_matrix[j][i];\n        }\n        sum_of_columns.push(sum);\n        sum = 0;\n    }\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i = 0; i < my_matrix.length; i++) {\n        sum += my_matrix[i][my_matrix.length - 1 - i];\n    }\n    sum_of_diagonals.push(sum);\n    sum = 0;\n    for (let i = 0; i < sum_of_rows.length; i++) {\n        if (sum_of_rows[i] !== sum_of_rows[0] || sum_of_columns[i] !== sum_of_columns[0] || sum_of_diagonals[i] !== sum_of_diagonals[0]) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123157,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvve0jt5z.js:41:12)\n    at Object.<anonymous> (/tmp/tmpvve0jt5z.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to calculate whether the matrix is a magic square.\nfunction magic_square_test(my_matrix: number[][]): boolean {\n    let sum_diag1: number = 0;\n    let sum_diag2: number = 0;\n    let sum_row: number = 0;\n    let sum_col: number = 0;\n    let sum_row_test: number = 0;\n    let sum_col_test: number = 0;\n    let sum_diag1_test: number = 0;\n    let sum_diag2_test: number = 0;\n    let sum_row_test_2: number = 0;\n    let sum_col_test_2: number = 0;\n    let sum_diag1_test_2: number = 0;\n    let sum_diag2_test_2: number = 0;\n    let sum_row_test_3: number = 0;\n    let sum_col_test_3: number = 0;\n    let sum_diag1_test_3: number = 0;\n    let sum_diag2_test_3: number = 0;\n    let sum_row_test_4: number = 0;\n    let sum_col_test_4: number = 0;\n    let sum_diag1_test_4: number = 0;\n    let sum_diag2_test_4: number = 0;\n    let sum_row_test_5: number = 0;\n    let sum_col_test_5: number = 0;\n    let sum_diag1_test_5: number = 0;\n    let sum_diag2_test_5: number = 0;\n    let sum_row_test_6: number = 0;\n    let sum_col_test_6: number = 0;\n    let sum_diag1_test_6: number = 0;\n    let sum_diag2_test_6: number = 0;\n    let sum_row_test_7: number = 0;\n    let sum_col_test_7: number = 0;\n    let sum_diag1_test_7: number = 0;\n    let sum_diag2_test_7: number = 0;\n    let sum_row_test_8: number = 0;\n    let sum_col_test_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = magic_square_test;\n  assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);\n  assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);\n}\n\ntest();",
      "timestamp": 1666123156,
      "stdout": "../../../../tmp/tmpv7wvkvk0.ts(48,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}