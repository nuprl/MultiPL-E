{
  "name": "mbpp_308_large_product",
  "language": "ts",
  "prompt": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    let max_idx: number = 0;\n    let max_idx2: number = 0;\n    for (let i = 0; i < N; i++) {\n        max = 0;\n        for (let j = 0; j < nums1.length; j++) {\n            for (let k = 0; k < nums2.length; k++) {\n                if (nums1[j] * nums2[k] > max) {\n                    max = nums1[j] * nums2[k];\n                    max_idx = j;\n                    max_idx2 = k;\n                }\n            }\n        }\n        result.push(max);\n        nums1[max_idx] = 0;\n        nums2[max_idx2] = 0;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpsamxn_g3.js:27:12)\n    at Object.<anonymous> (/tmp/tmpsamxn_g3.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    let max_index: number = 0;\n    for (let i = 0; i < N; i++) {\n        max = 0;\n        for (let j = 0; j < nums1.length; j++) {\n            for (let k = 0; k < nums2.length; k++) {\n                if (nums1[j] * nums2[k] > max) {\n                    max = nums1[j] * nums2[k];\n                    max_index = j;\n                }\n            }\n        }\n        result.push(max);\n        nums1.splice(max_index, 1);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  50,\n  40\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpdvyq8c8y.js:24:12)\n    at Object.<anonymous> (/tmp/tmpdvyq8c8y.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 50, 40 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let res: number[] = [];\n    let map: Map<number, number> = new Map();\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            let product = nums1[i] * nums2[j];\n            if (map.has(product)) {\n                map.set(product, map.get(product) + 1);\n            } else {\n                map.set(product, 1);\n            }\n        }\n    }\n    let sorted = Array.from(map.keys()).sort((a, b) => b - a);\n    for (let i = 0; i < N; i++) {\n        res.push(sorted[i]);\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    const products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            result.push(nums1[i] * nums2[j]);\n        }\n    }\n    result.sort((a, b) => b - a);\n    return result.slice(0, N);\n}\n\nconsole.log(large_product([1, 2, 3, 4, 5], [5, 4, 3, 2, 1], 3));\nconsole.log(large_product([1, 2, 3, 4, 5], [5, 4, 3, 2, 1], 5));\nconsole.log(large_product([1, 2, 3, 4, 5], [5, 4, 3, 2, 1], 10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "[ 25, 20, 20 ]\n[ 25, 20, 20, 16, 15 ]\n[\n  25, 20, 20, 16, 15,\n  15, 12, 12, 10, 10\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let sorted1: number[] = nums1.sort((a, b) => b - a);\n    let sorted2: number[] = nums2.sort((a, b) => b - a);\n    let i: number = 0;\n    let j: number = 0;\n    while (result.length < N) {\n        if (sorted1[i] * sorted2[j] > sorted1[i] * sorted2[j + 1]) {\n            result.push(sorted1[i] * sorted2[j]);\n            j++;\n        } else {\n            result.push(sorted1[i] * sorted2[j + 1]);\n            i++;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  54,\n  48\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpsikcr4fx.js:23:12)\n    at Object.<anonymous> (/tmp/tmpsikcr4fx.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 54, 48 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max1: number = 0;\n    let max2: number = 0;\n    let max3: number = 0;\n    let max4: number = 0;\n    let max5: number = 0;\n    let max6: number = 0;\n    let max7: number = 0;\n    let max8: number = 0;\n    let max9: number = 0;\n    let max10: number = 0;\n    let max11: number = 0;\n    let max12: number = 0;\n    let max13: number = 0;\n    let max14: number = 0;\n    let max15: number = 0;\n    let max16: number = 0;\n    let max17: number = 0;\n    let max18: number = 0;\n    let max19: number = 0;\n    let max20: number = 0;\n    let max21: number = 0;\n    let max22: number = 0;\n    let max23: number = 0;\n    let max24: number = 0;\n    let max25: number = 0;\n    let max26: number = 0;\n    let max27: number = 0;\n    let max28: number = 0;\n    let max29: number = 0;\n    let max30: number = 0;\n    let max31: number = 0;\n    let max32: number = 0;\n    let max33: number = 0;\n    let max34: number = 0;\n    let max35: number = 0;\n    let max36: number = 0;\n    let max37: number = 0;\n    let max38: number = 0;\n    let max39: number = 0;\n    let max40: number = 0;\n    let max41: number = 0;\n    let max42: number = 0;\n    let max43: number = 0;\n    let max44: number = 0;\n    let max45: number = 0;\n    let max46: number = 0;\n    let max47: number = 0;\n    let max48: number = 0;\n    let max49: number = 0;\n    let max50: number = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "../../../../tmp/tmp_bovagge.ts(55,9): error TS1005: ',' expected.\n../../../../tmp/tmp_bovagge.ts(66,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let res: number[] = [];\n    for (let i = 0; i < N; i++) {\n        let max = -Infinity;\n        let max_index = -1;\n        for (let j = 0; j < nums1.length; j++) {\n            for (let k = 0; k < nums2.length; k++) {\n                if (nums1[j] * nums2[k] > max) {\n                    max = nums1[j] * nums2[k];\n                    max_index = [j, k];\n                }\n            }\n        }\n        res.push(max);\n        nums1.splice(max_index[0], 1);\n        nums2.splice(max_index[1], 1);\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "../../../../tmp/tmpc6s3nf1q.ts(11,21): error TS2322: Type 'number[]' is not assignable to type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max1: number = 0;\n    let max2: number = 0;\n    let max1_index: number = 0;\n    let max2_index: number = 0;\n    for (let i = 0; i < N; i++) {\n        for (let j = 0; j < nums1.length; j++) {\n            if (nums1[j] > max1) {\n                max1 = nums1[j];\n                max1_index = j;\n            }\n        }\n        for (let k = 0; k < nums2.length; k++) {\n            if (nums2[k] > max2) {\n                max2 = nums2[k];\n                max2_index = k;\n            }\n        }\n        result.push(max1 * max2);\n        nums1[max1_index] = 0;\n        nums2[max2_index] = 0;\n        max1 = 0;\n        max2 = 0;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpk99jwiz2.js:32:12)\n    at Object.<anonymous> (/tmp/tmpk99jwiz2.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result = [];\n    for (let i = 0; i < N; i++) {\n        let max = 0;\n        let max_index = 0;\n        for (let j = 0; j < nums1.length; j++) {\n            if (nums1[j] > max) {\n                max = nums1[j];\n                max_index = j;\n            }\n        }\n        nums1[max_index] = 0;\n        max = 0;\n        max_index = 0;\n        for (let j = 0; j < nums2.length; j++) {\n            if (nums2[j] > max) {\n                max = nums2[j];\n                max_index = j;\n            }\n        }\n        nums2[max_index] = 0;\n        result.push(max * max);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  100,\n  81,\n  64\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpo324ofq6.js:30:12)\n    at Object.<anonymous> (/tmp/tmpo324ofq6.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 100, 81, 64 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < N; i++) {\n        let max1 = Math.max(...nums1);\n        let max2 = Math.max(...nums2);\n        result.push(max1 * max2);\n        nums1.splice(nums1.indexOf(max1), 1);\n        nums2.splice(nums2.indexOf(max2), 1);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp0_ex7oak.js:16:12)\n    at Object.<anonymous> (/tmp/tmp0_ex7oak.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max1: number = 0;\n    let max2: number = 0;\n    let max3: number = 0;\n    let max4: number = 0;\n    let max5: number = 0;\n    let max6: number = 0;\n    let max7: number = 0;\n    let max8: number = 0;\n    let max9: number = 0;\n    let max10: number = 0;\n    let max11: number = 0;\n    let max12: number = 0;\n    let max13: number = 0;\n    let max14: number = 0;\n    let max15: number = 0;\n    let max16: number = 0;\n    let max17: number = 0;\n    let max18: number = 0;\n    let max19: number = 0;\n    let max20: number = 0;\n    let max21: number = 0;\n    let max22: number = 0;\n    let max23: number = 0;\n    let max24: number = 0;\n    let max25: number = 0;\n    let max26: number = 0;\n    let max27: number = 0;\n    let max28: number = 0;\n    let max29: number = 0;\n    let max30: number = 0;\n    let max31: number = 0;\n    let max32: number = 0;\n    let max33: number = 0;\n    let max34: number = 0;\n    let max35: number = 0;\n    let max36: number = 0;\n    let max37: number = 0;\n    let max38: number = 0;\n    let max39: number = 0;\n    let max40: number = 0;\n    let max41: number = 0;\n    let max42: number = 0;\n    let max43: number = 0;\n    let max44: number = 0;\n    let max45: number = 0;\n    let max46: number = 0;\n    let max47: number = 0;\n    let max48: number = 0;\n    let max49: number = 0;\n    let max50: number = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "../../../../tmp/tmp_bovagge.ts(55,9): error TS1005: ',' expected.\n../../../../tmp/tmp_bovagge.ts(66,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let res: number[] = [];\n    for (let i = 0; i < N; i++) {\n        let max = Number.MIN_SAFE_INTEGER;\n        let max_index = 0;\n        for (let j = 0; j < nums1.length; j++) {\n            if (nums1[j] > max) {\n                max = nums1[j];\n                max_index = j;\n            }\n        }\n        nums1[max_index] = Number.MIN_SAFE_INTEGER;\n        max = Number.MIN_SAFE_INTEGER;\n        for (let j = 0; j < nums2.length; j++) {\n            if (nums2[j] > max) {\n                max = nums2[j];\n            }\n        }\n        res.push(max * max_index);\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  50,\n  40,\n  30\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpl5oexui2.js:27:12)\n    at Object.<anonymous> (/tmp/tmpl5oexui2.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 50, 40, 30 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let temp: number = 0;\n    let temp1: number = 0;\n    let temp2: number = 0;\n    let temp3: number = 0;\n    let temp4: number = 0;\n    let temp5: number = 0;\n    let temp6: number = 0;\n    let temp7: number = 0;\n    let temp8: number = 0;\n    let temp9: number = 0;\n    let temp10: number = 0;\n    let temp11: number = 0;\n    let temp12: number = 0;\n    let temp13: number = 0;\n    let temp14: number = 0;\n    let temp15: number = 0;\n    let temp16: number = 0;\n    let temp17: number = 0;\n    let temp18: number = 0;\n    let temp19: number = 0;\n    let temp20: number = 0;\n    let temp21: number = 0;\n    let temp22: number = 0;\n    let temp23: number = 0;\n    let temp24: number = 0;\n    let temp25: number = 0;\n    let temp26: number = 0;\n    let temp27: number = 0;\n    let temp28: number = 0;\n    let temp29: number = 0;\n    let temp30: number = 0;\n    let temp31: number = 0;\n    let temp32: number = 0;\n    let temp33: number = 0;\n    let temp34: number = 0;\n    let temp35: number = 0;\n    let temp36: number = 0;\n    let temp37: number = 0;\n    let temp38: number = 0;\n    let temp39: number = 0;\n    let temp40: number = 0;\n    let temp41: number = 0;\n    let temp42: number = 0;\n    let temp43: number = 0;\n    let temp44: number = 0;\n    let temp45: number = 0;\n    let temp46: number = 0;\n    let temp47: number\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "../../../../tmp/tmp21ytpgam.ts(66,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let n1: number = nums1.length;\n    let n2: number = nums2.length;\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let temp: number = 0;\n    let temp1: number = 0;\n    let temp2: number = 0;\n    let temp3: number = 0;\n    let temp4: number = 0;\n    let temp5: number = 0;\n    let temp6: number = 0;\n    let temp7: number = 0;\n    let temp8: number = 0;\n    let temp9: number = 0;\n    let temp10: number = 0;\n    let temp11: number = 0;\n    let temp12: number = 0;\n    let temp13: number = 0;\n    let temp14: number = 0;\n    let temp15: number = 0;\n    let temp16: number = 0;\n    let temp17: number = 0;\n    let temp18: number = 0;\n    let temp19: number = 0;\n    let temp20: number = 0;\n    let temp21: number = 0;\n    let temp22: number = 0;\n    let temp23: number = 0;\n    let temp24: number = 0;\n    let temp25: number = 0;\n    let temp26: number = 0;\n    let temp27: number = 0;\n    let temp28: number = 0;\n    let temp29: number = 0;\n    let temp30: number = 0;\n    let temp31: number = 0;\n    let temp32: number = 0;\n    let temp33: number = 0;\n    let temp34: number = 0;\n    let temp35: number = 0;\n    let temp36: number = 0;\n    let temp37: number = 0;\n    let temp38: number = 0;\n    let temp39: number = 0;\n    let temp40: number = 0;\n    let temp41: number = 0;\n    let temp42: number = 0;\n    let temp43: number = 0;\n    let temp44: number = 0\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "../../../../tmp/tmpmt218fzz.ts(65,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let res: number[] = [];\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let m: number = nums1.length;\n    let n: number = nums2.length;\n    let temp: number = 0;\n    let temp1: number = 0;\n    let temp2: number = 0;\n    let temp3: number = 0;\n    let temp4: number = 0;\n    let temp5: number = 0;\n    let temp6: number = 0;\n    let temp7: number = 0;\n    let temp8: number = 0;\n    let temp9: number = 0;\n    let temp10: number = 0;\n    let temp11: number = 0;\n    let temp12: number = 0;\n    let temp13: number = 0;\n    let temp14: number = 0;\n    let temp15: number = 0;\n    let temp16: number = 0;\n    let temp17: number = 0;\n    let temp18: number = 0;\n    let temp19: number = 0;\n    let temp20: number = 0;\n    let temp21: number = 0;\n    let temp22: number = 0;\n    let temp23: number = 0;\n    let temp24: number = 0;\n    let temp25: number = 0;\n    let temp26: number = 0;\n    let temp27: number = 0;\n    let temp28: number = 0;\n    let temp29: number = 0;\n    let temp30: number = 0;\n    let temp31: number = 0;\n    let temp32: number = 0;\n    let temp33: number = 0;\n    let temp34: number = 0;\n    let temp35: number = 0;\n    let temp36: number = 0;\n    let temp37: number = 0;\n    let temp38: number = 0;\n    let temp39: number = 0;\n    let temp40: number = 0;\n    let temp41: number = 0;\n    let temp42: number = 0;\n    let temp43: number = 0;\n    let temp44: number = 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509964,
      "stdout": "../../../../tmp/tmpemz51yc6.ts(66,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let res: number[] = [];\n    let i = 0;\n    let j = 0;\n    while (N > 0) {\n        if (nums1[i] * nums2[j] > nums1[i + 1] * nums2[j + 1]) {\n            res.push(nums1[i] * nums2[j]);\n            i++;\n        } else {\n            res.push(nums1[i + 1] * nums2[j + 1]);\n            j++;\n        }\n        N--;\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12,\n  16,\n  18\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpp8s6upfq.js:22:12)\n    at Object.<anonymous> (/tmp/tmpp8s6upfq.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12, 16, 18 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result = [];\n    let max = 0;\n    let max_index = 0;\n    for (let i = 0; i < N; i++) {\n        max = 0;\n        max_index = 0;\n        for (let j = 0; j < nums1.length; j++) {\n            if (nums1[j] > max) {\n                max = nums1[j];\n                max_index = j;\n            }\n        }\n        nums1[max_index] = 0;\n        max = 0;\n        max_index = 0;\n        for (let j = 0; j < nums2.length; j++) {\n            if (nums2[j] > max) {\n                max = nums2[j];\n                max_index = j;\n            }\n        }\n        nums2[max_index] = 0;\n        result.push(max);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10,\n  9,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpjy9awjv4.js:32:12)\n    at Object.<anonymous> (/tmp/tmpjy9awjv4.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 10, 9, 8 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let res: number[] = [];\n    let max1: number = 0;\n    let max2: number = 0;\n    let max1_index: number = 0;\n    let max2_index: number = 0;\n    for (let i = 0; i < N; i++) {\n        for (let j = 0; j < nums1.length; j++) {\n            if (nums1[j] > max1) {\n                max1 = nums1[j];\n                max1_index = j;\n            }\n        }\n        for (let k = 0; k < nums2.length; k++) {\n            if (nums2[k] > max2) {\n                max2 = nums2[k];\n                max2_index = k;\n            }\n        }\n        res.push(max1 * max2);\n        nums1[max1_index] = 0;\n        nums2[max2_index] = 0;\n        max1 = 0;\n        max2 = 0;\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmph4p5bhzs.js:32:12)\n    at Object.<anonymous> (/tmp/tmph4p5bhzs.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result = [];\n    for (let i = 0; i < N; i++) {\n        let max = 0;\n        let max_index = 0;\n        for (let j = 0; j < nums1.length; j++) {\n            for (let k = 0; k < nums2.length; k++) {\n                if (nums1[j] * nums2[k] > max) {\n                    max = nums1[j] * nums2[k];\n                    max_index = [j, k];\n                }\n            }\n        }\n        result.push(max);\n        nums1.splice(max_index[0], 1);\n        nums2.splice(max_index[1], 1);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122806,
      "stdout": "../../../../tmp/tmpxyh3s0le.ts(11,21): error TS2322: Type 'number[]' is not assignable to type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let nums1_sorted: number[] = nums1.sort((a, b) => b - a);\n    let nums2_sorted: number[] = nums2.sort((a, b) => b - a);\n    for (let i = 0; i < N; i++) {\n        result.push(nums1_sorted[i] * nums2_sorted[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpmran9m83.js:14:12)\n    at Object.<anonymous> (/tmp/tmpmran9m83.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let temp: number[] = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            temp.push(nums1[i] * nums2[j]);\n        }\n    }\n    temp.sort((a, b) => b - a);\n    for (let i = 0; i < N; i++) {\n        result.push(temp[i]);\n    }\n    return result;\n}\n\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 2));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 3));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 4));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 5));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ 18, 15 ]\n[ 18, 15, 12 ]\n[ 18, 15, 12, 12 ]\n[ 18, 15, 12, 12, 10 ]\n[ 18, 15, 12, 12, 10, 8 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let results = [];\n    for (let i = 0; i < N; i++) {\n        let max = 0;\n        let max_index = 0;\n        for (let j = 0; j < nums1.length; j++) {\n            if (nums1[j] > max) {\n                max = nums1[j];\n                max_index = j;\n            }\n        }\n        nums1.splice(max_index, 1);\n        max = 0;\n        max_index = 0;\n        for (let j = 0; j < nums2.length; j++) {\n            if (nums2[j] > max) {\n                max = nums2[j];\n                max_index = j;\n            }\n        }\n        nums2.splice(max_index, 1);\n        results.push(max * max);\n    }\n    return results;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  100,\n  81,\n  64\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp088k8fbn.js:30:12)\n    at Object.<anonymous> (/tmp/tmp088k8fbn.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 100, 81, 64 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ 50, 45, 40 ]\n[ 50, 45, 40, 40, 36 ]\n[\n  50, 45, 40, 40, 36,\n  35, 32, 30, 30, 28\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ 50, 45, 40 ]\n[ 50, 45, 40, 40, 36 ]\n[\n  50, 45, 40, 40, 36,\n  35, 32, 30, 30, 28\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result = [];\n    let i = 0;\n    let j = 0;\n    while (i < nums1.length && j < nums2.length) {\n        if (nums1[i] < nums2[j]) {\n            result.push([nums1[i], nums2[j]]);\n            i++;\n        } else {\n            result.push([nums1[i], nums2[j]]);\n            j++;\n        }\n    }\n    while (i < nums1.length) {\n        result.push([nums1[i], nums2[nums2.length - 1]]);\n        i++;\n    }\n    while (j < nums2.length) {\n        result.push([nums1[nums1.length - 1], nums2[j]]);\n        j++;\n    }\n    return result.sort((a, b) => a[0] * a[1] - b[0] * b[1]).slice(result.length - N, result.length);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    6,\n    8\n  ],\n  [\n    6,\n    9\n  ],\n  [\n    6,\n    10\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpqkcpu694.js:29:12)\n    at Object.<anonymous> (/tmp/tmpqkcpu694.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 6, 8 ], [ 6, 9 ], [ 6, 10 ] ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let i = 0;\n    let j = 0;\n    while (i < nums1.length && j < nums2.length) {\n        if (nums1[i] > nums2[j]) {\n            result.push(nums1[i] * nums2[j]);\n            j++;\n        } else {\n            result.push(nums1[i] * nums2[j]);\n            i++;\n        }\n    }\n    while (i < nums1.length) {\n        result.push(nums1[i] * nums2[nums2.length - 1]);\n        i++;\n    }\n    while (j < nums2.length) {\n        result.push(nums1[nums1.length - 1] * nums2[j]);\n        j++;\n    }\n    result.sort((a, b) => b - a);\n    return result.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  54,\n  48\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpmcxiq3ff.js:30:12)\n    at Object.<anonymous> (/tmp/tmpmcxiq3ff.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 54, 48 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result = [];\n    let temp = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            temp.push(nums1[i] * nums2[j]);\n        }\n    }\n    temp.sort((a, b) => b - a);\n    for (let i = 0; i < N; i++) {\n        result.push(temp[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    let max_index: number = 0;\n    let max_index2: number = 0;\n    let max_index3: number = 0;\n    let max_index4: number = 0;\n    let max_index5: number = 0;\n    let max_index6: number = 0;\n    let max_index7: number = 0;\n    let max_index8: number = 0;\n    let max_index9: number = 0;\n    let max_index10: number = 0;\n    let max_index11: number = 0;\n    let max_index12: number = 0;\n    let max_index13: number = 0;\n    let max_index14: number = 0;\n    let max_index15: number = 0;\n    let max_index16: number = 0;\n    let max_index17: number = 0;\n    let max_index18: number = 0;\n    let max_index19: number = 0;\n    let max_index20: number = 0;\n    let max_index21: number = 0;\n    let max_index22: number = 0;\n    let max_index23: number = 0;\n    let max_index24: number = 0;\n    let max_index25: number = 0;\n    let max_index26: number = 0;\n    let max_index27: number = 0;\n    let max_index28: number = 0;\n    let max_index29: number = 0;\n    let max_index30: number = 0;\n    let max_index31: number = 0;\n    let max_index32: number = 0;\n    let max_index33: number = 0;\n    let max_index34: number = 0;\n    let max_index35: number = 0;\n    let max_index36: number = 0;\n    let max_index37: number = 0;\n    let max_index38: number = 0;\n    let max_index39: number = 0;\n    let max_index40: number = 0;\n    let max_index41: number = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122806,
      "stdout": "../../../../tmp/tmpkv1u8d4u.ts(47,9): error TS1005: ',' expected.\n../../../../tmp/tmpkv1u8d4u.ts(58,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result = [];\n    for (let i = 0; i < N; i++) {\n        let max = -Infinity;\n        let maxIndex = -1;\n        for (let j = 0; j < nums1.length; j++) {\n            for (let k = 0; k < nums2.length; k++) {\n                if (nums1[j] * nums2[k] > max) {\n                    max = nums1[j] * nums2[k];\n                    maxIndex = [j, k];\n                }\n            }\n        }\n        result.push(max);\n        nums1.splice(maxIndex[0], 1);\n        nums2.splice(maxIndex[1], 1);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "../../../../tmp/tmpc0un7hdg.ts(11,21): error TS2322: Type 'number[]' is not assignable to type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result = [];\n    let max = 0;\n    let index = 0;\n    for (let i = 0; i < N; i++) {\n        for (let j = 0; j < nums1.length; j++) {\n            for (let k = 0; k < nums2.length; k++) {\n                if (nums1[j] * nums2[k] > max) {\n                    max = nums1[j] * nums2[k];\n                    index = j;\n                }\n            }\n        }\n        result.push(max);\n        nums1.splice(index, 1);\n        max = 0;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  50,\n  40\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp2syo_3b8.js:24:12)\n    at Object.<anonymous> (/tmp/tmp2syo_3b8.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 50, 40 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n  let result: number[] = [];\n  for (let i = 0; i < N; i++) {\n    let max = 0;\n    let maxIndex = 0;\n    for (let j = 0; j < nums1.length; j++) {\n      if (nums1[j] > max) {\n        max = nums1[j];\n        maxIndex = j;\n      }\n    }\n    nums1.splice(maxIndex, 1);\n    max = 0;\n    maxIndex = 0;\n    for (let j = 0; j < nums2.length; j++) {\n      if (nums2[j] > max) {\n        max = nums2[j];\n        maxIndex = j;\n      }\n    }\n    nums2.splice(maxIndex, 1);\n    result.push(max * max);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  100,\n  81,\n  64\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpccljwv8r.js:30:12)\n    at Object.<anonymous> (/tmp/tmpccljwv8r.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 100, 81, 64 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < N; i++) {\n        let max = -Infinity;\n        let maxIndex = -1;\n        for (let j = 0; j < nums1.length; j++) {\n            for (let k = 0; k < nums2.length; k++) {\n                if (nums1[j] * nums2[k] > max) {\n                    max = nums1[j] * nums2[k];\n                    maxIndex = [j, k];\n                }\n            }\n        }\n        result.push(max);\n        nums1.splice(maxIndex[0], 1);\n        nums2.splice(maxIndex[1], 1);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "../../../../tmp/tmphmkpv6lx.ts(11,21): error TS2322: Type 'number[]' is not assignable to type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max1: number = 0;\n    let max2: number = 0;\n    let max_product: number = 0;\n    for (let i = 0; i < N; i++) {\n        for (let j = 0; j < nums1.length; j++) {\n            if (nums1[j] > max1) {\n                max1 = nums1[j];\n            }\n        }\n        for (let k = 0; k < nums2.length; k++) {\n            if (nums2[k] > max2) {\n                max2 = nums2[k];\n            }\n        }\n        max_product = max1 * max2;\n        result.push(max_product);\n        nums1.splice(nums1.indexOf(max1), 1);\n        nums2.splice(nums2.indexOf(max2), 1);\n        max1 = 0;\n        max2 = 0;\n    }\n    return result;\n}\n\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 1));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ 50, 36, 24 ]\n[ 50, 36, 24, 14, 6 ]\n[ 50 ]\n[]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpq82756ub.js:34:12)\n    at Object.<anonymous> (/tmp/tmpq82756ub.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let i: number = 0;\n    let j: number = 0;\n    while (i < nums1.length && j < nums2.length) {\n        if (nums1[i] < nums2[j]) {\n            result.push(nums1[i] * nums2[j]);\n            i++;\n        } else {\n            result.push(nums1[i] * nums2[j]);\n            j++;\n        }\n    }\n    while (i < nums1.length) {\n        result.push(nums1[i] * nums2[nums2.length - 1]);\n        i++;\n    }\n    while (j < nums2.length) {\n        result.push(nums1[nums1.length - 1] * nums2[j]);\n        j++;\n    }\n    result.sort((a, b) => b - a);\n    return result.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  54,\n  48\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpwnxk5_0b.js:30:12)\n    at Object.<anonymous> (/tmp/tmpwnxk5_0b.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 54, 48 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for (let i = 0; i < N; i++) {\n        for (let j = 0; j < N; j++) {\n            if (nums1[i] * nums2[j] > max) {\n                max = nums1[i] * nums2[j];\n                result.push(max);\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  6,\n  8,\n  12,\n  16,\n  18,\n  24\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpckxyszau.js:18:12)\n    at Object.<anonymous> (/tmp/tmpckxyszau.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     3,  6,  8, 12,\n    16, 18, 24\n  ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result = [];\n    for (let i = 0; i < N; i++) {\n        let max = 0;\n        let index = 0;\n        for (let j = 0; j < nums1.length; j++) {\n            for (let k = 0; k < nums2.length; k++) {\n                if (nums1[j] * nums2[k] > max) {\n                    max = nums1[j] * nums2[k];\n                    index = j;\n                }\n            }\n        }\n        result.push(max);\n        nums1.splice(index, 1);\n    }\n    return result;\n}\n\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 4));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ 50, 40, 30 ]\n[ 50, 40, 30, 20 ]\n[ 50, 40, 30, 20, 10 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  50,\n  40\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp4h0bzs6g.js:26:12)\n    at Object.<anonymous> (/tmp/tmp4h0bzs6g.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 50, 40 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    let max_index: number = 0;\n    let max_index2: number = 0;\n    let max_index3: number = 0;\n    let max_index4: number = 0;\n    let max_index5: number = 0;\n    let max_index6: number = 0;\n    let max_index7: number = 0;\n    let max_index8: number = 0;\n    let max_index9: number = 0;\n    let max_index10: number = 0;\n    let max_index11: number = 0;\n    let max_index12: number = 0;\n    let max_index13: number = 0;\n    let max_index14: number = 0;\n    let max_index15: number = 0;\n    let max_index16: number = 0;\n    let max_index17: number = 0;\n    let max_index18: number = 0;\n    let max_index19: number = 0;\n    let max_index20: number = 0;\n    let max_index21: number = 0;\n    let max_index22: number = 0;\n    let max_index23: number = 0;\n    let max_index24: number = 0;\n    let max_index25: number = 0;\n    let max_index26: number = 0;\n    let max_index27: number = 0;\n    let max_index28: number = 0;\n    let max_index29: number = 0;\n    let max_index30: number = 0;\n    let max_index31: number = 0;\n    let max_index32: number = 0;\n    let max_index33: number = 0;\n    let max_index34: number = 0;\n    let max_index35: number = 0;\n    let max_index36: number = 0;\n    let max_index37: number = 0;\n    let max_index38: number = 0;\n    let max_index39: number = 0;\n    let max_index40: number = 0;\n    let max_index41: number = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122806,
      "stdout": "../../../../tmp/tmpkv1u8d4u.ts(47,9): error TS1005: ',' expected.\n../../../../tmp/tmpkv1u8d4u.ts(58,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n  let result: number[] = [];\n  let max: number = 0;\n  let maxIndex: number = 0;\n  let maxIndex2: number = 0;\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < nums1.length; j++) {\n      for (let k = 0; k < nums2.length; k++) {\n        if (nums1[j] * nums2[k] > max) {\n          max = nums1[j] * nums2[k];\n          maxIndex = j;\n          maxIndex2 = k;\n        }\n      }\n    }\n    result.push(max);\n    nums1.splice(maxIndex, 1);\n    nums2.splice(maxIndex2, 1);\n    max = 0;\n  }\n  return result;\n}\n\nconsole.log(large_product([-1, -2, -3, -4, -5], [-6, -7, -8, -9, -10], 3));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ 50, 36, 24 ]\n[ 50, 36, 24 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp2ra54o2l.js:29:12)\n    at Object.<anonymous> (/tmp/tmp2ra54o2l.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result = [];\n    for (let i = 0; i < N; i++) {\n        let max = 0;\n        let max_index = 0;\n        for (let j = 0; j < nums1.length; j++) {\n            let product = nums1[j] * nums2[0];\n            if (product > max) {\n                max = product;\n                max_index = j;\n            }\n        }\n        result.push(max);\n        nums1.splice(max_index, 1);\n        nums2.shift();\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  18,\n  30,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpqa54arar.js:23:12)\n    at Object.<anonymous> (/tmp/tmpqa54arar.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 18, 30, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max1: number = 0;\n    let max2: number = 0;\n    let max1_index: number = 0;\n    let max2_index: number = 0;\n    for (let i = 0; i < N; i++) {\n        for (let j = 0; j < nums1.length; j++) {\n            if (nums1[j] > max1) {\n                max1 = nums1[j];\n                max1_index = j;\n            }\n        }\n        for (let j = 0; j < nums2.length; j++) {\n            if (nums2[j] > max2) {\n                max2 = nums2[j];\n                max2_index = j;\n            }\n        }\n        result.push(max1 * max2);\n        nums1[max1_index] = 0;\n        nums2[max2_index] = 0;\n        max1 = 0;\n        max2 = 0;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpudli2l55.js:32:12)\n    at Object.<anonymous> (/tmp/tmpudli2l55.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max1: number = 0;\n    let max2: number = 0;\n    let max1Index: number = 0;\n    let max2Index: number = 0;\n    for (let i: number = 0; i < N; i++) {\n        for (let j: number = 0; j < nums1.length; j++) {\n            if (nums1[j] > max1) {\n                max1 = nums1[j];\n                max1Index = j;\n            }\n        }\n        for (let j: number = 0; j < nums2.length; j++) {\n            if (nums2[j] > max2) {\n                max2 = nums2[j];\n                max2Index = j;\n            }\n        }\n        result.push(max1 * max2);\n        nums1[max1Index] = 0;\n        nums2[max2Index] = 0;\n        max1 = 0;\n        max2 = 0;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpoh418l_z.js:32:12)\n    at Object.<anonymous> (/tmp/tmpoh418l_z.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let i: number = 0;\n    let j: number = 0;\n    while (i < nums1.length && j < nums2.length) {\n        if (nums1[i] < nums2[j]) {\n            result.push(nums1[i] * nums2[j]);\n            i++;\n        } else {\n            result.push(nums1[i] * nums2[j]);\n            j++;\n        }\n    }\n    while (i < nums1.length) {\n        result.push(nums1[i] * nums2[nums2.length - 1]);\n        i++;\n    }\n    while (j < nums2.length) {\n        result.push(nums1[nums1.length - 1] * nums2[j]);\n        j++;\n    }\n    result.sort((a, b) => a - b);\n    return result.slice(result.length - N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122811,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  48,\n  54,\n  60\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmph5e3upat.js:30:12)\n    at Object.<anonymous> (/tmp/tmph5e3upat.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 48, 54, 60 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < N; i++) {\n        let max = 0;\n        let max_index = 0;\n        for (let j = 0; j < nums1.length; j++) {\n            for (let k = 0; k < nums2.length; k++) {\n                if (nums1[j] * nums2[k] > max) {\n                    max = nums1[j] * nums2[k];\n                    max_index = j;\n                }\n            }\n        }\n        result.push(max);\n        nums1.splice(max_index, 1);\n    }\n    return result;\n}\n\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 2));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 3));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 4));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "[ 18, 12 ]\n[ 18, 12, 6 ]\n[ 18, 12, 6, 0 ]\n[ 18, 12, 6, 0, 0 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  50,\n  40\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpvnz27387.js:27:12)\n    at Object.<anonymous> (/tmp/tmpvnz27387.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 50, 40 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    while (k < N) {\n        if (nums1[i] * nums2[j] > nums1[i] * nums2[j + 1]) {\n            result.push(nums1[i] * nums2[j]);\n            j++;\n        } else {\n            result.push(nums1[i] * nums2[j + 1]);\n            i++;\n        }\n        k++;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  12,\n  18\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp6hbif4d2.js:23:12)\n    at Object.<anonymous> (/tmp/tmp6hbif4d2.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 12, 18 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result = [];\n    let i = 0;\n    let j = 0;\n    while (i < nums1.length && j < nums2.length) {\n        if (nums1[i] < nums2[j]) {\n            result.push([nums1[i], nums2[j]]);\n            i++;\n        } else {\n            result.push([nums1[i], nums2[j]]);\n            j++;\n        }\n    }\n    while (i < nums1.length) {\n        result.push([nums1[i], nums2[nums2.length - 1]]);\n        i++;\n    }\n    while (j < nums2.length) {\n        result.push([nums1[nums1.length - 1], nums2[j]]);\n        j++;\n    }\n    return result.sort((a, b) => a[0] * a[1] - b[0] * b[1]).slice(result.length - N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    6,\n    8\n  ],\n  [\n    6,\n    9\n  ],\n  [\n    6,\n    10\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpr1z7not1.js:29:12)\n    at Object.<anonymous> (/tmp/tmpr1z7not1.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 6, 8 ], [ 6, 9 ], [ 6, 10 ] ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let i: number = 0;\n    let j: number = 0;\n    while (i < nums1.length && j < nums2.length) {\n        if (nums1[i] * nums2[j] > nums1[i] * nums2[j + 1]) {\n            result.push(nums1[i] * nums2[j]);\n            j++;\n        } else {\n            result.push(nums1[i] * nums2[j + 1]);\n            i++;\n        }\n    }\n    return result.sort((a, b) => b - a).slice(0, N);\n}\n\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 4));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "[ 35, 28, 21 ]\n[ 35, 28, 21, 14 ]\n[ 35, 28, 21, 14, 7 ]\n[ 35, 28, 21, 14, 7 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  36,\n  30,\n  24\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpfzy5govd.js:25:12)\n    at Object.<anonymous> (/tmp/tmpfzy5govd.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 36, 30, 24 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let i = 0;\n    let j = 0;\n    while (i < nums1.length && j < nums2.length) {\n        if (nums1[i] < nums2[j]) {\n            result.push(nums1[i] * nums2[j]);\n            i++;\n        } else {\n            result.push(nums1[i] * nums2[j]);\n            j++;\n        }\n    }\n    while (i < nums1.length) {\n        result.push(nums1[i] * nums2[nums2.length - 1]);\n        i++;\n    }\n    while (j < nums2.length) {\n        result.push(nums1[nums1.length - 1] * nums2[j]);\n        j++;\n    }\n    result.sort((a, b) => b - a);\n    return result.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  54,\n  48\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp_n7e9x5l.js:30:12)\n    at Object.<anonymous> (/tmp/tmp_n7e9x5l.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 54, 48 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n  let res: number[] = [];\n  let len1 = nums1.length;\n  let len2 = nums2.length;\n  let i = 0;\n  let j = 0;\n  while (i < len1 && j < len2) {\n    if (nums1[i] < nums2[j]) {\n      res.push(nums1[i] * nums2[j]);\n      i++;\n    } else {\n      res.push(nums1[i] * nums2[j]);\n      j++;\n    }\n  }\n  while (i < len1) {\n    res.push(nums1[i] * nums2[len2 - 1]);\n    i++;\n  }\n  while (j < len2) {\n    res.push(nums1[len1 - 1] * nums2[j]);\n    j++;\n  }\n  res.sort((a, b) => b - a);\n  return res.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  54,\n  48\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpdvph3ayp.js:32:12)\n    at Object.<anonymous> (/tmp/tmpdvph3ayp.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 54, 48 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let nums1_sorted: number[] = nums1.sort((a, b) => b - a);\n    let nums2_sorted: number[] = nums2.sort((a, b) => b - a);\n    let i: number = 0;\n    let j: number = 0;\n    while (result.length < N) {\n        if (nums1_sorted[i] * nums2_sorted[j] > nums1_sorted[i] * nums2_sorted[j + 1]) {\n            result.push(nums1_sorted[i] * nums2_sorted[j]);\n            j++;\n        } else {\n            result.push(nums1_sorted[i] * nums2_sorted[j + 1]);\n            i++;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  54,\n  48\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpuu3aoi66.js:23:12)\n    at Object.<anonymous> (/tmp/tmpuu3aoi66.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 54, 48 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let max_products: number[] = [];\n    for (let i = 0; i < N; i++) {\n        let max_product = 0;\n        let max_product_index = -1;\n        for (let j = 0; j < nums1.length; j++) {\n            for (let k = 0; k < nums2.length; k++) {\n                if (nums1[j] * nums2[k] > max_product) {\n                    max_product = nums1[j] * nums2[k];\n                    max_product_index = j;\n                }\n            }\n        }\n        max_products.push(max_product);\n        nums1.splice(max_product_index, 1);\n    }\n    return max_products;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  50,\n  40\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp3o195pi5.js:23:12)\n    at Object.<anonymous> (/tmp/tmp3o195pi5.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 50, 40 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let nums1_sorted: number[] = nums1.sort((a, b) => b - a);\n    let nums2_sorted: number[] = nums2.sort((a, b) => b - a);\n    let i: number = 0;\n    let j: number = 0;\n    while (result.length < N) {\n        if (nums1_sorted[i] * nums2_sorted[j] > nums1_sorted[i] * nums2_sorted[j + 1]) {\n            result.push(nums1_sorted[i] * nums2_sorted[j]);\n            j++;\n        } else {\n            result.push(nums1_sorted[i] * nums2_sorted[j]);\n            i++;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  54,\n  48\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp_ey6ky52.js:23:12)\n    at Object.<anonymous> (/tmp/tmp_ey6ky52.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 54, 48 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max1: number = 0;\n    let max2: number = 0;\n    let max1_index: number = 0;\n    let max2_index: number = 0;\n    for (let i = 0; i < N; i++) {\n        for (let j = 0; j < nums1.length; j++) {\n            if (nums1[j] > max1) {\n                max1 = nums1[j];\n                max1_index = j;\n            }\n        }\n        for (let j = 0; j < nums2.length; j++) {\n            if (nums2[j] > max2) {\n                max2 = nums2[j];\n                max2_index = j;\n            }\n        }\n        result.push(max1 * max2);\n        nums1[max1_index] = 0;\n        nums2[max2_index] = 0;\n        max1 = 0;\n        max2 = 0;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpudli2l55.js:32:12)\n    at Object.<anonymous> (/tmp/tmpudli2l55.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let res: number[] = [];\n    let i: number = 0;\n    let j: number = 0;\n    let count: number = 0;\n    while (count < N) {\n        let max1: number = nums1[i];\n        let max2: number = nums2[j];\n        let max: number = max1 * max2;\n        if (max1 > max2) {\n            i++;\n        } else {\n            j++;\n        }\n        res.push(max);\n        count++;\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  6,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpndgo4i9h.js:25:12)\n    at Object.<anonymous> (/tmp/tmpndgo4i9h.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 6, 8 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < N; i++) {\n        let max1 = Math.max(...nums1);\n        let max2 = Math.max(...nums2);\n        result.push(max1 * max2);\n        nums1.splice(nums1.indexOf(max1), 1);\n        nums2.splice(nums2.indexOf(max2), 1);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp0_ex7oak.js:16:12)\n    at Object.<anonymous> (/tmp/tmp0_ex7oak.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    let maxIndex: number = 0;\n    let maxIndex2: number = 0;\n    for (let i = 0; i < N; i++) {\n        for (let j = 0; j < nums1.length; j++) {\n            for (let k = 0; k < nums2.length; k++) {\n                if (nums1[j] * nums2[k] > max) {\n                    max = nums1[j] * nums2[k];\n                    maxIndex = j;\n                    maxIndex2 = k;\n                }\n            }\n        }\n        result.push(max);\n        nums1.splice(maxIndex, 1);\n        nums2.splice(maxIndex2, 1);\n        max = 0;\n    }\n    return result;\n}\n\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 4));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "[ 50, 36, 24 ]\n[ 50, 36, 24, 14 ]\n[ 50, 36, 24, 14, 6 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpxxm095l7.js:30:12)\n    at Object.<anonymous> (/tmp/tmpxxm095l7.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let i: number = 0;\n    let j: number = 0;\n    while (i < nums1.length && j < nums2.length) {\n        if (nums1[i] < nums2[j]) {\n            result.push(nums1[i] * nums2[j]);\n            i++;\n        } else {\n            result.push(nums1[i] * nums2[j]);\n            j++;\n        }\n    }\n    return result.sort((a, b) => b - a).slice(0, N);\n}\n\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 8));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "[ 30, 24, 18 ]\n[ 30, 24, 18, 12, 6 ]\n[ 30, 24, 18, 12, 6 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  48,\n  36,\n  30\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpeakfthi3.js:24:12)\n    at Object.<anonymous> (/tmp/tmpeakfthi3.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 48, 36, 30 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let temp: number[] = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            temp.push(nums1[i] * nums2[j]);\n        }\n    }\n    temp.sort((a, b) => b - a);\n    for (let i = 0; i < N; i++) {\n        result.push(temp[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n  let result: number[] = [];\n  let max: number = 0;\n  let maxIndex: number = 0;\n  let max2: number = 0;\n  let maxIndex2: number = 0;\n\n  for (let i = 0; i < nums1.length; i++) {\n    if (nums1[i] > max) {\n      max = nums1[i];\n      maxIndex = i;\n    }\n  }\n\n  for (let i = 0; i < nums2.length; i++) {\n    if (nums2[i] > max2) {\n      max2 = nums2[i];\n      maxIndex2 = i;\n    }\n  }\n\n  result.push(max * max2);\n\n  for (let i = 0; i < N - 1; i++) {\n    if (maxIndex < nums1.length - 1) {\n      maxIndex++;\n      max = nums1[maxIndex];\n    } else {\n      maxIndex = 0;\n      max = nums1[maxIndex];\n    }\n\n    if (maxIndex2 < nums2.length - 1) {\n      maxIndex2++;\n      max2 = nums2[maxIndex2];\n    } else {\n      maxIndex2 = 0;\n      max2 = nums2[maxIndex2];\n    }\n\n    result.push(max * max2);\n  }\n\n  return result;\n}\n\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 2));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 3));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 4));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 5));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 6));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 7));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 8));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "[ 18, 4 ]\n[ 18, 4, 10 ]\n[ 18, 4, 10, 18 ]\n[ 18, 4, 10, 18, 4 ]\n[ 18, 4, 10, 18, 4, 10 ]\n[\n  18,  4, 10, 18,\n   4, 10, 18\n]\n[\n  18,  4, 10, 18,\n   4, 10, 18,  4\n]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  6,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp5u44rfzi.js:53:12)\n    at Object.<anonymous> (/tmp/tmp5u44rfzi.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 6, 6 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n  const result: number[] = [];\n  let i = 0;\n  let j = 0;\n  while (result.length < N) {\n    if (nums1[i] * nums2[j] > nums1[i + 1] * nums2[j + 1]) {\n      result.push(nums1[i] * nums2[j]);\n      i++;\n      j++;\n    } else {\n      result.push(nums1[i + 1] * nums2[j + 1]);\n      i++;\n      j++;\n    }\n  }\n  return result;\n}\n\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "[ 14, 24, 36 ]\n[ 14, 24, 36, 50, NaN ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12,\n  24,\n  36\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp6emponwg.js:25:12)\n    at Object.<anonymous> (/tmp/tmp6emponwg.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12, 24, 36 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n  let result = [];\n  let max = 0;\n  for (let i = 0; i < nums1.length; i++) {\n    for (let j = 0; j < nums2.length; j++) {\n      let product = nums1[i] * nums2[j];\n      if (result.length < N) {\n        result.push(product);\n        max = Math.max(...result);\n      } else if (product > max) {\n        result.push(product);\n        result.splice(result.indexOf(max), 1);\n        max = Math.max(...result);\n      }\n    }\n  }\n  return result;\n}\n\nconsole.log(large_product([1, 2, 3, 4], [5, 6, 7, 8], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "[ 5, 6, 32 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  6,\n  60\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpw0s2404d.js:25:12)\n    at Object.<anonymous> (/tmp/tmpw0s2404d.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 6, 60 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result = [];\n    for (let i = 0; i < N; i++) {\n        let max = 0;\n        let max_index = 0;\n        for (let j = 0; j < nums1.length; j++) {\n            for (let k = 0; k < nums2.length; k++) {\n                if (nums1[j] * nums2[k] > max) {\n                    max = nums1[j] * nums2[k];\n                    max_index = [j, k];\n                }\n            }\n        }\n        result.push(max);\n        nums1.splice(max_index[0], 1);\n        nums2.splice(max_index[1], 1);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122806,
      "stdout": "../../../../tmp/tmpxyh3s0le.ts(11,21): error TS2322: Type 'number[]' is not assignable to type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n  let result: number[] = [];\n  for (let i = 0; i < N; i++) {\n    let max = -Infinity;\n    let max_index = -1;\n    for (let j = 0; j < nums1.length; j++) {\n      for (let k = 0; k < nums2.length; k++) {\n        if (nums1[j] * nums2[k] > max) {\n          max = nums1[j] * nums2[k];\n          max_index = [j, k];\n        }\n      }\n    }\n    result.push(max);\n    nums1.splice(max_index[0], 1);\n    nums2.splice(max_index[1], 1);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "../../../../tmp/tmpdig3g04q.ts(11,11): error TS2322: Type 'number[]' is not assignable to type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result = [];\n    let i = 0;\n    let j = 0;\n    while (result.length < N) {\n        if (nums1[i] * nums2[j] > nums1[i + 1] * nums2[j + 1]) {\n            result.push(nums1[i] * nums2[j]);\n            i++;\n        } else {\n            result.push(nums1[i + 1] * nums2[j + 1]);\n            j++;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12,\n  16,\n  18\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpg1u80xt6.js:21:12)\n    at Object.<anonymous> (/tmp/tmpg1u80xt6.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12, 16, 18 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let res: number[] = [];\n    for (let i = 0; i < N; i++) {\n        let max1 = Math.max(...nums1);\n        let max2 = Math.max(...nums2);\n        res.push(max1 * max2);\n        nums1.splice(nums1.indexOf(max1), 1);\n        nums2.splice(nums2.indexOf(max2), 1);\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp3pn8pxdx.js:16:12)\n    at Object.<anonymous> (/tmp/tmp3pn8pxdx.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let res: number[] = [];\n    let i = 0;\n    let j = 0;\n    while (i < nums1.length && j < nums2.length) {\n        if (nums1[i] > nums2[j]) {\n            res.push(nums1[i] * nums2[j]);\n            j++;\n        } else {\n            res.push(nums1[i] * nums2[j]);\n            i++;\n        }\n    }\n    while (i < nums1.length) {\n        res.push(nums1[i] * nums2[nums2.length - 1]);\n        i++;\n    }\n    while (j < nums2.length) {\n        res.push(nums1[nums1.length - 1] * nums2[j]);\n        j++;\n    }\n    return res.sort((a, b) => b - a).slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  54,\n  48\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpkc0dp8nz.js:29:12)\n    at Object.<anonymous> (/tmp/tmpkc0dp8nz.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 54, 48 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n  let result: number[] = [];\n  for (let i = 0; i < N; i++) {\n    let max = -Infinity;\n    let max_index = -1;\n    for (let j = 0; j < nums1.length; j++) {\n      for (let k = 0; k < nums2.length; k++) {\n        if (nums1[j] * nums2[k] > max) {\n          max = nums1[j] * nums2[k];\n          max_index = [j, k];\n        }\n      }\n    }\n    result.push(max);\n    nums1.splice(max_index[0], 1);\n    nums2.splice(max_index[1], 1);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "../../../../tmp/tmpdig3g04q.ts(11,11): error TS2322: Type 'number[]' is not assignable to type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            result.push(nums1[i] * nums2[j]);\n        }\n    }\n    result.sort((a, b) => b - a);\n    return result.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            let product = nums1[i] * nums2[j];\n            if (product > max) {\n                result.push(product);\n                max = product;\n            }\n        }\n    }\n    return result.sort((a, b) => b - a).slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122813,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  54,\n  50,\n  45\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50,\n  48\n]\n    at test (/tmp/tmpyr4nf6cp.js:20:12)\n    at Object.<anonymous> (/tmp/tmpyr4nf6cp.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 54, 50, 45 ],\n  expected: [ 60, 54, 50, 48 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result = [];\n    for (let i = 0; i < N; i++) {\n        let max = 0;\n        let maxIndex = 0;\n        for (let j = 0; j < nums1.length; j++) {\n            if (nums1[j] > max) {\n                max = nums1[j];\n                maxIndex = j;\n            }\n        }\n        nums1[maxIndex] = 0;\n        max = 0;\n        for (let j = 0; j < nums2.length; j++) {\n            if (nums2[j] > max) {\n                max = nums2[j];\n            }\n        }\n        result.push(max * maxIndex);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122816,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  50,\n  40,\n  30\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpq60uzrqm.js:27:12)\n    at Object.<anonymous> (/tmp/tmpq60uzrqm.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 50, 40, 30 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result = [];\n    for (let i = 0; i < N; i++) {\n        let max = -Infinity;\n        let maxIndex = -1;\n        for (let j = 0; j < nums1.length; j++) {\n            for (let k = 0; k < nums2.length; k++) {\n                if (nums1[j] * nums2[k] > max) {\n                    max = nums1[j] * nums2[k];\n                    maxIndex = [j, k];\n                }\n            }\n        }\n        result.push(max);\n        nums1.splice(maxIndex[0], 1);\n        nums2.splice(maxIndex[1], 1);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "../../../../tmp/tmpc0un7hdg.ts(11,21): error TS2322: Type 'number[]' is not assignable to type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let i = 0;\n    let j = 0;\n    while (i < nums1.length && j < nums2.length) {\n        if (nums1[i] < nums2[j]) {\n            result.push(nums1[i] * nums2[j]);\n            i++;\n        } else {\n            result.push(nums1[i] * nums2[j]);\n            j++;\n        }\n    }\n    while (i < nums1.length) {\n        result.push(nums1[i] * nums2[nums2.length - 1]);\n        i++;\n    }\n    while (j < nums2.length) {\n        result.push(nums1[nums1.length - 1] * nums2[j]);\n        j++;\n    }\n    result.sort((a, b) => a - b);\n    return result.slice(result.length - N, result.length);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122817,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  48,\n  54,\n  60\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpdzfc2k1i.js:30:12)\n    at Object.<anonymous> (/tmp/tmpdzfc2k1i.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 48, 54, 60 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let products: number[] = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    for (let i = 0; i < N; i++) {\n        result.push(products[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122817,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let products: number[] = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    for (let i = 0; i < N; i++) {\n        result.push(products[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122817,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < nums1.length && j < nums2.length) {\n    if (nums1[i] < nums2[j]) {\n      result.push([nums1[i], nums2[j]]);\n      i++;\n    } else {\n      result.push([nums1[i], nums2[j]]);\n      j++;\n    }\n  }\n  while (i < nums1.length) {\n    result.push([nums1[i], nums2[nums2.length - 1]]);\n    i++;\n  }\n  while (j < nums2.length) {\n    result.push([nums1[nums1.length - 1], nums2[j]]);\n    j++;\n  }\n  return result.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122817,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n    3\n  ],\n  [\n    2,\n    3\n  ],\n  [\n    3,\n    3\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpds3lfi6z.js:29:12)\n    at Object.<anonymous> (/tmp/tmpds3lfi6z.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 1, 3 ], [ 2, 3 ], [ 3, 3 ] ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let res = [];\n    for (let i = 0; i < N; i++) {\n        let max = -Infinity;\n        let max_index = -1;\n        for (let j = 0; j < nums1.length; j++) {\n            for (let k = 0; k < nums2.length; k++) {\n                if (nums1[j] * nums2[k] > max) {\n                    max = nums1[j] * nums2[k];\n                    max_index = [j, k];\n                }\n            }\n        }\n        res.push(max);\n        nums1.splice(max_index[0], 1);\n        nums2.splice(max_index[1], 1);\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122817,
      "stdout": "../../../../tmp/tmp4dxpv59b.ts(11,21): error TS2322: Type 'number[]' is not assignable to type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let res: number[] = [];\n    let i = 0;\n    let j = 0;\n    while (i < nums1.length && j < nums2.length) {\n        if (nums1[i] < nums2[j]) {\n            res.push(nums1[i] * nums2[j]);\n            i++;\n        } else {\n            res.push(nums1[i] * nums2[j]);\n            j++;\n        }\n    }\n    while (i < nums1.length) {\n        res.push(nums1[i] * nums2[nums2.length - 1]);\n        i++;\n    }\n    while (j < nums2.length) {\n        res.push(nums1[nums1.length - 1] * nums2[j]);\n        j++;\n    }\n    res.sort((a, b) => b - a);\n    return res.slice(0, N);\n}\n\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 3));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 4));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 5));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 6));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 7));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 8));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 9));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122817,
      "stdout": "[ 18, 15, 12 ]\n[ 18, 15, 12, 12 ]\n[ 18, 15, 12, 12, 8 ]\n[ 18, 15, 12, 12, 8, 4 ]\n[ 18, 15, 12, 12, 8, 4 ]\n[ 18, 15, 12, 12, 8, 4 ]\n[ 18, 15, 12, 12, 8, 4 ]\n[ 18, 15, 12, 12, 8, 4 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  54,\n  48\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp72d7w_ki.js:38:12)\n    at Object.<anonymous> (/tmp/tmp72d7w_ki.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 54, 48 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            let product: number = nums1[i] * nums2[j];\n            if (result.length < N) {\n                result.push(product);\n                max = Math.max(...result);\n            } else if (product > max) {\n                result.splice(result.indexOf(max), 1);\n                result.push(product);\n                max = Math.max(...result);\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122817,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  6,\n  60\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpvzkznbrj.js:24:12)\n    at Object.<anonymous> (/tmp/tmpvzkznbrj.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 6, 60 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let temp: number[] = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            temp.push(nums1[i] * nums2[j]);\n        }\n    }\n    temp.sort((a, b) => b - a);\n    for (let i = 0; i < N; i++) {\n        result.push(temp[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max1: number = nums1[0];\n    let max2: number = nums2[0];\n    for (let i = 0; i < N; i++) {\n        for (let j = 0; j < nums1.length; j++) {\n            if (nums1[j] > max1) {\n                max1 = nums1[j];\n            }\n        }\n        for (let k = 0; k < nums2.length; k++) {\n            if (nums2[k] > max2) {\n                max2 = nums2[k];\n            }\n        }\n        result.push(max1 * max2);\n        nums1.splice(nums1.indexOf(max1), 1);\n        nums2.splice(nums2.indexOf(max2), 1);\n        max1 = nums1[0];\n        max2 = nums2[0];\n    }\n    return result;\n}\n\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 2));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "[ 50, 36, 24 ]\n[ 50, 36 ]\n[ 50, 36, 24, 14 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmplij58ec5.js:31:12)\n    at Object.<anonymous> (/tmp/tmplij58ec5.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < N; i++) {\n        let max1 = Math.max(...nums1);\n        let max2 = Math.max(...nums2);\n        result.push(max1 * max2);\n        nums1.splice(nums1.indexOf(max1), 1);\n        nums2.splice(nums2.indexOf(max2), 1);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp0_ex7oak.js:16:12)\n    at Object.<anonymous> (/tmp/tmp0_ex7oak.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < N; i++) {\n        let max1 = Math.max(...nums1);\n        let max2 = Math.max(...nums2);\n        result.push(max1 * max2);\n        nums1.splice(nums1.indexOf(max1), 1);\n        nums2.splice(nums2.indexOf(max2), 1);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp0_ex7oak.js:16:12)\n    at Object.<anonymous> (/tmp/tmp0_ex7oak.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < N; i++) {\n        let max1 = Math.max(...nums1);\n        let max2 = Math.max(...nums2);\n        result.push(max1 * max2);\n        nums1.splice(nums1.indexOf(max1), 1);\n        nums2.splice(nums2.indexOf(max2), 1);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp0_ex7oak.js:16:12)\n    at Object.<anonymous> (/tmp/tmp0_ex7oak.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let temp: number[] = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            temp.push(nums1[i] * nums2[j]);\n        }\n    }\n    temp.sort((a, b) => b - a);\n    for (let i = 0; i < N; i++) {\n        result.push(temp[i]);\n    }\n    return result;\n}\nconsole.log(large_product([1, 2, 3, 4], [5, 6, 7, 8], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "[ 32, 28 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let i: number = 0;\n    let j: number = 0;\n    while (i < nums1.length && j < nums2.length) {\n        if (nums1[i] > nums2[j]) {\n            result.push(nums1[i] * nums2[j]);\n            j++;\n        } else {\n            result.push(nums1[i] * nums2[j]);\n            i++;\n        }\n    }\n    return result.sort((a, b) => b - a).slice(0, N);\n}\n\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 4));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "[ 30, 24, 18 ]\n[ 30, 24, 18, 12 ]\n[ 30, 24, 18, 12, 6 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  36,\n  30,\n  24\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmptgggryi6.js:24:12)\n    at Object.<anonymous> (/tmp/tmptgggryi6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 36, 30, 24 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result = [];\n    let max1 = Math.max(...nums1);\n    let max2 = Math.max(...nums2);\n    let max = max1 * max2;\n    result.push(max);\n    for (let i = 0; i < N - 1; i++) {\n        if (max1 > max2) {\n            max1 = Math.max(...nums1.filter(x => x < max1));\n            max = max1 * max2;\n        } else {\n            max2 = Math.max(...nums2.filter(x => x < max2));\n            max = max1 * max2;\n        }\n        result.push(max);\n    }\n    return result;\n}\n\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 1));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 10));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "[ 50, 45, 40 ]\n[ 50, 45, 40, 35, 30 ]\n[ 50 ]\n[\n         50,        45,\n         40,        35,\n         30, -Infinity,\n  -Infinity, -Infinity,\n  -Infinity, -Infinity\n]\n[ 50 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  54,\n  48\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpbg34ionf.js:29:12)\n    at Object.<anonymous> (/tmp/tmpbg34ionf.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 54, 48 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < N; i++) {\n        let max = -Infinity;\n        let max_index = -1;\n        for (let j = 0; j < nums1.length; j++) {\n            for (let k = 0; k < nums2.length; k++) {\n                if (nums1[j] * nums2[k] > max) {\n                    max = nums1[j] * nums2[k];\n                    max_index = j;\n                }\n            }\n        }\n        result.push(max);\n        nums1.splice(max_index, 1);\n    }\n    return result;\n}\n\nconsole.log(large_product([1, 2, 3, 4], [5, 6, 7, 8], 2));\nconsole.log(large_product([1, 2, 3, 4], [5, 6, 7, 8], 3));\nconsole.log(large_product([1, 2, 3, 4], [5, 6, 7, 8], 4));\nconsole.log(large_product([1, 2, 3, 4], [5, 6, 7, 8], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122817,
      "stdout": "[ 32, 24 ]\n[ 32, 24, 16 ]\n[ 32, 24, 16, 8 ]\n[ 32, 24, 16, 8, -Infinity ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  50,\n  40\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp4nq7ubi1.js:27:12)\n    at Object.<anonymous> (/tmp/tmp4nq7ubi1.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 50, 40 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let i = 0;\n    let j = 0;\n    while (result.length < N) {\n        if (nums1[i] * nums2[j] > nums1[i + 1] * nums2[j + 1]) {\n            result.push(nums1[i] * nums2[j]);\n            i++;\n            j++;\n        } else {\n            result.push(nums1[i + 1] * nums2[j + 1]);\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\n\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 3));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 2));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122817,
      "stdout": "[ 10, 18, NaN ]\n[ 10, 18 ]\n[ 10 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  12,\n  24,\n  36\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp_2hr6qga.js:26:12)\n    at Object.<anonymous> (/tmp/tmp_2hr6qga.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 12, 24, 36 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let temp: number = 0;\n    while (i < nums1.length && j < nums2.length && k < N) {\n        if (nums1[i] > nums2[j]) {\n            temp = nums1[i] * nums2[j];\n            result.push(temp);\n            i++;\n            j++;\n            k++;\n        } else if (nums1[i] < nums2[j]) {\n            temp = nums1[i] * nums2[j];\n            result.push(temp);\n            i++;\n            j++;\n            k++;\n        } else {\n            temp = nums1[i] * nums2[j];\n            result.push(temp);\n            i++;\n            j++;\n            k++;\n        }\n    }\n    return result;\n}\n\nconsole.log(large_product([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], 3));\nconsole.log(large_product([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], 5));\nconsole.log(large_product([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], 7));\nconsole.log(large_product([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122817,
      "stdout": "[ 1, 4, 9 ]\n[ 1, 4, 9, 16, 25 ]\n[ 1, 4, 9, 16, 25, 36 ]\n[ 1 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  12,\n  24\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpgkzm0yap.js:40:12)\n    at Object.<anonymous> (/tmp/tmpgkzm0yap.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 12, 24 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result = [];\n    for (let i = 0; i < N; i++) {\n        let max1 = Math.max(...nums1);\n        let max2 = Math.max(...nums2);\n        result.push(max1 * max2);\n        nums1.splice(nums1.indexOf(max1), 1);\n        nums2.splice(nums2.indexOf(max2), 1);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp10x2xxvo.js:16:12)\n    at Object.<anonymous> (/tmp/tmp10x2xxvo.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let res: number[] = [];\n    let len1 = nums1.length;\n    let len2 = nums2.length;\n    let i = 0;\n    let j = 0;\n    while (i < len1 && j < len2) {\n        if (nums1[i] < nums2[j]) {\n            res.push([nums1[i], nums2[j]]);\n            i++;\n        } else {\n            res.push([nums1[i], nums2[j]]);\n            j++;\n        }\n    }\n    while (i < len1) {\n        res.push([nums1[i], nums2[len2 - 1]]);\n        i++;\n    }\n    while (j < len2) {\n        res.push([nums1[len1 - 1], nums2[j]]);\n        j++;\n    }\n    return res.slice(0, N).map(item => item[0] * item[1]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122817,
      "stdout": "../../../../tmp/tmpbwntjsis.ts(10,22): error TS2345: Argument of type 'number[]' is not assignable to parameter of type 'number'.\n../../../../tmp/tmpbwntjsis.ts(13,22): error TS2345: Argument of type 'number[]' is not assignable to parameter of type 'number'.\n../../../../tmp/tmpbwntjsis.ts(18,18): error TS2345: Argument of type 'number[]' is not assignable to parameter of type 'number'.\n../../../../tmp/tmpbwntjsis.ts(22,18): error TS2345: Argument of type 'number[]' is not assignable to parameter of type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    let max_index: number = 0;\n    let max_index2: number = 0;\n    let max_index3: number = 0;\n    let max_index4: number = 0;\n    let max_index5: number = 0;\n    let max_index6: number = 0;\n    let max_index7: number = 0;\n    let max_index8: number = 0;\n    let max_index9: number = 0;\n    let max_index10: number = 0;\n    let max_index11: number = 0;\n    let max_index12: number = 0;\n    let max_index13: number = 0;\n    let max_index14: number = 0;\n    let max_index15: number = 0;\n    let max_index16: number = 0;\n    let max_index17: number = 0;\n    let max_index18: number = 0;\n    let max_index19: number = 0;\n    let max_index20: number = 0;\n    let max_index21: number = 0;\n    let max_index22: number = 0;\n    let max_index23: number = 0;\n    let max_index24: number = 0;\n    let max_index25: number = 0;\n    let max_index26: number = 0;\n    let max_index27: number = 0;\n    let max_index28: number = 0;\n    let max_index29: number = 0;\n    let max_index30: number = 0;\n    let max_index31: number = 0;\n    let max_index32: number = 0;\n    let max_index33: number = 0;\n    let max_index34: number = 0;\n    let max_index35: number = 0;\n    let max_index36: number = 0;\n    let max_index37: number = 0;\n    let max_index38: number = 0;\n    let max_index39: number = 0;\n    let max_index40: number = 0;\n    let max_index41: number = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122806,
      "stdout": "../../../../tmp/tmpkv1u8d4u.ts(47,9): error TS1005: ',' expected.\n../../../../tmp/tmpkv1u8d4u.ts(58,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max: number[] = [];\n    let max2: number[] = [];\n    let max3: number[] = [];\n    let max4: number[] = [];\n    let max5: number[] = [];\n    let max6: number[] = [];\n    let max7: number[] = [];\n    let max8: number[] = [];\n    let max9: number[] = [];\n    let max10: number[] = [];\n    let max11: number[] = [];\n    let max12: number[] = [];\n    let max13: number[] = [];\n    let max14: number[] = [];\n    let max15: number[] = [];\n    let max16: number[] = [];\n    let max17: number[] = [];\n    let max18: number[] = [];\n    let max19: number[] = [];\n    let max20: number[] = [];\n    let max21: number[] = [];\n    let max22: number[] = [];\n    let max23: number[] = [];\n    let max24: number[] = [];\n    let max25: number[] = [];\n    let max26: number[] = [];\n    let max27: number[] = [];\n    let max28: number[] = [];\n    let max29: number[] = [];\n    let max30: number[] = [];\n    let max31: number[] = [];\n    let max32: number[] = [];\n    let max33: number[] = [];\n    let max34: number[] = [];\n    let max35: number[] = [];\n    let max36: number[] = [];\n    let max37: number[] = [];\n    let max38: number[] = [];\n    let max39: number[] = [];\n    let max40: number[] = [];\n    let max41: number[] = [];\n    let max42: number[] = [];\n    let max43: number[] = [];\n    let max44: number[] = [];\n    let max45: number[] = [];\n    let max46: number[] = [];\n    let max47: number[] = [];\n    let max48: number[] = [];\n    let max49: number[] = [];\n    let max50: number[] = [];\n    let max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "../../../../tmp/tmplmo_owzz.ts(66,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result = [];\n    let max = 0;\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            let product = nums1[i] * nums2[j];\n            if (result.length < N) {\n                result.push(product);\n                max = Math.max(...result);\n            } else {\n                if (product > max) {\n                    result.push(product);\n                    result.splice(result.indexOf(max), 1);\n                    max = Math.max(...result);\n                }\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  6,\n  60\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmphvzlmowi.js:26:12)\n    at Object.<anonymous> (/tmp/tmphvzlmowi.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 6, 60 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result = [];\n    let max = 0;\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            let product = nums1[i] * nums2[j];\n            if (result.length < N) {\n                result.push(product);\n                if (product > max) {\n                    max = product;\n                }\n            } else {\n                if (product > max) {\n                    result.push(product);\n                    result.splice(result.indexOf(max), 1);\n                    max = Math.max(...result);\n                }\n            }\n        }\n    }\n    return result;\n}\n\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 8));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "[ 6, 7, 50 ]\n[ 6, 7, 8, 9, 50 ]\n[\n   6,  7,  8,  9,\n  10, 12, 14, 50\n]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  6,\n  60\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp7h92p9eo.js:31:12)\n    at Object.<anonymous> (/tmp/tmp7h92p9eo.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 6, 60 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let i: number = 0;\n    let j: number = 0;\n    while (i < nums1.length && j < nums2.length) {\n        if (nums1[i] < nums2[j]) {\n            result.push(nums1[i] * nums2[j]);\n            i++;\n        } else {\n            result.push(nums1[i] * nums2[j]);\n            j++;\n        }\n    }\n    return result.sort((a, b) => b - a).slice(0, N);\n}\n\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "[ 30, 24, 18 ]\n[ 30, 24, 18, 12, 6 ]\n[ 30, 24, 18, 12, 6 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  48,\n  36,\n  30\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp58xwfgo9.js:24:12)\n    at Object.<anonymous> (/tmp/tmp58xwfgo9.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 48, 36, 30 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products: number[] = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result = [];\n    for (let i = 0; i < N; i++) {\n        let max = 0;\n        let max_index = 0;\n        for (let j = 0; j < nums1.length; j++) {\n            for (let k = 0; k < nums2.length; k++) {\n                if (nums1[j] * nums2[k] > max) {\n                    max = nums1[j] * nums2[k];\n                    max_index = [j, k];\n                }\n            }\n        }\n        result.push(max);\n        nums1.splice(max_index[0], 1);\n        nums2.splice(max_index[1], 1);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122806,
      "stdout": "../../../../tmp/tmpxyh3s0le.ts(11,21): error TS2322: Type 'number[]' is not assignable to type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result = [];\n    for (let i = 0; i < N; i++) {\n        let max = -Infinity;\n        let max_index = -1;\n        for (let j = 0; j < nums1.length; j++) {\n            for (let k = 0; k < nums2.length; k++) {\n                if (nums1[j] * nums2[k] > max) {\n                    max = nums1[j] * nums2[k];\n                    max_index = [j, k];\n                }\n            }\n        }\n        result.push(max);\n        nums1.splice(max_index[0], 1);\n        nums2.splice(max_index[1], 1);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "../../../../tmp/tmpdzxfx4sa.ts(11,21): error TS2322: Type 'number[]' is not assignable to type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    let max_index: number = 0;\n    let max_index_2: number = 0;\n    let max_index_3: number = 0;\n    let max_index_4: number = 0;\n    let max_index_5: number = 0;\n    let max_index_6: number = 0;\n    let max_index_7: number = 0;\n    let max_index_8: number = 0;\n    let max_index_9: number = 0;\n    let max_index_10: number = 0;\n    let max_index_11: number = 0;\n    let max_index_12: number = 0;\n    let max_index_13: number = 0;\n    let max_index_14: number = 0;\n    let max_index_15: number = 0;\n    let max_index_16: number = 0;\n    let max_index_17: number = 0;\n    let max_index_18: number = 0;\n    let max_index_19: number = 0;\n    let max_index_20: number = 0;\n    let max_index_21: number = 0;\n    let max_index_22: number = 0;\n    let max_index_23: number = 0;\n    let max_index_24: number = 0;\n    let max_index_25: number = 0;\n    let max_index_26: number = 0;\n    let max_index_27: number = 0;\n    let max_index_28: number = 0;\n    let max_index_29: number = 0;\n    let max_index_30: number = 0;\n    let max_index_31: number = 0;\n    let max_index_32: number = 0;\n    let max_index_33: number = 0;\n    let max_index_34: number = 0;\n    let max_index_35: number = 0;\n    let max_index_36: number = 0;\n    let max_index_37: number = 0;\n    let max_index_38: number = 0;\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122817,
      "stdout": "../../../../tmp/tmp_6y2rce9.ts(55,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let prod: number;\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            prod = nums1[i] * nums2[j];\n            if (result.length < N) {\n                result.push(prod);\n            } else {\n                result.sort((a, b) => b - a);\n                if (prod < result[N - 1]) {\n                    result.pop();\n                    result.push(prod);\n                }\n            }\n        }\n    }\n    return result.sort((a, b) => b - a);\n}\n\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 1));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122822,
      "stdout": "[ 8, 7, 6 ]\n[ 10, 9, 8, 7, 6 ]\n[ 6 ]\n[\n  20, 18, 16, 14, 12,\n  10,  9,  8,  7,  6\n]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  8,\n  6,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpkhkwiytk.js:29:12)\n    at Object.<anonymous> (/tmp/tmpkhkwiytk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 8, 6, 3 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let temp: number = 0;\n    let temp1: number = 0;\n    let temp2: number = 0;\n    let temp3: number = 0;\n    let temp4: number = 0;\n    let temp5: number = 0;\n    let temp6: number = 0;\n    let temp7: number = 0;\n    let temp8: number = 0;\n    let temp9: number = 0;\n    let temp10: number = 0;\n    let temp11: number = 0;\n    let temp12: number = 0;\n    let temp13: number = 0;\n    let temp14: number = 0;\n    let temp15: number = 0;\n    let temp16: number = 0;\n    let temp17: number = 0;\n    let temp18: number = 0;\n    let temp19: number = 0;\n    let temp20: number = 0;\n    let temp21: number = 0;\n    let temp22: number = 0;\n    let temp23: number = 0;\n    let temp24: number = 0;\n    let temp25: number = 0;\n    let temp26: number = 0;\n    let temp27: number = 0;\n    let temp28: number = 0;\n    let temp29: number = 0;\n    let temp30: number = 0;\n    let temp31: number = 0;\n    let temp32: number = 0;\n    let temp33: number = 0;\n    let temp34: number = 0;\n    let temp35: number = 0;\n    let temp36: number = 0;\n    let temp37: number = 0;\n    let temp38: number = 0;\n    let temp39: number = 0;\n    let temp40: number = 0;\n    let temp41: number = 0;\n    let temp42: number = 0;\n    let temp43: number = 0;\n    let temp44: number = 0;\n    let temp45: number = 0;\n    let temp46: number = 0;\n    let temp47: number\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "../../../../tmp/tmp21ytpgam.ts(66,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    let maxIndex: number = 0;\n    let maxIndex2: number = 0;\n    let max2: number = 0;\n    let maxIndex3: number = 0;\n    let maxIndex4: number = 0;\n    let max3: number = 0;\n    let maxIndex5: number = 0;\n    let maxIndex6: number = 0;\n    let max4: number = 0;\n    let maxIndex7: number = 0;\n    let maxIndex8: number = 0;\n    let max5: number = 0;\n    let maxIndex9: number = 0;\n    let maxIndex10: number = 0;\n    let max6: number = 0;\n    let maxIndex11: number = 0;\n    let maxIndex12: number = 0;\n    let max7: number = 0;\n    let maxIndex13: number = 0;\n    let maxIndex14: number = 0;\n    let max8: number = 0;\n    let maxIndex15: number = 0;\n    let maxIndex16: number = 0;\n    let max9: number = 0;\n    let maxIndex17: number = 0;\n    let maxIndex18: number = 0;\n    let max10: number = 0;\n    let maxIndex19: number = 0;\n    let maxIndex20: number = 0;\n    let max11: number = 0;\n    let maxIndex21: number = 0;\n    let maxIndex22: number = 0;\n    let max12: number = 0;\n    let maxIndex23: number = 0;\n    let maxIndex24: number = 0;\n    let max13: number = 0;\n    let maxIndex25: number = 0;\n    let maxIndex26: number = 0;\n    let max14: number = 0;\n    let maxIndex27: number = 0;\n    let maxIndex28: number = 0;\n    let max15: number = 0;\n    let maxIndex29: number = 0;\n    let maxIndex30: number = 0;\n    let max16: number = 0;\n    let maxIndex31: number = 0;\n    let max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122822,
      "stdout": "../../../../tmp/tmpqz6xdyrx.ts(63,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result = [];\n    for (let i = 0; i < N; i++) {\n        let max = -Infinity;\n        let max_index = -1;\n        for (let j = 0; j < nums1.length; j++) {\n            for (let k = 0; k < nums2.length; k++) {\n                if (nums1[j] * nums2[k] > max) {\n                    max = nums1[j] * nums2[k];\n                    max_index = [j, k];\n                }\n            }\n        }\n        result.push(max);\n        nums1.splice(max_index[0], 1);\n        nums2.splice(max_index[1], 1);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "../../../../tmp/tmpdzxfx4sa.ts(11,21): error TS2322: Type 'number[]' is not assignable to type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let m = nums1.length;\n    let n = nums2.length;\n    let temp = 0;\n    while (i < m && j < n) {\n        if (nums1[i] < nums2[j]) {\n            temp = nums1[i] * nums2[j];\n            if (result.length < N) {\n                result.push(temp);\n            } else {\n                if (result[N - 1] < temp) {\n                    result[N - 1] = temp;\n                    k = N - 1;\n                    while (k > 0 && result[k] > result[k - 1]) {\n                        let t = result[k];\n                        result[k] = result[k - 1];\n                        result[k - 1] = t;\n                        k--;\n                    }\n                }\n            }\n            i++;\n        } else {\n            temp = nums1[i] * nums2[j];\n            if (result.length < N) {\n                result.push(temp);\n            } else {\n                if (result[N - 1] < temp) {\n                    result[N - 1] = temp;\n                    k = N - 1;\n                    while (k > 0 && result[k] > result[k - 1]) {\n                        let t = result[k];\n                        result[k] = result[k - 1];\n                        result[k - 1] = t;\n                        k--;\n                    }\n                }\n            }\n            j++;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122822,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  48,\n  36,\n  30\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpfiq5t24f.js:55:12)\n    at Object.<anonymous> (/tmp/tmpfiq5t24f.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 48, 36, 30 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let temp: number[] = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            temp.push(nums1[i] * nums2[j]);\n        }\n    }\n    temp.sort((a, b) => b - a);\n    for (let i = 0; i < N; i++) {\n        result.push(temp[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n  let result: number[] = [];\n  let max: number = 0;\n  let maxIndex: number = 0;\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < nums1.length; j++) {\n      if (nums1[j] > max) {\n        max = nums1[j];\n        maxIndex = j;\n      }\n    }\n    nums1[maxIndex] = 0;\n    max = 0;\n    for (let k = 0; k < nums2.length; k++) {\n      if (nums2[k] > max) {\n        max = nums2[k];\n        maxIndex = k;\n      }\n    }\n    nums2[maxIndex] = 0;\n    max = 0;\n    result.push(nums1[maxIndex] * nums2[maxIndex]);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122822,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpwwe1pnpn.js:30:12)\n    at Object.<anonymous> (/tmp/tmpwwe1pnpn.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 3));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 4));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 5));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 6));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 7));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 8));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 9));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 10));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 11));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 12));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 13));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 14));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 15));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 16));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 17));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 18));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 19));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122822,
      "stdout": "[ 18, 15, 12 ]\n[ 18, 15, 12, 12 ]\n[ 18, 15, 12, 12, 10 ]\n[ 18, 15, 12, 12, 10, 8 ]\n[\n  18, 15, 12, 12,\n  10,  8,  6\n]\n[\n  18, 15, 12, 12,\n  10,  8,  6,  5\n]\n[\n  18, 15, 12, 12, 10,\n   8,  6,  5,  4\n]\n[\n  18, 15, 12, 12, 10,\n   8,  6,  5,  4\n]\n[\n  18, 15, 12, 12, 10,\n   8,  6,  5,  4\n]\n[\n  18, 15, 12, 12, 10,\n   8,  6,  5,  4\n]\n[\n  18, 15, 12, 12, 10,\n   8,  6,  5,  4\n]\n[\n  18, 15, 12, 12, 10,\n   8,  6,  5,  4\n]\n[\n  18, 15, 12, 12, 10,\n   8,  6,  5,  4\n]\n[\n  18, 15, 12, 12, 10,\n   8,  6,  5,  4\n]\n[\n  18, 15, 12, 12, 10,\n   8,  6,  5,  4\n]\n[\n  18, 15, 12, 12, 10,\n   8,  6,  5,  4\n]\n[\n  18, 15, 12, 12, 10,\n   8,  6,  5,  4\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max1: number = Math.max(...nums1);\n    let max2: number = Math.max(...nums2);\n    let max: number = max1 * max2;\n    let min1: number = Math.min(...nums1);\n    let min2: number = Math.min(...nums2);\n    let min: number = min1 * min2;\n    let max_index1: number = nums1.indexOf(max1);\n    let max_index2: number = nums2.indexOf(max2);\n    let min_index1: number = nums1.indexOf(min1);\n    let min_index2: number = nums2.indexOf(min2);\n    result.push(max);\n    result.push(min);\n    nums1.splice(max_index1, 1);\n    nums2.splice(max_index2, 1);\n    nums1.splice(min_index1, 1);\n    nums2.splice(min_index2, 1);\n    for (let i = 0; i < N - 2; i++) {\n        let max1: number = Math.max(...nums1);\n        let max2: number = Math.max(...nums2);\n        let max: number = max1 * max2;\n        let min1: number = Math.min(...nums1);\n        let min2: number = Math.min(...nums2);\n        let min: number = min1 * min2;\n        let max_index1: number = nums1.indexOf(max1);\n        let max_index2: number = nums2.indexOf(max2);\n        let min_index1: number = nums1.indexOf(min1);\n        let min_index2: number = nums2.indexOf(min2);\n        if (max > min) {\n            result.push(max);\n            nums1.splice(max_index1, 1);\n            nums2.splice(max_index2, 1);\n        } else {\n            result\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122822,
      "stdout": "../../../../tmp/tmpfh6ow85v.ts(48,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < N; i++) {\n        let max = 0;\n        let maxIndex = 0;\n        for (let j = 0; j < nums1.length; j++) {\n            if (nums1[j] > max) {\n                max = nums1[j];\n                maxIndex = j;\n            }\n        }\n        nums1[maxIndex] = 0;\n        max = 0;\n        maxIndex = 0;\n        for (let j = 0; j < nums2.length; j++) {\n            if (nums2[j] > max) {\n                max = nums2[j];\n                maxIndex = j;\n            }\n        }\n        nums2[maxIndex] = 0;\n        result.push(max * max);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  100,\n  81,\n  64\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp26kd2w9s.js:30:12)\n    at Object.<anonymous> (/tmp/tmp26kd2w9s.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 100, 81, 64 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let nums1_sorted: number[] = nums1.sort((a, b) => b - a);\n    let nums2_sorted: number[] = nums2.sort((a, b) => b - a);\n    let i: number = 0;\n    let j: number = 0;\n    while (result.length < N) {\n        if (nums1_sorted[i] * nums2_sorted[j] > nums1_sorted[i] * nums2_sorted[j + 1]) {\n            result.push(nums1_sorted[i] * nums2_sorted[j]);\n            j++;\n        } else {\n            result.push(nums1_sorted[i] * nums2_sorted[j + 1]);\n            i++;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  54,\n  48\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpuu3aoi66.js:23:12)\n    at Object.<anonymous> (/tmp/tmpuu3aoi66.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 54, 48 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let max = 0;\n    let max_i = 0;\n    let max_j = 0;\n    let max_k = 0;\n    let max_l = 0;\n    let max_m = 0;\n    let max_n = 0;\n    let max_o = 0;\n    let max_p = 0;\n    let max_q = 0;\n    let max_r = 0;\n    let max_s = 0;\n    let max_t = 0;\n    let max_u = 0;\n    let max_v = 0;\n    let max_w = 0;\n    let max_x = 0;\n    let max_y = 0;\n    let max_z = 0;\n    let max_aa = 0;\n    let max_bb = 0;\n    let max_cc = 0;\n    let max_dd = 0;\n    let max_ee = 0;\n    let max_ff = 0;\n    let max_gg = 0;\n    let max_hh = 0;\n    let max_ii = 0;\n    let max_jj = 0;\n    let max_kk = 0;\n    let max_ll = 0;\n    let max_mm = 0;\n    let max_nn = 0;\n    let max_oo = 0;\n    let max_pp = 0;\n    let max_qq = 0;\n    let max_rr = 0;\n    let max_ss = 0;\n    let max_tt = 0;\n    let max_uu = 0;\n    let max_vv = 0;\n    let max_ww = 0;\n    let max_xx = 0;\n    let max_yy = 0;\n    let max_zz = 0;\n    let max_aaa = 0;\n    let max_bbb = 0;\n    let max_ccc = 0;\n    let max_ddd = 0;\n    let max_eee = 0;\n    let max_fff = 0;\n    let max_ggg = 0;\n    let max_hhh = 0;\n   \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122822,
      "stdout": "../../../../tmp/tmpxg1yw8ef.ts(72,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let res: number[] = [];\n    for (let i = 0; i < N; i++) {\n        let max = Number.MIN_SAFE_INTEGER;\n        let max1 = 0;\n        let max2 = 0;\n        for (let j = 0; j < nums1.length; j++) {\n            for (let k = 0; k < nums2.length; k++) {\n                if (nums1[j] * nums2[k] > max) {\n                    max = nums1[j] * nums2[k];\n                    max1 = nums1[j];\n                    max2 = nums2[k];\n                }\n            }\n        }\n        res.push(max);\n        nums1.splice(nums1.indexOf(max1), 1);\n        nums2.splice(nums2.indexOf(max2), 1);\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpvxptc_vl.js:26:12)\n    at Object.<anonymous> (/tmp/tmpvxptc_vl.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < N; i++) {\n        let max1 = Math.max(...nums1);\n        let max2 = Math.max(...nums2);\n        result.push(max1 * max2);\n        nums1.splice(nums1.indexOf(max1), 1);\n        nums2.splice(nums2.indexOf(max2), 1);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp0_ex7oak.js:16:12)\n    at Object.<anonymous> (/tmp/tmp0_ex7oak.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    let maxIndex: number = 0;\n    let maxIndex2: number = 0;\n    let max2: number = 0;\n    let maxIndex3: number = 0;\n    let maxIndex4: number = 0;\n    let max3: number = 0;\n    let maxIndex5: number = 0;\n    let maxIndex6: number = 0;\n    let max4: number = 0;\n    let maxIndex7: number = 0;\n    let maxIndex8: number = 0;\n    let max5: number = 0;\n    let maxIndex9: number = 0;\n    let maxIndex10: number = 0;\n    let max6: number = 0;\n    let maxIndex11: number = 0;\n    let maxIndex12: number = 0;\n    let max7: number = 0;\n    let maxIndex13: number = 0;\n    let maxIndex14: number = 0;\n    let max8: number = 0;\n    let maxIndex15: number = 0;\n    let maxIndex16: number = 0;\n    let max9: number = 0;\n    let maxIndex17: number = 0;\n    let maxIndex18: number = 0;\n    let max10: number = 0;\n    let maxIndex19: number = 0;\n    let maxIndex20: number = 0;\n    let max11: number = 0;\n    let maxIndex21: number = 0;\n    let maxIndex22: number = 0;\n    let max12: number = 0;\n    let maxIndex23: number = 0;\n    let maxIndex24: number = 0;\n    let max13: number = 0;\n    let maxIndex25: number = 0;\n    let maxIndex26: number = 0;\n    let max14: number = 0;\n    let maxIndex27: number = 0;\n    let maxIndex28: number = 0;\n    let max15: number = 0;\n    let maxIndex29: number = 0;\n    let maxIndex30: number = 0;\n    let max16: number = 0;\n    let maxIndex31: number = 0;\n    let max\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122822,
      "stdout": "../../../../tmp/tmpqz6xdyrx.ts(63,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let res: number[] = [];\n    for (let i = 0; i < N; i++) {\n        let max1 = -Infinity;\n        let max2 = -Infinity;\n        let idx1 = -1;\n        let idx2 = -1;\n        for (let j = 0; j < nums1.length; j++) {\n            if (nums1[j] > max1) {\n                max1 = nums1[j];\n                idx1 = j;\n            }\n        }\n        for (let j = 0; j < nums2.length; j++) {\n            if (nums2[j] > max2) {\n                max2 = nums2[j];\n                idx2 = j;\n            }\n        }\n        res.push(max1 * max2);\n        nums1[idx1] = -Infinity;\n        nums2[idx2] = -Infinity;\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmplirll0an.js:30:12)\n    at Object.<anonymous> (/tmp/tmplirll0an.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            if (nums1[i] * nums2[j] > max) {\n                result.push(nums1[i] * nums2[j]);\n                max = nums1[i] * nums2[j];\n            }\n        }\n    }\n    return result.slice(0, N);\n}\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "[ 4, 5 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  6,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp70radj6u.js:19:12)\n    at Object.<anonymous> (/tmp/tmp70radj6u.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 6, 8 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n  const products = [];\n  for (let i = 0; i < nums1.length; i++) {\n    for (let j = 0; j < nums2.length; j++) {\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort((a, b) => b - a);\n  return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let sorted1: number[] = nums1.sort((a, b) => b - a);\n    let sorted2: number[] = nums2.sort((a, b) => b - a);\n    let i: number = 0;\n    let j: number = 0;\n    while (result.length < N) {\n        if (sorted1[i] * sorted2[j] > sorted1[i] * sorted2[j + 1]) {\n            result.push(sorted1[i] * sorted2[j]);\n            j++;\n        } else {\n            result.push(sorted1[i] * sorted2[j + 1]);\n            i++;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  54,\n  48\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpsikcr4fx.js:23:12)\n    at Object.<anonymous> (/tmp/tmpsikcr4fx.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 54, 48 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products: number[] = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let res: number[] = [];\n    let max: number = 0;\n    let max_index: number = 0;\n    for (let i = 0; i < N; i++) {\n        for (let j = 0; j < nums1.length; j++) {\n            for (let k = 0; k < nums2.length; k++) {\n                if (nums1[j] * nums2[k] > max) {\n                    max = nums1[j] * nums2[k];\n                    max_index = j;\n                }\n            }\n        }\n        res.push(max);\n        nums1.splice(max_index, 1);\n        max = 0;\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  50,\n  40\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpkvim42i6.js:24:12)\n    at Object.<anonymous> (/tmp/tmpkvim42i6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 50, 40 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result = [];\n    let max = 0;\n    let max_index = 0;\n    let max_index2 = 0;\n    let max_index3 = 0;\n    let max_index4 = 0;\n    let max_index5 = 0;\n    let max_index6 = 0;\n    let max_index7 = 0;\n    let max_index8 = 0;\n    let max_index9 = 0;\n    let max_index10 = 0;\n    let max_index11 = 0;\n    let max_index12 = 0;\n    let max_index13 = 0;\n    let max_index14 = 0;\n    let max_index15 = 0;\n    let max_index16 = 0;\n    let max_index17 = 0;\n    let max_index18 = 0;\n    let max_index19 = 0;\n    let max_index20 = 0;\n    let max_index21 = 0;\n    let max_index22 = 0;\n    let max_index23 = 0;\n    let max_index24 = 0;\n    let max_index25 = 0;\n    let max_index26 = 0;\n    let max_index27 = 0;\n    let max_index28 = 0;\n    let max_index29 = 0;\n    let max_index30 = 0;\n    let max_index31 = 0;\n    let max_index32 = 0;\n    let max_index33 = 0;\n    let max_index34 = 0;\n    let max_index35 = 0;\n    let max_index36 = 0;\n    let max_index37 = 0;\n    let max_index38 = 0;\n    let max_index39 = 0;\n    let max_index40 = 0;\n    let max_index41 = 0;\n    let max_index42 = 0;\n    let max_index43 = 0;\n    let max_index44 = 0;\n    let max_index45 = 0;\n    let max_index46 = 0;\n    let max_index47 = 0;\n    let max_index48 = 0;\n    let max_index49 = 0;\n    let max_index50 = 0;\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "../../../../tmp/tmpfc7_e5j7.ts(66,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let res: number[] = [];\n    for (let i = 0; i < N; i++) {\n        let max = -Infinity;\n        let max_index = -1;\n        for (let j = 0; j < nums1.length; j++) {\n            for (let k = 0; k < nums2.length; k++) {\n                let product = nums1[j] * nums2[k];\n                if (product > max) {\n                    max = product;\n                    max_index = j;\n                }\n            }\n        }\n        res.push(max);\n        nums1.splice(max_index, 1);\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  50,\n  40\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpkzsz541q.js:24:12)\n    at Object.<anonymous> (/tmp/tmpkzsz541q.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 50, 40 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let i: number = 0;\n    let j: number = 0;\n    let count: number = 0;\n    while (count < N) {\n        let product: number = nums1[i] * nums2[j];\n        if (product > nums1[i] * nums2[j + 1]) {\n            result.push(product);\n            i++;\n            count++;\n        } else {\n            result.push(product);\n            j++;\n            count++;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  6,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpif87d9wz.js:25:12)\n    at Object.<anonymous> (/tmp/tmpif87d9wz.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 6, 8 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < N; i++) {\n        let max1 = Math.max(...nums1);\n        let max2 = Math.max(...nums2);\n        result.push(max1 * max2);\n        nums1.splice(nums1.indexOf(max1), 1);\n        nums2.splice(nums2.indexOf(max2), 1);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp0_ex7oak.js:16:12)\n    at Object.<anonymous> (/tmp/tmp0_ex7oak.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            let product: number = nums1[i] * nums2[j];\n            if (result.length < N) {\n                result.push(product);\n            } else {\n                if (product > max) {\n                    result.splice(result.indexOf(max), 1);\n                    result.push(product);\n                    max = Math.max(...result);\n                }\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  6,\n  60\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpdvxqxd02.js:25:12)\n    at Object.<anonymous> (/tmp/tmpdvxqxd02.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 6, 60 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let i = 0;\n    let j = 0;\n    while (i < nums1.length && j < nums2.length) {\n        if (nums1[i] < nums2[j]) {\n            result.push(nums1[i] * nums2[j]);\n            i++;\n        } else {\n            result.push(nums1[i] * nums2[j]);\n            j++;\n        }\n    }\n    return result.sort((a, b) => b - a).slice(0, N);\n}\n\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 4));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "[ 30, 24, 18 ]\n[ 30, 24, 18, 12 ]\n[ 30, 24, 18, 12, 6 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  48,\n  36,\n  30\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpbp1odh9b.js:24:12)\n    at Object.<anonymous> (/tmp/tmpbp1odh9b.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 48, 36, 30 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let temp: number[] = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            temp.push(nums1[i] * nums2[j]);\n        }\n    }\n    temp.sort((a, b) => b - a);\n    for (let i = 0; i < N; i++) {\n        result.push(temp[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < N; i++) {\n        let max1 = Math.max(...nums1);\n        let max2 = Math.max(...nums2);\n        result.push(max1 * max2);\n        nums1.splice(nums1.indexOf(max1), 1);\n        nums2.splice(nums2.indexOf(max2), 1);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp0_ex7oak.js:16:12)\n    at Object.<anonymous> (/tmp/tmp0_ex7oak.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n  let result: number[] = [];\n  let products: number[] = [];\n  for (let i = 0; i < nums1.length; i++) {\n    for (let j = 0; j < nums2.length; j++) {\n      products.push(nums1[i] * nums2[j]);\n    }\n  }\n  products.sort((a, b) => b - a);\n  for (let i = 0; i < N; i++) {\n    result.push(products[i]);\n  }\n  return result;\n}\n\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 2));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 3));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 4));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 5));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "[ 18, 15 ]\n[ 18, 15, 12 ]\n[ 18, 15, 12, 12 ]\n[ 18, 15, 12, 12, 10 ]\n[ 18, 15, 12, 12, 10, 8 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let nums1_sorted: number[] = nums1.sort((a, b) => b - a);\n    let nums2_sorted: number[] = nums2.sort((a, b) => b - a);\n    let i: number = 0;\n    let j: number = 0;\n    while (result.length < N) {\n        if (nums1_sorted[i] * nums2_sorted[j] > nums1_sorted[i] * nums2_sorted[j + 1]) {\n            result.push(nums1_sorted[i] * nums2_sorted[j]);\n            j++;\n        } else {\n            result.push(nums1_sorted[i] * nums2_sorted[j + 1]);\n            i++;\n        }\n    }\n    return result;\n}\n\nconsole.log(large_product([1, 2, 3, 4], [5, 6, 7, 8], 2));\nconsole.log(large_product([1, 2, 3, 4], [5, 6, 7, 8], 4));\nconsole.log(large_product([1, 2, 3, 4], [5, 6, 7, 8], 8));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "[ 32, 28 ]\n[ 32, 28, 24, NaN ]\n[\n   32,  28,  24, NaN,\n  NaN, NaN, NaN, NaN\n]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  54,\n  48\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpki00l0ho.js:26:12)\n    at Object.<anonymous> (/tmp/tmpki00l0ho.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 54, 48 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            if (nums1[i] * nums2[j] > max) {\n                max = nums1[i] * nums2[j];\n                result.push(max);\n            }\n        }\n    }\n    return result.sort((a, b) => b - a).slice(0, N);\n}\nconsole.log(large_product([1, 2, 3, 4], [5, 6, 7, 8], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "[ 32, 28, 24 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  54,\n  50,\n  45\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50,\n  48\n]\n    at test (/tmp/tmp987cuehq.js:20:12)\n    at Object.<anonymous> (/tmp/tmp987cuehq.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 54, 50, 45 ],\n  expected: [ 60, 54, 50, 48 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let i = 0;\n    let j = 0;\n    while (i < nums1.length && j < nums2.length && result.length < N) {\n        if (nums1[i] * nums2[j] < nums1[i + 1] * nums2[j]) {\n            result.push(nums1[i] * nums2[j]);\n            i++;\n        } else {\n            result.push(nums1[i] * nums2[j + 1]);\n            j++;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  6,\n  9\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpnjax000z.js:21:12)\n    at Object.<anonymous> (/tmp/tmpnjax000z.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 6, 9 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    let maxIndex: number = 0;\n    let maxIndex2: number = 0;\n    for (let i: number = 0; i < N; i++) {\n        for (let j: number = 0; j < nums1.length; j++) {\n            for (let k: number = 0; k < nums2.length; k++) {\n                if (nums1[j] * nums2[k] > max) {\n                    max = nums1[j] * nums2[k];\n                    maxIndex = j;\n                    maxIndex2 = k;\n                }\n            }\n        }\n        result.push(max);\n        nums1.splice(maxIndex, 1);\n        nums2.splice(maxIndex2, 1);\n        max = 0;\n    }\n    return result;\n}\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122824,
      "stdout": "[ 18, 10, 4 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpxecw7bm8.js:28:12)\n    at Object.<anonymous> (/tmp/tmpxecw7bm8.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let temp: number[] = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            temp.push(nums1[i] * nums2[j]);\n        }\n    }\n    temp.sort((a, b) => b - a);\n    for (let i = 0; i < N; i++) {\n        result.push(temp[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let products: number[] = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    for (let i = 0; i < N; i++) {\n        result.push(products[i]);\n    }\n    return result;\n}\n\nconsole.log(large_product([1, 2, 3, 4], [5, 6, 7, 8], 3));\nconsole.log(large_product([1, 2, 3, 4], [5, 6, 7, 8], 5));\nconsole.log(large_product([1, 2, 3, 4], [5, 6, 7, 8], 10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122827,
      "stdout": "[ 32, 28, 24 ]\n[ 32, 28, 24, 24, 21 ]\n[\n  32, 28, 24, 24, 21,\n  20, 18, 16, 15, 14\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < N; i++) {\n        let max1 = Math.max(...nums1);\n        let max2 = Math.max(...nums2);\n        result.push(max1 * max2);\n        nums1.splice(nums1.indexOf(max1), 1);\n        nums2.splice(nums2.indexOf(max2), 1);\n    }\n    return result;\n}\n\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 2));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 3));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 4));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 5));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 6));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 7));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 8));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 9));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 10));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 11));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 12));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 13));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 14));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 15));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 16));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 17));\nconsole.log(large_product\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122827,
      "stdout": "../../../../tmp/tmpsyp4fedk.ts(31,1): error TS1005: ',' expected.\n../../../../tmp/tmpsyp4fedk.ts(31,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            let product = nums1[i] * nums2[j];\n            if (product > max) {\n                max = product;\n                result.push(max);\n            }\n        }\n    }\n    return result.sort((a, b) => b - a).slice(0, N);\n}\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 4));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122827,
      "stdout": "[ 50, 45, 40 ]\n[ 50, 45, 40, 36 ]\n[ 50, 45, 40, 36, 32 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  54,\n  50,\n  45\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50,\n  48\n]\n    at test (/tmp/tmpfffip4it.js:23:12)\n    at Object.<anonymous> (/tmp/tmpfffip4it.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 54, 50, 45 ],\n  expected: [ 60, 54, 50, 48 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < N; i++) {\n        let max = 0;\n        let max_index = 0;\n        for (let j = 0; j < nums1.length; j++) {\n            if (nums1[j] > max) {\n                max = nums1[j];\n                max_index = j;\n            }\n        }\n        nums1[max_index] = 0;\n        max = 0;\n        max_index = 0;\n        for (let j = 0; j < nums2.length; j++) {\n            if (nums2[j] > max) {\n                max = nums2[j];\n                max_index = j;\n            }\n        }\n        nums2[max_index] = 0;\n        result.push(max * max);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  100,\n  81,\n  64\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp5jd0ump2.js:30:12)\n    at Object.<anonymous> (/tmp/tmp5jd0ump2.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 100, 81, 64 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < N; i++) {\n        let max = -Infinity;\n        let maxIndex = -1;\n        for (let j = 0; j < nums1.length; j++) {\n            let temp = nums1[j];\n            for (let k = 0; k < nums2.length; k++) {\n                let product = temp * nums2[k];\n                if (product > max) {\n                    max = product;\n                    maxIndex = j;\n                }\n            }\n        }\n        result.push(max);\n        nums1.splice(maxIndex, 1);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  50,\n  40\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpq7c29zi9.js:25:12)\n    at Object.<anonymous> (/tmp/tmpq7c29zi9.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 50, 40 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let res: number[] = [];\n    let nums1_sorted: number[] = nums1.sort((a, b) => b - a);\n    let nums2_sorted: number[] = nums2.sort((a, b) => b - a);\n    let i: number = 0;\n    let j: number = 0;\n    while (res.length < N) {\n        if (nums1_sorted[i] * nums2_sorted[j] > nums1_sorted[i] * nums2_sorted[j + 1]) {\n            res.push(nums1_sorted[i] * nums2_sorted[j]);\n            j++;\n        } else {\n            res.push(nums1_sorted[i] * nums2_sorted[j + 1]);\n            i++;\n        }\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  54,\n  48\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpmsdd93w1.js:23:12)\n    at Object.<anonymous> (/tmp/tmpmsdd93w1.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 54, 48 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let i = 0;\n    let j = 0;\n    while (i < nums1.length && j < nums2.length && result.length < N) {\n        if (nums1[i] * nums2[j] > nums1[i] * nums2[j + 1]) {\n            result.push(nums1[i] * nums2[j]);\n            j++;\n        } else {\n            result.push(nums1[i] * nums2[j + 1]);\n            i++;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  12,\n  18\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp14ivccv1.js:21:12)\n    at Object.<anonymous> (/tmp/tmp14ivccv1.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 12, 18 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < N; i++) {\n        let max = 0;\n        let max_index = 0;\n        for (let j = 0; j < nums1.length; j++) {\n            if (nums1[j] > max) {\n                max = nums1[j];\n                max_index = j;\n            }\n        }\n        nums1[max_index] = 0;\n        max = 0;\n        max_index = 0;\n        for (let j = 0; j < nums2.length; j++) {\n            if (nums2[j] > max) {\n                max = nums2[j];\n                max_index = j;\n            }\n        }\n        nums2[max_index] = 0;\n        result.push(max);\n    }\n    return result;\n}\n\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122828,
      "stdout": "[ 10, 9, 8 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10,\n  9,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpwe1zo91x.js:31:12)\n    at Object.<anonymous> (/tmp/tmpwe1zo91x.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 10, 9, 8 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    const products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let i = 0;\n    let j = 0;\n    while (i < nums1.length && j < nums2.length) {\n        if (nums1[i] < nums2[j]) {\n            result.push(nums1[i] * nums2[j]);\n            i++;\n        } else {\n            result.push(nums1[i] * nums2[j]);\n            j++;\n        }\n    }\n    while (i < nums1.length) {\n        result.push(nums1[i] * nums2[nums2.length - 1]);\n        i++;\n    }\n    while (j < nums2.length) {\n        result.push(nums1[nums1.length - 1] * nums2[j]);\n        j++;\n    }\n    result.sort((a, b) => b - a);\n    return result.slice(0, N);\n}\n\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 3));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 2));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 1));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 0));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], -1));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], -2));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], -3));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], -4));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], -5));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], -6));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], -7));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122828,
      "stdout": "../../../../tmp/tmpv5ik589b.ts(38,9): error TS1003: Identifier expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    let max_index: number = 0;\n    let max_index2: number = 0;\n    let max_index3: number = 0;\n    let max_index4: number = 0;\n    let max_index5: number = 0;\n    let max_index6: number = 0;\n    let max_index7: number = 0;\n    let max_index8: number = 0;\n    let max_index9: number = 0;\n    let max_index10: number = 0;\n    let max_index11: number = 0;\n    let max_index12: number = 0;\n    let max_index13: number = 0;\n    let max_index14: number = 0;\n    let max_index15: number = 0;\n    let max_index16: number = 0;\n    let max_index17: number = 0;\n    let max_index18: number = 0;\n    let max_index19: number = 0;\n    let max_index20: number = 0;\n    let max_index21: number = 0;\n    let max_index22: number = 0;\n    let max_index23: number = 0;\n    let max_index24: number = 0;\n    let max_index25: number = 0;\n    let max_index26: number = 0;\n    let max_index27: number = 0;\n    let max_index28: number = 0;\n    let max_index29: number = 0;\n    let max_index30: number = 0;\n    let max_index31: number = 0;\n    let max_index32: number = 0;\n    let max_index33: number = 0;\n    let max_index34: number = 0;\n    let max_index35: number = 0;\n    let max_index36: number = 0;\n    let max_index37: number = 0;\n    let max_index38: number = 0;\n    let max_index39: number = 0;\n    let max_index40: number = 0;\n    let max_index41: number = 0;\n    let\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122806,
      "stdout": "../../../../tmp/tmpkv1u8d4u.ts(47,9): error TS1005: ',' expected.\n../../../../tmp/tmpkv1u8d4u.ts(58,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max1: number = Math.max(...nums1);\n    let max2: number = Math.max(...nums2);\n    let max: number = max1 * max2;\n    let min1: number = Math.min(...nums1);\n    let min2: number = Math.min(...nums2);\n    let min: number = min1 * min2;\n    let max_index1: number = nums1.indexOf(max1);\n    let max_index2: number = nums2.indexOf(max2);\n    let min_index1: number = nums1.indexOf(min1);\n    let min_index2: number = nums2.indexOf(min2);\n    let max_index: number = max_index1 * max_index2;\n    let min_index: number = min_index1 * min_index2;\n    result.push(max, min);\n    return result;\n}\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 1));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122828,
      "stdout": "[ 50, 6 ]\n[ 50, 6 ]\n[ 50, 6 ]\n[ 50, 6 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpb0oe0i70.js:26:12)\n    at Object.<anonymous> (/tmp/tmpb0oe0i70.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 3 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let temp: number = 0;\n    let temp1: number = 0;\n    let temp2: number = 0;\n    let temp3: number = 0;\n    let temp4: number = 0;\n    let temp5: number = 0;\n    let temp6: number = 0;\n    let temp7: number = 0;\n    let temp8: number = 0;\n    let temp9: number = 0;\n    let temp10: number = 0;\n    let temp11: number = 0;\n    let temp12: number = 0;\n    let temp13: number = 0;\n    let temp14: number = 0;\n    let temp15: number = 0;\n    let temp16: number = 0;\n    let temp17: number = 0;\n    let temp18: number = 0;\n    let temp19: number = 0;\n    let temp20: number = 0;\n    let temp21: number = 0;\n    let temp22: number = 0;\n    let temp23: number = 0;\n    let temp24: number = 0;\n    let temp25: number = 0;\n    let temp26: number = 0;\n    let temp27: number = 0;\n    let temp28: number = 0;\n    let temp29: number = 0;\n    let temp30: number = 0;\n    let temp31: number = 0;\n    let temp32: number = 0;\n    let temp33: number = 0;\n    let temp34: number = 0;\n    let temp35: number = 0;\n    let temp36: number = 0;\n    let temp37: number = 0;\n    let temp38: number = 0;\n    let temp39: number = 0;\n    let temp40: number = 0;\n    let temp41: number = 0;\n    let temp42: number = 0;\n    let temp43: number = 0;\n    let temp44: number = 0;\n    let temp45: number = 0;\n    let temp46: number = 0;\n    let temp47: number\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "../../../../tmp/tmp21ytpgam.ts(66,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result = [];\n    for (let i = 0; i < N; i++) {\n        let max = 0;\n        let max_index = 0;\n        for (let j = 0; j < nums1.length; j++) {\n            for (let k = 0; k < nums2.length; k++) {\n                if (nums1[j] * nums2[k] > max) {\n                    max = nums1[j] * nums2[k];\n                    max_index = j;\n                }\n            }\n        }\n        result.push(max);\n        nums1.splice(max_index, 1);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  50,\n  40\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpfrds4yji.js:23:12)\n    at Object.<anonymous> (/tmp/tmpfrds4yji.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 50, 40 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let num1: number;\n    let num2: number;\n    let product: number;\n    while (k < N) {\n        if (nums1[i] > nums2[j]) {\n            num1 = nums1[i];\n            i++;\n        } else {\n            num1 = nums2[j];\n            j++;\n        }\n        if (nums1[i] > nums2[j]) {\n            num2 = nums1[i];\n            i++;\n        } else {\n            num2 = nums2[j];\n            j++;\n        }\n        product = num1 * num2;\n        result.push(product);\n        k++;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  18,\n  72,\n  60\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpn8lxmxye.js:36:12)\n    at Object.<anonymous> (/tmp/tmpn8lxmxye.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 18, 72, 60 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let count: number = 0;\n    let i: number = 0;\n    let j: number = 0;\n    while (count < N) {\n        if (nums1[i] * nums2[j] > nums1[i] * nums2[j + 1]) {\n            result.push(nums1[i] * nums2[j]);\n            j++;\n        } else {\n            result.push(nums1[i] * nums2[j + 1]);\n            i++;\n        }\n        count++;\n    }\n    return result;\n}\n\nconsole.log(large_product([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 3));\nconsole.log(large_product([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 5));\nconsole.log(large_product([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122828,
      "stdout": "[ 2, 4, 6 ]\n[ 2, 4, 6, 8, 10 ]\n[\n    2,   4,   6,   8,  10,\n  NaN, NaN, NaN, NaN, NaN\n]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  12,\n  18\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmptf19d9fe.js:26:12)\n    at Object.<anonymous> (/tmp/tmptf19d9fe.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 12, 18 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    while (i < nums1.length && j < nums2.length && k < N) {\n        if (nums1[i] > nums2[j]) {\n            result.push(nums1[i] * nums2[j]);\n            i++;\n        } else {\n            result.push(nums1[i] * nums2[j]);\n            j++;\n        }\n        k++;\n    }\n    while (i < nums1.length && k < N) {\n        result.push(nums1[i] * nums2[nums2.length - 1]);\n        i++;\n        k++;\n    }\n    while (j < nums2.length && k < N) {\n        result.push(nums1[nums1.length - 1] * nums2[j]);\n        j++;\n        k++;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  6,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp8oix6ph8.js:33:12)\n    at Object.<anonymous> (/tmp/tmp8oix6ph8.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 6, 8 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result = [];\n    let max = 0;\n    let maxIndex = 0;\n    let maxIndex2 = 0;\n    let max2 = 0;\n    for (let i = 0; i < N; i++) {\n        for (let j = 0; j < nums1.length; j++) {\n            if (nums1[j] > max) {\n                max = nums1[j];\n                maxIndex = j;\n            }\n        }\n        for (let k = 0; k < nums2.length; k++) {\n            if (nums2[k] > max2) {\n                max2 = nums2[k];\n                maxIndex2 = k;\n            }\n        }\n        result.push(max * max2);\n        nums1.splice(maxIndex, 1);\n        nums2.splice(maxIndex2, 1);\n        max = 0;\n        max2 = 0;\n    }\n    return result;\n}\nconsole.log(large_product([1, 2, 3, 4], [5, 6, 7, 8], 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122828,
      "stdout": "[ 32, 21 ]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpwfepweat.js:33:12)\n    at Object.<anonymous> (/tmp/tmpwfepweat.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result = [];\n    let max = 0;\n    let max_index = 0;\n    let max_index_2 = 0;\n    for (let i = 0; i < N; i++) {\n        for (let j = 0; j < nums1.length; j++) {\n            for (let k = 0; k < nums2.length; k++) {\n                if (nums1[j] * nums2[k] > max) {\n                    max = nums1[j] * nums2[k];\n                    max_index = j;\n                    max_index_2 = k;\n                }\n            }\n        }\n        result.push(max);\n        nums1.splice(max_index, 1);\n        nums2.splice(max_index_2, 1);\n        max = 0;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp79r56u3m.js:27:12)\n    at Object.<anonymous> (/tmp/tmp79r56u3m.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max1: number = 0;\n    let max2: number = 0;\n    let max3: number = 0;\n    let max4: number = 0;\n    let max5: number = 0;\n    let max6: number = 0;\n    let max7: number = 0;\n    let max8: number = 0;\n    let max9: number = 0;\n    let max10: number = 0;\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            if (nums1[i] * nums2[j] > max1) {\n                max1 = nums1[i] * nums2[j];\n            }\n        }\n    }\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            if (nums1[i] * nums2[j] > max2 && nums1[i] * nums2[j] < max1) {\n                max2 = nums1[i] * nums2[j];\n            }\n        }\n    }\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            if (nums1[i] * nums2[j] > max3 && nums1[i] * nums2[j] < max2) {\n                max3 = nums1[i] * nums2[j];\n            }\n        }\n    }\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            if (nums1[i] * nums2[j] > max4 && nums1[i] * nums2[j] < max3) {\n                max4 = nums1[i] * nums2[j];\n            }\n       \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122828,
      "stdout": "../../../../tmp/tmpyp1i9txj.ts(52,8): error TS1005: '}' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products: number[] = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < N; i++) {\n        let max = -Infinity;\n        let max_index = -1;\n        for (let j = 0; j < nums1.length; j++) {\n            for (let k = 0; k < nums2.length; k++) {\n                if (nums1[j] * nums2[k] > max) {\n                    max = nums1[j] * nums2[k];\n                    max_index = [j, k];\n                }\n            }\n        }\n        nums1.splice(max_index[0], 1);\n        nums2.splice(max_index[1], 1);\n        result.push(max);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122828,
      "stdout": "../../../../tmp/tmp_lz8cl5q.ts(11,21): error TS2322: Type 'number[]' is not assignable to type 'number'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let temp: number[] = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            temp.push(nums1[i] * nums2[j]);\n        }\n    }\n    temp.sort((a, b) => b - a);\n    for (let i = 0; i < N; i++) {\n        result.push(temp[i]);\n    }\n    return result;\n}\n\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122829,
      "stdout": "[ 50, 45, 40 ]\n[ 50, 45, 40, 40, 36 ]\n[\n  50, 45, 40, 40, 36,\n  35, 32, 30, 30, 28\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let product: number;\n    for (let i = 0; i < N; i++) {\n        product = nums1[i] * nums2[i];\n        result.push(product);\n    }\n    return result;\n}\n\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 1));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122829,
      "stdout": "[ 6, 14, 24 ]\n[ 6, 14, 24, 36, 50 ]\n[ 6 ]\n[]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  12,\n  24\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpevo4_7fy.js:18:12)\n    at Object.<anonymous> (/tmp/tmpevo4_7fy.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 12, 24 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let products: number[] = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    for (let i = 0; i < N; i++) {\n        result.push(products[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122817,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result = [];\n    let i = 0, j = 0;\n    while (i < nums1.length && j < nums2.length) {\n        if (nums1[i] < nums2[j]) {\n            result.push(nums1[i] * nums2[j]);\n            i++;\n        } else {\n            result.push(nums1[i] * nums2[j]);\n            j++;\n        }\n    }\n    while (i < nums1.length) {\n        result.push(nums1[i] * nums2[nums2.length - 1]);\n        i++;\n    }\n    while (j < nums2.length) {\n        result.push(nums1[nums1.length - 1] * nums2[j]);\n        j++;\n    }\n    result.sort((a, b) => a - b);\n    return result.slice(result.length - N, result.length);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  48,\n  54,\n  60\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpnbjnb7ah.js:29:12)\n    at Object.<anonymous> (/tmp/tmpnbjnb7ah.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 48, 54, 60 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < N; i++) {\n        let max1 = Math.max(...nums1);\n        let max2 = Math.max(...nums2);\n        result.push(max1 * max2);\n        nums1.splice(nums1.indexOf(max1), 1);\n        nums2.splice(nums2.indexOf(max2), 1);\n    }\n    return result;\n}\n\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 1));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 0));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], -1));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 6));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 10));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 11));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 12));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 13));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 14));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 15));\nconsole.log(large_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122828,
      "stdout": "../../../../tmp/tmpov87bcbs.ts(27,1): error TS1005: ',' expected.\n../../../../tmp/tmpov87bcbs.ts(27,9): error TS1005: ',' expected.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let temp: number[] = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            temp.push(nums1[i] * nums2[j]);\n        }\n    }\n    temp.sort((a, b) => b - a);\n    for (let i = 0; i < N; i++) {\n        result.push(temp[i]);\n    }\n    return result;\n}\n\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 2));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 3));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 4));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 5));\nconsole.log(large_product([1, 2, 3], [4, 5, 6], 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122807,
      "stdout": "[ 18, 15 ]\n[ 18, 15, 12 ]\n[ 18, 15, 12, 12 ]\n[ 18, 15, 12, 12, 10 ]\n[ 18, 15, 12, 12, 10, 8 ]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let temp: number[] = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            temp.push(nums1[i] * nums2[j]);\n        }\n    }\n    temp.sort((a, b) => b - a);\n    for (let i = 0; i < N; i++) {\n        result.push(temp[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122812,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max1: number = 0;\n    let max2: number = 0;\n    let max_index1: number = 0;\n    let max_index2: number = 0;\n    let max_product: number = 0;\n    for (let i = 0; i < N; i++) {\n        max1 = 0;\n        max2 = 0;\n        max_index1 = 0;\n        max_index2 = 0;\n        max_product = 0;\n        for (let j = 0; j < nums1.length; j++) {\n            if (nums1[j] > max1) {\n                max1 = nums1[j];\n                max_index1 = j;\n            }\n        }\n        for (let j = 0; j < nums2.length; j++) {\n            if (nums2[j] > max2) {\n                max2 = nums2[j];\n                max_index2 = j;\n            }\n        }\n        max_product = max1 * max2;\n        result.push(max_product);\n        nums1[max_index1] = 0;\n        nums2[max_index2] = 0;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122829,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpmc5t5pqm.js:37:12)\n    at Object.<anonymous> (/tmp/tmpmc5t5pqm.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    let max_index: number = 0;\n    let max_index2: number = 0;\n    for (let i = 0; i < N; i++) {\n        for (let j = 0; j < nums1.length; j++) {\n            for (let k = 0; k < nums2.length; k++) {\n                if (nums1[j] * nums2[k] > max) {\n                    max = nums1[j] * nums2[k];\n                    max_index = j;\n                    max_index2 = k;\n                }\n            }\n        }\n        result.push(max);\n        nums1.splice(max_index, 1);\n        nums2.splice(max_index2, 1);\n        max = 0;\n    }\n    return result;\n}\n\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 8));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122830,
      "stdout": "[ 50, 36, 24 ]\n[ 50, 36, 24, 14, 6 ]\n[\n  50, 36, 24, 14,\n   6,  0,  0,  0\n]\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpp8a1y_un.js:30:12)\n    at Object.<anonymous> (/tmp/tmpp8a1y_un.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result = [];\n    for (let i = 0; i < N; i++) {\n        let max1 = Math.max(...nums1);\n        let max2 = Math.max(...nums2);\n        result.push(max1 * max2);\n        nums1.splice(nums1.indexOf(max1), 1);\n        nums2.splice(nums2.indexOf(max2), 1);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122818,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmp10x2xxvo.js:16:12)\n    at Object.<anonymous> (/tmp/tmp10x2xxvo.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let res: number[] = [];\n    let max: number = 0;\n    let max_index: number = 0;\n    let max_index2: number = 0;\n    for (let i = 0; i < N; i++) {\n        max = 0;\n        max_index = 0;\n        max_index2 = 0;\n        for (let j = 0; j < nums1.length; j++) {\n            for (let k = 0; k < nums2.length; k++) {\n                if (nums1[j] * nums2[k] > max) {\n                    max = nums1[j] * nums2[k];\n                    max_index = j;\n                    max_index2 = k;\n                }\n            }\n        }\n        res.push(max);\n        nums1.splice(max_index, 1);\n        nums2.splice(max_index2, 1);\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  45,\n  32\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50\n]\n    at test (/tmp/tmpxwpdvcuy.js:29:12)\n    at Object.<anonymous> (/tmp/tmpxwpdvcuy.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 45, 32 ],\n  expected: [ 60, 54, 50 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result = [];\n    let max = 0;\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            let product = nums1[i] * nums2[j];\n            if (product > max) {\n                result.push(product);\n                max = product;\n            }\n        }\n    }\n    return result.sort((a, b) => b - a).slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  54,\n  50,\n  45\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50,\n  48\n]\n    at test (/tmp/tmp09twfpy0.js:20:12)\n    at Object.<anonymous> (/tmp/tmp09twfpy0.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 54, 50, 45 ],\n  expected: [ 60, 54, 50, 48 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let temp: number[] = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            temp.push(nums1[i] * nums2[j]);\n        }\n    }\n    temp.sort((a, b) => b - a);\n    for (let i = 0; i < N; i++) {\n        result.push(temp[i]);\n    }\n    return result;\n}\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 8));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122830,
      "stdout": "[ 50, 45, 40 ]\n[ 50, 45, 40, 40, 36 ]\n[\n  50, 45, 40, 40,\n  36, 35, 32, 30\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let products: number[] = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    for (let i = 0; i < N; i++) {\n        result.push(products[i]);\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122817,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            result.push(nums1[i] * nums2[j]);\n        }\n    }\n    result.sort((a, b) => b - a);\n    return result.slice(0, N);\n}\n\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5));\nconsole.log(large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122830,
      "stdout": "[ 50, 45, 40 ]\n[ 50, 45, 40, 40, 36 ]\n[\n  50, 45, 40, 40, 36,\n  35, 32, 30, 30, 28\n]\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let products = [];\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            products.push(nums1[i] * nums2[j]);\n        }\n    }\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1665509965,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.\nfunction large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let result: number[] = [];\n    let max: number = 0;\n    for (let i = 0; i < nums1.length; i++) {\n        for (let j = 0; j < nums2.length; j++) {\n            if (nums1[i] * nums2[j] > max) {\n                max = nums1[i] * nums2[j];\n                result.push(max);\n            }\n        }\n    }\n    return result.sort((a, b) => b - a).slice(0, N);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = large_product;\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);\n}\n\ntest();",
      "timestamp": 1666122830,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  60,\n  54,\n  50,\n  45\n]\n\nshould loosely deep-equal\n\n[\n  60,\n  54,\n  50,\n  48\n]\n    at test (/tmp/tmpg724d8zp.js:19:12)\n    at Object.<anonymous> (/tmp/tmpg724d8zp.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 60, 54, 50, 45 ],\n  expected: [ 60, 54, 50, 48 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    }
  ]
}