{
  "name": "mbpp_562_Find_Max_Length",
  "language": "ts",
  "prompt": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            } else if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp935frg9a.js:31:12)\n    at Object.<anonymous> (/tmp/tmp935frg9a.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\nlet lst = [[0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1]];\nconsole.log(Find_Max_Length(lst));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp9ou2_eyb.js:23:12)\n    at Object.<anonymous> (/tmp/tmp9ou2_eyb.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517105,
      "stdout": "../../../../tmp/tmp2oyh0uho.ts(8,9): error TS2365: Operator '+=' cannot be applied to types 'number' and 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            sum += lst[i][j];\n        }\n        if (sum == 0) {\n            max_length = Math.max(max_length, lst[i].length);\n        }\n        if (hash_map.has(sum)) {\n            max_length = Math.max(max_length, i - hash_map.get(sum));\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpdbw4e2q6.js:26:12)\n    at Object.<anonymous> (/tmp/tmpdbw4e2q6.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_length = Math.max(max_length, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpw4zdo9fs.js:31:12)\n    at Object.<anonymous> (/tmp/tmpw4zdo9fs.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            sum += lst[i][j];\n            if (sum === 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (map.has(sum)) {\n                max_length = Math.max(max_length, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp2l6pqeix.js:26:12)\n    at Object.<anonymous> (/tmp/tmp2l6pqeix.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let temp_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        temp_length = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                temp_length += 1;\n            }\n            else {\n                if (temp_length > max_length) {\n                    max_length = temp_length;\n                }\n                temp_length = 0;\n            }\n        }\n        if (temp_length > max_length) {\n            max_length = temp_length;\n        }\n    }\n    return max_length;\n}\n\nlet lst = [[0, 1, 1, 0, 1, 0, 0], [0, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0]];\nconsole.log(Find_Max_Length(lst));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "7\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpajefl_c3.js:29:12)\n    at Object.<anonymous> (/tmp/tmpajefl_c3.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let temp_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length > 0) {\n            temp_length += 1;\n        } else {\n            if (temp_length > max_length) {\n                max_length = temp_length;\n            }\n            temp_length = 0;\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmph5j5abik.js:21:12)\n    at Object.<anonymous> (/tmp/tmph5j5abik.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length > max_length) {\n            max_length = lst[i].length;\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let start = 0;\n    let end = 0;\n    let sum = 0;\n    let map = new Map<number, number>();\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (!map.has(sum)) {\n            map.set(sum, i);\n        } else {\n            if (max_length < i - map.get(sum)) {\n                max_length = i - map.get(sum);\n                start = map.get(sum) + 1;\n                end = i;\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpvyqqbh_k.js:27:12)\n    at Object.<anonymous> (/tmp/tmpvyqqbh_k.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length: number = 0;\n    let temp_length: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        for (let j: number = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                temp_length++;\n            }\n            else {\n                if (temp_length > max_length) {\n                    max_length = temp_length;\n                }\n                temp_length = 0;\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpcef05xq2.js:23:12)\n    at Object.<anonymous> (/tmp/tmpcef05xq2.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len: number = 0;\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let len: number = 0;\n    for (i = 0; i < lst.length; i++) {\n        for (j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 1) {\n                len = 1;\n                for (k = j + 1; k < lst[i].length; k++) {\n                    if (lst[i][k] == 1) {\n                        len++;\n                    }\n                    else {\n                        break;\n                    }\n                }\n                if (len > max_len) {\n                    max_len = len;\n                }\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517105,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp6oy1hfm2.js:31:12)\n    at Object.<anonymous> (/tmp/tmp6oy1hfm2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = {};\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            sum += lst[i][j];\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map[sum] != undefined) {\n                max_length = Math.max(max_length, j - hash_map[sum]);\n            } else {\n                hash_map[sum] = j;\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpsgtty4jp.js:26:12)\n    at Object.<anonymous> (/tmp/tmpsgtty4jp.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpi5baz3_a.js:31:12)\n    at Object.<anonymous> (/tmp/tmpi5baz3_a.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += (lst[i][0] == 0) ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_len < i - hash_map.get(sum)) {\n                max_len = i - hash_map.get(sum);\n            }\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp2156c4pn.js:23:12)\n    at Object.<anonymous> (/tmp/tmp2156c4pn.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len: number = 0;\n    let map: Map<number, number> = new Map();\n    let sum: number = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (max_len < i - map.get(sum)) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpwpd7fril.js:23:12)\n    at Object.<anonymous> (/tmp/tmpwpd7fril.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len: number = 0;\n    let map: Map<number, number> = new Map<number, number>();\n    let sum: number = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (max_len < i - map.get(sum)) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmph12vk9t8.js:23:12)\n    at Object.<anonymous> (/tmp/tmph12vk9t8.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_len = Math.max(max_len, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpmo1qq36c.js:31:12)\n    at Object.<anonymous> (/tmp/tmpmo1qq36c.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length: number = 0;\n    let temp_length: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 1) {\n                temp_length++;\n            }\n            else {\n                if (temp_length > max_length) {\n                    max_length = temp_length;\n                }\n                temp_length = 0;\n            }\n        }\n        if (temp_length > max_length) {\n            max_length = temp_length;\n        }\n        temp_length = 0;\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpgkd4ov2v.js:27:12)\n    at Object.<anonymous> (/tmp/tmpgkd4ov2v.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (map.has(sum)) {\n                max_length = Math.max(max_length, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpvtjqtdk6.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvtjqtdk6.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517105,
      "stdout": "../../../../tmp/tmp2oyh0uho.ts(8,9): error TS2365: Operator '+=' cannot be applied to types 'number' and 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_length = Math.max(max_length, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n\nlet lst = [[0, 1, 0, 0, 1, 1], [1, 1, 1, 1, 0, 1], [0, 0, 1, 1, 1, 1], [1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0]];\nconsole.log(Find_Max_Length(lst));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124162,
      "stdout": "6\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpn2nurrx9.js:33:12)\n    at Object.<anonymous> (/tmp/tmpn2nurrx9.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len: number = 0;\n    let map: Map<number, number> = new Map<number, number>();\n    map.set(0, -1);\n    let sum: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (i - map.get(sum) > max_len) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpwlrxjxkg.js:23:12)\n    at Object.<anonymous> (/tmp/tmpwlrxjxkg.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (i - map.get(sum) > max_len) {\n                max_len = i - map.get(sum);\n            }\n        }\n        else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124162,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp029_sw6w.js:23:12)\n    at Object.<anonymous> (/tmp/tmp029_sw6w.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let len = lst.length;\n    for (let i = 0; i < len; i++) {\n        let sum = 0;\n        for (let j = i; j < len; j++) {\n            sum += lst[j][0] - lst[j][1];\n            if (sum === 0) {\n                max_length = Math.max(max_length, j - i + 1);\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124162,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpv65pg199.js:19:12)\n    at Object.<anonymous> (/tmp/tmpv65pg199.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_len < i - hash_map.get(sum)) {\n                max_len = i - hash_map.get(sum);\n            }\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124162,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpjv8nsjdw.js:23:12)\n    at Object.<anonymous> (/tmp/tmpjv8nsjdw.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map<number, number>();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            max_length = Math.max(max_length, i - hash_map.get(sum));\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124162,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpi24_k9uy.js:21:12)\n    at Object.<anonymous> (/tmp/tmpi24_k9uy.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let curr_length = 0;\n    let i = 0;\n    let j = 0;\n    while (i < lst.length) {\n        if (lst[i][j] == 1) {\n            curr_length += 1;\n        } else {\n            curr_length = 0;\n        }\n        if (curr_length > max_length) {\n            max_length = curr_length;\n        }\n        if (j == lst[i].length - 1) {\n            i += 1;\n            j = 0;\n        } else {\n            j += 1;\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124162,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpy8mpblda.js:30:12)\n    at Object.<anonymous> (/tmp/tmpy8mpblda.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len: number = 0;\n    let start: number = 0;\n    let end: number = 0;\n    let map: Map<number, number> = new Map<number, number>();\n    let sum: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j: number = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum -= 1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                if (max_len < j + 1) {\n                    max_len = j + 1;\n                    start = i;\n                    end = j;\n                }\n            }\n            if (map.has(sum)) {\n                if (max_len < j - map.get(sum)) {\n                    max_len = j - map.get(sum);\n                    start = i;\n                    end = j;\n                }\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    console.log(start, end);\n    return max_len;\n}\n\nlet lst: number[][] = [[0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 1], [0, 1, 1, 1, 1, 0, 1, 1]];\nconsole.log(Find_Max_Length(lst));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124162,
      "stdout": "0 7\n6\n0 0\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpaahji8l_.js:44:12)\n    at Object.<anonymous> (/tmp/tmpaahji8l_.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_len = Math.max(max_len, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpmo1qq36c.js:31:12)\n    at Object.<anonymous> (/tmp/tmpmo1qq36c.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            }\n            else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_length = Math.max(max_length, j - hash_map.get(sum));\n            }\n            else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124162,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmphb6b8zop.js:31:12)\n    at Object.<anonymous> (/tmp/tmphb6b8zop.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let i = 0;\n    let j = 0;\n    while (i < lst.length) {\n        j = 0;\n        while (j < lst[i].length) {\n            if (lst[i][j] == 0) {\n                let length = 0;\n                let k = i;\n                let l = j;\n                while (k < lst.length) {\n                    l = 0;\n                    while (l < lst[k].length) {\n                        if (lst[k][l] == 0) {\n                            length++;\n                        } else {\n                            break;\n                        }\n                        l++;\n                    }\n                    k++;\n                }\n                if (length > max_length) {\n                    max_length = length;\n                }\n            }\n            j++;\n        }\n        i++;\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124162,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpn5d9qspl.js:39:12)\n    at Object.<anonymous> (/tmp/tmpn5d9qspl.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            sum += lst[i][j];\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124162,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpbe3wfk5y.js:26:12)\n    at Object.<anonymous> (/tmp/tmpbe3wfk5y.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_length = Math.max(max_length, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\nconsole.log(Find_Max_Length([[1, 0, 0, 1, 0, 1, 1], [1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 1, 1, 1]]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124162,
      "stdout": "../../../../tmp/tmp4dw6kbbk.ts(8,9): error TS2365: Operator '+=' cannot be applied to types 'number' and 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            sum += lst[i][j];\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (map.has(sum)) {\n                max_length = Math.max(max_length, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124162,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpyswtxh8h.js:26:12)\n    at Object.<anonymous> (/tmp/tmpyswtxh8h.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len: number = 0;\n    let map: Map<number, number> = new Map();\n    let sum: number = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124162,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp88gww0nh.js:21:12)\n    at Object.<anonymous> (/tmp/tmp88gww0nh.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0];\n        if (hash_map.has(sum)) {\n            max_length = Math.max(max_length, i - hash_map.get(sum));\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\nlet lst = [[0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0], [0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]];\nconsole.log(Find_Max_Length(lst));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124162,
      "stdout": "1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp6w19s94m.js:23:12)\n    at Object.<anonymous> (/tmp/tmp6w19s94m.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map<number, number>();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124162,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpqiv53568.js:21:12)\n    at Object.<anonymous> (/tmp/tmpqiv53568.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len: number = 0;\n    let map: Map<number, number> = new Map();\n    let sum: number = 0;\n    map.set(0, -1);\n    for (let i: number = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (max_len < i - map.get(sum)) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124162,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpvbnrfj8h.js:23:12)\n    at Object.<anonymous> (/tmp/tmpvbnrfj8h.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map<number, number>();\n    let sum = 0;\n\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n\nlet lst = [[0, 1, 0, 0, 1, 1], [1, 1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0]];\nconsole.log(Find_Max_Length(lst));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124162,
      "stdout": "6\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpvcd8hng2.js:33:12)\n    at Object.<anonymous> (/tmp/tmpvcd8hng2.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "../../../../tmp/tmp_8xaglmc.ts(8,9): error TS2365: Operator '+=' cannot be applied to types 'number' and 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len: number = 0;\n    let len: number = 0;\n    let i: number = 0;\n    let j: number = 0;\n    for (i = 0; i < lst.length; i++) {\n        len = 0;\n        for (j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                len++;\n            }\n            else {\n                len = 0;\n            }\n            if (len > max_len) {\n                max_len = len;\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124162,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp8v7fqicr.js:26:12)\n    at Object.<anonymous> (/tmp/tmp8v7fqicr.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let count = 0;\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n            if (count > max_length) {\n                max_length = count;\n            }\n        }\n        count = 0;\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124162,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpc9fe192p.js:24:12)\n    at Object.<anonymous> (/tmp/tmpc9fe192p.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    while (i < lst.length) {\n        if (lst[i][j] == 0) {\n            count += 1;\n        }\n        else {\n            count = 0;\n        }\n        if (count > max_length) {\n            max_length = count;\n        }\n        if (j == lst[i].length - 1) {\n            i += 1;\n            j = 0;\n        }\n        else {\n            j += 1;\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124162,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpakup6kkz.js:30:12)\n    at Object.<anonymous> (/tmp/tmpakup6kkz.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let start = 0;\n    let end = 0;\n    let sum = 0;\n    let map = new Map();\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            if (max_length < i - map.get(sum)) {\n                max_length = i - map.get(sum);\n                start = map.get(sum) + 1;\n                end = i;\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    console.log(lst.slice(start, end + 1));\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124162,
      "stdout": "../../../../tmp/tmpmc50hynl.ts(10,9): error TS2365: Operator '+=' cannot be applied to types 'number' and 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (hash_map.has(sum)) {\n            max_length = Math.max(max_length, i - hash_map.get(sum));\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "../../../../tmp/tmpjvaw3fj1.ts(8,9): error TS2365: Operator '+=' cannot be applied to types 'number' and 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (hash_map.has(sum)) {\n            max_length = Math.max(max_length, i - hash_map.get(sum));\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\nlet lst = [0, 0, 1, 0, 0, 0, 1, 1];\nconsole.log(Find_Max_Length(lst));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "../../../../tmp/tmpdhveuk5n.ts(8,9): error TS2365: Operator '+=' cannot be applied to types 'number' and 'number[]'.\n../../../../tmp/tmpdhveuk5n.ts(19,29): error TS2345: Argument of type 'number[]' is not assignable to parameter of type 'number[][]'.\n  Type 'number' is not assignable to type 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    while (i < lst.length) {\n        while (j < lst[i].length) {\n            if (lst[i][j] == 0) {\n                count = count + 1;\n            }\n            else {\n                count = 0;\n            }\n            if (count > max_length) {\n                max_length = count;\n            }\n            j = j + 1;\n        }\n        i = i + 1;\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpuq6rizgz.js:27:12)\n    at Object.<anonymous> (/tmp/tmpuq6rizgz.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_length < i - hash_map.get(sum)) {\n                max_length = i - hash_map.get(sum);\n            }\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp7n3dkp4b.js:23:12)\n    at Object.<anonymous> (/tmp/tmp7n3dkp4b.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (map.has(sum)) {\n            max_length = Math.max(max_length, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpinhi9av6.js:21:12)\n    at Object.<anonymous> (/tmp/tmpinhi9av6.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let map = new Map<number, number>();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (map.has(sum)) {\n                max_length = Math.max(max_length, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp0v3ktw1v.js:31:12)\n    at Object.<anonymous> (/tmp/tmp0v3ktw1v.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_length < i - hash_map.get(sum)) {\n                max_length = i - hash_map.get(sum);\n            }\n        }\n        else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmphq_o010k.js:23:12)\n    at Object.<anonymous> (/tmp/tmphq_o010k.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length: number = 0;\n    let current_length: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        current_length = 0;\n        for (let j: number = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 1) {\n                current_length++;\n            }\n            else {\n                if (current_length > max_length) {\n                    max_length = current_length;\n                }\n                current_length = 0;\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmptxqycvt4.js:24:12)\n    at Object.<anonymous> (/tmp/tmptxqycvt4.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (map.has(sum)) {\n                if (max_len < j - map.get(sum)) {\n                    max_len = j - map.get(sum);\n                }\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpc0ordrs6.js:30:12)\n    at Object.<anonymous> (/tmp/tmpc0ordrs6.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let count = 0;\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 1) {\n                count++;\n            }\n            else {\n                count = 0;\n            }\n            if (count > max_length) {\n                max_length = count;\n            }\n        }\n    }\n    return max_length;\n}\nconsole.log(Find_Max_Length([[1, 1, 1, 1], [1, 0, 0, 1, 1, 1], [1, 1, 1, 1, 0, 0, 1, 1, 1, 1]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "7\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpk77h4nmn.js:24:12)\n    at Object.<anonymous> (/tmp/tmpk77h4nmn.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (map.has(sum)) {\n            max_length = Math.max(max_length, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpinhi9av6.js:21:12)\n    at Object.<anonymous> (/tmp/tmpinhi9av6.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_length < i - hash_map.get(sum)) {\n                max_length = i - hash_map.get(sum);\n            }\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\nconsole.log(Find_Max_Length([[0, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0]]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "4\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpxncgfdkj.js:24:12)\n    at Object.<anonymous> (/tmp/tmpxncgfdkj.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let n = lst.length;\n    let m = lst[0].length;\n    let dp = new Array(n).fill(0).map(() => new Array(m).fill(0));\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (i == 0 || j == 0) {\n                dp[i][j] = lst[i][j];\n            } else if (lst[i][j] == 1) {\n                dp[i][j] = Math.min(dp[i - 1][j - 1], Math.min(dp[i - 1][j], dp[i][j - 1])) + 1;\n            }\n            max_length = Math.max(max_length, dp[i][j]);\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpi8skepok.js:23:12)\n    at Object.<anonymous> (/tmp/tmpi8skepok.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length: number = 0;\n    let temp_length: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        for (let j: number = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 1) {\n                temp_length++;\n            }\n            else {\n                if (max_length < temp_length) {\n                    max_length = temp_length;\n                }\n                temp_length = 0;\n            }\n        }\n        if (max_length < temp_length) {\n            max_length = temp_length;\n        }\n        temp_length = 0;\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp37au9mo2.js:27:12)\n    at Object.<anonymous> (/tmp/tmp37au9mo2.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let lst_length = lst.length;\n    let lst_length_2 = lst[0].length;\n    let sum_lst = [];\n    let sum = 0;\n    for (let i = 0; i < lst_length; i++) {\n        sum_lst.push([]);\n        for (let j = 0; j < lst_length_2; j++) {\n            sum += lst[i][j];\n            if (sum === 0) {\n                max_length = Math.max(max_length, i + 1);\n            }\n            if (sum_lst[i].indexOf(sum) !== -1) {\n                max_length = Math.max(max_length, i - sum_lst[i].indexOf(sum));\n            } else {\n                sum_lst[i].push(sum);\n            }\n        }\n        sum = 0;\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmphq28bxry.js:29:12)\n    at Object.<anonymous> (/tmp/tmphq28bxry.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let count = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 1) {\n                count++;\n            }\n            else {\n                count = 0;\n            }\n            if (count > max_length) {\n                max_length = count;\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpy41u6brk.js:23:12)\n    at Object.<anonymous> (/tmp/tmpy41u6brk.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517105,
      "stdout": "../../../../tmp/tmp2oyh0uho.ts(8,9): error TS2365: Operator '+=' cannot be applied to types 'number' and 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpi5baz3_a.js:31:12)\n    at Object.<anonymous> (/tmp/tmpi5baz3_a.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_length < i - hash_map.get(sum)) {\n                max_length = i - hash_map.get(sum);\n            }\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpinw8fryi.js:23:12)\n    at Object.<anonymous> (/tmp/tmpinw8fryi.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (i - map.get(sum) > max_len) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmplsmx_f9k.js:23:12)\n    at Object.<anonymous> (/tmp/tmplsmx_f9k.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (i - map.get(sum) > max_len) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\nconsole.log(Find_Max_Length([[0, 1], [0, 1], [1, 0], [1, 1], [1, 1], [0, 1]]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "6\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpxhxtp_7n.js:24:12)\n    at Object.<anonymous> (/tmp/tmpxhxtp_7n.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            max_length = Math.max(max_length, i - hash_map.get(sum));\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpqe1_kgg_.js:21:12)\n    at Object.<anonymous> (/tmp/tmpqe1_kgg_.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_length < i - hash_map.get(sum)) {\n                max_length = i - hash_map.get(sum);\n            }\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp7n3dkp4b.js:23:12)\n    at Object.<anonymous> (/tmp/tmp7n3dkp4b.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n  let max_length = 0;\n  let hash_map = new Map();\n\n  // Initialize sum of elements\n  let sum = 0;\n\n  // Traverse through the given array\n  for (let i = 0; i < lst.length; i++) {\n    // Initialize sum of elements\n    sum = 0;\n\n    // Traverse through the given array\n    for (let j = 0; j < lst[i].length; j++) {\n      // Add current element to sum\n      sum += lst[i][j];\n\n      // To handle sum=0 at last index\n      if (sum == 0) max_length = i + 1;\n\n      // If this sum is seen before, then update max_length\n      // if required\n      if (hash_map.has(sum + lst.length))\n        max_length = Math.max(\n          max_length,\n          i - hash_map.get(sum + lst.length)\n        );\n      else // Else put this sum in hash table\n        hash_map.set(sum + lst.length, i);\n    }\n  }\n\n  return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpmq9ey2ud.js:31:12)\n    at Object.<anonymous> (/tmp/tmpmq9ey2ud.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_length = Math.max(max_length, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n\nlet lst = [[0, 0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [0, 0, 0]];\nconsole.log(Find_Max_Length(lst));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "6\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp2_dcgall.js:33:12)\n    at Object.<anonymous> (/tmp/tmp2_dcgall.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (map.has(sum)) {\n                if (max_len < j - map.get(sum)) {\n                    max_len = j - map.get(sum);\n                }\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpzf3r1fn0.js:30:12)\n    at Object.<anonymous> (/tmp/tmpzf3r1fn0.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let count = 0;\n    for (let i = 0; i < lst.length; i++) {\n        count += (lst[i][0] == 0) ? -1 : 1;\n        if (map.has(count)) {\n            max = Math.max(max, i - map.get(count));\n        } else {\n            map.set(count, i);\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpwn2_x34o.js:21:12)\n    at Object.<anonymous> (/tmp/tmpwn2_x34o.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let temp_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 1) {\n                temp_length++;\n            }\n            else {\n                temp_length = 0;\n            }\n            if (temp_length > max_length) {\n                max_length = temp_length;\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp0v8ky3xh.js:23:12)\n    at Object.<anonymous> (/tmp/tmp0v8ky3xh.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let temp_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        temp_length = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                temp_length++;\n            }\n            else {\n                if (temp_length > max_length) {\n                    max_length = temp_length;\n                }\n                temp_length = 0;\n            }\n        }\n        if (temp_length > max_length) {\n            max_length = temp_length;\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp9mq92f8d.js:27:12)\n    at Object.<anonymous> (/tmp/tmp9mq92f8d.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (map.has(sum)) {\n                max_length = Math.max(max_length, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n\nconsole.log(Find_Max_Length([[0, 1, 0, 0, 1, 1, 1], [1, 1, 1, 1, 0, 0, 1, 1]]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "6\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpwuvns20s.js:32:12)\n    at Object.<anonymous> (/tmp/tmpwuvns20s.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (i - map.get(sum) > max_length) {\n                max_length = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp0btkcy2p.js:23:12)\n    at Object.<anonymous> (/tmp/tmp0btkcy2p.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let hash = {};\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            sum += lst[i][j];\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (hash[sum + lst.length] != undefined) {\n                max_len = Math.max(max_len, j - hash[sum + lst.length]);\n            } else {\n                hash[sum + lst.length] = j;\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpoki_qb80.js:26:12)\n    at Object.<anonymous> (/tmp/tmpoki_qb80.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let map = new Map<number, number>();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (map.has(sum)) {\n                max_length = Math.max(max_length, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp0v3ktw1v.js:31:12)\n    at Object.<anonymous> (/tmp/tmp0v3ktw1v.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len: number = 0;\n    let map: Map<number, number> = new Map<number, number>();\n    map.set(0, -1);\n    let sum: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (max_len < i - map.get(sum)) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp8udlmkuz.js:23:12)\n    at Object.<anonymous> (/tmp/tmp8udlmkuz.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let maxLength = 0;\n    let map = new Map<number, number>();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            maxLength = Math.max(maxLength, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return maxLength;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpz86wiu9h.js:21:12)\n    at Object.<anonymous> (/tmp/tmpz86wiu9h.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map<number, number>();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (hash_map.has(sum)) {\n            max_length = Math.max(max_length, i - hash_map.get(sum));\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "../../../../tmp/tmpyb1_zsz7.ts(8,9): error TS2365: Operator '+=' cannot be applied to types 'number' and 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, i - map.get(sum));\n            } else {\n                map.set(sum, i);\n            }\n        }\n    }\n    return max_len;\n}\n\nconsole.log(Find_Max_Length([[0, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 0, 1], [0, 1, 1, 0, 1, 1, 1], [1, 1, 1, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 0, 1, 1, 0]]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpswm9c2_1.js:29:12)\n    at Object.<anonymous> (/tmp/tmpswm9c2_1.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (map.has(sum)) {\n                max_length = Math.max(max_length, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpvtjqtdk6.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvtjqtdk6.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (map.has(sum)) {\n                max_length = Math.max(max_length, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n\nlet lst = [[0, 1, 0, 0, 1, 1], [1, 1, 1, 1, 0, 1]];\nconsole.log(Find_Max_Length(lst));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "6\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpx_h6gjzv.js:33:12)\n    at Object.<anonymous> (/tmp/tmpx_h6gjzv.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length: number = 0;\n    let temp_length: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        temp_length = lst[i].length;\n        if (temp_length > max_length) {\n            max_length = temp_length;\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let len = 0;\n    let i = 0;\n    let j = 0;\n    while (i < lst.length) {\n        if (lst[i][j] == 1) {\n            len += 1;\n            j += 1;\n        } else {\n            if (len > max_len) {\n                max_len = len;\n            }\n            len = 0;\n            i += 1;\n            j = 0;\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp0qecftwh.js:26:12)\n    at Object.<anonymous> (/tmp/tmp0qecftwh.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (i - map.get(sum) > max_len) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpatl2l4ef.js:23:12)\n    at Object.<anonymous> (/tmp/tmpatl2l4ef.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = {};\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            sum += lst[i][j];\n        }\n        if (sum === 0) {\n            max_length = Math.max(max_length, lst[i].length);\n        }\n        else {\n            if (hash_map[sum] === undefined) {\n                hash_map[sum] = i;\n            }\n            else {\n                max_length = Math.max(max_length, i - hash_map[sum]);\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp3shyigbf.js:28:12)\n    at Object.<anonymous> (/tmp/tmp3shyigbf.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let map = new Map<number, number>();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (max_length < i - map.get(sum)) {\n                max_length = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpqzjuwruh.js:23:12)\n    at Object.<anonymous> (/tmp/tmpqzjuwruh.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let count = 0;\n    for (let i = 0; i < lst.length; i++) {\n        count += (lst[i][0] == 0) ? -1 : 1;\n        if (map.has(count)) {\n            max_len = Math.max(max_len, i - map.get(count));\n        } else {\n            map.set(count, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpfllthjxf.js:21:12)\n    at Object.<anonymous> (/tmp/tmpfllthjxf.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum -= 1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp3t_g9bgc.js:31:12)\n    at Object.<anonymous> (/tmp/tmp3t_g9bgc.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = {};\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            sum += lst[i][j];\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map[sum] == undefined) {\n                hash_map[sum] = j;\n            } else {\n                max_length = Math.max(max_length, j - hash_map[sum]);\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124173,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpmpro91nr.js:26:12)\n    at Object.<anonymous> (/tmp/tmpmpro91nr.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_length < i - hash_map.get(sum)) {\n                max_length = i - hash_map.get(sum);\n            }\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpinw8fryi.js:23:12)\n    at Object.<anonymous> (/tmp/tmpinw8fryi.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len: number = 0;\n    let len: number = 0;\n    let i: number = 0;\n    let j: number = 0;\n    for (i = 0; i < lst.length; i++) {\n        for (j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                len = 0;\n            }\n            else {\n                len += 1;\n                max_len = Math.max(max_len, len);\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124173,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpfzh5i3eb.js:23:12)\n    at Object.<anonymous> (/tmp/tmpfzh5i3eb.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_len = Math.max(max_len, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpmo1qq36c.js:31:12)\n    at Object.<anonymous> (/tmp/tmpmo1qq36c.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (hash_map.has(sum)) {\n            max_length = Math.max(max_length, i - hash_map.get(sum));\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "../../../../tmp/tmpjvaw3fj1.ts(8,9): error TS2365: Operator '+=' cannot be applied to types 'number' and 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_len < i - hash_map.get(sum)) {\n                max_len = i - hash_map.get(sum);\n            }\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124162,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpjv8nsjdw.js:23:12)\n    at Object.<anonymous> (/tmp/tmpjv8nsjdw.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let start = 0;\n    let end = 0;\n    let sum = 0;\n    let map = new Map();\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            if (max_length < i - map.get(sum)) {\n                max_length = i - map.get(sum);\n                start = map.get(sum) + 1;\n                end = i;\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    console.log(lst.slice(start, end + 1));\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124162,
      "stdout": "../../../../tmp/tmpmc50hynl.ts(10,9): error TS2365: Operator '+=' cannot be applied to types 'number' and 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len: number = 0;\n    let map: Map<number, number> = new Map();\n    map.set(0, -1);\n    let sum: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (max_len < i - map.get(sum)) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124173,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp3n_tf2m7.js:23:12)\n    at Object.<anonymous> (/tmp/tmp3n_tf2m7.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length: number = 0;\n    let temp_length: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                temp_length += 1;\n            } else {\n                if (temp_length > max_length) {\n                    max_length = temp_length;\n                }\n                temp_length = 0;\n            }\n        }\n        if (temp_length > max_length) {\n            max_length = temp_length;\n        }\n        temp_length = 0;\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124173,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpx5j05xco.js:27:12)\n    at Object.<anonymous> (/tmp/tmpx5j05xco.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_length = Math.max(max_length, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpw4zdo9fs.js:31:12)\n    at Object.<anonymous> (/tmp/tmpw4zdo9fs.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length > max_length) {\n            max_length = lst[i].length;\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124173,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length: number = 0;\n    let current_length: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length > max_length) {\n            max_length = lst[i].length;\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124173,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (hash_map.has(sum)) {\n            max_length = Math.max(max_length, i - hash_map.get(sum));\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "../../../../tmp/tmpjvaw3fj1.ts(8,9): error TS2365: Operator '+=' cannot be applied to types 'number' and 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (sum === 0) {\n            max_length = i + 1;\n        }\n        if (hash_map.has(sum + lst.length)) {\n            if (max_length < i - hash_map.get(sum + lst.length)) {\n                max_length = i - hash_map.get(sum + lst.length);\n            }\n        } else {\n            hash_map.set(sum + lst.length, i);\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpiit3zwil.js:25:12)\n    at Object.<anonymous> (/tmp/tmpiit3zwil.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let temp_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                temp_length++;\n            }\n            else {\n                max_length = Math.max(max_length, temp_length);\n                temp_length = 0;\n            }\n        }\n        max_length = Math.max(max_length, temp_length);\n        temp_length = 0;\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124176,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp_1wz4mog.js:23:12)\n    at Object.<anonymous> (/tmp/tmp_1wz4mog.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len: number = 0;\n    let map: Map<number, number> = new Map<number, number>();\n    let sum: number = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (max_len < i - map.get(sum)) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\nconsole.log(Find_Max_Length([[0, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0]]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124177,
      "stdout": "4\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmptfblw7tx.js:24:12)\n    at Object.<anonymous> (/tmp/tmptfblw7tx.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let hash_map = new Map();\n\n    // Initialize sum of elements\n    let sum = 0;\n\n    // Traverse through the given array\n    for (let i = 0; i < lst.length; i++) {\n        // Initialize sum of elements\n        sum = 0;\n\n        // Traverse through the given array\n        for (let j = 0; j < lst[i].length; j++) {\n            // Add current element to sum\n            sum += lst[i][j];\n\n            // To handle sum=0 at last index\n            if (sum == 0)\n                max_len = Math.max(max_len, j + 1);\n\n            // If this sum is seen before, then update max_len\n            // if required\n            if (hash_map.has(sum + lst.length))\n                max_len = Math.max(max_len, j - hash_map.get(sum + lst.length));\n            else // Else put this sum in hash table\n                hash_map.set(sum + lst.length, j);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpte8re2ds.js:31:12)\n    at Object.<anonymous> (/tmp/tmpte8re2ds.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (max_len < i - map.get(sum)) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpzuuwpe11.js:23:12)\n    at Object.<anonymous> (/tmp/tmpzuuwpe11.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len: number = 0;\n    let map: any = { 0: -1 };\n    let sum: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map[sum] != null) {\n            max_len = Math.max(max_len, i - map[sum]);\n        } else {\n            map[sum] = i;\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124177,
      "stdout": "../../../../tmp/tmp61o5nrnj.ts(7,9): error TS2365: Operator '+=' cannot be applied to types 'number' and 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517105,
      "stdout": "../../../../tmp/tmp2oyh0uho.ts(8,9): error TS2365: Operator '+=' cannot be applied to types 'number' and 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum -= 1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp3t_g9bgc.js:31:12)\n    at Object.<anonymous> (/tmp/tmp3t_g9bgc.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = {};\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            sum += lst[i][j];\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map[sum] == undefined) {\n                hash_map[sum] = j;\n            } else {\n                max_length = Math.max(max_length, j - hash_map[sum]);\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124173,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpmpro91nr.js:26:12)\n    at Object.<anonymous> (/tmp/tmpmpro91nr.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let count = 0;\n    let hash = {};\n    for (let i = 0; i < lst.length; i++) {\n        count = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                count++;\n            } else {\n                count--;\n            }\n            if (count == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (hash[count] == undefined) {\n                hash[count] = j;\n            } else {\n                max_len = Math.max(max_len, j - hash[count]);\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124177,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmph0j3toqq.js:31:12)\n    at Object.<anonymous> (/tmp/tmph0j3toqq.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map<number, number>();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpvs6grmw7.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvs6grmw7.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "../../../../tmp/tmp_8xaglmc.ts(8,9): error TS2365: Operator '+=' cannot be applied to types 'number' and 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_length = Math.max(max_length, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpw4zdo9fs.js:31:12)\n    at Object.<anonymous> (/tmp/tmpw4zdo9fs.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            }\n            else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            }\n            else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpgr4zwroh.js:31:12)\n    at Object.<anonymous> (/tmp/tmpgr4zwroh.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let i = 0;\n    let j = 0;\n    while (i < lst.length) {\n        j = 0;\n        while (j < lst[i].length) {\n            if (lst[i][j] == 1) {\n                let length = Find_Length(lst, i, j);\n                if (length > max_length) {\n                    max_length = length;\n                }\n            }\n            j++;\n        }\n        i++;\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124178,
      "stdout": "../../../../tmp/tmpb2581d4j.ts(10,30): error TS2304: Cannot find name 'Find_Length'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            max_length = Math.max(max_length, i - map.get(sum));\n        }\n        else {\n            map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpwagvl773.js:21:12)\n    at Object.<anonymous> (/tmp/tmpwagvl773.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_length = Math.max(max_length, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpw4zdo9fs.js:31:12)\n    at Object.<anonymous> (/tmp/tmpw4zdo9fs.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (i - map.get(sum) > max_len) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124172,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpatl2l4ef.js:23:12)\n    at Object.<anonymous> (/tmp/tmpatl2l4ef.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let curr_length = 0;\n    let i = 0;\n    let j = 0;\n    while (i < lst.length) {\n        while (j < lst[i].length) {\n            if (lst[i][j] == 0) {\n                curr_length = 0;\n            } else {\n                curr_length += 1;\n                max_length = Math.max(max_length, curr_length);\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpclxegitu.js:26:12)\n    at Object.<anonymous> (/tmp/tmpclxegitu.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let len = 0;\n    let i = 0;\n    let j = 0;\n    while (i < lst.length) {\n        while (j < lst[i].length) {\n            if (lst[i][j] == 0) {\n                len = 0;\n            }\n            else {\n                len++;\n                max_len = Math.max(max_len, len);\n            }\n            j++;\n        }\n        i++;\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpe0g4q3zt.js:26:12)\n    at Object.<anonymous> (/tmp/tmpe0g4q3zt.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_length = Math.max(max_length, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpw4zdo9fs.js:31:12)\n    at Object.<anonymous> (/tmp/tmpw4zdo9fs.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let start = 0;\n    let end = 0;\n    let sum = 0;\n    let map = new Map();\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (max_length < i - map.get(sum)) {\n                max_length = i - map.get(sum);\n                start = map.get(sum) + 1;\n                end = i;\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp1a4yaakq.js:27:12)\n    at Object.<anonymous> (/tmp/tmp1a4yaakq.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_length = Math.max(max_length, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n\nlet lst = [[0, 1, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 0, 0, 1], [0, 0, 1, 0, 1, 1, 1, 1], [1, 1, 1, 0, 0, 0, 0, 1]];\nconsole.log(Find_Max_Length(lst));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124178,
      "stdout": "8\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpexoi2eog.js:33:12)\n    at Object.<anonymous> (/tmp/tmpexoi2eog.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len: number = 0;\n    let hash_map: Map<number, number> = new Map<number, number>();\n    let sum: number = 0;\n    hash_map.set(0, -1);\n    for (let i: number = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_len < i - hash_map.get(sum)) {\n                max_len = i - hash_map.get(sum);\n            }\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\nconsole.log(Find_Max_Length([[0, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0]]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124178,
      "stdout": "4\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpyizhdf4x.js:24:12)\n    at Object.<anonymous> (/tmp/tmpyizhdf4x.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_length < i - hash_map.get(sum)) {\n                max_length = i - hash_map.get(sum);\n            }\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpinw8fryi.js:23:12)\n    at Object.<anonymous> (/tmp/tmpinw8fryi.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            sum += lst[i][j];\n        }\n        if (sum == 0) {\n            max_len = Math.max(max_len, lst[i].length);\n        }\n        else {\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, i - map.get(sum));\n            }\n            else {\n                map.set(sum, i);\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpm9y1dvle.js:28:12)\n    at Object.<anonymous> (/tmp/tmpm9y1dvle.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len: number = 0;\n    let map: Map<number, number> = new Map();\n    let sum: number = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        }\n        else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124178,
      "stdout": "../../../../tmp/tmpmkbc8uy9.ts(8,9): error TS2365: Operator '+=' cannot be applied to types 'number' and 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517105,
      "stdout": "../../../../tmp/tmp2oyh0uho.ts(8,9): error TS2365: Operator '+=' cannot be applied to types 'number' and 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_len < i - hash_map.get(sum)) {\n                max_len = i - hash_map.get(sum);\n            }\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124162,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpjv8nsjdw.js:23:12)\n    at Object.<anonymous> (/tmp/tmpjv8nsjdw.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum -= 1;\n            }\n            else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_len = Math.max(max_len, j - hash_map.get(sum));\n            }\n            else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpn09x75n6.js:31:12)\n    at Object.<anonymous> (/tmp/tmpn09x75n6.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let count = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                count++;\n            }\n            else {\n                count = 0;\n            }\n            if (count > max_length) {\n                max_length = count;\n            }\n        }\n    }\n    return max_length;\n}\nlet lst = [[0, 1, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0]];\nconsole.log(Find_Max_Length(lst));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124178,
      "stdout": "8\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmph8l2inia.js:25:12)\n    at Object.<anonymous> (/tmp/tmph8l2inia.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpi5baz3_a.js:31:12)\n    at Object.<anonymous> (/tmp/tmpi5baz3_a.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum === 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_len = Math.max(max_len, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n\nconsole.log(Find_Max_Length([[0, 1, 0, 0, 1, 1, 1], [1, 1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0]]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124178,
      "stdout": "6\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmppa3i06yz.js:32:12)\n    at Object.<anonymous> (/tmp/tmppa3i06yz.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517105,
      "stdout": "../../../../tmp/tmp2oyh0uho.ts(8,9): error TS2365: Operator '+=' cannot be applied to types 'number' and 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (map.has(sum)) {\n            max_length = Math.max(max_length, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\nconsole.log(Find_Max_Length([[0, 1], [1, 1], [0, 1], [1, 1], [1, 1], [1, 1], [0, 1]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124178,
      "stdout": "4\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpiucoqwe4.js:22:12)\n    at Object.<anonymous> (/tmp/tmpiucoqwe4.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let n = lst.length;\n    let m = lst[0].length;\n    let dp: number[][] = new Array(n);\n    for (let i = 0; i < n; i++) {\n        dp[i] = new Array(m);\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (i == 0 || j == 0) {\n                dp[i][j] = lst[i][j];\n            } else if (lst[i][j] == 1) {\n                dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1;\n            } else {\n                dp[i][j] = 0;\n            }\n            max_len = Math.max(max_len, dp[i][j]);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpnva9avp4.js:29:12)\n    at Object.<anonymous> (/tmp/tmpnva9avp4.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_length = Math.max(max_length, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpw4zdo9fs.js:31:12)\n    at Object.<anonymous> (/tmp/tmpw4zdo9fs.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (max_len < i - map.get(sum)) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpzuuwpe11.js:23:12)\n    at Object.<anonymous> (/tmp/tmpzuuwpe11.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n  let max_length = 0;\n  for (let i = 0; i < lst.length; i++) {\n    max_length = Math.max(max_length, lst[i].length);\n  }\n  return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map<number, number>();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpvs6grmw7.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvs6grmw7.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (hash_map.has(sum)) {\n            max_length = Math.max(max_length, i - hash_map.get(sum));\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124166,
      "stdout": "../../../../tmp/tmpjvaw3fj1.ts(8,9): error TS2365: Operator '+=' cannot be applied to types 'number' and 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_length = Math.max(max_length, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpw4zdo9fs.js:31:12)\n    at Object.<anonymous> (/tmp/tmpw4zdo9fs.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length > max_length) {\n            max_length = lst[i].length;\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let curr_len = 0;\n    let hash_map = new Map();\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                curr_len += -1;\n            } else {\n                curr_len += 1;\n            }\n            if (hash_map.has(curr_len)) {\n                max_len = Math.max(max_len, i - hash_map.get(curr_len));\n            } else {\n                hash_map.set(curr_len, i);\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpmjchtmk9.js:28:12)\n    at Object.<anonymous> (/tmp/tmpmjchtmk9.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n  let max_length = 0;\n  let hash_map = new Map();\n  let sum = 0;\n  hash_map.set(0, -1);\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i][0] == 0 ? -1 : 1;\n    if (hash_map.has(sum)) {\n      if (max_length < i - hash_map.get(sum)) {\n        max_length = i - hash_map.get(sum);\n      }\n    } else {\n      hash_map.set(sum, i);\n    }\n  }\n  return max_length;\n}\n\nconsole.log(Find_Max_Length([[0, 1], [0, 1], [1, 0], [1, 1], [1, 1]]));\nconsole.log(Find_Max_Length([[0, 1], [1, 0], [0, 0], [1, 1], [1, 1]]));\nconsole.log(Find_Max_Length([[0, 1], [1, 0], [1, 1], [0, 0], [1, 1], [1, 1]]));\nconsole.log(Find_Max_Length([[0, 0], [1, 1], [0, 0], [1, 1], [1, 1], [0, 0]]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124182,
      "stdout": "4\n4\n4\n6\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpel6dnl67.js:27:12)\n    at Object.<anonymous> (/tmp/tmpel6dnl67.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length: number = 0;\n    let temp_length: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n        temp_length = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                temp_length++;\n            }\n            else {\n                temp_length = 0;\n            }\n            if (temp_length > max_length) {\n                max_length = temp_length;\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp7u4lqgya.js:24:12)\n    at Object.<anonymous> (/tmp/tmp7u4lqgya.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (max_len < i - map.get(sum)) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmph1brvfvr.js:23:12)\n    at Object.<anonymous> (/tmp/tmph1brvfvr.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            } else if (map.has(sum)) {\n                max_length = Math.max(max_length, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp9ztea1no.js:31:12)\n    at Object.<anonymous> (/tmp/tmp9ztea1no.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            max_length = Math.max(max_length, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpdjtmob7x.js:21:12)\n    at Object.<anonymous> (/tmp/tmpdjtmob7x.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let curr_length = 0;\n    let i = 0;\n    let j = 0;\n    while (i < lst.length) {\n        if (lst[i][j] == 1) {\n            curr_length++;\n            j++;\n        } else {\n            if (curr_length > max_length) {\n                max_length = curr_length;\n            }\n            curr_length = 0;\n            j = 0;\n            i++;\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpy973htik.js:26:12)\n    at Object.<anonymous> (/tmp/tmpy973htik.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum -= 1;\n            }\n            else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            }\n            else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp71tsoqd8.js:31:12)\n    at Object.<anonymous> (/tmp/tmp71tsoqd8.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517105,
      "stdout": "../../../../tmp/tmp2oyh0uho.ts(8,9): error TS2365: Operator '+=' cannot be applied to types 'number' and 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map<number, number>();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpvs6grmw7.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvs6grmw7.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_len = Math.max(max_len, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpmo1qq36c.js:31:12)\n    at Object.<anonymous> (/tmp/tmpmo1qq36c.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let length = lst[i].length;\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max = 0;\n    let count = 0;\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                count++;\n            } else {\n                count = 0;\n            }\n            if (count > max) {\n                max = count;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpt2e3ehft.js:23:12)\n    at Object.<anonymous> (/tmp/tmpt2e3ehft.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_len < i - hash_map.get(sum)) {\n                max_len = i - hash_map.get(sum);\n            }\n        }\n        else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp8piwfzf2.js:23:12)\n    at Object.<anonymous> (/tmp/tmp8piwfzf2.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let len = 0;\n    let i = 0;\n    let j = 0;\n    let n = lst.length;\n    let m = lst[0].length;\n    while (i < n) {\n        while (j < m) {\n            if (lst[i][j] == 1) {\n                len++;\n            } else {\n                len = 0;\n            }\n            if (len > max_len) {\n                max_len = len;\n            }\n            j++;\n        }\n        i++;\n        j = 0;\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmphrrjl0ri.js:30:12)\n    at Object.<anonymous> (/tmp/tmphrrjl0ri.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            sum += lst[i][j];\n            if (sum === 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp7b2ge8qq.js:18:12)\n    at Object.<anonymous> (/tmp/tmp7b2ge8qq.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n  let max_length = 0;\n  let hash_map = new Map();\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] == 0) {\n        sum += -1;\n      } else {\n        sum += 1;\n      }\n      if (sum == 0) {\n        max_length = Math.max(max_length, j + 1);\n      }\n      if (hash_map.has(sum)) {\n        max_length = Math.max(max_length, j - hash_map.get(sum));\n      } else {\n        hash_map.set(sum, j);\n      }\n    }\n  }\n  return max_length;\n}\n\nconsole.log(Find_Max_Length([[0, 0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1]]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124183,
      "stdout": "6\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpp3cgf3d9.js:32:12)\n    at Object.<anonymous> (/tmp/tmpp3cgf3d9.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\nconsole.log(Find_Max_Length([[0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0], [0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124183,
      "stdout": "../../../../tmp/tmpu1mkr3ns.ts(8,9): error TS2365: Operator '+=' cannot be applied to types 'number' and 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let lst_length = lst.length;\n    let lst_length_2 = lst[0].length;\n    let lst_length_3 = lst[0][0].length;\n    for (let i = 0; i < lst_length; i++) {\n        for (let j = 0; j < lst_length_2; j++) {\n            for (let k = 0; k < lst_length_3; k++) {\n                if (lst[i][j][k] == 1) {\n                    let length = Find_Max_Length_Helper(lst, i, j, k, 0);\n                    max_length = Math.max(length, max_length);\n                }\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124183,
      "stdout": "../../../../tmp/tmp3pak8cps.ts(6,34): error TS2339: Property 'length' does not exist on type 'number'.\n../../../../tmp/tmp3pak8cps.ts(11,34): error TS2304: Cannot find name 'Find_Max_Length_Helper'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_len < i - hash_map.get(sum)) {\n                max_len = i - hash_map.get(sum);\n            }\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124162,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpjv8nsjdw.js:23:12)\n    at Object.<anonymous> (/tmp/tmpjv8nsjdw.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (hash_map.has(sum)) {\n            max_length = Math.max(max_length, i - hash_map.get(sum));\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\nconsole.log(Find_Max_Length([[0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 1]]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124183,
      "stdout": "../../../../tmp/tmp2nl6b_16.ts(8,9): error TS2365: Operator '+=' cannot be applied to types 'number' and 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let hash = new Map();\n    let sum = 0;\n    hash.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += (lst[i] == 0) ? -1 : 1;\n        if (hash.has(sum)) {\n            max_len = Math.max(max_len, i - hash.get(sum));\n        }\n        else {\n            hash.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124183,
      "stdout": "../../../../tmp/tmp0en_rfkp.ts(8,17): error TS2367: This condition will always return 'false' since the types 'number[]' and '0' have no overlap.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0];\n        if (hash_map.has(sum)) {\n            max_length = Math.max(max_length, i - hash_map.get(sum));\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpsiv5jote.js:21:12)\n    at Object.<anonymous> (/tmp/tmpsiv5jote.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length: number = 0;\n    let temp_length: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i].length > max_length) {\n            max_length = lst[i].length;\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let map = new Map<number, number>();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_length = Math.max(max_length, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\nconsole.log(Find_Max_Length([[0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0], [0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124183,
      "stdout": "../../../../tmp/tmpemvlvlrz.ts(8,9): error TS2365: Operator '+=' cannot be applied to types 'number' and 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_length = Math.max(max_length, j - hash_map.get(sum));\n            } else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpw4zdo9fs.js:31:12)\n    at Object.<anonymous> (/tmp/tmpw4zdo9fs.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "../../../../tmp/tmp_8xaglmc.ts(8,9): error TS2365: Operator '+=' cannot be applied to types 'number' and 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let n = lst.length;\n    let m = lst[0].length;\n    let dp: number[][] = [];\n    for (let i = 0; i < n; i++) {\n        dp.push([]);\n        for (let j = 0; j < m; j++) {\n            dp[i].push(0);\n        }\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (i == 0 || j == 0) {\n                dp[i][j] = lst[i][j];\n            } else if (lst[i][j] == 1) {\n                dp[i][j] = Math.min(dp[i - 1][j - 1], Math.min(dp[i - 1][j], dp[i][j - 1])) + 1;\n            }\n            max_len = Math.max(max_len, dp[i][j]);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpznvr_zp6.js:29:12)\n    at Object.<anonymous> (/tmp/tmpznvr_zp6.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len: number = 0;\n    let len: number = 0;\n    let i: number = 0;\n    let j: number = 0;\n    for (i = 0; i < lst.length; i++) {\n        for (j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 1) {\n                len++;\n            } else {\n                max_len = Math.max(max_len, len);\n                len = 0;\n            }\n        }\n        max_len = Math.max(max_len, len);\n        len = 0;\n    }\n    return max_len;\n}\n\nlet lst: number[][] = [[0, 1, 1, 0, 1, 1, 1, 0],\n[1, 1, 1, 1, 1, 1, 1, 1],\n[1, 1, 1, 1, 1, 1, 1, 1],\n[0, 0, 0, 0, 0, 0, 0, 0]];\n\nconsole.log(Find_Max_Length(lst));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124186,
      "stdout": "8\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpnte9v3bk.js:30:12)\n    at Object.<anonymous> (/tmp/tmpnte9v3bk.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_length = Math.max(max_length, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124186,
      "stdout": "../../../../tmp/tmpyhdfyz09.ts(8,9): error TS2365: Operator '+=' cannot be applied to types 'number' and 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (map.has(sum)) {\n            max_length = Math.max(max_length, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpsyrif4w1.js:21:12)\n    at Object.<anonymous> (/tmp/tmpsyrif4w1.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let temp_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 1) {\n                temp_length += 1;\n            }\n            else {\n                if (temp_length > max_length) {\n                    max_length = temp_length;\n                }\n                temp_length = 0;\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpbu1_70to.js:23:12)\n    at Object.<anonymous> (/tmp/tmpbu1_70to.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = {};\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            } else if (hash_map[sum] != undefined) {\n                max_length = Math.max(max_length, j - hash_map[sum]);\n            } else {\n                hash_map[sum] = j;\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpqlb921cs.js:31:12)\n    at Object.<anonymous> (/tmp/tmpqlb921cs.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0];\n        if (map.has(sum)) {\n            max_length = Math.max(max_length, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpm2dlz41k.js:21:12)\n    at Object.<anonymous> (/tmp/tmpm2dlz41k.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517105,
      "stdout": "../../../../tmp/tmp2oyh0uho.ts(8,9): error TS2365: Operator '+=' cannot be applied to types 'number' and 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            }\n            else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_len = Math.max(max_len, j - hash_map.get(sum));\n            }\n            else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpndpfsz9b.js:31:12)\n    at Object.<anonymous> (/tmp/tmpndpfsz9b.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let i = 0;\n    let j = 0;\n    let count = 0;\n    while (i < lst.length) {\n        while (j < lst[i].length) {\n            if (lst[i][j] === 1) {\n                count++;\n            }\n            else {\n                count = 0;\n            }\n            if (count > max_length) {\n                max_length = count;\n            }\n            j++;\n        }\n        i++;\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpxt6pzbwt.js:27:12)\n    at Object.<anonymous> (/tmp/tmpxt6pzbwt.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let temp_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        temp_length = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                temp_length += 1;\n            } else {\n                temp_length = 0;\n            }\n            if (temp_length > max_length) {\n                max_length = temp_length;\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpffal2j3t.js:24:12)\n    at Object.<anonymous> (/tmp/tmpffal2j3t.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (max_len < i - map.get(sum)) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124178,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpzuuwpe11.js:23:12)\n    at Object.<anonymous> (/tmp/tmpzuuwpe11.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpi5baz3_a.js:31:12)\n    at Object.<anonymous> (/tmp/tmpi5baz3_a.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            }\n            else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n            if (hash_map.has(sum)) {\n                max_length = Math.max(max_length, j - hash_map.get(sum));\n            }\n            else {\n                hash_map.set(sum, j);\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124162,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmphb6b8zop.js:31:12)\n    at Object.<anonymous> (/tmp/tmphb6b8zop.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len: number = 0;\n    let map: any = {};\n    let sum: number = 0;\n    for (let i: number = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j: number = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map[sum] != undefined) {\n                max_len = Math.max(max_len, j - map[sum]);\n            } else {\n                map[sum] = j;\n            }\n        }\n    }\n    return max_len;\n}\n\nlet lst: number[][] = [[0, 1, 0, 0, 1, 1], [1, 1, 1, 1, 1], [0, 0, 0, 1, 1, 1]];\nconsole.log(Find_Max_Length(lst));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124187,
      "stdout": "6\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpu4wjd9yn.js:33:12)\n    at Object.<anonymous> (/tmp/tmpu4wjd9yn.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_length = Math.max(max_length, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124187,
      "stdout": "../../../../tmp/tmp5pe8pkia.ts(8,9): error TS2365: Operator '+=' cannot be applied to types 'number' and 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let hash_map = new Map();\n    let sum = 0;\n    hash_map.set(0, -1);\n\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] === 0 ? -1 : 1;\n        if (hash_map.has(sum)) {\n            if (max_length < i - hash_map.get(sum)) {\n                max_length = i - hash_map.get(sum);\n            }\n        } else {\n            hash_map.set(sum, i);\n        }\n    }\n    return max_length;\n}\n\nlet lst = [[0, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0]];\nconsole.log(Find_Max_Length(lst));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124187,
      "stdout": "4\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpoz0fvbd5.js:25:12)\n    at Object.<anonymous> (/tmp/tmpoz0fvbd5.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max = Math.max(max, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max;\n}\n\nconsole.log(Find_Max_Length([0, 1, 0, 0, 1, 1, 0]));\nconsole.log(Find_Max_Length([0, 0, 1, 0, 0, 0, 1, 1]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124187,
      "stdout": "../../../../tmp/tmph0vq_ce9.ts(8,9): error TS2365: Operator '+=' cannot be applied to types 'number' and 'number[]'.\n../../../../tmp/tmph0vq_ce9.ts(18,30): error TS2322: Type 'number' is not assignable to type 'number[]'.\n../../../../tmp/tmph0vq_ce9.ts(18,33): error TS2322: Type 'number' is not assignable to type 'number[]'.\n../../../../tmp/tmph0vq_ce9.ts(18,36): error TS2322: Type 'number' is not assignable to type 'number[]'.\n../../../../tmp/tmph0vq_ce9.ts(18,39): error TS2322: Type 'number' is not assignable to type 'number[]'.\n../../../../tmp/tmph0vq_ce9.ts(18,42): error TS2322: Type 'number' is not assignable to type 'number[]'.\n../../../../tmp/tmph0vq_ce9.ts(18,45): error TS2322: Type 'number' is not assignable to type 'number[]'.\n../../../../tmp/tmph0vq_ce9.ts(18,48): error TS2322: Type 'number' is not assignable to type 'number[]'.\n../../../../tmp/tmph0vq_ce9.ts(19,30): error TS2322: Type 'number' is not assignable to type 'number[]'.\n../../../../tmp/tmph0vq_ce9.ts(19,33): error TS2322: Type 'number' ",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let i = 0;\n    let j = 0;\n    while (i < lst.length) {\n        j = 0;\n        while (j < lst[i].length) {\n            if (lst[i][j] == 1) {\n                let count = 1;\n                let k = j + 1;\n                while (k < lst[i].length && lst[i][k] == 1) {\n                    count++;\n                    k++;\n                }\n                if (count > max_length) {\n                    max_length = count;\n                }\n            }\n            j++;\n        }\n        i++;\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpecjhrej9.js:29:12)\n    at Object.<anonymous> (/tmp/tmpecjhrej9.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    map.set(0, -1);\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n        if (map.has(sum)) {\n            max_len = Math.max(max_len, i - map.get(sum));\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124161,
      "stdout": "../../../../tmp/tmp_8xaglmc.ts(8,9): error TS2365: Operator '+=' cannot be applied to types 'number' and 'number[]'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len: number = 0;\n    let map: Map<number, number> = new Map();\n    let sum: number = 0;\n    map.set(0, -1);\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i][0] == 0 ? -1 : 1;\n        if (map.has(sum)) {\n            if (max_len < i - map.get(sum)) {\n                max_len = i - map.get(sum);\n            }\n        } else {\n            map.set(sum, i);\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpwpd7fril.js:23:12)\n    at Object.<anonymous> (/tmp/tmpwpd7fril.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            sum += lst[i][j];\n            if (lst[i][j] == 0) {\n                sum -= 1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpnbeersdo.js:32:12)\n    at Object.<anonymous> (/tmp/tmpnbeersdo.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_len = 0;\n    let map = new Map();\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                sum += -1;\n            } else {\n                sum += 1;\n            }\n            if (sum == 0) {\n                max_len = Math.max(max_len, j + 1);\n            }\n            if (map.has(sum)) {\n                max_len = Math.max(max_len, j - map.get(sum));\n            } else {\n                map.set(sum, j);\n            }\n        }\n    }\n    return max_len;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1665517106,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpi5baz3_a.js:31:12)\n    at Object.<anonymous> (/tmp/tmpi5baz3_a.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                length++;\n            } else {\n                length = 0;\n            }\n            if (length > max_length) {\n                max_length = length;\n            }\n        }\n    }\n    return max_length;\n}\n\nlet lst = [[0, 1, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]];\nconsole.log(Find_Max_Length(lst));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124187,
      "stdout": "1\n",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpk482h53m.js:25:12)\n    at Object.<anonymous> (/tmp/tmpk482h53m.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    let current_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        current_length = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] == 0) {\n                current_length++;\n            }\n            else {\n                if (current_length > max_length) {\n                    max_length = current_length;\n                }\n                current_length = 0;\n            }\n        }\n        if (current_length > max_length) {\n            max_length = current_length;\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp3_fm3nlu.js:27:12)\n    at Object.<anonymous> (/tmp/tmp3_fm3nlu.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a tsthon function to find the length of the longest subarrays.\nfunction Find_Max_Length(lst: number[][]): number {\n    let max_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            sum += lst[i][j];\n            if (sum == 0) {\n                max_length = Math.max(max_length, j + 1);\n            }\n        }\n    }\n    return max_length;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = Find_Max_Length;\n  assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);\n  assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);\n  assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);\n}\n\ntest();",
      "timestamp": 1666124187,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpyp_s6rzj.js:18:12)\n    at Object.<anonymous> (/tmp/tmpyp_s6rzj.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    }
  ]
}