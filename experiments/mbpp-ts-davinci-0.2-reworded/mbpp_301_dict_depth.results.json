{
  "name": "mbpp_301_dict_depth",
  "language": "ts",
  "prompt": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_301_dict_depth.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "results": [
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_sub = dict_depth(d[key]);\n            if (depth_of_sub > depth) {\n                depth = depth_of_sub;\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max = 0;\n    for (let k in d) {\n        let v = d[k];\n        let depth = dict_depth(v);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp3q4oyhk_.js:23:12)\n    at Object.<anonymous> (/tmp/tmp3q4oyhk_.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_subdict = dict_depth(d[key]);\n            if (depth_of_subdict > depth) {\n                depth = depth_of_subdict;\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (d.hasOwnProperty(key)) {\n            if (typeof d[key] === \"object\") {\n                let depth = dict_depth(d[key]) + 1;\n                if (depth > max) {\n                    max = depth;\n                }\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpx_09ha4v.js:19:12)\n    at Object.<anonymous> (/tmp/tmpx_09ha4v.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max = 0;\n    for (const key in d) {\n        if (d.hasOwnProperty(key)) {\n            const depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp28hqyua6.js:24:12)\n    at Object.<anonymous> (/tmp/tmp28hqyua6.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_key = dict_depth(d[key]);\n            if (depth_of_key > depth) {\n                depth = depth_of_key;\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpa5kcx56n.js:22:12)\n    at Object.<anonymous> (/tmp/tmpa5kcx56n.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        max_depth = Math.max(max_depth, dict_depth(d[key]));\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "/tmp/tmp51sfc19q.js:3\n    if (d === null) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmp51sfc19q.js:3:5)\n    at dict_depth (/tmp/tmp51sfc19q.js:8:41)\n    at dict_depth (/tmp/tmp51sfc19q.js:8:41)\n    at dict_depth (/tmp/tmp51sfc19q.js:8:41)\n    at dict_depth (/tmp/tmp51sfc19q.js:8:41)\n    at dict_depth (/tmp/tmp51sfc19q.js:8:41)\n    at dict_depth (/tmp/tmp51sfc19q.js:8:41)\n    at dict_depth (/tmp/tmp51sfc19q.js:8:41)\n    at dict_depth (/tmp/tmp51sfc19q.js:8:41)\n    at dict_depth (/tmp/tmp51sfc19q.js:8:41)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "/tmp/tmppp1hey12.js:3\n    if (d === null) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmppp1hey12.js:3:5)\n    at dict_depth (/tmp/tmppp1hey12.js:8:21)\n    at dict_depth (/tmp/tmppp1hey12.js:8:21)\n    at dict_depth (/tmp/tmppp1hey12.js:8:21)\n    at dict_depth (/tmp/tmppp1hey12.js:8:21)\n    at dict_depth (/tmp/tmppp1hey12.js:8:21)\n    at dict_depth (/tmp/tmppp1hey12.js:8:21)\n    at dict_depth (/tmp/tmppp1hey12.js:8:21)\n    at dict_depth (/tmp/tmppp1hey12.js:8:21)\n    at dict_depth (/tmp/tmppp1hey12.js:8:21)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== \"object\") {\n        return 1;\n    }\n    let max = 0;\n    for (let key in d) {\n        max = Math.max(max, dict_depth(d[key]));\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp9b1m4ry8.js:19:12)\n    at Object.<anonymous> (/tmp/tmp9b1m4ry8.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == 'object') {\n            let depth_of_sub = dict_depth(d[key]);\n            if (depth_of_sub > depth) {\n                depth = depth_of_sub;\n            }\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 1;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth_of_sub = dict_depth(d[key]) + 1;\n            if (depth_of_sub > depth) {\n                depth = depth_of_sub;\n            }\n        }\n    }\n    return depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        let value = d[key];\n        if (typeof value === 'object') {\n            let depth = dict_depth(value);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] == 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpv8mmihfy.js:17:12)\n    at Object.<anonymous> (/tmp/tmpv8mmihfy.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let k in d) {\n        max = Math.max(max, dict_depth(d[k]));\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "/tmp/tmpolotcl71.js:3\n    if (d === null) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmpolotcl71.js:3:5)\n    at dict_depth (/tmp/tmpolotcl71.js:8:29)\n    at dict_depth (/tmp/tmpolotcl71.js:8:29)\n    at dict_depth (/tmp/tmpolotcl71.js:8:29)\n    at dict_depth (/tmp/tmpolotcl71.js:8:29)\n    at dict_depth (/tmp/tmpolotcl71.js:8:29)\n    at dict_depth (/tmp/tmpolotcl71.js:8:29)\n    at dict_depth (/tmp/tmpolotcl71.js:8:29)\n    at dict_depth (/tmp/tmpolotcl71.js:8:29)\n    at dict_depth (/tmp/tmpolotcl71.js:8:29)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "/tmp/tmppp1hey12.js:3\n    if (d === null) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmppp1hey12.js:3:5)\n    at dict_depth (/tmp/tmppp1hey12.js:8:21)\n    at dict_depth (/tmp/tmppp1hey12.js:8:21)\n    at dict_depth (/tmp/tmppp1hey12.js:8:21)\n    at dict_depth (/tmp/tmppp1hey12.js:8:21)\n    at dict_depth (/tmp/tmppp1hey12.js:8:21)\n    at dict_depth (/tmp/tmppp1hey12.js:8:21)\n    at dict_depth (/tmp/tmppp1hey12.js:8:21)\n    at dict_depth (/tmp/tmppp1hey12.js:8:21)\n    at dict_depth (/tmp/tmppp1hey12.js:8:21)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_key = dict_depth(d[key]);\n            if (depth_of_key > depth) {\n                depth = depth_of_key;\n            }\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (const key in d) {\n        if (d.hasOwnProperty(key)) {\n            const element = d[key];\n            if (typeof element === 'object') {\n                const sub_depth = dict_depth(element);\n                if (sub_depth > depth) {\n                    depth = sub_depth;\n                }\n            }\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== \"object\") {\n        return 1;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        max_depth = Math.max(max_depth, dict_depth(d[key]));\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmppqocmixl.js:19:12)\n    at Object.<anonymous> (/tmp/tmppqocmixl.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp7_qcihej.js:17:12)\n    at Object.<anonymous> (/tmp/tmp7_qcihej.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === \"object\") {\n            max = Math.max(max, dict_depth(d[key]));\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max = 0;\n    for (let k in d) {\n        max = Math.max(max, dict_depth(d[k]));\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_subdict = dict_depth(d[key]);\n            if (depth_of_subdict > depth) {\n                depth = depth_of_subdict;\n            }\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max = 0;\n    for (const key of Object.keys(d)) {\n        const depth = dict_depth(d[key]);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (const key in d) {\n        if (typeof d[key] === 'object') {\n            const depth_of_key = dict_depth(d[key]);\n            if (depth_of_key > depth) {\n                depth = depth_of_key;\n            }\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        if (d.hasOwnProperty(key)) {\n            let depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "/tmp/tmptyxml9st.js:3\n    if (d === null) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmptyxml9st.js:3:5)\n    at dict_depth (/tmp/tmptyxml9st.js:9:25)\n    at dict_depth (/tmp/tmptyxml9st.js:9:25)\n    at dict_depth (/tmp/tmptyxml9st.js:9:25)\n    at dict_depth (/tmp/tmptyxml9st.js:9:25)\n    at dict_depth (/tmp/tmptyxml9st.js:9:25)\n    at dict_depth (/tmp/tmptyxml9st.js:9:25)\n    at dict_depth (/tmp/tmptyxml9st.js:9:25)\n    at dict_depth (/tmp/tmptyxml9st.js:9:25)\n    at dict_depth (/tmp/tmptyxml9st.js:9:25)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== \"object\") {\n        return 1;\n    }\n    let max = 0;\n    for (let k in d) {\n        max = Math.max(max, dict_depth(d[k]));\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp3z5qrnwp.js:19:12)\n    at Object.<anonymous> (/tmp/tmp3z5qrnwp.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        max = Math.max(max, dict_depth(d[key]));\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "/tmp/tmpnot798ke.js:3\n    if (d === null) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmpnot798ke.js:3:5)\n    at dict_depth (/tmp/tmpnot798ke.js:8:29)\n    at dict_depth (/tmp/tmpnot798ke.js:8:29)\n    at dict_depth (/tmp/tmpnot798ke.js:8:29)\n    at dict_depth (/tmp/tmpnot798ke.js:8:29)\n    at dict_depth (/tmp/tmpnot798ke.js:8:29)\n    at dict_depth (/tmp/tmpnot798ke.js:8:29)\n    at dict_depth (/tmp/tmpnot798ke.js:8:29)\n    at dict_depth (/tmp/tmpnot798ke.js:8:29)\n    at dict_depth (/tmp/tmpnot798ke.js:8:29)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_sub = dict_depth(d[key]);\n            if (depth_of_sub > depth) {\n                depth = depth_of_sub;\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpdml2rc94.js:20:12)\n    at Object.<anonymous> (/tmp/tmpdml2rc94.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let depth = 0;\n    for (let key in d) {\n        depth = Math.max(depth, dict_depth(d[key]));\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp07zizb_o.js:19:12)\n    at Object.<anonymous> (/tmp/tmp07zizb_o.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_key = dict_depth(d[key]);\n            if (depth_of_key > depth) {\n                depth = depth_of_key;\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            depth = Math.max(depth, dict_depth(d[key]));\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp5m551zql.js:17:12)\n    at Object.<anonymous> (/tmp/tmp5m551zql.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (const key in d) {\n        if (d.hasOwnProperty(key)) {\n            const element = d[key];\n            if (typeof element === 'object') {\n                depth = Math.max(depth, dict_depth(element));\n            }\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpnl38njid.js:17:12)\n    at Object.<anonymous> (/tmp/tmpnl38njid.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth_of_key = dict_depth(d[key]) + 1;\n            if (depth_of_key > depth) {\n                depth = depth_of_key;\n            }\n        }\n    }\n    return depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmptj23_e09.js:17:12)\n    at Object.<anonymous> (/tmp/tmptj23_e09.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    let current_depth = 0;\n    let keys = Object.keys(d);\n    for (let key of keys) {\n        if (typeof d[key] === \"object\") {\n            current_depth = dict_depth(d[key]);\n            if (current_depth > max_depth) {\n                max_depth = current_depth;\n            }\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpkxjzdvq3.js:17:12)\n    at Object.<anonymous> (/tmp/tmpkxjzdvq3.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let k in d) {\n        if (typeof d[k] == \"object\") {\n            let depth = dict_depth(d[k]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpcy08w00q.js:17:12)\n    at Object.<anonymous> (/tmp/tmpcy08w00q.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_subdict = dict_depth(d[key])\n            if (depth_of_subdict > depth) {\n                depth = depth_of_subdict\n            }\n        }\n    }\n    return 1 + depth\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp7_qcihej.js:17:12)\n    at Object.<anonymous> (/tmp/tmp7_qcihej.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] == 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpv8mmihfy.js:17:12)\n    at Object.<anonymous> (/tmp/tmpv8mmihfy.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let depth = 0;\n    for (let key in d) {\n        if (d.hasOwnProperty(key)) {\n            depth = Math.max(depth, dict_depth(d[key]));\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_sub = dict_depth(d[key]);\n            if (depth_of_sub > depth) {\n                depth = depth_of_sub;\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_key = dict_depth(d[key]);\n            if (depth_of_key > depth) {\n                depth = depth_of_key;\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_subdict = dict_depth(d[key]);\n            if (depth_of_subdict > depth) {\n                depth = depth_of_subdict;\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (typeof d !== 'object') {\n        return 0;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp7_qcihej.js:17:12)\n    at Object.<anonymous> (/tmp/tmp7_qcihej.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpkxjzdvq3.js:17:12)\n    at Object.<anonymous> (/tmp/tmpkxjzdvq3.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        if (d.hasOwnProperty(key)) {\n            max = Math.max(max, dict_depth(d[key]));\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "/tmp/tmpxbg3m3et.js:3\n    if (d === null) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmpxbg3m3et.js:3:5)\n    at dict_depth (/tmp/tmpxbg3m3et.js:9:33)\n    at dict_depth (/tmp/tmpxbg3m3et.js:9:33)\n    at dict_depth (/tmp/tmpxbg3m3et.js:9:33)\n    at dict_depth (/tmp/tmpxbg3m3et.js:9:33)\n    at dict_depth (/tmp/tmpxbg3m3et.js:9:33)\n    at dict_depth (/tmp/tmpxbg3m3et.js:9:33)\n    at dict_depth (/tmp/tmpxbg3m3et.js:9:33)\n    at dict_depth (/tmp/tmpxbg3m3et.js:9:33)\n    at dict_depth (/tmp/tmpxbg3m3et.js:9:33)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            max = Math.max(max, dict_depth(d[key]));\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d === 'object') {\n        let max = 0;\n        for (let key in d) {\n            let depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n        return max + 1;\n    }\n    return 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpb5xrn7y6.js:22:12)\n    at Object.<anonymous> (/tmp/tmpb5xrn7y6.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max = 0;\n    for (let k in d) {\n        max = Math.max(max, dict_depth(d[k]));\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpfagwt3zk.js:19:12)\n    at Object.<anonymous> (/tmp/tmpfagwt3zk.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === \"object\") {\n            depth = Math.max(depth, dict_depth(d[key]));\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let k in d) {\n        let v = d[k];\n        if (typeof v === 'object') {\n            max = Math.max(max, dict_depth(v));\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === \"object\") {\n            let depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let k in d) {\n        if (d.hasOwnProperty(k)) {\n            let v = d[k];\n            if (typeof v === 'object') {\n                let depth = dict_depth(v);\n                if (depth > max) {\n                    max = depth;\n                }\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        if (d.hasOwnProperty(key)) {\n            let depth = dict_depth(d[key]);\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp3uvzlrp9.js:24:12)\n    at Object.<anonymous> (/tmp/tmp3uvzlrp9.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_sub = dict_depth(d[key]);\n            if (depth_of_sub > depth) {\n                depth = depth_of_sub;\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp7_qcihej.js:17:12)\n    at Object.<anonymous> (/tmp/tmp7_qcihej.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            depth = Math.max(depth, dict_depth(d[key]));\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_subdict = dict_depth(d[key]);\n            if (depth_of_subdict > depth) {\n                depth = depth_of_subdict;\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (d.hasOwnProperty(key)) {\n            let depth = 0;\n            if (typeof d[key] == 'object') {\n                depth = dict_depth(d[key]) + 1;\n            }\n            max_depth = Math.max(max_depth, depth);\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpq31hla5s.js:18:12)\n    at Object.<anonymous> (/tmp/tmpq31hla5s.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpa5kcx56n.js:22:12)\n    at Object.<anonymous> (/tmp/tmpa5kcx56n.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (typeof d !== 'object') {\n        return 0;\n    }\n    let max = 0;\n    for (let k in d) {\n        max = Math.max(max, dict_depth(d[k]));\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== \"object\") {\n        return 1;\n    }\n    let max = 0;\n    for (let key in d) {\n        max = Math.max(max, dict_depth(d[key]));\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp9b1m4ry8.js:19:12)\n    at Object.<anonymous> (/tmp/tmp9b1m4ry8.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            max = Math.max(max, dict_depth(d[key]));\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null || d === undefined) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        max_depth = Math.max(max_depth, dict_depth(d[key]));\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmptod5gkbu.js:19:12)\n    at Object.<anonymous> (/tmp/tmptod5gkbu.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        max_depth = Math.max(max_depth, dict_depth(d[key]));\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp1qeqsjbm.js:19:12)\n    at Object.<anonymous> (/tmp/tmp1qeqsjbm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (const k in d) {\n        if (typeof d[k] === 'object') {\n            depth = Math.max(depth, dict_depth(d[k]));\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let k in d) {\n        if (typeof d[k] === 'object') {\n            let depth = dict_depth(d[k]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpm66j9nqs.js:17:12)\n    at Object.<anonymous> (/tmp/tmpm66j9nqs.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpdml2rc94.js:20:12)\n    at Object.<anonymous> (/tmp/tmpdml2rc94.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (const key in d) {\n        if (typeof d[key] === \"object\") {\n            depth = Math.max(depth, dict_depth(d[key]));\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 1;\n    for (let k in d) {\n        if (typeof d[k] === 'object') {\n            let depth = dict_depth(d[k]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        max_depth = Math.max(max_depth, dict_depth(d[key]));\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp1qeqsjbm.js:19:12)\n    at Object.<anonymous> (/tmp/tmp1qeqsjbm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_key = dict_depth(d[key]);\n            if (depth_of_key > depth) {\n                depth = depth_of_key;\n            }\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_sub_dict = dict_depth(d[key]);\n            if (depth_of_sub_dict > depth) {\n                depth = depth_of_sub_dict;\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max = 1;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpnl38njid.js:17:12)\n    at Object.<anonymous> (/tmp/tmpnl38njid.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        if (d.hasOwnProperty(key)) {\n            let depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max = 0;\n    for (let k in d) {\n        let v = d[k];\n        if (typeof v === 'object') {\n            max = Math.max(max, dict_depth(v));\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth_key = dict_depth(d[key]);\n            if (depth_key > depth) {\n                depth = depth_key;\n            }\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (d.hasOwnProperty(key)) {\n            if (typeof d[key] === 'object') {\n                let depth_of_key = dict_depth(d[key]);\n                if (depth_of_key > depth) {\n                    depth = depth_of_key;\n                }\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === \"object\") {\n            let depth_of_sub = dict_depth(d[key]);\n            if (depth_of_sub > depth) {\n                depth = depth_of_sub;\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_subdict = dict_depth(d[key]);\n            if (depth_of_subdict > depth) {\n                depth = depth_of_subdict;\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_sub = dict_depth(d[key]);\n            if (depth_of_sub > depth) {\n                depth = depth_of_sub;\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp5m551zql.js:17:12)\n    at Object.<anonymous> (/tmp/tmp5m551zql.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (const key in d) {\n        if (d.hasOwnProperty(key)) {\n            const depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "/tmp/tmp9fdhvss1.js:3\n    if (d === null) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmp9fdhvss1.js:3:5)\n    at dict_depth (/tmp/tmp9fdhvss1.js:9:27)\n    at dict_depth (/tmp/tmp9fdhvss1.js:9:27)\n    at dict_depth (/tmp/tmp9fdhvss1.js:9:27)\n    at dict_depth (/tmp/tmp9fdhvss1.js:9:27)\n    at dict_depth (/tmp/tmp9fdhvss1.js:9:27)\n    at dict_depth (/tmp/tmp9fdhvss1.js:9:27)\n    at dict_depth (/tmp/tmp9fdhvss1.js:9:27)\n    at dict_depth (/tmp/tmp9fdhvss1.js:9:27)\n    at dict_depth (/tmp/tmp9fdhvss1.js:9:27)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max = 0;\n    for (let k in d) {\n        max = Math.max(max, dict_depth(d[k]));\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpfagwt3zk.js:19:12)\n    at Object.<anonymous> (/tmp/tmpfagwt3zk.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_sub = dict_depth(d[key]);\n            if (depth_of_sub > depth) {\n                depth = depth_of_sub;\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_subdict = dict_depth(d[key]);\n            if (depth_of_subdict > depth) {\n                depth = depth_of_subdict;\n            }\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpkxjzdvq3.js:17:12)\n    at Object.<anonymous> (/tmp/tmpkxjzdvq3.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpn2t4d36p.js:17:12)\n    at Object.<anonymous> (/tmp/tmpn2t4d36p.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            depth = dict_depth(d[key]);\n        }\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (typeof d !== 'object') {\n        return 0;\n    }\n    let max = 0;\n    for (let k in d) {\n        max = Math.max(max, dict_depth(d[k]));\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpa5kcx56n.js:22:12)\n    at Object.<anonymous> (/tmp/tmpa5kcx56n.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max = 0;\n    for (const k in d) {\n        if (d.hasOwnProperty(k)) {\n            const v = d[k];\n            const depth = dict_depth(v);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmppiwsqqc_.js:25:12)\n    at Object.<anonymous> (/tmp/tmppiwsqqc_.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            depth = dict_depth(d[key]);\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max = 1;\n    for (const key in d) {\n        if (d.hasOwnProperty(key)) {\n            const depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp837vpbq8.js:20:12)\n    at Object.<anonymous> (/tmp/tmp837vpbq8.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        max_depth = Math.max(max_depth, dict_depth(d[key]));\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp7_qcihej.js:17:12)\n    at Object.<anonymous> (/tmp/tmp7_qcihej.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (const key in d) {\n        if (typeof d[key] === 'object') {\n            depth = Math.max(depth, dict_depth(d[key]));\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max = 0;\n    for (let k in d) {\n        if (d.hasOwnProperty(k)) {\n            let v = d[k];\n            if (typeof v === 'object') {\n                let depth = dict_depth(v);\n                if (depth > max) {\n                    max = depth;\n                }\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        if (d.hasOwnProperty(key)) {\n            max_depth = Math.max(max_depth, dict_depth(d[key]));\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp5m551zql.js:17:12)\n    at Object.<anonymous> (/tmp/tmp5m551zql.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            max_depth = Math.max(max_depth, depth);\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpfscqbwxf.js:15:12)\n    at Object.<anonymous> (/tmp/tmpfscqbwxf.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]);\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            max = Math.max(max, dict_depth(d[key]));\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_key = dict_depth(d[key]) + 1;\n            if (depth_of_key > depth) {\n                depth = depth_of_key;\n            }\n        }\n    }\n    return depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpeajhbedg.js:17:12)\n    at Object.<anonymous> (/tmp/tmpeajhbedg.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_sub_dict = dict_depth(d[key]);\n            if (depth_of_sub_dict > depth) {\n                depth = depth_of_sub_dict;\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        max = Math.max(max, dict_depth(d[key]));\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max_depth = 1;\n    for (const key in d) {\n        if (d.hasOwnProperty(key)) {\n            const depth = dict_depth(d[key]);\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp32ss6a7o.js:23:12)\n    at Object.<anonymous> (/tmp/tmp32ss6a7o.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (const key in d) {\n        if (typeof d[key] === \"object\") {\n            depth = Math.max(depth, dict_depth(d[key]));\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_ = dict_depth(d[key]);\n            if (depth_ > depth) {\n                depth = depth_;\n            }\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth2 = dict_depth(d[key]) + 1;\n            if (depth2 > depth) {\n                depth = depth2;\n            }\n        }\n    }\n    return depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp7yuuazty.js:17:12)\n    at Object.<anonymous> (/tmp/tmp7yuuazty.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpa5kcx56n.js:22:12)\n    at Object.<anonymous> (/tmp/tmpa5kcx56n.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (const key in d) {\n        if (typeof d[key] === 'object') {\n            const depth_ = dict_depth(d[key]);\n            if (depth_ > depth) {\n                depth = depth_;\n            }\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let temp_depth = dict_depth(d[key]) + 1;\n            if (temp_depth > depth) {\n                depth = temp_depth;\n            }\n        }\n    }\n    return depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp8d_okyyy.js:17:12)\n    at Object.<anonymous> (/tmp/tmp8d_okyyy.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]);\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]);\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_key = dict_depth(d[key]);\n            if (depth_of_key > depth) {\n                depth = depth_of_key;\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== \"object\") {\n        return 1;\n    }\n    let max = 0;\n    for (let key in d) {\n        max = Math.max(max, dict_depth(d[key]));\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp9b1m4ry8.js:19:12)\n    at Object.<anonymous> (/tmp/tmp9b1m4ry8.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) return 0;\n    if (typeof d !== 'object') return 1;\n    let max_depth = 0;\n    for (let k in d) {\n        let depth = dict_depth(d[k]);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpk2h02xm_.js:20:12)\n    at Object.<anonymous> (/tmp/tmpk2h02xm_.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    return 1 + Math.max(...Object.values(d).map(dict_depth));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpzem4nznd.js:14:12)\n    at Object.<anonymous> (/tmp/tmpzem4nznd.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        if (d.hasOwnProperty(key)) {\n            let depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "/tmp/tmptyxml9st.js:3\n    if (d === null) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmptyxml9st.js:3:5)\n    at dict_depth (/tmp/tmptyxml9st.js:9:25)\n    at dict_depth (/tmp/tmptyxml9st.js:9:25)\n    at dict_depth (/tmp/tmptyxml9st.js:9:25)\n    at dict_depth (/tmp/tmptyxml9st.js:9:25)\n    at dict_depth (/tmp/tmptyxml9st.js:9:25)\n    at dict_depth (/tmp/tmptyxml9st.js:9:25)\n    at dict_depth (/tmp/tmptyxml9st.js:9:25)\n    at dict_depth (/tmp/tmptyxml9st.js:9:25)\n    at dict_depth (/tmp/tmptyxml9st.js:9:25)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === \"object\") {\n            max = Math.max(max, dict_depth(d[key]));\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpkxjzdvq3.js:17:12)\n    at Object.<anonymous> (/tmp/tmpkxjzdvq3.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let k in d) {\n        if (typeof d[k] === \"object\") {\n            let depth = dict_depth(d[k]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpxy5pvtxv.js:17:12)\n    at Object.<anonymous> (/tmp/tmpxy5pvtxv.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "/tmp/tmpqbvkthm9.js:3\n    if (d === null) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmpqbvkthm9.js:3:5)\n    at dict_depth (/tmp/tmpqbvkthm9.js:8:21)\n    at dict_depth (/tmp/tmpqbvkthm9.js:8:21)\n    at dict_depth (/tmp/tmpqbvkthm9.js:8:21)\n    at dict_depth (/tmp/tmpqbvkthm9.js:8:21)\n    at dict_depth (/tmp/tmpqbvkthm9.js:8:21)\n    at dict_depth (/tmp/tmpqbvkthm9.js:8:21)\n    at dict_depth (/tmp/tmpqbvkthm9.js:8:21)\n    at dict_depth (/tmp/tmpqbvkthm9.js:8:21)\n    at dict_depth (/tmp/tmpqbvkthm9.js:8:21)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (d.hasOwnProperty(key)) {\n            if (typeof d[key] === 'object') {\n                let depth_of_key = dict_depth(d[key]);\n                if (depth_of_key > depth) {\n                    depth = depth_of_key;\n                }\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === \"object\") {\n            let depth_of_key = dict_depth(d[key]);\n            if (depth_of_key > depth) {\n                depth = depth_of_key;\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== \"object\") {\n        return 1;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        max_depth = Math.max(max_depth, dict_depth(d[key]));\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmppqocmixl.js:19:12)\n    at Object.<anonymous> (/tmp/tmppqocmixl.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max = 0;\n    for (let k in d) {\n        if (d.hasOwnProperty(k)) {\n            max = Math.max(max, dict_depth(d[k]));\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== \"object\") {\n        return 1;\n    }\n    let depth = 0;\n    for (const key in d) {\n        if (d.hasOwnProperty(key)) {\n            const element = d[key];\n            depth = Math.max(depth, dict_depth(element));\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpoidvqdc9.js:22:12)\n    at Object.<anonymous> (/tmp/tmpoidvqdc9.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp7_qcihej.js:17:12)\n    at Object.<anonymous> (/tmp/tmp7_qcihej.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        if (d.hasOwnProperty(key)) {\n            max_depth = Math.max(max_depth, dict_depth(d[key]));\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n  let depth = 0;\n  for (let key in d) {\n    if (typeof d[key] === \"object\") {\n      let depth_of_key = dict_depth(d[key]);\n      if (depth_of_key > depth) {\n        depth = depth_of_key;\n      }\n    }\n  }\n  return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_key = dict_depth(d[key]);\n            if (depth_of_key > depth) {\n                depth = depth_of_key;\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max_depth = 0;\n    for (let k in d) {\n        max_depth = Math.max(max_depth, dict_depth(d[k]));\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "/tmp/tmpwztyk3ly.js:3\n    if (d === null) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmpwztyk3ly.js:3:5)\n    at dict_depth (/tmp/tmpwztyk3ly.js:8:41)\n    at dict_depth (/tmp/tmpwztyk3ly.js:8:41)\n    at dict_depth (/tmp/tmpwztyk3ly.js:8:41)\n    at dict_depth (/tmp/tmpwztyk3ly.js:8:41)\n    at dict_depth (/tmp/tmpwztyk3ly.js:8:41)\n    at dict_depth (/tmp/tmpwztyk3ly.js:8:41)\n    at dict_depth (/tmp/tmpwztyk3ly.js:8:41)\n    at dict_depth (/tmp/tmpwztyk3ly.js:8:41)\n    at dict_depth (/tmp/tmpwztyk3ly.js:8:41)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "/tmp/tmppp1hey12.js:3\n    if (d === null) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmppp1hey12.js:3:5)\n    at dict_depth (/tmp/tmppp1hey12.js:8:21)\n    at dict_depth (/tmp/tmppp1hey12.js:8:21)\n    at dict_depth (/tmp/tmppp1hey12.js:8:21)\n    at dict_depth (/tmp/tmppp1hey12.js:8:21)\n    at dict_depth (/tmp/tmppp1hey12.js:8:21)\n    at dict_depth (/tmp/tmppp1hey12.js:8:21)\n    at dict_depth (/tmp/tmppp1hey12.js:8:21)\n    at dict_depth (/tmp/tmppp1hey12.js:8:21)\n    at dict_depth (/tmp/tmppp1hey12.js:8:21)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp5m551zql.js:17:12)\n    at Object.<anonymous> (/tmp/tmp5m551zql.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]);\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp5m551zql.js:17:12)\n    at Object.<anonymous> (/tmp/tmp5m551zql.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== \"object\") {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        max = Math.max(max, dict_depth(d[key]));\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp7_qcihej.js:17:12)\n    at Object.<anonymous> (/tmp/tmp7_qcihej.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_subdict = dict_depth(d[key]);\n            if (depth_of_subdict > depth) {\n                depth = depth_of_subdict;\n            }\n        }\n    }\n    return depth + 1;\n}\n\nconsole.log(dict_depth(d));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122445,
      "stdout": "../../../../tmp/tmps3tazfd0.ts(15,24): error TS2304: Cannot find name 'd'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max_depth = 0;\n    for (let key in d) {\n        max_depth = Math.max(max_depth, dict_depth(d[key]));\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (d.hasOwnProperty(key)) {\n            if (typeof d[key] === \"object\") {\n                let depth_of_key = dict_depth(d[key]);\n                if (depth_of_key > depth) {\n                    depth = depth_of_key;\n                }\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_key = dict_depth(d[key]);\n            if (depth_of_key > depth) {\n                depth = depth_of_key;\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth: number = 0;\n    for (const key in d) {\n        if (typeof d[key] === 'object') {\n            const depth_of_key = dict_depth(d[key]);\n            if (depth_of_key > depth) {\n                depth = depth_of_key;\n            }\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let temp_depth = dict_depth(d[key]) + 1;\n            if (temp_depth > depth) {\n                depth = temp_depth;\n            }\n        }\n    }\n    return depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp8d_okyyy.js:17:12)\n    at Object.<anonymous> (/tmp/tmp8d_okyyy.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (const key in d) {\n        if (typeof d[key] === 'object') {\n            depth = Math.max(depth, dict_depth(d[key]));\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let k in d) {\n        let v = d[k];\n        if (typeof v === 'object') {\n            let depth = dict_depth(v);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_subdict = dict_depth(d[key]);\n            if (depth_of_subdict > depth) {\n                depth = depth_of_subdict;\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_sub_dict = dict_depth(d[key]);\n            if (depth_of_sub_dict > depth) {\n                depth = depth_of_sub_dict;\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max_depth = 0;\n    for (const key in d) {\n        if (d.hasOwnProperty(key)) {\n            const depth = dict_depth(d[key]);\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp7knv3mis.js:24:12)\n    at Object.<anonymous> (/tmp/tmp7knv3mis.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (d.hasOwnProperty(key)) {\n            if (typeof d[key] === 'object') {\n                let depth_of_key = dict_depth(d[key]);\n                if (depth_of_key > depth) {\n                    depth = depth_of_key;\n                }\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max_depth = 0;\n    for (const key of Object.keys(d)) {\n        const depth = dict_depth(d[key]);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            depth = Math.max(depth, dict_depth(d[key]));\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp5m551zql.js:17:12)\n    at Object.<anonymous> (/tmp/tmp5m551zql.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            depth = Math.max(depth, dict_depth(d[key]));\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) return 0;\n    if (typeof d !== 'object') return 1;\n    let max = 0;\n    for (let k in d) {\n        max = Math.max(max, dict_depth(d[k]));\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmph06emok3.js:17:12)\n    at Object.<anonymous> (/tmp/tmph06emok3.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === \"object\") {\n            let depth_ = dict_depth(d[key]) + 1;\n            if (depth_ > depth) {\n                depth = depth_;\n            }\n        }\n    }\n    return depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpd4kkcjkr.js:17:12)\n    at Object.<anonymous> (/tmp/tmpd4kkcjkr.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth2 = dict_depth(d[key]) + 1;\n            if (depth2 > depth) {\n                depth = depth2;\n            }\n        }\n    }\n    return depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpmte0fsxz.js:17:12)\n    at Object.<anonymous> (/tmp/tmpmte0fsxz.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max = 0;\n    for (const key in d) {\n        if (d.hasOwnProperty(key)) {\n            const depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp28hqyua6.js:24:12)\n    at Object.<anonymous> (/tmp/tmp28hqyua6.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== 'object') {\n        return 1;\n    }\n    let max_depth = 0;\n    for (let k in d) {\n        let depth = dict_depth(d[k]);\n        if (depth > max_depth) {\n            max_depth = depth;\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpdigchwbq.js:22:12)\n    at Object.<anonymous> (/tmp/tmpdigchwbq.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp7_qcihej.js:17:12)\n    at Object.<anonymous> (/tmp/tmp7_qcihej.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (const key in d) {\n        if (typeof d[key] === 'object') {\n            depth = Math.max(depth, dict_depth(d[key]));\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]);\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        max = Math.max(max, dict_depth(d[key]));\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "/tmp/tmpnot798ke.js:3\n    if (d === null) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmpnot798ke.js:3:5)\n    at dict_depth (/tmp/tmpnot798ke.js:8:29)\n    at dict_depth (/tmp/tmpnot798ke.js:8:29)\n    at dict_depth (/tmp/tmpnot798ke.js:8:29)\n    at dict_depth (/tmp/tmpnot798ke.js:8:29)\n    at dict_depth (/tmp/tmpnot798ke.js:8:29)\n    at dict_depth (/tmp/tmpnot798ke.js:8:29)\n    at dict_depth (/tmp/tmpnot798ke.js:8:29)\n    at dict_depth (/tmp/tmpnot798ke.js:8:29)\n    at dict_depth (/tmp/tmpnot798ke.js:8:29)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]);\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp7_qcihej.js:17:12)\n    at Object.<anonymous> (/tmp/tmp7_qcihej.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n\n    let max = 0;\n    for (let key in d) {\n        let depth = dict_depth(d[key]);\n        if (depth > max) {\n            max = depth;\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    if (typeof d !== \"object\") {\n        return 1;\n    }\n    let max = 0;\n    for (let key in d) {\n        max = Math.max(max, dict_depth(d[key]));\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n2\n    at test (/tmp/tmp9b1m4ry8.js:19:12)\n    at Object.<anonymous> (/tmp/tmp9b1m4ry8.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let k in d) {\n        if (typeof d[k] === 'object') {\n            max = Math.max(max, dict_depth(d[k]));\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] == \"object\") {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmp7_qcihej.js:17:12)\n    at Object.<anonymous> (/tmp/tmp7_qcihej.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        max = Math.max(max, dict_depth(d[key]));\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "/tmp/tmpnot798ke.js:3\n    if (d === null) {\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at dict_depth (/tmp/tmpnot798ke.js:3:5)\n    at dict_depth (/tmp/tmpnot798ke.js:8:29)\n    at dict_depth (/tmp/tmpnot798ke.js:8:29)\n    at dict_depth (/tmp/tmpnot798ke.js:8:29)\n    at dict_depth (/tmp/tmpnot798ke.js:8:29)\n    at dict_depth (/tmp/tmpnot798ke.js:8:29)\n    at dict_depth (/tmp/tmpnot798ke.js:8:29)\n    at dict_depth (/tmp/tmpnot798ke.js:8:29)\n    at dict_depth (/tmp/tmpnot798ke.js:8:29)\n    at dict_depth (/tmp/tmpnot798ke.js:8:29)\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let depth = 0;\n    for (let key in d) {\n        if (d.hasOwnProperty(key)) {\n            depth = Math.max(depth, dict_depth(d[key]));\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === \"object\") {\n            let depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let k in d) {\n        if (typeof d[k] === 'object') {\n            let depth = dict_depth(d[k]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpm66j9nqs.js:17:12)\n    at Object.<anonymous> (/tmp/tmpm66j9nqs.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]);\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max_depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === \"object\") {\n            let depth = dict_depth(d[key]);\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n    }\n    return max_depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null || typeof d !== 'object') {\n        return 0;\n    }\n    let max = 0;\n    for (const key in d) {\n        if (d.hasOwnProperty(key)) {\n            const depth = dict_depth(d[key]);\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpn2t4d36p.js:17:12)\n    at Object.<anonymous> (/tmp/tmpn2t4d36p.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let max = 0;\n    for (let k in d) {\n        if (typeof d[k] === 'object') {\n            let depth = dict_depth(d[k]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely deep-equal\n\n4\n    at test (/tmp/tmpm66j9nqs.js:17:12)\n    at Object.<anonymous> (/tmp/tmpm66j9nqs.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (const key in d) {\n        if (d.hasOwnProperty(key)) {\n            if (typeof d[key] === 'object') {\n                const depth_of_sub = dict_depth(d[key]);\n                if (depth_of_sub > depth) {\n                    depth = depth_of_sub;\n                }\n            }\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (is_dict(d)) {\n        let max_depth = 0;\n        for (let key in d) {\n            let depth = dict_depth(d[key]);\n            if (depth > max_depth) {\n                max_depth = depth;\n            }\n        }\n        return max_depth + 1;\n    } else {\n        return 0;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122446,
      "stdout": "../../../../tmp/tmpp7v37zii.ts(3,9): error TS2304: Cannot find name 'is_dict'.\n",
      "stderr": "",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            let depth_of_key = dict_depth(d[key]);\n            if (depth_of_key > depth) {\n                depth = depth_of_key;\n            }\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1665509735,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (d.hasOwnProperty(key)) {\n            if (typeof d[key] === 'object') {\n                let depth_of_key = dict_depth(d[key]);\n                if (depth_of_key > depth) {\n                    depth = depth_of_key;\n                }\n            }\n        }\n    }\n    return 1 + depth;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 0;\n    for (let k in d) {\n        let v = d[k];\n        if (typeof v === 'object') {\n            max = Math.max(max, dict_depth(v));\n        }\n    }\n    return max + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    let depth = 0;\n    for (let key in d) {\n        if (typeof d[key] === 'object') {\n            depth = Math.max(depth, dict_depth(d[key]));\n        }\n    }\n    return depth + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "//Write a function to find the depth of an object.\nfunction dict_depth(d: any): number {\n    if (d === null) {\n        return 0;\n    }\n    let max = 1;\n    for (const key in d) {\n        if (typeof d[key] === 'object') {\n            const depth = dict_depth(d[key]) + 1;\n            if (depth > max) {\n                max = depth;\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = dict_depth;\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": {\"d\": {}}}}),4);\n  assert.deepEqual(candidate({\"a\": 1, \"b\": {\"c\": \"python\"}}),2);\n  assert.deepEqual(candidate({1: \"Sun\", 2: {3: {4: \"Mon\"}}}),3);\n}\n\ntest();",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}