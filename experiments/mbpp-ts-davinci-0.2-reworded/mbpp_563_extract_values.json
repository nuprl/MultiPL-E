{
  "name": "mbpp_563_extract_values",
  "language": "ts",
  "prompt": "//Write a function to extract values between quotation marks from a string.\nfunction extract_values(text: string): string[] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_563_extract_values.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = extract_values;\n  assert.deepEqual(candidate(\"\"Python\", \"PHP\", \"Java\"\"),[\"Python\", \"PHP\", \"Java\"]);\n  assert.deepEqual(candidate(\"\"python\",\"program\",\"language\"\"),[\"python\", \"program\", \"language\"]);\n  assert.deepEqual(candidate(\"\"red\",\"blue\",\"green\",\"yellow\"\"),[\"red\", \"blue\", \"green\", \"yellow\"]);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let result: string[] = [];\n    let regex = /\"([^\"]*)\"/g;\n    let match: RegExpExecArray;\n    while (match = regex.exec(text)) {\n        result.push(match[1]);\n    }\n    return result;\n}\n\nconsole.log(extract_values('\"hello\" \"world\" \"!\"'));\n",
    "    let result: string[] = [];\n    let regex = /\"(.*?)\"/g;\n    let match: RegExpExecArray;\n    while (match = regex.exec(text)) {\n        result.push(match[1]);\n    }\n    return result;\n}\n",
    "    let result: string[] = [];\n    let start = text.indexOf('\"');\n    let end = text.indexOf('\"', start + 1);\n    while (start !== -1 && end !== -1) {\n        result.push(text.substring(start + 1, end));\n        start = text.indexOf('\"', end + 1);\n        end = text.indexOf('\"', start + 1);\n    }\n    return result;\n}\n",
    "    let result: string[] = [];\n    let regex = /\"(.*?)\"/g;\n    let match = regex.exec(text);\n    while (match != null) {\n        result.push(match[1]);\n        match = regex.exec(text);\n    }\n    return result;\n}\n",
    "    let result: string[] = [];\n    let start: number = 0;\n    let end: number = 0;\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] === '\"') {\n            if (start === 0) {\n                start = i + 1;\n            } else {\n                end = i;\n                result.push(text.substring(start, end));\n                start = 0;\n            }\n        }\n    }\n    return result;\n}\n\nconsole.log(extract_values('\"hello\" \"world\" \"foo\" \"bar\"'));\n",
    "    let result: string[] = [];\n    let regex = /\"(.*?)\"/g;\n    let match;\n    while (match = regex.exec(text)) {\n        result.push(match[1]);\n    }\n    return result;\n}\n",
    "    let result: string[] = [];\n    let regex = /\"(.*?)\"/g;\n    let match: RegExpExecArray;\n\n    while (match = regex.exec(text)) {\n        result.push(match[1]);\n    }\n\n    return result;\n}\n",
    "    let result: string[] = [];\n    let regex = /\"(.*?)\"/g;\n    let match: RegExpExecArray;\n    while (match = regex.exec(text)) {\n        result.push(match[1]);\n    }\n    return result;\n}\n",
    "    let result: string[] = [];\n    let regex = /\"(.*?)\"/g;\n    let match: RegExpExecArray;\n    while (match = regex.exec(text)) {\n        result.push(match[1]);\n    }\n    return result;\n}\n",
    "    let result: string[] = [];\n    let regex = /\"(.*?)\"/g;\n    let match: RegExpExecArray;\n    while (match = regex.exec(text)) {\n        result.push(match[1]);\n    }\n    return result;\n}\n",
    "    let result: string[] = [];\n    let start = 0;\n    let end = 0;\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] === '\"') {\n            if (start === 0) {\n                start = i + 1;\n            } else {\n                end = i;\n                result.push(text.substring(start, end));\n                start = 0;\n            }\n        }\n    }\n    return result;\n}\n",
    "    let result: string[] = [];\n    let start = 0;\n    let end = 0;\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] == '\"') {\n            if (start == 0) {\n                start = i + 1;\n            } else {\n                end = i;\n                result.push(text.substring(start, end));\n                start = 0;\n            }\n        }\n    }\n    return result;\n}\n",
    "    let result: string[] = [];\n    let startIndex: number = text.indexOf('\"');\n    let endIndex: number = text.indexOf('\"', startIndex + 1);\n    while (startIndex !== -1 && endIndex !== -1) {\n        result.push(text.substring(startIndex + 1, endIndex));\n        startIndex = text.indexOf('\"', endIndex + 1);\n        endIndex = text.indexOf('\"', startIndex + 1);\n    }\n    return result;\n}\n",
    "    let result: string[] = [];\n    let regex = /\"(.*?)\"/g;\n    let match = regex.exec(text);\n    while (match != null) {\n        result.push(match[1]);\n        match = regex.exec(text);\n    }\n    return result;\n}\n",
    "    let result: string[] = [];\n    let regex = /\"(.*?)\"/g;\n    let match;\n    while (match = regex.exec(text)) {\n        result.push(match[1]);\n    }\n    return result;\n}\n",
    "    const regex = /\"(.*?)\"/g;\n    const result = [];\n    let match;\n    while (match = regex.exec(text)) {\n        result.push(match[1]);\n    }\n    return result;\n}\n",
    "    let result: string[] = [];\n    let regex = /\"(.*?)\"/g;\n    let match: RegExpExecArray;\n    while (match = regex.exec(text)) {\n        result.push(match[1]);\n    }\n    return result;\n}\n",
    "    let result: string[] = [];\n    let regex = /\"(.*?)\"/g;\n    let match: RegExpExecArray;\n    while (match = regex.exec(text)) {\n        result.push(match[1]);\n    }\n    return result;\n}\n",
    "    let result: string[] = [];\n    let start = 0;\n    let end = 0;\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] === '\"') {\n            if (start === 0) {\n                start = i + 1;\n            } else {\n                end = i;\n                result.push(text.substring(start, end));\n                start = 0;\n            }\n        }\n    }\n    return result;\n}\n",
    "    let result: string[] = [];\n    let regex = /\"(.*?)\"/g;\n    let match: RegExpExecArray;\n    while (match = regex.exec(text)) {\n        result.push(match[1]);\n    }\n    return result;\n}\n"
  ]
}