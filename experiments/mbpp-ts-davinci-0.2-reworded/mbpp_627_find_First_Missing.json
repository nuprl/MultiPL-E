{
  "name": "mbpp_627_find_First_Missing",
  "language": "ts",
  "prompt": "//Write a tsthon function to find the smallest missing number from a sorted array of natural numbers.\nfunction find_First_Missing(array: number[]): number {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "reworded",
  "tests": "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = find_First_Missing;\n  assert.deepEqual(candidate([0, 1, 2, 3]),4);\n  assert.deepEqual(candidate([0, 1, 2, 6, 9]),3);\n  assert.deepEqual(candidate([2, 3, 5, 8, 9]),0);\n}\n\ntest();",
  "stop_tokens": [
    "\nfunction ",
    "\n/*",
    "\n//",
    "\nclass"
  ],
  "completions": [
    "    let n = array.length;\n    let i = 0;\n    while (i < n) {\n        if (array[i] != i) {\n            return i;\n        }\n        i++;\n    }\n    return n;\n}\n\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 10]));\nconsole.log(find_First_Missing([10, 11, 12, 13, 14]));\n",
    "  let i = 0;\n  while (i < array.length) {\n    if (array[i] !== i) {\n      return i;\n    }\n    i++;\n  }\n  return i;\n}\n\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 10]));\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "    let i = 0;\n    while (i < array.length) {\n        if (array[i] !== i) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 10]));\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "    let i = 0;\n    while (i < array.length) {\n        if (array[i] !== i) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 10]));\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "    let i = 0;\n    while (i < array.length) {\n        if (array[i] !== i) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 10]));\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "    let i = 0;\n    while (i < array.length) {\n        if (array[i] !== i) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 10]));\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "  let i = 0;\n  while (i < array.length) {\n    if (array[i] !== i) {\n      return i;\n    }\n    i++;\n  }\n  return i;\n}\n\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 10]));\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "    let i = 0;\n    while (i < array.length) {\n        if (array[i] !== i) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n",
    "    let i = 0;\n    while (i < array.length) {\n        if (array[i] !== i) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 10]));\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "    let i: number = 0;\n    while (i < array.length) {\n        if (array[i] !== i) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 10]));\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "    let n = array.length;\n    let i = 0;\n    while (i < n) {\n        if (array[i] != i + 1) {\n            return i + 1;\n        }\n        i++;\n    }\n    return n + 1;\n}\n",
    "  let i = 0;\n  while (i < array.length) {\n    if (array[i] !== i) {\n      return i;\n    }\n    i++;\n  }\n  return i;\n}\n\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 10]));\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "    let i = 0;\n    while (i < array.length) {\n        if (array[i] !== i) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 10]));\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "    let i = 0;\n    while (i < array.length) {\n        if (array[i] !== i) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 10]));\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "    let i = 0;\n    while (i < array.length) {\n        if (array[i] !== i) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 10]));\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n",
    "    let i = 0;\n    while (i < array.length) {\n        if (array[i] !== i) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n",
    "    let min: number = array[0];\n    let max: number = array[array.length - 1];\n    let mid: number;\n    let count: number = 0;\n    let i: number;\n    let j: number;\n    for (i = 0; i < array.length; i++) {\n        if (array[i] < min) {\n            min = array[i];\n        }\n        if (array[i] > max) {\n            max = array[i];\n        }\n    }\n    while (min <= max) {\n        mid = Math.floor((min + max) / 2);\n        for (j = 0; j < array.length; j++) {\n            if (array[j] == mid) {\n                count++;\n            }\n        }\n        if (count == 0) {\n            return mid;\n        }\n        else {\n            min = mid + 1;\n        }\n    }\n    return min;\n}\n",
    "    let n = array.length;\n    let i = 0;\n    while (i < n) {\n        if (array[i] != i + 1) {\n            return i + 1;\n        }\n        i++;\n    }\n    return n + 1;\n}\n",
    "    let n = array.length;\n    let i = 0;\n    while (i < n) {\n        if (array[i] != i) {\n            return i;\n        }\n        i++;\n    }\n    return n;\n}\n\nconsole.log(find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 10]));\nconsole.log(find_First_Missing([10, 11, 12, 13, 14]));\n",
    "    let i = 0;\n    while (i < array.length) {\n        if (array[i] !== i) {\n            return i;\n        }\n        i++;\n    }\n    return i;\n}\n"
  ]
}