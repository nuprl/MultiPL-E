name: HumanEval_47_median
language: lua
prompt: "-- Return median of elements in the list l.\nlocal function median(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
  \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
  \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
  \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local m = #l\n    if m == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if m % 2 == 0 then\n        return (l[m/2] + l[m/2+1])\
    \ / 2\n    else\n        return l[math.ceil(m/2)]\n    end\nend", "    local temp={}\n\
    \    for _,v in ipairs(l) do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n\
    \    if #temp%2==1 then\n        return temp[(#temp+1)/2]\n    else\n        return\
    \ (temp[#temp/2]+temp[#temp/2+1])/2\n    end\nend", "\tlocal m = #l\n\tif m ==\
    \ 0 then return 0 end\n\tlocal t = {}\n\tfor _, v in ipairs(l) do t[v] = true\
    \ end\n\tlocal i = 1\n\tfor k, _ in pairs(t) do\n\t\tif i == (m + 1) / 2 then\
    \ return k end\n\t\ti = i + 1\n\tend\nend", "    local temp={}\n    for _,v in\
    \ ipairs(l) do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n\
    \    if math.fmod(#temp,2)==0 then\n        return (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \    else\n        return temp[math.ceil(#temp/2)]\n    end\nend", "    local\
    \ temp={}\n    for _,v in ipairs(l) do\n        table.insert(temp,v)\n    end\n\
    \    table.sort(temp)\n    if #temp%2==1 then\n        return temp[math.ceil(#temp/2)]\n\
    \    else\n        return (temp[#temp/2]+temp[#temp/2+1])/2\n    end\nend", " \
    \   local temp={}\n    for _,v in ipairs(l) do\n        table.insert(temp,v)\n\
    \    end\n    table.sort(temp)\n    if #temp%2==1 then\n        return temp[math.ceil(#temp/2)]\n\
    \    else\n        return (temp[#temp/2]+temp[#temp/2+1])/2\n    end\nend", " \
    \   local temp={}\n    for _,v in ipairs(l) do\n        table.insert(temp,v)\n\
    \    end\n    table.sort(temp)\n    if #temp%2==1 then\n        return temp[math.ceil(#temp/2)]\n\
    \    else\n        return (temp[#temp/2]+temp[#temp/2+1])/2\n    end\nend", " \
    \   local m = {}\n    for _, v in ipairs(l) do\n        m[#m+1] = v\n    end\n\
    \    table.sort(m)\n    return m[math.ceil(#m/2)]\nend", "  local n = #l\n  if\
    \ n == 0 then\n    return nil\n  elseif n == 1 then\n    return l[1]\n  else\n\
    \    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n      return (l[m] +\
    \ l[m + 1]) / 2\n    else\n      return l[m + 1]\n    end\n  end\nend", "\tlocal\
    \ n = #l\n\tif n == 0 then\n\t\treturn 0\n\tend\n\ttable.sort(l)\n\tif n % 2 ==\
    \ 0 then\n\t\treturn (l[n/2] + l[n/2+1]) / 2\n\telse\n\t\treturn l[(n+1)/2]\n\t\
    end\nend", "  local m = #l\n  if m == 0 then return 0 end\n  local s = sort(l)\n\
    \  if m % 2 == 0 then\n    return (s[m / 2] + s[m / 2 + 1]) / 2\n  else\n    return\
    \ s[math.ceil(m / 2)]\n  end\nend", "\tlocal n = #l\n\tlocal m = n // 2\n\tif\
    \ n == 0 then\n\t\treturn nil\n\telseif n % 2 == 0 then\n\t\treturn (l[m] + l[m\
    \ + 1]) / 2\n\telse\n\t\treturn l[m + 1]\n\tend\nend", "    local temp={}\n  \
    \  for _,v in ipairs(l) do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n\
    \    if math.fmod(#temp,2)==0 then\n        return (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \    else\n        return temp[math.ceil(#temp/2)]\n    end\nend", "  local temp={}\n\
    \  for _,v in ipairs(l) do\n    table.insert(temp,v)\n  end\n  table.sort(temp)\n\
    \  if math.fmod(#temp,2)==0 then\n    return (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \  else\n    return temp[math.ceil(#temp/2)]\n  end\nend", "    local temp={}\n\
    \    for _,v in ipairs(l) do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n\
    \    if math.fmod(#temp,2)==0 then\n        return (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \    else\n        return temp[math.ceil(#temp/2)]\n    end\nend", "    local\
    \ temp={}\n    for _,v in ipairs(l) do\n        table.insert(temp,v)\n    end\n\
    \    table.sort(temp)\n    if math.fmod(#temp,2)==0 then\n        return (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \    else\n        return temp[math.ceil(#temp/2)]\n    end\nend", "  local temp={}\n\
    \  for _,v in ipairs(l) do\n    table.insert(temp,v)\n  end\n  table.sort(temp)\n\
    \  if math.fmod(#temp,2)==0 then\n    return (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \  else\n    return temp[math.ceil(#temp/2)]\n  end\nend", "  local m = #l\n \
    \ if m == 0 then return nil end\n  local n = m % 2\n  local s = (m - n) / 2\n\
    \  table.sort(l)\n  if n == 0 then\n    return (l[s] + l[s+1]) / 2\n  else\n \
    \   return l[s+1]\n  end\nend", "\tlocal n = #l\n\tif n == 0 then\n\t\treturn\
    \ nil\n\tend\n\ttable.sort(l)\n\tif n % 2 == 0 then\n\t\treturn (l[n/2] + l[n/2+1])\
    \ / 2\n\telse\n\t\treturn l[(n+1)/2]\n\tend\nend", "  local m = #l\n  if m ==\
    \ 0 then return 0 end\n  table.sort(l)\n  if m % 2 == 0 then\n    return (l[m/2]\
    \ + l[m/2+1]) / 2\n  else\n    return l[math.ceil(m/2)]\n  end\nend", "  local\
    \ temp={}\n  for _,v in ipairs(l) do\n    table.insert(temp,v)\n  end\n  table.sort(temp)\n\
    \  if math.fmod(#temp,2)==0 then\n    return (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \  else\n    return temp[math.ceil(#temp/2)]\n  end\nend", "  local t = {}\n \
    \ for _, v in ipairs(l) do\n    t[#t+1] = v\n  end\n  table.sort(t)\n  if #t %\
    \ 2 == 0 then\n    return (t[#t/2] + t[#t/2+1]) / 2\n  else\n    return t[math.ceil(#t/2)]\n\
    \  end\nend", "  local m = #l\n  if m == 0 then return 0 end\n  local s = sort(l)\n\
    \  if m % 2 == 0 then\n    return (s[m / 2] + s[m / 2 + 1]) / 2\n  else\n    return\
    \ s[m / 2 + 1]\n  end\nend", "\tlocal t = {}\n\tfor _, v in ipairs(l) do\n\t\t\
    t[#t+1] = v\n\tend\n\ttable.sort(t)\n\tlocal n = #t\n\tif n == 0 then\n\t\treturn\
    \ 0\n\telseif n % 2 == 0 then\n\t\treturn (t[n/2] + t[n/2+1]) / 2\n\telse\n\t\t\
    return t[math.ceil(n/2)]\n\tend\nend", "  local n = #l\n  if n == 0 then\n   \
    \ return 0\n  end\n  local m = n / 2\n  if n % 2 == 0 then\n    return (l[m] +\
    \ l[m + 1]) / 2\n  else\n    return l[math.ceil(m)]\n  end\nend", "  local m =\
    \ #l\n  if m == 0 then return 0 end\n  table.sort(l)\n  if m % 2 == 0 then\n \
    \   return (l[m/2] + l[m/2+1]) / 2\n  else\n    return l[math.ceil(m/2)]\n  end\n\
    end", "    local temp={}\n    for _,v in ipairs(l) do\n        table.insert(temp,v)\n\
    \    end\n    table.sort(temp)\n    if #temp%2==1 then\n        return temp[math.ceil(#temp/2)]\n\
    \    else\n        return (temp[#temp/2]+temp[#temp/2+1])/2\n    end\nend", "\t\
    local temp={}\n\tfor _,v in ipairs(l) do\n\t\ttable.insert(temp,v)\n\tend\n\t\
    table.sort(temp)\n\tif math.fmod(#temp,2)==0 then\n\t\treturn (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \telse\n\t\treturn temp[math.ceil(#temp/2)]\n\tend\nend", "    local temp={}\n\
    \    for _,v in ipairs(l) do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n\
    \    if #temp%2==1 then\n        return temp[math.ceil(#temp/2)]\n    else\n \
    \       return (temp[#temp/2]+temp[#temp/2+1])/2\n    end\nend", "    local t\
    \ = {}\n    for _, v in ipairs(l) do\n        t[#t+1] = v\n    end\n    table.sort(t)\n\
    \    local n = #t\n    if n == 0 then\n        return 0\n    elseif n % 2 == 0\
    \ then\n        return (t[n/2] + t[n/2+1]) / 2\n    else\n        return t[(n+1)/2]\n\
    \    end\nend", "    local temp={}\n    for _,v in ipairs(l) do\n        table.insert(temp,v)\n\
    \    end\n    table.sort(temp)\n    if #temp%2==1 then\n        return temp[math.ceil(#temp/2)]\n\
    \    else\n        return (temp[#temp/2]+temp[#temp/2+1])/2\n    end\nend", "\t\
    local n = #l\n\tif n == 0 then\n\t\treturn nil\n\tend\n\ttable.sort(l)\n\tif n\
    \ % 2 == 0 then\n\t\treturn (l[n/2] + l[n/2+1]) / 2\n\telse\n\t\treturn l[(n+1)/2]\n\
    \tend\nend", "\tlocal t = {}\n\tfor _, v in ipairs(l) do\n\t\tt[#t+1] = v\n\t\
    end\n\ttable.sort(t)\n\tif #t % 2 == 0 then\n\t\treturn (t[#t/2] + t[#t/2+1])\
    \ / 2\n\telse\n\t\treturn t[math.ceil(#t/2)]\n\tend\nend", "  local temp={}\n\
    \  for _,v in ipairs(l) do\n    table.insert(temp,v)\n  end\n  table.sort(temp)\n\
    \  if math.fmod(#temp,2)==0 then\n    return (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \  else\n    return temp[math.ceil(#temp/2)]\n  end\nend", "    local temp={}\n\
    \    for _,v in ipairs(l) do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n\
    \    if math.fmod(#temp,2)==0 then\n        return (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \    else\n        return temp[math.ceil(#temp/2)]\n    end\nend", "  local l2\
    \ = {}\n  for i,v in ipairs(l) do\n    l2[i] = v\n  end\n  table.sort(l2)\n  local\
    \ n = #l2\n  if n % 2 == 0 then\n    return (l2[n/2] + l2[n/2+1]) / 2\n  else\n\
    \    return l2[math.ceil(n/2)]\n  end\nend", "    local temp={}\n    for _,v in\
    \ ipairs(l) do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n\
    \    if #temp%2==1 then\n        return temp[math.ceil(#temp/2)]\n    else\n \
    \       return (temp[#temp/2]+temp[#temp/2+1])/2\n    end\nend", "    local l2\
    \ = {}\n    for _, v in ipairs(l) do\n        l2[#l2+1] = v\n    end\n    table.sort(l2)\n\
    \    local n = #l2\n    if n == 0 then\n        return 0\n    elseif n % 2 ==\
    \ 1 then\n        return l2[(n+1)/2]\n    else\n        return (l2[n/2] + l2[n/2+1])\
    \ / 2\n    end\nend", "    local n = #l\n    if n == 0 then\n        return nil\n\
    \    elseif n == 1 then\n        return l[1]\n    else\n        local m = math.floor(n\
    \ / 2)\n        if n % 2 == 0 then\n            return (l[m] + l[m + 1]) / 2\n\
    \        else\n            return l[m + 1]\n        end\n    end\nend", "  local\
    \ temp={}\n  for _,v in ipairs(l) do\n    table.insert(temp,v)\n  end\n  table.sort(temp)\n\
    \  if math.fmod(#temp,2)==0 then\n    return (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \  else\n    return temp[math.ceil(#temp/2)]\n  end\nend", "  local m = #l\n \
    \ if m == 0 then return 0 end\n  local s = table.sort(l)\n  if m % 2 == 0 then\n\
    \    return (s[m/2] + s[m/2+1]) / 2\n  else\n    return s[math.ceil(m/2)]\n  end\n\
    end", "  local temp={}\n  for _,v in ipairs(l) do\n    table.insert(temp,v)\n\
    \  end\n  table.sort(temp)\n  if math.fmod(#temp,2)==0 then\n    return (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \  else\n    return temp[math.ceil(#temp/2)]\n  end\nend", "  local m = #l\n \
    \ if m == 0 then return nil end\n  local s = table.sort(l)\n  if m % 2 == 0 then\n\
    \    return (l[m/2] + l[m/2+1]) / 2\n  else\n    return l[math.ceil(m/2)]\n  end\n\
    end", "\tlocal m = #l\n\tif m == 0 then return 0 end\n\ttable.sort(l)\n\tif m\
    \ % 2 == 0 then\n\t\treturn (l[m/2] + l[m/2+1]) / 2\n\telse\n\t\treturn l[math.ceil(m/2)]\n\
    \tend\nend", "\tlocal tmp = {}\n\tfor _, v in ipairs(l) do\n\t\ttable.insert(tmp,\
    \ v)\n\tend\n\ttable.sort(tmp)\n\tif #tmp % 2 == 0 then\n\t\treturn (tmp[#tmp/2]\
    \ + tmp[(#tmp/2)+1]) / 2\n\telse\n\t\treturn tmp[math.ceil(#tmp/2)]\n\tend\nend",
  "\tlocal m = #l\n\tif m == 0 then return nil end\n\ttable.sort(l)\n\tif m % 2 ==\
    \ 0 then\n\t\treturn (l[m/2] + l[m/2+1]) / 2\n\telse\n\t\treturn l[math.ceil(m/2)]\n\
    \tend\nend", "\tlocal n = #l\n\tif n == 0 then\n\t\treturn nil\n\tend\n\tlocal\
    \ m = n / 2\n\tlocal m1 = math.floor(m)\n\tlocal m2 = math.ceil(m)\n\tif m1 ==\
    \ m2 then\n\t\treturn l[m1]\n\telse\n\t\treturn (l[m1] + l[m2]) / 2\n\tend\nend",
  "    local temp={}\n    for _,v in ipairs(l) do\n        table.insert(temp,v)\n\
    \    end\n    table.sort(temp)\n    -- If #temp is odd, return middle element\n\
    \    if #temp%2==1 then\n        return temp[math.ceil(#temp/2)]\n    -- Else,\
    \ return mean of middle two elements\n    else\n        return (temp[#temp/2]\
    \ + temp[(#temp/2)+1]) / 2\n    end\nend", "    local temp={}\n    for _,v in\
    \ ipairs(l) do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n\
    \    if math.fmod(#temp,2)==0 then\n        return (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \    else\n        return temp[math.ceil(#temp/2)]\n    end\nend", "  local temp={}\n\
    \  for _,v in ipairs(l) do\n    table.insert(temp,v)\n  end\n  table.sort(temp)\n\
    \  -- If #temp is odd, return middle element\n  if math.fmod(#temp,2)==1 then\n\
    \    return temp[math.ceil(#temp/2)]\n  -- Else, return mean of middle two elements\n\
    \  else\n    return (temp[#temp/2] + temp[(#temp/2)+1]) / 2\n  end\nend", "  local\
    \ n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1 then\n    return l[1]\n\
    \  else\n    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n      return\
    \ (l[m] + l[m + 1]) / 2\n    else\n      return l[m + 1]\n    end\n  end\nend",
  "\tlocal m = #l\n\tif m == 0 then return nil end\n\tif m == 1 then return l[1] end\n\
    \ttable.sort(l)\n\tif m % 2 == 0 then\n\t\treturn (l[m/2] + l[m/2+1]) / 2\n\t\
    else\n\t\treturn l[(m+1)/2]\n\tend\nend", "    local temp={}\n    for _,v in ipairs(l)\
    \ do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n    if #temp%2==1\
    \ then\n        return temp[math.ceil(#temp/2)]\n    else\n        return (temp[#temp/2]+temp[#temp/2+1])/2\n\
    \    end\nend", "\tlocal m = #l\n\tif m == 0 then return nil end\n\ttable.sort(l)\n\
    \tif m % 2 == 0 then\n\t\treturn (l[m/2] + l[m/2+1]) / 2\n\telse\n\t\treturn l[(m+1)/2]\n\
    \tend\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  elseif n ==\
    \ 1 then\n    return l[1]\n  else\n    local sorted = copy(l)\n    table.sort(sorted)\n\
    \    if n % 2 == 0 then\n      return (sorted[n/2] + sorted[n/2+1]) / 2\n    else\n\
    \      return sorted[(n+1)/2]\n    end\n  end\nend", "  local temp={}\n  for _,v\
    \ in ipairs(l) do\n    table.insert(temp,v)\n  end\n  table.sort(temp)\n  if math.fmod(#temp,2)==0\
    \ then\n    return (temp[#temp/2]+temp[(#temp/2)+1])/2\n  else\n    return temp[math.ceil(#temp/2)]\n\
    \  end\nend", "  local m = #l\n  if m == 0 then return nil end\n  table.sort(l)\n\
    \  if m % 2 == 0 then\n    return (l[m/2] + l[m/2+1]) / 2\n  else\n    return\
    \ l[(m+1)/2]\n  end\nend", "  local m = #l\n  if m == 0 then return nil end\n\
    \  table.sort(l)\n  if m % 2 == 0 then\n    return (l[m/2] + l[m/2+1]) / 2\n \
    \ else\n    return l[math.ceil(m/2)]\n  end\nend", "\tlocal n = #l\n\tif n ==\
    \ 0 then\n\t\treturn nil\n\tend\n\tlocal m = n % 2\n\tlocal i = (n + m) / 2\n\t\
    table.sort(l)\n\treturn l[i]\nend", "    local temp={}\n    for _,v in ipairs(l)\
    \ do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n    if #temp%2==1\
    \ then\n        return temp[math.ceil(#temp/2)]\n    else\n        return (temp[#temp/2]+temp[#temp/2+1])/2\n\
    \    end\nend", "\tlocal t = {}\n\tfor _, v in ipairs(l) do\n\t\ttable.insert(t,\
    \ v)\n\tend\n\ttable.sort(t)\n\treturn t[math.ceil(#t / 2)]\nend", "  local temp={}\n\
    \  for _,v in ipairs(l) do\n    table.insert(temp,v)\n  end\n  table.sort(temp)\n\
    \  if math.fmod(#temp,2)==0 then\n    return (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \  else\n    return temp[math.ceil(#temp/2)]\n  end\nend", "\tlocal t = {}\n\t\
    for _, v in ipairs(l) do\n\t\tt[#t+1] = v\n\tend\n\ttable.sort(t)\n\tlocal n =\
    \ #t\n\tif n % 2 == 0 then\n\t\treturn (t[n/2] + t[n/2+1]) / 2\n\telse\n\t\treturn\
    \ t[(n+1)/2]\n\tend\nend", "    local tmp = {}\n    for _, v in ipairs(l) do\n\
    \        tmp[#tmp+1] = v\n    end\n    table.sort(tmp)\n    if #tmp %2 == 0 then\n\
    \        return (tmp[#tmp/2] + tmp[(#tmp/2)+1]) / 2\n    else\n        return\
    \ tmp[math.ceil(#tmp/2)]\n    end\nend", "  local t = {}\n  for _, v in ipairs(l)\
    \ do\n    t[#t+1] = v\n  end\n  table.sort(t)\n  if #t % 2 == 0 then\n    return\
    \ (t[#t/2] + t[#t/2+1]) / 2\n  else\n    return t[math.ceil(#t/2)]\n  end\nend",
  "  local temp={}\n  for _,v in ipairs(l) do\n    table.insert(temp,v)\n  end\n \
    \ table.sort(temp)\n  if math.fmod(#temp,2)==0 then\n    return (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \  else\n    return temp[math.ceil(#temp/2)]\n  end\nend", "    local n = #l\n\
    \    if n == 0 then\n        return 0\n    end\n    local m = math.floor(n / 2)\n\
    \    if n % 2 == 0 then\n        return (l[m] + l[m + 1]) / 2\n    else\n    \
    \    return l[m + 1]\n    end\nend", "    local temp={}\n    for _,v in ipairs(l)\
    \ do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n    if #temp%2==1\
    \ then\n        return temp[math.ceil(#temp/2)]\n    else\n        return (temp[#temp/2]+temp[#temp/2+1])/2\n\
    \    end\nend", "    local temp={}\n    for _,v in ipairs(l) do\n        table.insert(temp,v)\n\
    \    end\n    table.sort(temp)\n    if math.fmod(#temp,2)==0 then\n        return\
    \ (temp[#temp/2]+temp[(#temp/2)+1])/2\n    else\n        return temp[math.ceil(#temp/2)]\n\
    \    end\nend", "\tlocal n = #l\n\tlocal m = n / 2\n\tif n == 0 then\n\t\treturn\
    \ nil\n\telseif n % 2 == 0 then\n\t\treturn (l[m] + l[m + 1]) / 2\n\telse\n\t\t\
    return l[math.ceil(m)]\n\tend\nend", "\tlocal temp={}\n\tfor _,v in ipairs(l)\
    \ do\n\t\ttable.insert(temp,v)\n\tend\n\ttable.sort(temp)\n\tif math.fmod(#temp,2)==0\
    \ then\n\t\treturn (temp[#temp/2]+temp[(#temp/2)+1])/2\n\telse\n\t\treturn temp[math.ceil(#temp/2)]\n\
    \tend\nend", "  local m = {}\n  for _, v in ipairs(l) do\n    m[#m+1] = v\n  end\n\
    \  table.sort(m)\n  return m[#m/2]\nend", "  local m = #l\n  if m == 0 then return\
    \ 0 end\n  table.sort(l)\n  if m % 2 == 0 then\n    return (l[m/2] + l[m/2+1])\
    \ / 2\n  else\n    return l[math.ceil(m/2)]\n  end\nend", "\tlocal m = #l\n\t\
    if m == 0 then return nil end\n\ttable.sort(l)\n\tif m % 2 == 0 then\n\t\treturn\
    \ (l[m/2] + l[m/2+1]) / 2\n\telse\n\t\treturn l[(m+1)/2]\n\tend\nend", "\tlocal\
    \ temp={}\n\tfor _,v in ipairs(l) do\n\t\ttable.insert(temp,v)\n\tend\n\ttable.sort(temp)\n\
    \tif math.fmod(#temp,2)==0 then\n\t\treturn (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \telse\n\t\treturn temp[math.ceil(#temp/2)]\n\tend\nend", "    local temp={}\n\
    \    for _,v in ipairs(l) do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n\
    \    if math.fmod(#temp,2)==0 then\n        return (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \    else\n        return temp[math.ceil(#temp/2)]\n    end\nend", "    local\
    \ n = #l\n    if n == 0 then\n        return nil\n    elseif n == 1 then\n   \
    \     return l[1]\n    else\n        local m = math.floor(n / 2)\n        if n\
    \ % 2 == 0 then\n            return (l[m] + l[m + 1]) / 2\n        else\n    \
    \        return l[m + 1]\n        end\n    end\nend", "  local m = #l\n  if m\
    \ == 0 then return 0 end\n  if m == 1 then return l[1] end\n  table.sort(l)\n\
    \  if m % 2 == 0 then\n    return (l[m/2] + l[m/2+1]) / 2\n  else\n    return\
    \ l[math.ceil(m/2)]\n  end\nend", "  local n = #l\n  if n == 0 then\n    return\
    \ nil\n  elseif n == 1 then\n    return l[1]\n  else\n    table.sort(l)\n    if\
    \ n % 2 == 0 then\n      return (l[n/2] + l[n/2+1]) / 2\n    else\n      return\
    \ l[(n+1)/2]\n    end\n  end\nend", "  local temp={}\n  for _,v in ipairs(l) do\n\
    \    table.insert(temp,v)\n  end\n  table.sort(temp)\n  if math.fmod(#temp,2)==0\
    \ then\n    return (temp[#temp/2]+temp[(#temp/2)+1])/2\n  else\n    return temp[math.ceil(#temp/2)]\n\
    \  end\nend", "\tlocal n = #l\n\tif n == 0 then\n\t\treturn nil\n\tend\n\tlocal\
    \ m = math.floor(n / 2)\n\tif n % 2 == 0 then\n\t\treturn (l[m] + l[m + 1]) /\
    \ 2\n\telse\n\t\treturn l[m + 1]\n\tend\nend", "  local n = #l\n  if n == 0 then\n\
    \    return nil\n  elseif n == 1 then\n    return l[1]\n  else\n    local m =\
    \ math.floor(n / 2)\n    if n % 2 == 0 then\n      return (l[m] + l[m + 1]) /\
    \ 2\n    else\n      return l[m + 1]\n    end\n  end\nend", "    local temp={}\n\
    \    for _,v in ipairs(l) do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n\
    \    if #temp%2==1 then\n        return temp[(#temp+1)/2]\n    else\n        return\
    \ (temp[#temp/2]+temp[#temp/2+1])/2\n    end\nend", "    local temp={}\n    for\
    \ _,v in ipairs(l) do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n\
    \    if #temp%2==1 then\n        return temp[math.ceil(#temp/2)]\n    else\n \
    \       return (temp[#temp/2]+temp[#temp/2+1])/2\n    end\nend", "    local temp={}\n\
    \    for _,v in ipairs(l) do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n\
    \    if #temp%2==1 then\n        return temp[math.ceil(#temp/2)]\n    else\n \
    \       return (temp[#temp/2]+temp[#temp/2+1])/2\n    end\nend", "    local temp={}\n\
    \    for _,v in ipairs(l) do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n\
    \    if math.fmod(#temp,2)==0 then\n        return (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \    else\n        return temp[math.ceil(#temp/2)]\n    end\nend", "\tlocal n\
    \ = #l\n\tif n == 0 then\n\t\treturn nil\n\tend\n\tlocal m = math.floor(n / 2)\n\
    \tif n % 2 == 0 then\n\t\treturn (l[m] + l[m + 1]) / 2\n\telse\n\t\treturn l[m\
    \ + 1]\n\tend\nend", "  local m = #l\n  if m == 0 then return nil end\n  table.sort(l)\n\
    \  if m % 2 == 0 then\n    return (l[m/2] + l[m/2+1]) / 2\n  else\n    return\
    \ l[math.ceil(m/2)]\n  end\nend", "  local tmp = {}\n  for _, v in ipairs(l) do\n\
    \    table.insert(tmp, v)\n  end\n  table.sort(tmp)\n  if #tmp % 2 == 0 then\n\
    \    return (tmp[#tmp/2] + tmp[(#tmp/2)+1]) / 2\n  else\n    return tmp[math.ceil(#tmp/2)]\n\
    \  end\nend", "\tlocal n = #l\n\tif n == 0 then\n\t\treturn 0\n\tend\n\ttable.sort(l)\n\
    \tif n % 2 == 0 then\n\t\treturn (l[n/2] + l[n/2+1]) / 2\n\telse\n\t\treturn l[(n+1)/2]\n\
    \tend\nend", "    local temp={}\n    for _,v in ipairs(l) do\n        table.insert(temp,v)\n\
    \    end\n    table.sort(temp)\n    if #temp%2==1 then\n        return temp[math.ceil(#temp/2)]\n\
    \    else\n        return (temp[#temp/2]+temp[#temp/2+1])/2\n    end\nend", " \
    \ local temp={}\n  for _,v in ipairs(l) do\n    table.insert(temp,v)\n  end\n\
    \  table.sort(temp)\n  if math.fmod(#temp,2)==0 then\n    return (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \  else\n    return temp[math.ceil(#temp/2)]\n  end\nend", "    local n = #l\n\
    \    if n == 0 then\n        return nil\n    elseif n == 1 then\n        return\
    \ l[1]\n    else\n        table.sort(l)\n        if n % 2 == 0 then\n        \
    \    return (l[n/2] + l[n/2+1]) / 2\n        else\n            return l[(n+1)/2]\n\
    \        end\n    end\nend", "  local m = #l\n  if m == 0 then return nil end\n\
    \  local n = math.floor(m/2)\n  if m % 2 == 0 then\n    return (l[n] + l[n+1])\
    \ / 2\n  else\n    return l[n+1]\n  end\nend", "  local sorted = {}\n  for n in\
    \ pairs(l) do table.insert(sorted, n) end\n  table.sort(sorted)\n  if #sorted\
    \ %2 == 0 then\n    return (sorted[#sorted/2] + sorted[#sorted/2+1]) / 2\n  else\n\
    \    return sorted[math.ceil(#sorted/2)]\n  end\nend", "  local m = #l\n  if m\
    \ == 0 then return 0 end\n  table.sort(l)\n  if m % 2 == 0 then\n    return (l[m/2]\
    \ + l[m/2+1]) / 2\n  else\n    return l[math.ceil(m/2)]\n  end\nend", "\tlocal\
    \ n = #l\n\tif n == 0 then\n\t\treturn nil\n\tend\n\ttable.sort(l)\n\tif n % 2\
    \ == 0 then\n\t\treturn (l[n/2] + l[n/2+1]) / 2\n\telse\n\t\treturn l[(n+1)/2]\n\
    \tend\nend", "\tlocal n = #l\n\tif n == 0 then\n\t\treturn nil\n\tend\n\ttable.sort(l)\n\
    \tif n % 2 == 0 then\n\t\treturn (l[n/2] + l[n/2+1]) / 2\n\telse\n\t\treturn l[(n+1)/2]\n\
    \tend\nend", "    local temp={}\n    for _,v in ipairs(l) do\n        table.insert(temp,v)\n\
    \    end\n    table.sort(temp)\n    if #temp%2==1 then\n        return temp[math.ceil(#temp/2)]\n\
    \    else\n        return (temp[#temp/2]+temp[#temp/2+1])/2\n    end\nend", " \
    \   local temp={}\n    for _,v in ipairs(l) do\n        table.insert(temp,v)\n\
    \    end\n    table.sort(temp)\n    if #temp%2==1 then\n        return temp[(#temp+1)/2]\n\
    \    else\n        return (temp[#temp/2]+temp[#temp/2+1])/2\n    end\nend", "\t\
    local temp={}\n\tfor _,v in ipairs(l) do\n\t\ttable.insert(temp,v)\n\tend\n\t\
    table.sort(temp)\n\tif math.fmod(#temp,2)==0 then\n\t\treturn (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \telse\n\t\treturn temp[math.ceil(#temp/2)]\n\tend\nend", "\tlocal m = #l\n\t\
    if m == 0 then return nil end\n\ttable.sort(l)\n\tif m % 2 == 0 then\n\t\treturn\
    \ (l[m/2] + l[m/2+1]) / 2\n\telse\n\t\treturn l[math.ceil(m/2)]\n\tend\nend",
  "  local temp={}\n  for _,v in ipairs(l) do\n    table.insert(temp,v)\n  end\n \
    \ table.sort(temp)\n  if math.fmod(#temp,2)==0 then\n    return (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \  else\n    return temp[math.ceil(#temp/2)]\n  end\nend", "    local m = #l\n\
    \    if m == 0 then\n        return nil\n    end\n    table.sort(l)\n    if m\
    \ % 2 == 0 then\n        return (l[m/2] + l[m/2+1]) / 2\n    else\n        return\
    \ l[math.ceil(m/2)]\n    end\nend", "  local tmp = {}\n  for _, v in ipairs(l)\
    \ do\n    tmp[#tmp+1] = v\n  end\n  table.sort(tmp)\n  if #tmp %2 == 0 then\n\
    \    return (tmp[#tmp/2] + tmp[(#tmp/2)+1]) / 2\n  else\n    return tmp[math.ceil(#tmp/2)]\n\
    \  end\nend", "    if #l == 0 then\n        return 0\n    end\n    local sorted\
    \ = {}\n    for _, v in ipairs(l) do\n        table.insert(sorted, v)\n    end\n\
    \    table.sort(sorted)\n    if #sorted % 2 == 0 then\n        return (sorted[#sorted\
    \ / 2] + sorted[#sorted / 2 + 1]) / 2\n    else\n        return sorted[math.ceil(#sorted\
    \ / 2)]\n    end\nend", "\tlocal n = #l\n\tif n == 0 then\n\t\treturn nil\n\t\
    end\n\ttable.sort(l)\n\tif n % 2 == 0 then\n\t\treturn (l[n/2] + l[n/2+1]) / 2\n\
    \telse\n\t\treturn l[(n+1)/2]\n\tend\nend", "  local tmp = {}\n  for _, v in ipairs(l)\
    \ do\n    table.insert(tmp, v)\n  end\n  table.sort(tmp)\n  if #tmp % 2 == 0 then\n\
    \    return (tmp[#tmp/2] + tmp[(#tmp/2)+1]) / 2\n  else\n    return tmp[math.ceil(#tmp/2)]\n\
    \  end\nend", "  local m = #l\n  if m == 0 then return nil end\n  table.sort(l)\n\
    \  if m % 2 == 0 then\n    return (l[m/2] + l[m/2+1]) / 2\n  else\n    return\
    \ l[math.ceil(m/2)]\n  end\nend", "\tlocal n = #l\n\tif n == 0 then\n\t\treturn\
    \ 0\n\tend\n\ttable.sort(l)\n\tif n % 2 == 0 then\n\t\treturn (l[n/2] + l[n/2+1])\
    \ / 2\n\telse\n\t\treturn l[(n+1)/2]\n\tend\nend", "  local sorted = {}\n  for\
    \ n in pairs(l) do table.insert(sorted, n) end\n  table.sort(sorted)\n  if #sorted\
    \ %2 == 0 then\n    return (sorted[#sorted/2] + sorted[#sorted/2+1]) / 2\n  else\n\
    \    return sorted[math.ceil(#sorted/2)]\n  end\nend", "  local l2 = {}\n  for\
    \ _, v in ipairs(l) do\n    l2[#l2+1] = v\n  end\n  table.sort(l2)\n  if #l2 %\
    \ 2 == 0 then\n    return (l2[#l2/2] + l2[#l2/2+1]) / 2\n  else\n    return l2[math.ceil(#l2/2)]\n\
    \  end\nend", "  local l_len = #l\n  if l_len == 0 then\n    return nil\n  end\n\
    \  local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted, v)\n\
    \  end\n  table.sort(sorted)\n  if l_len % 2 == 0 then\n    return (sorted[l_len\
    \ / 2] + sorted[l_len / 2 + 1]) / 2\n  else\n    return sorted[(l_len + 1) / 2]\n\
    \  end\nend", "  local t = {}\n  for _, v in ipairs(l) do\n    t[#t+1] = v\n \
    \ end\n  table.sort(t)\n  if #t % 2 == 0 then\n    return (t[#t/2] + t[#t/2+1])\
    \ / 2\n  else\n    return t[math.ceil(#t/2)]\n  end\nend", "\tlocal n = #l\n\t\
    if n == 0 then\n\t\treturn 0\n\tend\n\ttable.sort(l)\n\tif n % 2 == 0 then\n\t\
    \treturn (l[n/2] + l[n/2+1]) / 2\n\telse\n\t\treturn l[(n+1)/2]\n\tend\nend",
  "\tlocal n = #l\n\tif n == 0 then\n\t\treturn nil\n\tend\n\ttable.sort(l)\n\tif\
    \ n % 2 == 0 then\n\t\treturn (l[n/2] + l[n/2+1]) / 2\n\telse\n\t\treturn l[math.ceil(n/2)]\n\
    \tend\nend", "\tlocal n = #l\n\tif n == 0 then\n\t\treturn nil\n\tend\n\tlocal\
    \ m = math.floor(n / 2)\n\tif n % 2 == 0 then\n\t\treturn (l[m] + l[m + 1]) /\
    \ 2\n\telse\n\t\treturn l[m + 1]\n\tend\nend", "  local n = #l\n  if n == 0 then\n\
    \    return nil\n  elseif n == 1 then\n    return l[1]\n  else\n    local m =\
    \ math.floor(n / 2)\n    if n % 2 == 0 then\n      return (l[m] + l[m + 1]) /\
    \ 2\n    else\n      return l[m + 1]\n    end\n  end\nend", "    local m = #l\n\
    \    if m == 0 then\n        return nil\n    end\n    table.sort(l)\n    if m\
    \ % 2 == 0 then\n        return (l[m/2] + l[m/2+1]) / 2\n    else\n        return\
    \ l[math.ceil(m/2)]\n    end\nend", "\tlocal n = #l\n\tif n == 0 then\n\t\treturn\
    \ nil\n\tend\n\ttable.sort(l)\n\tif n % 2 == 0 then\n\t\treturn (l[n/2] + l[n/2+1])\
    \ / 2\n\telse\n\t\treturn l[(n+1)/2]\n\tend\nend", "\tlocal m = #l\n\tif m ==\
    \ 0 then return 0 end\n\tlocal t = {}\n\tfor _, v in ipairs(l) do\n\t\tt[#t+1]\
    \ = v\n\tend\n\ttable.sort(t)\n\tif m % 2 == 0 then\n\t\treturn (t[m/2] + t[m/2+1])\
    \ / 2\n\telse\n\t\treturn t[(m+1)/2]\n\tend\nend", "  local n = #l\n  if n ==\
    \ 0 then\n    return nil\n  elseif n == 1 then\n    return l[1]\n  else\n    local\
    \ m = math.floor(n / 2)\n    if n % 2 == 0 then\n      return (l[m] + l[m + 1])\
    \ / 2\n    else\n      return l[m + 1]\n    end\n  end\nend", "\tlocal n = #l\n\
    \tif n == 0 then\n\t\treturn nil\n\tend\n\tlocal m = n / 2\n\tif n % 2 == 0 then\n\
    \t\treturn (l[m] + l[m + 1]) / 2\n\telse\n\t\treturn l[math.ceil(m)]\n\tend\n\
    end", "\tlocal n = #l\n\tif n == 0 then\n\t\treturn nil\n\tend\n\tlocal m = n\
    \ / 2\n\tif n % 2 == 0 then\n\t\treturn (l[m] + l[m + 1]) / 2\n\telse\n\t\treturn\
    \ l[math.ceil(m)]\n\tend\nend", "\tlocal m = #l\n\tif m == 0 then return 0 end\n\
    \ttable.sort(l)\n\tif m % 2 == 0 then\n\t\treturn (l[m/2] + l[m/2+1]) / 2\n\t\
    else\n\t\treturn l[math.ceil(m/2)]\n\tend\nend", "    local temp={}\n    for _,v\
    \ in ipairs(l) do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n\
    \    if #temp%2==1 then\n        return temp[math.ceil(#temp/2)]\n    else\n \
    \       return (temp[#temp/2]+temp[#temp/2+1])/2\n    end\nend", "  local l2 =\
    \ {}\n  for _, v in ipairs(l) do\n    l2[#l2+1] = v\n  end\n  table.sort(l2)\n\
    \  if #l2 % 2 == 0 then\n    return (l2[#l2/2] + l2[#l2/2+1]) / 2\n  else\n  \
    \  return l2[math.ceil(#l2/2)]\n  end\nend", "  local l2 = {}\n  for _, v in ipairs(l)\
    \ do\n    l2[#l2+1] = v\n  end\n  table.sort(l2)\n  if #l2 % 2 == 0 then\n   \
    \ return (l2[#l2/2] + l2[#l2/2+1]) / 2\n  else\n    return l2[math.ceil(#l2/2)]\n\
    \  end\nend", "  local temp={}\n  for _,v in ipairs(l) do\n    table.insert(temp,v)\n\
    \  end\n  table.sort(temp)\n  if math.fmod(#temp,2)==0 then\n    return (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \  else\n    return temp[math.ceil(#temp/2)]\n  end\nend", "    local temp={}\n\
    \    for _,v in ipairs(l) do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n\
    \    if math.fmod(#temp,2)==0 then\n        return (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \    else\n        return temp[math.ceil(#temp/2)]\n    end\nend", "  local l2\
    \ = {}\n  for _, v in ipairs(l) do\n    l2[#l2+1] = v\n  end\n  table.sort(l2)\n\
    \  local n = #l2\n  if n % 2 == 0 then\n    return (l2[n/2] + l2[n/2+1]) / 2\n\
    \  else\n    return l2[(n+1)/2]\n  end\nend", "  local tmp = {}\n  for _, v in\
    \ ipairs(l) do\n    table.insert(tmp, v)\n  end\n  table.sort(tmp)\n  if #tmp\
    \ % 2 == 0 then\n    return (tmp[#tmp/2] + tmp[(#tmp/2)+1]) / 2\n  else\n    return\
    \ tmp[math.ceil(#tmp/2)]\n  end\nend", "\tlocal m = #l\n\tif m == 0 then return\
    \ 0 end\n\ttable.sort(l)\n\tif m % 2 == 0 then\n\t\treturn (l[m/2] + l[m/2+1])\
    \ / 2\n\telse\n\t\treturn l[math.ceil(m/2)]\n\tend\nend", "    local l_len = #l\n\
    \    if l_len == 0 then\n        return nil\n    end\n    local sorted = {}\n\
    \    for i, v in ipairs(l) do\n        table.insert(sorted, v)\n    end\n    table.sort(sorted)\n\
    \    if l_len % 2 == 0 then\n        return (sorted[l_len / 2] + sorted[l_len\
    \ / 2 + 1]) / 2\n    else\n        return sorted[(l_len + 1) / 2]\n    end\nend",
  "  local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted, v)\n\
    \  end\n  table.sort(sorted)\n  local n = #sorted\n  if n % 2 == 0 then\n    return\
    \ (sorted[n/2] + sorted[n/2+1]) / 2\n  else\n    return sorted[math.ceil(n/2)]\n\
    \  end\nend", "\tlocal m = #l\n\tif m == 0 then return 0 end\n\ttable.sort(l)\n\
    \tif m % 2 == 0 then\n\t\treturn (l[m/2] + l[m/2+1]) / 2\n\telse\n\t\treturn l[math.ceil(m/2)]\n\
    \tend\nend", "    local temp={}\n    for _,v in ipairs(l) do\n        table.insert(temp,v)\n\
    \    end\n    table.sort(temp)\n    if #temp%2==1 then\n        return temp[math.ceil(#temp/2)]\n\
    \    else\n        return (temp[#temp/2]+temp[#temp/2+1])/2\n    end\nend", " \
    \ local temp={}\n  for _,v in ipairs(l) do\n    table.insert(temp,v)\n  end\n\
    \  table.sort(temp)\n  if math.fmod(#temp,2)==0 then\n    return (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \  else\n    return temp[math.ceil(#temp/2)]\n  end\nend", "  local temp={}\n\
    \  for _,v in ipairs(l) do\n    table.insert(temp,v)\n  end\n  table.sort(temp)\n\
    \  if math.fmod(#temp,2)==0 then\n    return (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \  else\n    return temp[math.ceil(#temp/2)]\n  end\nend", "    local temp={}\n\
    \    for _,v in ipairs(l) do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n\
    \    if math.fmod(#temp,2)==0 then\n        return (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \    else\n        return temp[math.ceil(#temp/2)]\n    end\nend", "  local temp={}\n\
    \  for _,v in ipairs(l) do\n    table.insert(temp,v)\n  end\n  table.sort(temp)\n\
    \  if math.fmod(#temp,2)==0 then\n    return (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \  else\n    return temp[math.ceil(#temp/2)]\n  end\nend", "    local temp={}\n\
    \    for _,v in ipairs(l) do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n\
    \    if #temp%2==1 then\n        return temp[math.ceil(#temp/2)]\n    else\n \
    \       return (temp[#temp/2]+temp[#temp/2+1])/2\n    end\nend", "  local tmp\
    \ = {}\n  for _, v in ipairs(l) do\n    table.insert(tmp, v)\n  end\n  table.sort(tmp)\n\
    \  if #tmp % 2 == 0 then\n    return (tmp[#tmp/2] + tmp[(#tmp/2)+1]) / 2\n  else\n\
    \    return tmp[math.ceil(#tmp/2)]\n  end\nend", "\tlocal n = #l\n\tif n == 0\
    \ then\n\t\treturn nil\n\tend\n\ttable.sort(l)\n\tif n % 2 == 0 then\n\t\treturn\
    \ (l[n/2] + l[n/2+1]) / 2\n\telse\n\t\treturn l[(n+1)/2]\n\tend\nend", "  local\
    \ m = #l\n  if m == 0 then return 0 end\n  if m == 1 then return l[1] end\n  table.sort(l)\n\
    \  if m % 2 == 0 then\n    return (l[m/2] + l[m/2+1]) / 2\n  else\n    return\
    \ l[math.ceil(m/2)]\n  end\nend", "    local temp={}\n    for _,v in ipairs(l)\
    \ do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n    if #temp%2==1\
    \ then\n        return temp[(#temp+1)/2]\n    else\n        return (temp[#temp/2]+temp[#temp/2+1])/2\n\
    \    end\nend", "\tlocal m = #l\n\tif m == 0 then return nil end\n\ttable.sort(l)\n\
    \tif m % 2 == 0 then\n\t\treturn (l[m/2] + l[m/2+1]) / 2\n\telse\n\t\treturn l[math.ceil(m/2)]\n\
    \tend\nend", "\tlocal temp={}\n\tfor _,v in ipairs(l) do\n\t\ttable.insert(temp,v)\n\
    \tend\n\ttable.sort(temp)\n\tif math.fmod(#temp,2)==0 then\n\t\treturn (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \telse\n\t\treturn temp[math.ceil(#temp/2)]\n\tend\nend", "    local temp={}\n\
    \    for _,v in ipairs(l) do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n\
    \    if #temp%2==1 then\n        return temp[math.ceil(#temp/2)]\n    else\n \
    \       return (temp[#temp/2]+temp[#temp/2+1])/2\n    end\nend", "  local t =\
    \ {}\n  for _, v in ipairs(l) do\n    t[#t+1] = v\n  end\n  table.sort(t)\n  if\
    \ #t % 2 == 0 then\n    return (t[#t/2] + t[#t/2+1]) / 2\n  else\n    return t[math.ceil(#t/2)]\n\
    \  end\nend", "\tlocal temp={}\n\tfor _,v in ipairs(l) do\n\t\ttable.insert(temp,v)\n\
    \tend\n\ttable.sort(temp)\n\tif math.fmod(#temp,2)==0 then\n\t\treturn (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \telse\n\t\treturn temp[math.ceil(#temp/2)]\n\tend\nend", "  local temp={}\n \
    \ for _,v in ipairs(l) do\n    table.insert(temp,v)\n  end\n  table.sort(temp)\n\
    \  if math.fmod(#temp,2)==0 then\n    return (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \  else\n    return temp[math.ceil(#temp/2)]\n  end\nend", "  local n = #l\n \
    \ if n == 0 then\n    return nil\n  elseif n == 1 then\n    return l[1]\n  else\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n      return (l[n/2] + l[n/2+1]) /\
    \ 2\n    else\n      return l[(n+1)/2]\n    end\n  end\nend", "  local tmp = {}\n\
    \  for _, v in ipairs(l) do\n    table.insert(tmp, v)\n  end\n  table.sort(tmp)\n\
    \  if #tmp % 2 == 0 then\n    return (tmp[#tmp/2] + tmp[(#tmp/2)+1]) / 2\n  else\n\
    \    return tmp[math.ceil(#tmp/2)]\n  end\nend", "    local temp={}\n    for _,v\
    \ in ipairs(l) do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n\
    \    if #temp%2==1 then\n        return temp[math.ceil(#temp/2)]\n    else\n \
    \       return (temp[#temp/2]+temp[#temp/2+1])/2\n    end\nend", "    local temp={}\n\
    \    for _,v in ipairs(l) do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n\
    \    if math.fmod(#temp,2)==0 then\n        return (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \    else\n        return temp[math.ceil(#temp/2)]\n    end\nend", "\tlocal n\
    \ = #l\n\tif n == 0 then\n\t\treturn nil\n\tend\n\tlocal m = math.floor(n / 2)\n\
    \tif n % 2 == 0 then\n\t\treturn (l[m] + l[m + 1]) / 2\n\telse\n\t\treturn l[m\
    \ + 1]\n\tend\nend", "\tlocal m = #l\n\tif m == 0 then return nil end\n\ttable.sort(l)\n\
    \tif m % 2 == 0 then\n\t\treturn (l[m/2] + l[m/2+1]) / 2\n\telse\n\t\treturn l[math.ceil(m/2)]\n\
    \tend\nend", "\tlocal n = #l\n\tif n == 0 then\n\t\treturn nil\n\tend\n\tif n\
    \ == 1 then\n\t\treturn l[1]\n\tend\n\ttable.sort(l)\n\tif n % 2 == 0 then\n\t\
    \treturn (l[n/2] + l[n/2+1]) / 2\n\telse\n\t\treturn l[(n+1)/2]\n\tend\nend",
  "    local temp={}\n    for _,v in ipairs(l) do\n        table.insert(temp,v)\n\
    \    end\n    table.sort(temp)\n    if #temp%2==1 then\n        return temp[math.ceil(#temp/2)]\n\
    \    else\n        return (temp[#temp/2]+temp[#temp/2+1])/2\n    end\nend", " \
    \   local m = #l\n    if m == 0 then\n        return nil\n    end\n    table.sort(l)\n\
    \    if m % 2 == 0 then\n        return (l[m/2] + l[m/2+1]) / 2\n    else\n  \
    \      return l[math.ceil(m/2)]\n    end\nend", "    local temp={}\n    for _,v\
    \ in ipairs(l) do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n\
    \    if math.fmod(#temp,2)==0 then\n        return (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \    else\n        return temp[math.ceil(#temp/2)]\n    end\nend", "  local n\
    \ = #l\n  if n == 0 then\n    return nil\n  elseif n == 1 then\n    return l[1]\n\
    \  else\n    local sorted = {}\n    for i, v in ipairs(l) do\n      sorted[i]\
    \ = v\n    end\n    table.sort(sorted)\n    if n % 2 == 0 then\n      return (sorted[n\
    \ / 2] + sorted[n / 2 + 1]) / 2\n    else\n      return sorted[(n + 1) / 2]\n\
    \    end\n  end\nend", "    local temp={}\n    for _,v in ipairs(l) do\n     \
    \   table.insert(temp,v)\n    end\n    table.sort(temp)\n    if #temp%2==1 then\n\
    \        return temp[math.ceil(#temp/2)]\n    else\n        return (temp[#temp/2]+temp[#temp/2+1])/2\n\
    \    end\nend", "    local temp={}\n    for _,v in ipairs(l) do\n        table.insert(temp,v)\n\
    \    end\n    table.sort(temp)\n    if #temp%2==1 then\n        return temp[math.ceil(#temp/2)]\n\
    \    else\n        return (temp[#temp/2]+temp[#temp/2+1])/2\n    end\nend", " \
    \   local n = #l\n    if n == 0 then\n        return nil\n    elseif n == 1 then\n\
    \        return l[1]\n    else\n        table.sort(l)\n        if n % 2 == 0 then\n\
    \            return (l[n/2] + l[n/2+1]) / 2\n        else\n            return\
    \ l[(n+1)/2]\n        end\n    end\nend", "    local temp={}\n    for _,v in ipairs(l)\
    \ do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n    if math.fmod(#temp,2)==0\
    \ then\n        return (temp[#temp/2]+temp[(#temp/2)+1])/2\n    else\n       \
    \ return temp[math.ceil(#temp/2)]\n    end\nend", "\tlocal t = {}\n\tfor _, v\
    \ in ipairs(l) do\n\t\tt[#t+1] = v\n\tend\n\ttable.sort(t)\n\tlocal n = #t\n\t\
    if n == 0 then\n\t\treturn 0\n\telseif n % 2 == 0 then\n\t\treturn (t[n/2] + t[n/2+1])\
    \ / 2\n\telse\n\t\treturn t[(n+1)/2]\n\tend\nend", "  local temp={}\n  for _,v\
    \ in ipairs(l) do\n    table.insert(temp,v)\n  end\n  table.sort(temp)\n  if math.fmod(#temp,2)==0\
    \ then\n    return (temp[#temp/2]+temp[(#temp/2)+1])/2\n  else\n    return temp[math.ceil(#temp/2)]\n\
    \  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  elseif n ==\
    \ 1 then\n    return l[1]\n  else\n    local m = math.floor(n / 2)\n    if n %\
    \ 2 == 0 then\n      return (l[m] + l[m + 1]) / 2\n    else\n      return l[m\
    \ + 1]\n    end\n  end\nend", "    local m = #l\n    if m == 0 then\n        return\
    \ nil\n    end\n    table.sort(l)\n    if m % 2 == 0 then\n        return (l[m/2]\
    \ + l[m/2+1]) / 2\n    else\n        return l[math.ceil(m/2)]\n    end\nend",
  "  local m = #l\n  if m == 0 then return nil end\n  table.sort(l)\n  if m % 2 ==\
    \ 0 then\n    return (l[m/2] + l[m/2+1]) / 2\n  else\n    return l[math.ceil(m/2)]\n\
    \  end\nend", "    local m = #l\n    if m == 0 then\n        return 0\n    end\n\
    \    table.sort(l)\n    if m % 2 == 0 then\n        return (l[m/2] + l[m/2+1])\
    \ / 2\n    else\n        return l[math.ceil(m/2)]\n    end\nend", "  local l2\
    \ = {}\n  for _, v in ipairs(l) do\n    l2[#l2+1] = v\n  end\n  table.sort(l2)\n\
    \  if #l2 % 2 == 0 then\n    return (l2[#l2/2] + l2[#l2/2+1]) / 2\n  else\n  \
    \  return l2[math.ceil(#l2/2)]\n  end\nend", "  local m = #l\n  if m == 0 then\
    \ return 0 end\n  local t = {}\n  for i = 1, m do t[i] = l[i] end\n  table.sort(t)\n\
    \  if m % 2 == 0 then\n    return (t[m/2] + t[m/2+1]) / 2\n  else\n    return\
    \ t[(m+1)/2]\n  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n\
    \  elseif n == 1 then\n    return l[1]\n  else\n    local s = sort(l)\n    if\
    \ n % 2 == 0 then\n      return (s[n/2] + s[n/2+1]) / 2\n    else\n      return\
    \ s[(n+1)/2]\n    end\n  end\nend", "    local temp={}\n    for _,v in ipairs(l)\
    \ do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n    -- If #temp\
    \ is odd, return middle element\n    if #temp%2==1 then\n        return temp[math.ceil(#temp/2)]\n\
    \    -- If #temp is even, return mean of middle elements\n    else\n        return\
    \ (temp[#temp/2] + temp[(#temp/2)+1]) / 2\n    end\nend", "    local n = #l\n\
    \    if n == 0 then\n        return nil\n    elseif n == 1 then\n        return\
    \ l[1]\n    else\n        table.sort(l)\n        if n % 2 == 0 then\n        \
    \    return (l[n/2] + l[n/2+1]) / 2\n        else\n            return l[(n+1)/2]\n\
    \        end\n    end\nend", "\tlocal m = #l\n\tif m == 0 then return nil end\n\
    \ttable.sort(l)\n\tif m % 2 == 0 then\n\t\treturn (l[m/2] + l[m/2+1]) / 2\n\t\
    else\n\t\treturn l[(m+1)/2]\n\tend\nend", "  local n = #l\n  if n == 0 then\n\
    \    return nil\n  elseif n == 1 then\n    return l[1]\n  else\n    local m =\
    \ math.floor(n / 2)\n    if n % 2 == 0 then\n      return (l[m] + l[m + 1]) /\
    \ 2\n    else\n      return l[m + 1]\n    end\n  end\nend", "    local temp={}\n\
    \    for _,v in ipairs(l) do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n\
    \    if #temp%2==1 then\n        return temp[math.ceil(#temp/2)]\n    else\n \
    \       return (temp[#temp/2]+temp[#temp/2+1])/2\n    end\nend", "    local temp={}\n\
    \    for _,v in ipairs(l) do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n\
    \    if #temp%2==1 then\n        return temp[math.ceil(#temp/2)]\n    else\n \
    \       return (temp[#temp/2]+temp[#temp/2+1])/2\n    end\nend", "\tlocal n =\
    \ #l\n\tif n == 0 then\n\t\treturn nil\n\tend\n\ttable.sort(l)\n\tif n % 2 ==\
    \ 0 then\n\t\treturn (l[n/2] + l[n/2+1]) / 2\n\telse\n\t\treturn l[math.ceil(n/2)]\n\
    \tend\nend", "\tlocal temp={}\n\tfor _,v in ipairs(l) do\n\t\ttable.insert(temp,v)\n\
    \tend\n\ttable.sort(temp)\n\tif math.fmod(#temp,2)==0 then\n\t\treturn (temp[#temp/2]+temp[(#temp/2)+1])/2\n\
    \telse\n\t\treturn temp[math.ceil(#temp/2)]\n\tend\nend", "  local n = #l\n  if\
    \ n == 0 then\n    return nil\n  elseif n == 1 then\n    return l[1]\n  else\n\
    \    local sorted = {}\n    for i, v in ipairs(l) do\n      table.insert(sorted,\
    \ v)\n    end\n    table.sort(sorted)\n    if n % 2 == 0 then\n      return (sorted[n\
    \ / 2] + sorted[n / 2 + 1]) / 2\n    else\n      return sorted[(n + 1) / 2]\n\
    \    end\n  end\nend", "\tlocal n = #l\n\tif n == 0 then\n\t\treturn nil\n\tend\n\
    \tlocal m = n/2\n\tif n % 2 == 0 then\n\t\treturn (l[m] + l[m+1])/2\n\telse\n\t\
    \treturn l[math.ceil(m)]\n\tend\nend", "    local temp={}\n    for _,v in ipairs(l)\
    \ do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n    if math.fmod(#temp,2)==0\
    \ then\n        return (temp[#temp/2]+temp[(#temp/2)+1])/2\n    else\n       \
    \ return temp[math.ceil(#temp/2)]\n    end\nend", "    local sorted = {}\n   \
    \ for _, v in ipairs(l) do\n        table.insert(sorted, v)\n    end\n    table.sort(sorted)\n\
    \    if #sorted % 2 == 0 then\n        return (sorted[#sorted/2] + sorted[#sorted/2+1])\
    \ / 2\n    else\n        return sorted[math.ceil(#sorted/2)]\n    end\nend", " \
    \ local m = #l\n  if m == 0 then return 0 end\n  table.sort(l)\n  if m % 2 ==\
    \ 0 then\n    return (l[m/2] + l[m/2+1]) / 2\n  else\n    return l[math.ceil(m/2)]\n\
    \  end\nend", "\tlocal m = #l\n\tif m == 0 then return nil end\n\ttable.sort(l)\n\
    \tif m % 2 == 0 then\n\t\treturn (l[m/2] + l[m/2+1]) / 2\n\telse\n\t\treturn l[(m+1)/2]\n\
    \tend\nend", "\tlocal m = #l\n\tif m == 0 then return nil end\n\tif m == 1 then\
    \ return l[1] end\n\ttable.sort(l)\n\tif m % 2 == 0 then\n\t\treturn (l[m/2] +\
    \ l[m/2+1]) / 2\n\telse\n\t\treturn l[math.ceil(m/2)]\n\tend\nend", "  local n\
    \ = #l\n  if n == 0 then\n    return nil\n  elseif n == 1 then\n    return l[1]\n\
    \  else\n    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n      return\
    \ (l[m] + l[m + 1]) / 2\n    else\n      return l[m + 1]\n    end\n  end\nend",
  "    local temp={}\n    for _,v in ipairs(l) do\n        table.insert(temp,v)\n\
    \    end\n    table.sort(temp)\n    if #temp%2==1 then\n        return temp[math.ceil(#temp/2)]\n\
    \    else\n        return (temp[#temp/2]+temp[#temp/2+1])/2\n    end\nend", " \
    \ local m = #l\n  if m == 0 then return nil end\n  table.sort(l)\n  if m % 2 ==\
    \ 0 then\n    return (l[m/2] + l[m/2+1]) / 2\n  else\n    return l[math.ceil(m/2)]\n\
    \  end\nend", "    local temp={}\n    for _,v in ipairs(l) do\n        table.insert(temp,v)\n\
    \    end\n    table.sort(temp)\n    if #temp%2==1 then\n        return temp[math.ceil(#temp/2)]\n\
    \    else\n        return (temp[#temp/2]+temp[#temp/2+1])/2\n    end\nend", "\t\
    local n = #l\n\tif n == 0 then\n\t\treturn nil\n\tend\n\tif n == 1 then\n\t\t\
    return l[1]\n\tend\n\tlocal m = math.floor(n / 2)\n\tif n % 2 == 0 then\n\t\t\
    return (l[m] + l[m + 1]) / 2\n\telse\n\t\treturn l[m + 1]\n\tend\nend", "  local\
    \ n = #l\n  if n == 0 then\n    return nil\n  elseif n == 1 then\n    return l[1]\n\
    \  else\n    local sorted = {}\n    for i, v in ipairs(l) do\n      table.insert(sorted,\
    \ v)\n    end\n    table.sort(sorted)\n    if n % 2 == 0 then\n      return (sorted[n\
    \ / 2] + sorted[n / 2 + 1]) / 2\n    else\n      return sorted[(n + 1) / 2]\n\
    \    end\n  end\nend", "\tlocal n = #l\n\tif n == 0 then\n\t\treturn nil\n\tend\n\
    \tlocal m = math.floor(n / 2)\n\tif n % 2 == 0 then\n\t\treturn (l[m] + l[m +\
    \ 1]) / 2\n\telse\n\t\treturn l[m + 1]\n\tend\nend", "    local temp={}\n    for\
    \ _,v in ipairs(l) do\n        table.insert(temp,v)\n    end\n    table.sort(temp)\n\
    \    if #temp%2==1 then\n        return temp[math.ceil(#temp/2)]\n    else\n \
    \       return (temp[#temp/2]+temp[#temp/2+1])/2\n    end\nend", "\tlocal n =\
    \ #l\n\tif n == 0 then\n\t\treturn nil\n\tend\n\ttable.sort(l)\n\tif n % 2 ==\
    \ 0 then\n\t\treturn (l[n/2] + l[n/2+1]) / 2\n\telse\n\t\treturn l[(n+1)/2]\n\t\
    end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
