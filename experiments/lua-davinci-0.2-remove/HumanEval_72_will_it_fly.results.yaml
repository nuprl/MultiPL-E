language: lua
name: HumanEval_72_will_it_fly
results:
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        return true\n    else\n        return false\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvbham6f3.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvbham6f3.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local is_palindrome = true\n    for i = 1, #q/2 do\n      if q[i] ~= q[#q-i+1]\
    \ then\n        is_palindrome = false\n        break\n      end\n    end\n   \
    \ return is_palindrome\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local i = 1\n    local j = #q\n    while i < j do\n      if q[i] ~= q[j]\
    \ then\n        return false\n      end\n      i = i + 1\n      j = j - 1\n  \
    \  end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local i = 1\n        local j = #q\n        while i < j do\n\
    \            if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    local len = #q\n    for i = 1, len do\n        sum = sum + q[i]\n\
    \    end\n    if sum > w then\n        return false\n    end\n    for i = 1, len/2\
    \ do\n        if q[i] ~= q[len-i+1] then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i, v in ipairs(q) do\n        sum = sum + v\n    end\n    if\
    \ sum <= w then\n        local is_palindrome = true\n        for i = 1, #q do\n\
    \            if q[i] ~= q[#q - i + 1] then\n                is_palindrome = false\n\
    \                break\n            end\n        end\n        return is_palindrome\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local i, j = 1, #q\n    while i < j do\n      if q[i] ~= q[j] then\n    \
    \    return false\n      end\n      i = i + 1\n      j = j - 1\n    end\n    return\
    \ true\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local i = 1\n    local j = #q\n    while i < j do\n      if q[i] ~= q[j]\
    \ then\n        return false\n      end\n      i = i + 1\n      j = j - 1\n  \
    \  end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  local len = #q\n  for i = 1, len do\n    sum = sum + q[i]\n  end\n\
    \  if sum > w then return false end\n  for i = 1, len / 2 do\n    if q[i] ~= q[len\
    \ - i + 1] then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local l = 1\n        local r = #q\n        while l < r do\n\
    \            if q[l] ~= q[r] then\n                return false\n            end\n\
    \            l = l + 1\n            r = r - 1\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local i = 1\n        local j = #q\n        while i < j do\n\
    \            if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i, v in ipairs(q) do\n    sum = sum + v\n  end\n  if sum > w\
    \ then\n    return false\n  end\n  local i = 1\n  local j = #q\n  while i < j\
    \ do\n    if q[i] ~= q[j] then\n      return false\n    end\n    i = i + 1\n \
    \   j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local i, j = 1, #q\n    while i < j do\n      if q[i] ~= q[j] then\n    \
    \    return false\n      end\n      i = i + 1\n      j = j - 1\n    end\n    return\
    \ true\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local i = 1\n    local j = #q\n    while i < j do\n      if q[i] ~= q[j]\
    \ then\n        return false\n      end\n      i = i + 1\n      j = j - 1\n  \
    \  end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local i = 1\n        local j = #q\n        while i < j do\n\
    \            if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local is_palindrome = true\n        for i = 1, #q do\n  \
    \          if q[i] ~= q[#q - i + 1] then\n                is_palindrome = false\n\
    \                break\n            end\n        end\n        return is_palindrome\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i, v in ipairs(q) do\n        sum = sum + v\n    end\n    if\
    \ sum <= w then\n        local i = 1\n        local j = #q\n        while i <\
    \ j do\n            if q[i] ~= q[j] then\n                return false\n     \
    \       end\n            i = i + 1\n            j = j - 1\n        end\n     \
    \   return true\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local i = 1\n        local j = #q\n        while i < j do\n\
    \            if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\tend\n\tif sum <= w then\n\
    \t\tlocal i = 1\n\t\tlocal j = #q\n\t\twhile i < j do\n\t\t\tif q[i] ~= q[j] then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\t\ti = i + 1\n\t\t\tj = j - 1\n\t\tend\n\t\
    \treturn true\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local i = 1\n    local j = #q\n    while i < j do\n      if q[i] ~= q[j]\
    \ then\n        return false\n      end\n      i = i + 1\n      j = j - 1\n  \
    \  end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i,v in ipairs(q) do\n    sum = sum + v\n  end\n  if sum > w then\n\
    \    return false\n  end\n  local i = 1\n  local j = #q\n  while i < j do\n  \
    \  if q[i] ~= q[j] then\n      return false\n    end\n    i = i + 1\n    j = j\
    \ - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local i = 1\n        local j = #q\n        while i < j do\n\
    \            if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local i = 1\n    local j = #q\n    while i < j do\n      if q[i] ~= q[j]\
    \ then\n        return false\n      end\n      i = i + 1\n      j = j - 1\n  \
    \  end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    for i = 1, #q do\n      if q[i] ~= q[#q - i + 1] then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  local i = 1\n  local j = #q\n  while i <= j do\n    if q[i] ~= q[j]\
    \ then\n      return false\n    end\n    sum = sum + q[i]\n    i = i + 1\n   \
    \ j = j - 1\n  end\n  return sum <= w\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    local len = #q\n    for i = 1, len do\n        sum = sum + q[i]\n\
    \    end\n    if sum > w then\n        return false\n    end\n    local i = 1\n\
    \    local j = len\n    while i < j do\n        if q[i] ~= q[j] then\n       \
    \     return false\n        end\n        i = i + 1\n        j = j - 1\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    local is_palindrome = true\n    for i = 1, #q do\n        sum =\
    \ sum + q[i]\n        if q[i] ~= q[#q - i + 1] then\n            is_palindrome\
    \ = false\n        end\n    end\n    return is_palindrome and sum <= w\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzmy1197r.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzmy1197r.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i, v in ipairs(q) do\n        sum = sum + v\n    end\n    if\
    \ sum <= w then\n        return true\n    else\n        return false\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2c_1vyyi.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2c_1vyyi.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    for i = 1, #q do\n      if q[i] ~= q[#q - i + 1] then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        return true\n    else\n        return false\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvbham6f3.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvbham6f3.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i, v in ipairs(q) do\n        sum = sum + v\n    end\n    if\
    \ sum <= w then\n        return true\n    else\n        return false\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2c_1vyyi.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2c_1vyyi.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i, v in ipairs(q) do\n    sum = sum + v\n  end\n  if sum > w\
    \ then\n    return false\n  end\n  local i = 1\n  local j = #q\n  while i < j\
    \ do\n    if q[i] ~= q[j] then\n      return false\n    end\n    i = i + 1\n \
    \   j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local i = 1\n    local j = #q\n    while i < j do\n      if q[i] ~= q[j]\
    \ then\n        return false\n      end\n      i = i + 1\n      j = j - 1\n  \
    \  end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local i = 1\n        local j = #q\n        while i < j do\n\
    \            if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local is_palindrome = true\n        for i = 1, #q do\n  \
    \          if q[i] ~= q[#q - i + 1] then\n                is_palindrome = false\n\
    \                break\n            end\n        end\n        return is_palindrome\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local i, j = 1, #q\n        while i < j do\n            if\
    \ q[i] ~= q[j] then\n                return false\n            end\n         \
    \   i = i + 1\n            j = j - 1\n        end\n        return true\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    local len = #q\n    for i = 1, len do\n        sum = sum + q[i]\n\
    \    end\n    if sum > w then\n        return false\n    end\n    for i = 1, len\
    \ do\n        if q[i] ~= q[len - i + 1] then\n            return false\n     \
    \   end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    for i = 1, #q do\n      if q[i] ~= q[#q - i + 1] then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    if\
    \ #q == 0 then\n        return true\n    end\n    local sum = 0\n    for i = 1,\
    \ #q do\n        sum = sum + q[i]\n    end\n    if sum > w then\n        return\
    \ false\n    end\n    local is_palindrome = true\n    for i = 1, #q do\n     \
    \   if q[i] ~= q[#q - i + 1] then\n            is_palindrome = false\n       \
    \     break\n        end\n    end\n    return is_palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local i = 1\n        local j = #q\n        while i < j do\n\
    \            if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local i = 1\n    local j = #q\n    while i < j do\n      if q[i] ~= q[j]\
    \ then\n        return false\n      end\n      i = i + 1\n      j = j - 1\n  \
    \  end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local i = 1\n    local j = #q\n    while i < j do\n      if q[i] ~= q[j]\
    \ then\n        return false\n      end\n      i = i + 1\n      j = j - 1\n  \
    \  end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for _, v in ipairs(q) do\n    sum = sum + v\n  end\n  if sum > w\
    \ then\n    return false\n  end\n  local i, j = 1, #q\n  while i < j do\n    if\
    \ q[i] ~= q[j] then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    for i = 1, #q/2 do\n      if q[i] ~= q[#q-i+1] then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    for i = 1, #q do\n      if q[i] ~= q[#q - i + 1] then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local i = 1\n        local j = #q\n        while i < j do\n\
    \            if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local i = 1\n        local j = #q\n        while i < j do\n\
    \            if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    local is_balanced = true\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n        if q[i] ~= q[#q - i + 1] then\n            is_balanced = false\n\
    \        end\n    end\n    return is_balanced and sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local i = 1\n        local j = #q\n        while i < j do\n\
    \            if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i, v in ipairs(q) do\n    sum = sum + v\n  end\n  if sum <= w\
    \ then\n    for i = 1, #q / 2 do\n      if q[i] ~= q[#q - i + 1] then\n      \
    \  return false\n      end\n    end\n    return true\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local i = 1\n    local j = #q\n    while i < j do\n      if q[i] ~= q[j]\
    \ then\n        return false\n      end\n      i = i + 1\n      j = j - 1\n  \
    \  end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local i = 1\n    local j = #q\n    while i < j do\n      if q[i] ~= q[j]\
    \ then\n        return false\n      end\n      i = i + 1\n      j = j - 1\n  \
    \  end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local i = 1\n        local j = #q\n        while i < j do\n\
    \            if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    local i = 1\n    local j = #q\n    while i <= j do\n        if\
    \ q[i] ~= q[j] then\n            return false\n        end\n        sum = sum\
    \ + q[i]\n        i = i + 1\n        j = j - 1\n    end\n    return sum <= w\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzmy1197r.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzmy1197r.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i,v in ipairs(q) do\n        sum = sum + v\n    end\n    if\
    \ sum <= w then\n        for i,v in ipairs(q) do\n            if q[i] ~= q[#q-i+1]\
    \ then\n                return false\n            end\n        end\n        return\
    \ true\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local i = 1\n        local j = #q\n        while i < j do\n\
    \            if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local r = {}\n    for i = 1, #q do\n      r[i] = q[#q - i + 1]\n    end\n\
    \    if q == r then\n      return true\n    end\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8q5lfou6.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8q5lfou6.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    local is_balanced = true\n    local i = 1\n    local j = #q\n \
    \   while i <= j do\n        if q[i] ~= q[j] then\n            is_balanced = false\n\
    \            break\n        end\n        sum = sum + q[i]\n        i = i + 1\n\
    \        j = j - 1\n    end\n    return is_balanced and sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    for i = 1, #q do\n      if q[i] ~= q[#q - i + 1] then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local i = 1\n    local j = #q\n    while i < j do\n      if q[i] ~= q[j]\
    \ then\n        return false\n      end\n      i = i + 1\n      j = j - 1\n  \
    \  end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for _, v in ipairs(q) do\n    sum = sum + v\n  end\n  if sum > w\
    \ then\n    return false\n  end\n  local i = 1\n  local j = #q\n  while i < j\
    \ do\n    if q[i] ~= q[j] then\n      return false\n    end\n    i = i + 1\n \
    \   j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i, v in ipairs(q) do\n        sum = sum + v\n    end\n    if\
    \ sum <= w then\n        local n = #q\n        for i = 1, n do\n            if\
    \ q[i] ~= q[n - i + 1] then\n                return false\n            end\n \
    \       end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q/2 do\n            if q[i] ~= q[#q - i + 1]\
    \ then\n                return false\n            end\n        end\n        return\
    \ true\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local i = 1\n        local j = #q\n        while i < j do\n\
    \            if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local i = 1\n    local j = #q\n    while i < j do\n      if q[i] ~= q[j]\
    \ then\n        return false\n      end\n      i = i + 1\n      j = j - 1\n  \
    \  end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i, v in ipairs(q) do\n        sum = sum + v\n    end\n    if\
    \ sum <= w and is_palindrome(q) then\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppzxbsrjl.lua:15:\
    \ attempt to call global 'is_palindrome' (a nil value)\nstack traceback:\n\t/tmp/tmppzxbsrjl.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmppzxbsrjl.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local i = 1\n        local j = #q\n        while i < j do\n\
    \            if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i, v in ipairs(q) do\n        sum = sum + v\n    end\n    if\
    \ sum <= w and is_palindrome(q) then\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppzxbsrjl.lua:15:\
    \ attempt to call global 'is_palindrome' (a nil value)\nstack traceback:\n\t/tmp/tmppzxbsrjl.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmppzxbsrjl.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i, v in ipairs(q) do\n        sum = sum + v\n    end\n    if\
    \ sum <= w and is_palindrome(q) then\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppzxbsrjl.lua:15:\
    \ attempt to call global 'is_palindrome' (a nil value)\nstack traceback:\n\t/tmp/tmppzxbsrjl.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmppzxbsrjl.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i, v in ipairs(q) do\n        sum = sum + v\n    end\n    if\
    \ sum <= w and is_palindrome(q) then\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppzxbsrjl.lua:15:\
    \ attempt to call global 'is_palindrome' (a nil value)\nstack traceback:\n\t/tmp/tmppzxbsrjl.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmppzxbsrjl.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q/2 do\n            if q[i] ~= q[#q - i + 1]\
    \ then\n                return false\n            end\n        end\n        return\
    \ true\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i, v in ipairs(q) do\n    sum = sum + v\n  end\n  if sum <= w\
    \ then\n    local q_reversed = {}\n    for i = #q, 1, -1 do\n      table.insert(q_reversed,\
    \ q[i])\n    end\n    if q_reversed == q then\n      return true\n    end\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_s0ugij.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy_s0ugij.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    for i = 1, #q do\n      if q[i] ~= q[#q - i + 1] then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i, v in ipairs(q) do\n        sum = sum + v\n    end\n    if\
    \ sum <= w and is_palindrome(q) then\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppzxbsrjl.lua:15:\
    \ attempt to call global 'is_palindrome' (a nil value)\nstack traceback:\n\t/tmp/tmppzxbsrjl.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmppzxbsrjl.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i, v in ipairs(q) do\n    sum = sum + v\n  end\n  return sum\
    \ <= w and is_palindrome(q)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsalkh4b3.lua:15:\
    \ attempt to call global 'is_palindrome' (a nil value)\nstack traceback:\n\t/tmp/tmpsalkh4b3.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpsalkh4b3.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q-i+1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i, v in ipairs(q) do\n    sum = sum + v\n  end\n  if sum <= w\
    \ then\n    local len = #q\n    for i = 1, len do\n      if q[i] ~= q[len - i\
    \ + 1] then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ function is_balanced(q)\n        local i, j = 1, #q\n        while i < j do\n\
    \            if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    local function sum(q)\n        local s = 0\n        for _, v in\
    \ ipairs(q) do\n            s = s + v\n        end\n        return s\n    end\n\
    \    return is_balanced(q) and sum(q) <= w\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local i = 1\n        local j = #q\n        while i < j do\n\
    \            if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i, v in ipairs(q) do\n        sum = sum + v\n    end\n    if\
    \ sum <= w and is_palindrome(q) then\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppzxbsrjl.lua:15:\
    \ attempt to call global 'is_palindrome' (a nil value)\nstack traceback:\n\t/tmp/tmppzxbsrjl.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmppzxbsrjl.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local i = 1\n        local j = #q\n        while i < j do\n\
    \            if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q/2 do\n            if q[i] ~= q[#q-i+1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  local i = 1\n  local j = #q\n  while i <= j do\n    if q[i] ~= q[j]\
    \ then\n      return false\n    end\n    sum = sum + q[i]\n    i = i + 1\n   \
    \ j = j - 1\n  end\n  return sum <= w\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    for i = 1, #q do\n      if q[i] ~= q[#q - i + 1] then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local i = 1\n        local j = #q\n        while i < j do\n\
    \            if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local i = 1\n        local j = #q\n        while i < j do\n\
    \            if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local i = 1\n    local j = #q\n    while i < j do\n      if q[i] ~= q[j]\
    \ then\n        return false\n      end\n      i = i + 1\n      j = j - 1\n  \
    \  end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local left = 1\n    local right = #q\n    while left < right do\n      if\
    \ q[left] ~= q[right] then\n        return false\n      end\n      left = left\
    \ + 1\n      right = right - 1\n    end\n    return true\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local i = 1\n        local j = #q\n        while i < j do\n\
    \            if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzmy1197r.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzmy1197r.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local is_palindrome = true\n        for i = 1, #q do\n  \
    \          if q[i] ~= q[#q - i + 1] then\n                is_palindrome = false\n\
    \                break\n            end\n        end\n        return is_palindrome\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local flag = true\n    for i = 1, #q/2 do\n      if q[i] ~= q[#q-i+1] then\n\
    \        flag = false\n        break\n      end\n    end\n    return flag\n  else\n\
    \    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local i = 1\n        local j = #q\n        while i < j do\n\
    \            if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local i = 1\n        local j = #q\n        while i < j do\n\
    \            if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    return\
    \ sum <= w and is_palindrome(q)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp60pkdbq_.lua:15:\
    \ attempt to call global 'is_palindrome' (a nil value)\nstack traceback:\n\t/tmp/tmp60pkdbq_.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmp60pkdbq_.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local i = 1\n        local j = #q\n        while i < j do\n\
    \            if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    for i = 1, #q do\n      if q[i] ~= q[#q - i + 1] then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local is_palindrome = true\n        for i = 1, #q do\n  \
    \          if q[i] ~= q[#q - i + 1] then\n                is_palindrome = false\n\
    \                break\n            end\n        end\n        return is_palindrome\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzmy1197r.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzmy1197r.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    if\
    \ #q == 0 then return true end\n    if q[1] > w then return false end\n    if\
    \ q[1] == w then return will_it_fly({}, w) end\n    return will_it_fly(q[2], w\
    \ - q[1])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwis56ll3.lua:11:\
    \ attempt to get length of local 'q' (a number value)\nstack traceback:\n\t/tmp/tmpwis56ll3.lua:11:\
    \ in function </tmp/tmpwis56ll3.lua:10>\n\t(tail call): ?\n\t/tmp/tmpwis56ll3.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local i = 1\n    local j = #q\n    while i < j do\n      if q[i] ~= q[j]\
    \ then\n        return false\n      end\n      i = i + 1\n      j = j - 1\n  \
    \  end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i, v in ipairs(q) do\n        sum = sum + v\n    end\n    if\
    \ sum <= w and is_palindrome(q) then\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppzxbsrjl.lua:15:\
    \ attempt to call global 'is_palindrome' (a nil value)\nstack traceback:\n\t/tmp/tmppzxbsrjl.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmppzxbsrjl.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i, v in ipairs(q) do\n        sum = sum + v\n    end\n    if\
    \ sum <= w and is_palindrome(q) then\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppzxbsrjl.lua:15:\
    \ attempt to call global 'is_palindrome' (a nil value)\nstack traceback:\n\t/tmp/tmppzxbsrjl.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmppzxbsrjl.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local q_reverse = {}\n    for i = #q, 1, -1 do\n      table.insert(q_reverse,\
    \ q[i])\n    end\n    for i = 1, #q do\n      if q[i] ~= q_reverse[i] then\n \
    \       return false\n      end\n    end\n    return true\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local i = 1\n    local j = #q\n    while i < j do\n      if q[i] ~= q[j]\
    \ then\n        return false\n      end\n      i = i + 1\n      j = j - 1\n  \
    \  end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    for i = 1, #q / 2 do\n      if q[i] ~= q[#q - i + 1] then\n        return\
    \ false\n      end\n    end\n    return true\n  end\n  return false\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local i = 1\n        local j = #q\n        while i < j do\n\
    \            if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  local len = #q\n  for i = 1, len do\n    sum = sum + q[i]\n  end\n\
    \  if sum > w then\n    return false\n  end\n  for i = 1, len do\n    if q[i]\
    \ ~= q[len - i + 1] then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local i = 1\n        local j = #q\n        while i < j do\n\
    \            if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    local len = #q\n    for i = 1, len do\n        sum = sum + q[i]\n\
    \    end\n    if sum > w then\n        return false\n    end\n    for i = 1, len\
    \ / 2 do\n        if q[i] ~= q[len - i + 1] then\n            return false\n \
    \       end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  local len = #q\n  for i = 1, len do\n    sum = sum + q[i]\n  end\n\
    \  if sum > w then\n    return false\n  end\n  for i = 1, len do\n    if q[i]\
    \ ~= q[len - i + 1] then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    local i = 1\n    local j = #q\n    while i <= j do\n        if\
    \ q[i] ~= q[j] then\n            return false\n        end\n        sum = sum\
    \ + q[i]\n        i = i + 1\n        j = j - 1\n    end\n    return sum <= w\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    for i = 1, #q do\n      if q[i] ~= q[#q - i + 1] then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i, v in ipairs(q) do\n    sum = sum + v\n  end\n  return sum\
    \ <= w and is_palindrome(q)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsalkh4b3.lua:15:\
    \ attempt to call global 'is_palindrome' (a nil value)\nstack traceback:\n\t/tmp/tmpsalkh4b3.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpsalkh4b3.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i, v in ipairs(q) do\n        sum = sum + v\n    end\n    if\
    \ sum <= w then\n        if #q == 1 then\n            return true\n        else\n\
    \            local left = 1\n            local right = #q\n            while left\
    \ < right do\n                if q[left] ~= q[right] then\n                  \
    \  return false\n                end\n                left = left + 1\n      \
    \          right = right - 1\n            end\n            return true\n     \
    \   end\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local i = 1\n    local j = #q\n    while i < j do\n      if q[i] ~= q[j]\
    \ then\n        return false\n      end\n      i = i + 1\n      j = j - 1\n  \
    \  end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local i = 1\n        local j = #q\n        while i < j do\n\
    \            if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local i = 1\n    local j = #q\n    while i < j do\n      if q[i] ~= q[j]\
    \ then\n        return false\n      end\n      i = i + 1\n      j = j - 1\n  \
    \  end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local q_reverse = {}\n        for i = #q, 1, -1 do\n    \
    \        table.insert(q_reverse, q[i])\n        end\n        if q_reverse == q\
    \ then\n            return true\n        end\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp07d5kkcr.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp07d5kkcr.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q / 2 do\n            if q[i] ~= q[#q - i + 1]\
    \ then\n                return false\n            end\n        end\n        return\
    \ true\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    local is_balanced = true\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n        if q[i] ~= q[#q - i + 1] then\n            is_balanced = false\n\
    \        end\n    end\n    return is_balanced and sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i, v in ipairs(q) do\n    sum = sum + v\n  end\n  if sum > w\
    \ then\n    return false\n  end\n  local i = 1\n  local j = #q\n  while i < j\
    \ do\n    if q[i] ~= q[j] then\n      return false\n    end\n    i = i + 1\n \
    \   j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for _, v in ipairs(q) do\n        sum = sum + v\n    end\n    if\
    \ sum > w then\n        return false\n    end\n    local i = 1\n    local j =\
    \ #q\n    while i < j do\n        if q[i] ~= q[j] then\n            return false\n\
    \        end\n        i = i + 1\n        j = j - 1\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzmy1197r.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzmy1197r.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i, v in ipairs(q) do\n        sum = sum + v\n    end\n    if\
    \ sum <= w then\n        return true\n    else\n        return false\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2c_1vyyi.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2c_1vyyi.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    for i = 1, #q do\n      if q[i] ~= q[#q - i + 1] then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    for i = 1, #q do\n      if q[i] ~= q[#q - i + 1] then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i, v in ipairs(q) do\n    sum = sum + v\n  end\n  if sum <= w\
    \ then\n    local q_reverse = {}\n    for i = #q, 1, -1 do\n      table.insert(q_reverse,\
    \ q[i])\n    end\n    if table.concat(q, \"\") == table.concat(q_reverse, \"\"\
    ) then\n      return true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local palindrome = true\n    for i = 1, #q/2 do\n      if q[i] ~= q[#q -\
    \ i + 1] then\n        palindrome = false\n      end\n    end\n    return palindrome\n\
    \  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i, v in ipairs(q) do\n        sum = sum + v\n    end\n    if\
    \ sum <= w then\n        if is_palindrome(q) then\n            return true\n \
    \       else\n            return false\n        end\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0u1hlkj9.lua:16:\
    \ attempt to call global 'is_palindrome' (a nil value)\nstack traceback:\n\t/tmp/tmp0u1hlkj9.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmp0u1hlkj9.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q/2 do\n            if q[i] ~= q[#q-i+1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local i = 1\n        local j = #q\n        while i < j do\n\
    \            if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  local len = #q\n  for i = 1, len do\n    sum = sum + q[i]\n  end\n\
    \  if sum > w then\n    return false\n  end\n  for i = 1, len do\n    if q[i]\
    \ ~= q[len - i + 1] then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local i = 1\n    local j = #q\n    while i < j do\n      if q[i] ~= q[j]\
    \ then\n        return false\n      end\n      i = i + 1\n      j = j - 1\n  \
    \  end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i, v in ipairs(q) do\n    sum = sum + v\n  end\n  if sum > w\
    \ then\n    return false\n  end\n  local n = #q\n  for i = 1, n do\n    if q[i]\
    \ ~= q[n - i + 1] then\n      return false\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    local is_balanced = true\n    for i = 1, #q do\n        sum = sum\
    \ + q[i]\n        if q[i] ~= q[#q - i + 1] then\n            is_balanced = false\n\
    \        end\n    end\n    return is_balanced and sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    if\
    \ #q == 0 then return true end\n    local sum = 0\n    for i = 1, #q do\n    \
    \    sum = sum + q[i]\n    end\n    if sum > w then return false end\n    local\
    \ i = 1\n    local j = #q\n    while i < j do\n        if q[i] ~= q[j] then return\
    \ false end\n        i = i + 1\n        j = j - 1\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local i = 1\n    local j = #q\n    while i < j do\n      if q[i] ~= q[j]\
    \ then\n        return false\n      end\n      i = i + 1\n      j = j - 1\n  \
    \  end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i, v in ipairs(q) do\n        sum = sum + v\n    end\n    if\
    \ sum <= w then\n        if #q == 0 then\n            return true\n        elseif\
    \ #q == 1 then\n            return true\n        elseif #q == 2 then\n       \
    \     return false\n        else\n            local first = q[1]\n           \
    \ local last = q[#q]\n            if first == last then\n                table.remove(q,\
    \ 1)\n                table.remove(q, #q)\n                return will_it_fly(q,\
    \ w)\n            else\n                return false\n            end\n      \
    \  end\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q/2 do\n            if q[i] ~= q[#q - i + 1]\
    \ then\n                return false\n            end\n        end\n        return\
    \ true\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local i = 1\n    local j = #q\n    while i < j do\n      if q[i] ~= q[j]\
    \ then\n        return false\n      end\n      i = i + 1\n      j = j - 1\n  \
    \  end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local i = 1\n        local j = #q\n        while i < j do\n\
    \            if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  local i = 1\n  local j = #q\n  while i <= j do\n    if q[i] ~= q[j]\
    \ then\n      return false\n    end\n    sum = sum + q[i]\n    i = i + 1\n   \
    \ j = j - 1\n  end\n  return sum <= w\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local i = 1\n    local j = #q\n    while i < j do\n      if q[i] ~= q[j]\
    \ then\n        return false\n      end\n      i = i + 1\n      j = j - 1\n  \
    \  end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local i = 1\n    local j = #q\n    while i < j do\n      if q[i] ~= q[j]\
    \ then\n        return false\n      end\n      i = i + 1\n      j = j - 1\n  \
    \  end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q/2 do\n            if q[i] ~= q[#q - i + 1]\
    \ then\n                return false\n            end\n        end\n        return\
    \ true\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    for i = 1, #q do\n      if q[i] ~= q[#q - i + 1] then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local palindrome = true\n    for i = 1, #q do\n      if q[i] ~= q[#q - i\
    \ + 1] then\n        palindrome = false\n      end\n    end\n    if palindrome\
    \ then\n      return true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local i, j = 1, #q\n    while i < j do\n      if q[i] ~= q[j] then\n    \
    \    return false\n      end\n      i = i + 1\n      j = j - 1\n    end\n    return\
    \ true\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local q_rev = {}\n        for i = #q, 1, -1 do\n        \
    \    table.insert(q_rev, q[i])\n        end\n        if q == q_rev then\n    \
    \        return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1d97c4ow.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1d97c4ow.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzmy1197r.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzmy1197r.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    local is_palindrome = true\n    local i = 1\n    local j = #q\n\
    \    while i < j do\n        if q[i] ~= q[j] then\n            is_palindrome =\
    \ false\n            break\n        end\n        i = i + 1\n        j = j - 1\n\
    \    end\n    for _, v in ipairs(q) do\n        sum = sum + v\n    end\n    return\
    \ is_palindrome and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local i, j = 1, #q\n    while i < j do\n      if q[i] ~= q[j] then\n    \
    \    return false\n      end\n      i = i + 1\n      j = j - 1\n    end\n    return\
    \ true\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    for i = 1, #q do\n      if q[i] ~= q[#q - i + 1] then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local i = 1\n    local j = #q\n    while i < j do\n      if q[i] ~= q[j]\
    \ then\n        return false\n      end\n      i = i + 1\n      j = j - 1\n  \
    \  end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i, v in ipairs(q) do\n        sum = sum + v\n    end\n    if\
    \ sum <= w then\n        local rev = {}\n        for i, v in ipairs(q) do\n  \
    \          rev[#q - i + 1] = v\n        end\n        for i, v in ipairs(q) do\n\
    \            if v ~= rev[i] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        local i = 1\n        local j = #q\n        while i < j do\n\
    \            if q[i] ~= q[j] then\n                return false\n            end\n\
    \            i = i + 1\n            j = j - 1\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i, v in ipairs(q) do\n    sum = sum + v\n  end\n  if sum <= w\
    \ then\n    local q_reverse = {}\n    for i = #q, 1, -1 do\n      table.insert(q_reverse,\
    \ q[i])\n    end\n    if q == q_reverse then\n      return true\n    end\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt2sxffvm.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt2sxffvm.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i, v in ipairs(q) do\n        sum = sum + v\n    end\n    return\
    \ sum <= w and is_palindrome(q)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1m6z3mk8.lua:15:\
    \ attempt to call global 'is_palindrome' (a nil value)\nstack traceback:\n\t/tmp/tmp1m6z3mk8.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmp1m6z3mk8.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    local i = 1\n    local j = #q\n    while i <= j do\n        if\
    \ q[i] ~= q[j] then\n            return false\n        end\n        sum = sum\
    \ + q[i]\n        i = i + 1\n        j = j - 1\n    end\n    return sum <= w\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i, v in ipairs(q) do\n        sum = sum + v\n    end\n    if\
    \ sum <= w then\n        local q_reversed = {}\n        for i = #q, 1, -1 do\n\
    \            table.insert(q_reversed, q[i])\n        end\n        return q ==\
    \ q_reversed\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ixg6y3r.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6ixg6y3r.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    local i = 1\n    local j = #q\n    while i <= j do\n        if\
    \ q[i] ~= q[j] then\n            return false\n        end\n        sum = sum\
    \ + q[i]\n        i = i + 1\n        j = j - 1\n    end\n    return sum <= w\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750468
