language: lua
name: HumanEval_19_sort_numbers
results:
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local numeral_list = {}\n  for numeral in numbers:gmatch(\"%S+\") do\n    if\
    \ numeral_map[numeral] then\n      table.insert(numeral_list, numeral_map[numeral])\n\
    \    end\n  end\n  table.sort(numeral_list)\n  local sorted_numbers = {}\n  for\
    \ _, numeral in ipairs(numeral_list) do\n    for numeral_name, numeral_value in\
    \ pairs(numeral_map) do\n      if numeral_value == numeral then\n        table.insert(sorted_numbers,\
    \ numeral_name)\n      end\n    end\n  end\n  return table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local nums = {}\n    for\
    \ num in numbers:gmatch(\"%w+\") do\n        table.insert(nums, num)\n    end\n\
    \    table.sort(nums)\n    return table.concat(nums, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kbwk02r.lua:18:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp3kbwk02r.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_to_number\
    \ = {\n    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n\
    \    five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n \
    \ }\n  local numbers_table = {}\n  for number in numbers:gmatch(\"%S+\") do\n\
    \    table.insert(numbers_table, numeral_to_number[number])\n  end\n  table.sort(numbers_table)\n\
    \  local numbers_sorted = {}\n  for _, number in ipairs(numbers_table) do\n  \
    \  for numeral, numeral_number in pairs(numeral_to_number) do\n      if number\
    \ == numeral_number then\n        table.insert(numbers_sorted, numeral)\n    \
    \  end\n    end\n  end\n  return table.concat(numbers_sorted, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local numeral_list = {}\n  for numeral in numbers:gmatch(\"%S+\") do\n    table.insert(numeral_list,\
    \ numeral_map[numeral])\n  end\n  table.sort(numeral_list)\n  local sorted_numbers\
    \ = {}\n  for _, numeral in ipairs(numeral_list) do\n    for name, value in pairs(numeral_map)\
    \ do\n      if value == numeral then\n        table.insert(sorted_numbers, name)\n\
    \      end\n    end\n  end\n  return table.concat(sorted_numbers, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        table.insert(nums, numeral_map[num])\n\
    \    end\n    table.sort(nums)\n    local sorted_numbers = {}\n    for _, num\
    \ in ipairs(nums) do\n        for numeral, value in pairs(numeral_map) do\n  \
    \          if value == num then\n                table.insert(sorted_numbers,\
    \ numeral)\n                break\n            end\n        end\n    end\n   \
    \ return table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ nums = {}\n\tfor num in numbers:gmatch(\"%S+\") do\n\t\tlocal numeral = numeral_map[num]\n\
    \t\tif numeral then\n\t\t\ttable.insert(nums, numeral)\n\t\tend\n\tend\n\ttable.sort(nums)\n\
    \tlocal numeral_list = {}\n\tfor _, num in ipairs(nums) do\n\t\ttable.insert(numeral_list,\
    \ num)\n\tend\n\treturn table.concat(numeral_list, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwepx5e47.lua:36:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpwepx5e47.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local numbers_table = {}\n  \
    \  for number in numbers:gmatch(\"%S+\") do\n        table.insert(numbers_table,\
    \ numeral_map[number])\n    end\n    table.sort(numbers_table)\n    local sorted_numbers\
    \ = {}\n    for _, number in ipairs(numbers_table) do\n        for numeral, numeral_number\
    \ in pairs(numeral_map) do\n            if number == numeral_number then\n   \
    \             table.insert(sorted_numbers, numeral)\n            end\n       \
    \ end\n    end\n    return table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ numeral_list = {}\n\tfor numeral in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(numeral_list,\
    \ numeral_map[numeral])\n\tend\n\ttable.sort(numeral_list)\n\tlocal sorted_numbers\
    \ = {}\n\tfor _, numeral in ipairs(numeral_list) do\n\t\tfor k, v in pairs(numeral_map)\
    \ do\n\t\t\tif v == numeral then\n\t\t\t\ttable.insert(sorted_numbers, k)\n\t\t\
    \t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local num_map = {\n    zero\
    \ = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n    five =\
    \ 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n  local\
    \ nums = {}\n  for num in numbers:gmatch(\"%S+\") do\n    nums[#nums + 1] = num_map[num]\n\
    \  end\n  table.sort(nums)\n  local result = {}\n  for _, num in ipairs(nums)\
    \ do\n    for num_str, num_val in pairs(num_map) do\n      if num == num_val then\n\
    \        result[#result + 1] = num_str\n        break\n      end\n    end\n  end\n\
    \  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local number_to_numeral\
    \ = {\n        [0] = 'zero',\n        [1] = 'one',\n        [2] = 'two',\n   \
    \     [3] = 'three',\n        [4] = 'four',\n        [5] = 'five',\n        [6]\
    \ = 'six',\n        [7] = 'seven',\n        [8] = 'eight',\n        [9] = 'nine'\n\
    \    }\n    local numbers_list = {}\n    for number in numbers:gmatch('%S+') do\n\
    \        table.insert(numbers_list, numeral_to_number[number])\n    end\n    table.sort(numbers_list)\n\
    \    local sorted_numbers = {}\n    for _, number in ipairs(numbers_list) do\n\
    \        table.insert(sorted_numbers, number_to_numeral[number])\n    end\n  \
    \  return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ numbers_table = {}\n\tfor number in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(numbers_table,\
    \ numeral_map[number])\n\tend\n\ttable.sort(numbers_table)\n\tlocal sorted_numbers\
    \ = {}\n\tfor _, number in ipairs(numbers_table) do\n\t\ttable.insert(sorted_numbers,\
    \ number)\n\tend\n\treturn table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1_7lwg9.lua:33:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpc1_7lwg9.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local numeral_list = {}\n  for numeral in numbers:gmatch(\"%S+\") do\n    table.insert(numeral_list,\
    \ numeral_map[numeral])\n  end\n  table.sort(numeral_list)\n  local sorted_numbers\
    \ = {}\n  for _, numeral in ipairs(numeral_list) do\n    for name, value in pairs(numeral_map)\
    \ do\n      if value == numeral then\n        table.insert(sorted_numbers, name)\n\
    \      end\n    end\n  end\n  return table.concat(sorted_numbers, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        table.insert(nums, numeral_map[num])\n\
    \    end\n    table.sort(nums)\n    local result = {}\n    for _, num in ipairs(nums)\
    \ do\n        for numeral, value in pairs(numeral_map) do\n            if value\
    \ == num then\n                table.insert(result, numeral)\n               \
    \ break\n            end\n        end\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_to_number\
    \ = {\n    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n\
    \    five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n \
    \ }\n  local number_to_numeral = {\n    [0] = 'zero',\n    [1] = 'one',\n    [2]\
    \ = 'two',\n    [3] = 'three',\n    [4] = 'four',\n    [5] = 'five',\n    [6]\
    \ = 'six',\n    [7] = 'seven',\n    [8] = 'eight',\n    [9] = 'nine'\n  }\n  local\
    \ numbers_table = {}\n  for number in numbers:gmatch('%S+') do\n    table.insert(numbers_table,\
    \ numeral_to_number[number])\n  end\n  table.sort(numbers_table)\n  local sorted_numbers\
    \ = {}\n  for _, number in ipairs(numbers_table) do\n    table.insert(sorted_numbers,\
    \ number_to_numeral[number])\n  end\n  return table.concat(sorted_numbers, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%w+\") do\n        table.insert(nums, numeral_map[num])\n\
    \    end\n    table.sort(nums)\n    local result = {}\n    for _, num in ipairs(nums)\
    \ do\n        for numeral, value in pairs(numeral_map) do\n            if value\
    \ == num then\n                table.insert(result, numeral)\n               \
    \ break\n            end\n        end\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_to_number\
    \ = {\n\t\tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\
    \t\tfive = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t\
    }\n\tlocal number_to_numeral = {\n\t\t[0] = 'zero',\n\t\t[1] = 'one',\n\t\t[2]\
    \ = 'two',\n\t\t[3] = 'three',\n\t\t[4] = 'four',\n\t\t[5] = 'five',\n\t\t[6]\
    \ = 'six',\n\t\t[7] = 'seven',\n\t\t[8] = 'eight',\n\t\t[9] = 'nine'\n\t}\n\t\
    local numbers_table = {}\n\tfor number in numbers:gmatch('%S+') do\n\t\ttable.insert(numbers_table,\
    \ numeral_to_number[number])\n\tend\n\ttable.sort(numbers_table)\n\tlocal sorted_numbers\
    \ = {}\n\tfor _, number in ipairs(numbers_table) do\n\t\ttable.insert(sorted_numbers,\
    \ number_to_numeral[number])\n\tend\n\treturn table.concat(sorted_numbers, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal nums = {}\n\tfor num\
    \ in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(nums, num)\n\tend\n\ttable.sort(nums)\n\
    \treturn table.concat(nums, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5koj4678.lua:18:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp5koj4678.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ nums = {}\n\tfor num in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(nums, numeral_map[num])\n\
    \tend\n\ttable.sort(nums)\n\tlocal sorted_numbers = {}\n\tfor _, num in ipairs(nums)\
    \ do\n\t\tfor numeral, value in pairs(numeral_map) do\n\t\t\tif value == num then\n\
    \t\t\t\ttable.insert(sorted_numbers, numeral)\n\t\t\t\tbreak\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_to_number\
    \ = {\n    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n\
    \    five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n \
    \ }\n  local number_to_numeral = {\n    [0] = 'zero',\n    [1] = 'one',\n    [2]\
    \ = 'two',\n    [3] = 'three',\n    [4] = 'four',\n    [5] = 'five',\n    [6]\
    \ = 'six',\n    [7] = 'seven',\n    [8] = 'eight',\n    [9] = 'nine'\n  }\n  local\
    \ numbers_table = {}\n  for numeral in numbers:gmatch('%w+') do\n    table.insert(numbers_table,\
    \ numeral_to_number[numeral])\n  end\n  table.sort(numbers_table)\n  local sorted_numbers\
    \ = {}\n  for _, number in ipairs(numbers_table) do\n    table.insert(sorted_numbers,\
    \ number_to_numeral[number])\n  end\n  return table.concat(sorted_numbers, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        local n = numeral_map[num]\n        if\
    \ n then\n            table.insert(nums, n)\n        end\n    end\n    table.sort(nums)\n\
    \    local numeral_map_inv = {}\n    for k, v in pairs(numeral_map) do\n     \
    \   numeral_map_inv[v] = k\n    end\n    local sorted_numbers = {}\n    for _,\
    \ n in ipairs(nums) do\n        table.insert(sorted_numbers, numeral_map_inv[n])\n\
    \    end\n    return table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local number_to_numeral\
    \ = {\n        [0] = 'zero',\n        [1] = 'one',\n        [2] = 'two',\n   \
    \     [3] = 'three',\n        [4] = 'four',\n        [5] = 'five',\n        [6]\
    \ = 'six',\n        [7] = 'seven',\n        [8] = 'eight',\n        [9] = 'nine'\n\
    \    }\n    local numbers_list = {}\n    for number in numbers:gmatch('%w+') do\n\
    \        table.insert(numbers_list, numeral_to_number[number])\n    end\n    table.sort(numbers_list)\n\
    \    local sorted_numbers = {}\n    for _, number in ipairs(numbers_list) do\n\
    \        table.insert(sorted_numbers, number_to_numeral[number])\n    end\n  \
    \  return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ numeral_list = {}\n\tfor numeral in numbers:gmatch(\"%S+\") do\n\t\tlocal value\
    \ = numeral_map[numeral]\n\t\tif value then\n\t\t\ttable.insert(numeral_list,\
    \ value)\n\t\tend\n\tend\n\ttable.sort(numeral_list)\n\tlocal sorted_numbers =\
    \ {}\n\tfor _, value in ipairs(numeral_list) do\n\t\ttable.insert(sorted_numbers,\
    \ numeral_map[value])\n\tend\n\treturn table.concat(sorted_numbers, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn70qft01.lua:36:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpn70qft01.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    ['zero'] = 0,\n    ['one'] = 1,\n    ['two'] = 2,\n    ['three'] = 3,\n \
    \   ['four'] = 4,\n    ['five'] = 5,\n    ['six'] = 6,\n    ['seven'] = 7,\n \
    \   ['eight'] = 8,\n    ['nine'] = 9\n  }\n  local nums = {}\n  for num in numbers:gmatch('%S+')\
    \ do\n    table.insert(nums, numeral_map[num])\n  end\n  table.sort(nums)\n  local\
    \ sorted_numbers = {}\n  for _, num in ipairs(nums) do\n    for numeral, numeral_num\
    \ in pairs(numeral_map) do\n      if numeral_num == num then\n        table.insert(sorted_numbers,\
    \ numeral)\n      end\n    end\n  end\n  return table.concat(sorted_numbers, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local number_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local number_list = {}\n    for\
    \ number in numbers:gmatch(\"%S+\") do\n        table.insert(number_list, number_map[number])\n\
    \    end\n    table.sort(number_list)\n    local sorted_numbers = {}\n    for\
    \ _, number in ipairs(number_list) do\n        for name, value in pairs(number_map)\
    \ do\n            if value == number then\n                table.insert(sorted_numbers,\
    \ name)\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local numeral_list = {}\n  for numeral in numbers:gmatch(\"%S+\") do\n    table.insert(numeral_list,\
    \ numeral_map[numeral])\n  end\n  table.sort(numeral_list)\n  local sorted_numbers\
    \ = {}\n  for _, numeral in ipairs(numeral_list) do\n    table.insert(sorted_numbers,\
    \ numeral)\n  end\n  return table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb9w5te55.lua:33:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpb9w5te55.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal num_map = {\n\t\t\
    zero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ num_list = {}\n\tfor num in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(num_list,\
    \ num_map[num])\n\tend\n\ttable.sort(num_list)\n\tlocal sorted_numbers = {}\n\t\
    for _, num in ipairs(num_list) do\n\t\ttable.insert(sorted_numbers, num)\n\tend\n\
    \treturn table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp995i429r.lua:33:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmp995i429r.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local numbers_table = {}\n\
    \    for number in numbers:gmatch(\"%S+\") do\n        table.insert(numbers_table,\
    \ numeral_to_number[number])\n    end\n    table.sort(numbers_table)\n    local\
    \ sorted_numbers = {}\n    for _, number in ipairs(numbers_table) do\n       \
    \ table.insert(sorted_numbers, number)\n    end\n    return table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjkloc8v.lua:33:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpmjkloc8v.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_to_number\
    \ = {\n\t\tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\
    \t\tfive = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t\
    }\n\tlocal numbers_table = {}\n\tfor number in numbers:gmatch(\"%S+\") do\n\t\t\
    table.insert(numbers_table, numeral_to_number[number])\n\tend\n\ttable.sort(numbers_table)\n\
    \tlocal sorted_numbers = {}\n\tfor _, number in ipairs(numbers_table) do\n\t\t\
    table.insert(sorted_numbers, number)\n\tend\n\treturn table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgq_2bz_2.lua:33:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpgq_2bz_2.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal nums = {}\n\tfor num\
    \ in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(nums, num)\n\tend\n\ttable.sort(nums)\n\
    \treturn table.concat(nums, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5koj4678.lua:18:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp5koj4678.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local nums = {}\n  for num in numbers:gmatch(\"%S+\") do\n    nums[#nums +\
    \ 1] = numeral_map[num]\n  end\n  table.sort(nums)\n  local result = {}\n  for\
    \ _, num in ipairs(nums) do\n    for numeral, value in pairs(numeral_map) do\n\
    \      if value == num then\n        result[#result + 1] = numeral\n        break\n\
    \      end\n    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local num_list = {}\n  local\
    \ num_map = {\n    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n   \
    \ four = 4,\n    five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n   \
    \ nine = 9\n  }\n  for num in numbers:gmatch(\"%S+\") do\n    table.insert(num_list,\
    \ num_map[num])\n  end\n  table.sort(num_list)\n  local sorted_numbers = {}\n\
    \  for _, num in ipairs(num_list) do\n    for k, v in pairs(num_map) do\n    \
    \  if v == num then\n        table.insert(sorted_numbers, k)\n      end\n    end\n\
    \  end\n  return table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_to_number\
    \ = {\n\t\tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\
    \t\tfive = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t\
    }\n\tlocal number_to_numeral = {\n\t\t[0] = 'zero',\n\t\t[1] = 'one',\n\t\t[2]\
    \ = 'two',\n\t\t[3] = 'three',\n\t\t[4] = 'four',\n\t\t[5] = 'five',\n\t\t[6]\
    \ = 'six',\n\t\t[7] = 'seven',\n\t\t[8] = 'eight',\n\t\t[9] = 'nine'\n\t}\n\t\
    local numbers_table = {}\n\tfor number in numbers:gmatch('%S+') do\n\t\ttable.insert(numbers_table,\
    \ numeral_to_number[number])\n\tend\n\ttable.sort(numbers_table)\n\tlocal sorted_numbers\
    \ = {}\n\tfor _, number in ipairs(numbers_table) do\n\t\ttable.insert(sorted_numbers,\
    \ number_to_numeral[number])\n\tend\n\treturn table.concat(sorted_numbers, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%w+\") do\n        local n = numeral_map[num]\n        if\
    \ n then\n            table.insert(nums, n)\n        end\n    end\n    table.sort(nums)\n\
    \    local sorted = {}\n    for _, n in ipairs(nums) do\n        table.insert(sorted,\
    \ tostring(n))\n    end\n    return table.concat(sorted, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfu05amyo.lua:36:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpfu05amyo.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal nums = {}\n\tfor num\
    \ in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(nums, num)\n\tend\n\ttable.sort(nums)\n\
    \treturn table.concat(nums, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5koj4678.lua:18:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp5koj4678.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_to_number\
    \ = {\n\t\tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\
    \t\tfive = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t\
    }\n\tlocal numbers_table = {}\n\tfor number in numbers:gmatch(\"%S+\") do\n\t\t\
    table.insert(numbers_table, numeral_to_number[number])\n\tend\n\ttable.sort(numbers_table)\n\
    \tlocal sorted_numbers = {}\n\tfor _, number in ipairs(numbers_table) do\n\t\t\
    table.insert(sorted_numbers, number)\n\tend\n\treturn table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgq_2bz_2.lua:33:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpgq_2bz_2.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local numeral_list = {}\n  for numeral in numbers:gmatch(\"%S+\") do\n    local\
    \ number = numeral_map[numeral]\n    if number then\n      table.insert(numeral_list,\
    \ number)\n    end\n  end\n  table.sort(numeral_list)\n  local sorted_numbers\
    \ = {}\n  for _, number in ipairs(numeral_list) do\n    for numeral, n in pairs(numeral_map)\
    \ do\n      if n == number then\n        table.insert(sorted_numbers, numeral)\n\
    \        break\n      end\n    end\n  end\n  return table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local number_to_numeral\
    \ = {\n        [0] = 'zero',\n        [1] = 'one',\n        [2] = 'two',\n   \
    \     [3] = 'three',\n        [4] = 'four',\n        [5] = 'five',\n        [6]\
    \ = 'six',\n        [7] = 'seven',\n        [8] = 'eight',\n        [9] = 'nine'\n\
    \    }\n    local numbers_table = {}\n    for number in numbers:gmatch('%w+')\
    \ do\n        table.insert(numbers_table, numeral_to_number[number])\n    end\n\
    \    table.sort(numbers_table)\n    local sorted_numbers = {}\n    for _, number\
    \ in ipairs(numbers_table) do\n        table.insert(sorted_numbers, number_to_numeral[number])\n\
    \    end\n    return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        table.insert(nums, numeral_map[num])\n\
    \    end\n    table.sort(nums)\n    local sorted_numbers = {}\n    for _, num\
    \ in ipairs(nums) do\n        for numeral, value in pairs(numeral_map) do\n  \
    \          if value == num then\n                table.insert(sorted_numbers,\
    \ numeral)\n                break\n            end\n        end\n    end\n   \
    \ return table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ numeral_list = {}\n\tfor numeral in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(numeral_list,\
    \ numeral_map[numeral])\n\tend\n\ttable.sort(numeral_list)\n\tlocal sorted_numbers\
    \ = {}\n\tfor _, numeral in ipairs(numeral_list) do\n\t\tfor k, v in pairs(numeral_map)\
    \ do\n\t\t\tif v == numeral then\n\t\t\t\ttable.insert(sorted_numbers, k)\n\t\t\
    \t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn table.concat(sorted_numbers, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        table.insert(nums, numeral_map[num])\n\
    \    end\n    table.sort(nums)\n    local result = {}\n    for _, num in ipairs(nums)\
    \ do\n        for numeral, value in pairs(numeral_map) do\n            if value\
    \ == num then\n                table.insert(result, numeral)\n               \
    \ break\n            end\n        end\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        local num_val = numeral_map[num]\n  \
    \      if num_val then\n            table.insert(nums, num_val)\n        end\n\
    \    end\n    table.sort(nums)\n    local sorted_numbers = {}\n    for _, num\
    \ in ipairs(nums) do\n        table.insert(sorted_numbers, num)\n    end\n   \
    \ return table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo1rm7rue.lua:36:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpo1rm7rue.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ numeral_map_reverse = {\n\t\t[0] = 'zero',\n\t\t[1] = 'one',\n\t\t[2] = 'two',\n\
    \t\t[3] = 'three',\n\t\t[4] = 'four',\n\t\t[5] = 'five',\n\t\t[6] = 'six',\n\t\
    \t[7] = 'seven',\n\t\t[8] = 'eight',\n\t\t[9] = 'nine'\n\t}\n\tlocal numbers_table\
    \ = {}\n\tfor number in numbers:gmatch('%S+') do\n\t\ttable.insert(numbers_table,\
    \ number)\n\tend\n\ttable.sort(numbers_table, function(a, b)\n\t\treturn numeral_map[a]\
    \ < numeral_map[b]\n\tend)\n\tlocal sorted_numbers = {}\n\tfor _, number in ipairs(numbers_table)\
    \ do\n\t\ttable.insert(sorted_numbers, numeral_map_reverse[numeral_map[number]])\n\
    \tend\n\treturn table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local nums = {}\n  for num in numbers:gmatch(\"%S+\") do\n    table.insert(nums,\
    \ numeral_map[num])\n  end\n  table.sort(nums)\n  local sorted_numbers = {}\n\
    \  for _, num in ipairs(nums) do\n    for numeral, value in pairs(numeral_map)\
    \ do\n      if value == num then\n        table.insert(sorted_numbers, numeral)\n\
    \      end\n    end\n  end\n  return table.concat(sorted_numbers, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local number_to_numeral\
    \ = {\n        [0] = 'zero',\n        [1] = 'one',\n        [2] = 'two',\n   \
    \     [3] = 'three',\n        [4] = 'four',\n        [5] = 'five',\n        [6]\
    \ = 'six',\n        [7] = 'seven',\n        [8] = 'eight',\n        [9] = 'nine'\n\
    \    }\n    local numbers_table = {}\n    for number in numbers:gmatch('%a+')\
    \ do\n        table.insert(numbers_table, numeral_to_number[number])\n    end\n\
    \    table.sort(numbers_table)\n    local sorted_numbers = {}\n    for _, number\
    \ in ipairs(numbers_table) do\n        table.insert(sorted_numbers, number_to_numeral[number])\n\
    \    end\n    return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_to_number\
    \ = {\n\t\tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\
    \t\tfive = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t\
    }\n\tlocal numbers_table = {}\n\tfor number in numbers:gmatch(\"%S+\") do\n\t\t\
    table.insert(numbers_table, numeral_to_number[number])\n\tend\n\ttable.sort(numbers_table)\n\
    \tlocal sorted_numbers = {}\n\tfor _, number in ipairs(numbers_table) do\n\t\t\
    table.insert(sorted_numbers, number)\n\tend\n\treturn table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgq_2bz_2.lua:33:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpgq_2bz_2.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ nums = {}\n\tfor num in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(nums, numeral_map[num])\n\
    \tend\n\ttable.sort(nums)\n\tlocal result = {}\n\tfor _, num in ipairs(nums) do\n\
    \t\ttable.insert(result, num)\n\tend\n\treturn table.concat(result, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvl4kfyyc.lua:33:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpvl4kfyyc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_to_number\
    \ = {\n    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n\
    \    five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n \
    \ }\n  local number_to_numeral = {\n    [0] = 'zero',\n    [1] = 'one',\n    [2]\
    \ = 'two',\n    [3] = 'three',\n    [4] = 'four',\n    [5] = 'five',\n    [6]\
    \ = 'six',\n    [7] = 'seven',\n    [8] = 'eight',\n    [9] = 'nine'\n  }\n  local\
    \ numbers_list = {}\n  for number in numbers:gmatch('%a+') do\n    table.insert(numbers_list,\
    \ numeral_to_number[number])\n  end\n  table.sort(numbers_list)\n  local sorted_numbers\
    \ = {}\n  for _, number in ipairs(numbers_list) do\n    table.insert(sorted_numbers,\
    \ number_to_numeral[number])\n  end\n  return table.concat(sorted_numbers, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_to_number\
    \ = {\n\t\tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\
    \t\tfive = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t\
    }\n\tlocal number_to_numeral = {\n\t\t[0] = 'zero',\n\t\t[1] = 'one',\n\t\t[2]\
    \ = 'two',\n\t\t[3] = 'three',\n\t\t[4] = 'four',\n\t\t[5] = 'five',\n\t\t[6]\
    \ = 'six',\n\t\t[7] = 'seven',\n\t\t[8] = 'eight',\n\t\t[9] = 'nine'\n\t}\n\t\
    local numbers_table = {}\n\tfor number in numbers:gmatch('%S+') do\n\t\ttable.insert(numbers_table,\
    \ numeral_to_number[number])\n\tend\n\ttable.sort(numbers_table)\n\tlocal sorted_numbers\
    \ = {}\n\tfor _, number in ipairs(numbers_table) do\n\t\ttable.insert(sorted_numbers,\
    \ number_to_numeral[number])\n\tend\n\treturn table.concat(sorted_numbers, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_to_number\
    \ = {\n\t\tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\
    \t\tfive = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t\
    }\n\tlocal numbers_table = {}\n\tfor number in numbers:gmatch(\"%S+\") do\n\t\t\
    table.insert(numbers_table, numeral_to_number[number])\n\tend\n\ttable.sort(numbers_table)\n\
    \tlocal sorted_numbers = {}\n\tfor _, number in ipairs(numbers_table) do\n\t\t\
    table.insert(sorted_numbers, number)\n\tend\n\treturn table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgq_2bz_2.lua:33:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpgq_2bz_2.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numbers_table =\
    \ {}\n    for number in numbers:gmatch(\"%S+\") do\n        table.insert(numbers_table,\
    \ number)\n    end\n    table.sort(numbers_table)\n    return table.concat(numbers_table,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfk5dz1q4.lua:18:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpfk5dz1q4.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local numeral_list = {}\n   \
    \ for numeral in numbers:gmatch(\"%S+\") do\n        table.insert(numeral_list,\
    \ numeral_map[numeral])\n    end\n    table.sort(numeral_list)\n    local sorted_numbers\
    \ = {}\n    for _, numeral in ipairs(numeral_list) do\n        for name, value\
    \ in pairs(numeral_map) do\n            if value == numeral then\n           \
    \     table.insert(sorted_numbers, name)\n                break\n            end\n\
    \        end\n    end\n    return table.concat(sorted_numbers, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numbers_table = {}\n\
    \tlocal numbers_table_index = 1\n\tfor number in string.gmatch(numbers, \"%S+\"\
    ) do\n\t\tnumbers_table[numbers_table_index] = number\n\t\tnumbers_table_index\
    \ = numbers_table_index + 1\n\tend\n\ttable.sort(numbers_table)\n\treturn table.concat(numbers_table,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplkysle3u.lua:20:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmplkysle3u.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        table.insert(nums, numeral_map[num])\n\
    \    end\n    table.sort(nums)\n    local result = {}\n    for _, num in ipairs(nums)\
    \ do\n        for k, v in pairs(numeral_map) do\n            if v == num then\n\
    \                table.insert(result, k)\n                break\n            end\n\
    \        end\n    end\n    return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local numeral_list = {}\n   \
    \ for numeral in numbers:gmatch(\"%S+\") do\n        table.insert(numeral_list,\
    \ numeral_map[numeral])\n    end\n    table.sort(numeral_list)\n    local result\
    \ = {}\n    for _, numeral in ipairs(numeral_list) do\n        for k, v in pairs(numeral_map)\
    \ do\n            if v == numeral then\n                table.insert(result, k)\n\
    \                break\n            end\n        end\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local numbers_table = {}\n\
    \    for numeral in numbers:gmatch(\"%S+\") do\n        table.insert(numbers_table,\
    \ numeral_to_number[numeral])\n    end\n    table.sort(numbers_table)\n    local\
    \ sorted_numbers = {}\n    for _, number in ipairs(numbers_table) do\n       \
    \ table.insert(sorted_numbers, number)\n    end\n    return table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ejpgmuj.lua:33:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmp0ejpgmuj.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local numeral_list = {}\n  for numeral in numbers:gmatch(\"%a+\") do\n    table.insert(numeral_list,\
    \ numeral_map[numeral])\n  end\n  table.sort(numeral_list)\n  local sorted_numbers\
    \ = {}\n  for _, numeral in ipairs(numeral_list) do\n    for k, v in pairs(numeral_map)\
    \ do\n      if v == numeral then\n        table.insert(sorted_numbers, k)\n  \
    \    end\n    end\n  end\n  return table.concat(sorted_numbers, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local numeral_list = {}\n  for numeral in numbers:gmatch(\"%S+\") do\n    table.insert(numeral_list,\
    \ numeral_map[numeral])\n  end\n  table.sort(numeral_list)\n  local sorted_numbers\
    \ = \"\"\n  for _, numeral in ipairs(numeral_list) do\n    for k, v in pairs(numeral_map)\
    \ do\n      if v == numeral then\n        sorted_numbers = sorted_numbers .. k\
    \ .. \" \"\n      end\n    end\n  end\n  return sorted_numbers:sub(1, -2)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local numbers_table = {}\n\
    \    for number in numbers:gmatch(\"%S+\") do\n        table.insert(numbers_table,\
    \ numeral_to_number[number])\n    end\n    table.sort(numbers_table)\n    local\
    \ sorted_numbers = {}\n    for _, number in ipairs(numbers_table) do\n       \
    \ table.insert(sorted_numbers, number)\n    end\n    return table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjkloc8v.lua:33:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpmjkloc8v.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local number_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local number_list = {}\n    for\
    \ number in numbers:gmatch(\"%S+\") do\n        table.insert(number_list, number_map[number])\n\
    \    end\n    table.sort(number_list)\n    local sorted_numbers = {}\n    for\
    \ _, number in ipairs(number_list) do\n        for number_name, number_value in\
    \ pairs(number_map) do\n            if number == number_value then\n         \
    \       table.insert(sorted_numbers, number_name)\n            end\n        end\n\
    \    end\n    return table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local number_to_numeral\
    \ = {\n        [0] = 'zero',\n        [1] = 'one',\n        [2] = 'two',\n   \
    \     [3] = 'three',\n        [4] = 'four',\n        [5] = 'five',\n        [6]\
    \ = 'six',\n        [7] = 'seven',\n        [8] = 'eight',\n        [9] = 'nine'\n\
    \    }\n    local numbers_list = {}\n    for number in numbers:gmatch('%S+') do\n\
    \        local numeral = number:lower()\n        if numeral_to_number[numeral]\
    \ then\n            table.insert(numbers_list, numeral_to_number[numeral])\n \
    \       end\n    end\n    table.sort(numbers_list)\n    local result = {}\n  \
    \  for _, number in ipairs(numbers_list) do\n        table.insert(result, number_to_numeral[number])\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local nums = {}\n  for num in numbers:gmatch(\"%S+\") do\n    table.insert(nums,\
    \ numeral_map[num])\n  end\n  table.sort(nums)\n  local numeral_map_inv = {}\n\
    \  for k, v in pairs(numeral_map) do\n    numeral_map_inv[v] = k\n  end\n  local\
    \ sorted_numbers = {}\n  for _, num in ipairs(nums) do\n    table.insert(sorted_numbers,\
    \ numeral_map_inv[num])\n  end\n  return table.concat(sorted_numbers, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ numeral_list = {}\n\tfor numeral in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(numeral_list,\
    \ numeral_map[numeral])\n\tend\n\ttable.sort(numeral_list)\n\tlocal sorted_numbers\
    \ = {}\n\tfor _, numeral in ipairs(numeral_list) do\n\t\tfor name, value in pairs(numeral_map)\
    \ do\n\t\t\tif value == numeral then\n\t\t\t\ttable.insert(sorted_numbers, name)\n\
    \t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local num_list = {}\n\
    \    for num in numbers:gmatch(\"%S+\") do\n        table.insert(num_list, num)\n\
    \    end\n    table.sort(num_list)\n    return table.concat(num_list, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdn90rxc7.lua:18:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpdn90rxc7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local nums = {}\n  for num in numbers:gmatch(\"%S+\") do\n    table.insert(nums,\
    \ numeral_map[num])\n  end\n  table.sort(nums)\n  local result = {}\n  for _,\
    \ num in ipairs(nums) do\n    for numeral, value in pairs(numeral_map) do\n  \
    \    if value == num then\n        table.insert(result, numeral)\n        break\n\
    \      end\n    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local number_to_numeral\
    \ = {\n        [0] = 'zero',\n        [1] = 'one',\n        [2] = 'two',\n   \
    \     [3] = 'three',\n        [4] = 'four',\n        [5] = 'five',\n        [6]\
    \ = 'six',\n        [7] = 'seven',\n        [8] = 'eight',\n        [9] = 'nine'\n\
    \    }\n    local numbers_table = {}\n    for number in numbers:gmatch('%a+')\
    \ do\n        table.insert(numbers_table, numeral_to_number[number])\n    end\n\
    \    table.sort(numbers_table)\n    local sorted_numbers = {}\n    for _, number\
    \ in ipairs(numbers_table) do\n        table.insert(sorted_numbers, number_to_numeral[number])\n\
    \    end\n    return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local number_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local numbers_table = {}\n  \
    \  for number in numbers:gmatch(\"%S+\") do\n        table.insert(numbers_table,\
    \ number_map[number])\n    end\n    table.sort(numbers_table)\n    local sorted_numbers\
    \ = {}\n    for _, number in ipairs(numbers_table) do\n        for numeral, value\
    \ in pairs(number_map) do\n            if value == number then\n             \
    \   table.insert(sorted_numbers, numeral)\n            end\n        end\n    end\n\
    \    return table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        table.insert(nums, numeral_map[num])\n\
    \    end\n    table.sort(nums)\n    local numeral_map_reverse = {}\n    for k,\
    \ v in pairs(numeral_map) do\n        numeral_map_reverse[v] = k\n    end\n  \
    \  local sorted_numbers = {}\n    for _, num in ipairs(nums) do\n        table.insert(sorted_numbers,\
    \ numeral_map_reverse[num])\n    end\n    return table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        local numeral = numeral_map[num]\n  \
    \      if numeral then\n            table.insert(nums, numeral)\n        end\n\
    \    end\n    table.sort(nums)\n    local result = {}\n    for _, num in ipairs(nums)\
    \ do\n        table.insert(result, num)\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3g4bkbr5.lua:36:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmp3g4bkbr5.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_to_number\
    \ = {\n\t\tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\
    \t\tfive = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t\
    }\n\tlocal numbers_table = {}\n\tfor number in numbers:gmatch(\"%S+\") do\n\t\t\
    table.insert(numbers_table, numeral_to_number[number])\n\tend\n\ttable.sort(numbers_table)\n\
    \tlocal sorted_numbers = {}\n\tfor _, number in ipairs(numbers_table) do\n\t\t\
    table.insert(sorted_numbers, number)\n\tend\n\treturn table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgq_2bz_2.lua:33:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpgq_2bz_2.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local number_to_numeral\
    \ = {\n        [0] = 'zero',\n        [1] = 'one',\n        [2] = 'two',\n   \
    \     [3] = 'three',\n        [4] = 'four',\n        [5] = 'five',\n        [6]\
    \ = 'six',\n        [7] = 'seven',\n        [8] = 'eight',\n        [9] = 'nine'\n\
    \    }\n    local numbers_table = {}\n    for number in numbers:gmatch('%S+')\
    \ do\n        table.insert(numbers_table, numeral_to_number[number])\n    end\n\
    \    table.sort(numbers_table)\n    local sorted_numbers = {}\n    for _, number\
    \ in ipairs(numbers_table) do\n        table.insert(sorted_numbers, number_to_numeral[number])\n\
    \    end\n    return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_to_number\
    \ = {\n\t\tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\
    \t\tfive = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t\
    }\n\tlocal numbers_table = {}\n\tfor number in numbers:gmatch(\"%w+\") do\n\t\t\
    table.insert(numbers_table, numeral_to_number[number])\n\tend\n\ttable.sort(numbers_table)\n\
    \tlocal sorted_numbers = {}\n\tfor _, number in ipairs(numbers_table) do\n\t\t\
    table.insert(sorted_numbers, number)\n\tend\n\treturn table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9__3vkop.lua:33:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmp9__3vkop.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%w+\") do\n        table.insert(nums, numeral_map[num])\n\
    \    end\n    table.sort(nums)\n    local sorted_numbers = {}\n    for _, num\
    \ in ipairs(nums) do\n        for numeral, value in pairs(numeral_map) do\n  \
    \          if value == num then\n                table.insert(sorted_numbers,\
    \ numeral)\n                break\n            end\n        end\n    end\n   \
    \ return table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal nums = {}\n\tfor num\
    \ in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(nums, num)\n\tend\n\ttable.sort(nums)\n\
    \treturn table.concat(nums, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5koj4678.lua:18:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp5koj4678.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local numeral_list = {}\n   \
    \ for numeral in numbers:gmatch(\"%S+\") do\n        local num = numeral_map[numeral]\n\
    \        if num then\n            table.insert(numeral_list, num)\n        end\n\
    \    end\n    table.sort(numeral_list)\n    local sorted_numbers = {}\n    for\
    \ _, num in ipairs(numeral_list) do\n        table.insert(sorted_numbers, numeral_map[num])\n\
    \    end\n    return table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpofaw1w2_.lua:36:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpofaw1w2_.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_to_number\
    \ = {\n\t\tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\
    \t\tfive = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t\
    }\n\tlocal numbers_table = {}\n\tfor number in numbers:gmatch(\"%S+\") do\n\t\t\
    table.insert(numbers_table, numeral_to_number[number])\n\tend\n\ttable.sort(numbers_table)\n\
    \tlocal sorted_numbers = {}\n\tfor _, number in ipairs(numbers_table) do\n\t\t\
    table.insert(sorted_numbers, number)\n\tend\n\treturn table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgq_2bz_2.lua:33:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpgq_2bz_2.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local number_to_numeral\
    \ = {\n        [0] = 'zero',\n        [1] = 'one',\n        [2] = 'two',\n   \
    \     [3] = 'three',\n        [4] = 'four',\n        [5] = 'five',\n        [6]\
    \ = 'six',\n        [7] = 'seven',\n        [8] = 'eight',\n        [9] = 'nine'\n\
    \    }\n    local numbers_table = {}\n    for number in numbers:gmatch('%w+')\
    \ do\n        table.insert(numbers_table, numeral_to_number[number])\n    end\n\
    \    table.sort(numbers_table)\n    local result = {}\n    for _, number in ipairs(numbers_table)\
    \ do\n        table.insert(result, number_to_numeral[number])\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local number_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local numbers_table = {}\n  \
    \  for number in numbers:gmatch(\"%S+\") do\n        table.insert(numbers_table,\
    \ number_map[number])\n    end\n    table.sort(numbers_table)\n    local sorted_numbers\
    \ = {}\n    for _, number in ipairs(numbers_table) do\n        table.insert(sorted_numbers,\
    \ number)\n    end\n    return table.concat(sorted_numbers, \" \")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvurqqhz.lua:33:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmplvurqqhz.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    ['zero'] = 0,\n    ['one'] = 1,\n    ['two'] = 2,\n    ['three'] = 3,\n \
    \   ['four'] = 4,\n    ['five'] = 5,\n    ['six'] = 6,\n    ['seven'] = 7,\n \
    \   ['eight'] = 8,\n    ['nine'] = 9\n  }\n  local numeral_list = {}\n  for numeral\
    \ in numbers:gmatch('%w+') do\n    table.insert(numeral_list, numeral_map[numeral])\n\
    \  end\n  table.sort(numeral_list)\n  local sorted_numbers = {}\n  for _, numeral\
    \ in ipairs(numeral_list) do\n    for key, value in pairs(numeral_map) do\n  \
    \    if value == numeral then\n        table.insert(sorted_numbers, key)\n   \
    \   end\n    end\n  end\n  return table.concat(sorted_numbers, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ nums = {}\n\tfor num in numbers:gmatch(\"%S+\") do\n\t\tlocal n = numeral_map[num]\n\
    \t\tif n then\n\t\t\ttable.insert(nums, n)\n\t\tend\n\tend\n\ttable.sort(nums)\n\
    \tlocal result = {}\n\tfor _, n in ipairs(nums) do\n\t\ttable.insert(result, numeral_map[n])\n\
    \tend\n\treturn table.concat(result, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppv5w3e1i.lua:36:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmppv5w3e1i.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local nums = {}\n  for num in numbers:gmatch(\"%S+\") do\n    nums[#nums +\
    \ 1] = numeral_map[num]\n  end\n  table.sort(nums)\n  local result = {}\n  for\
    \ _, num in ipairs(nums) do\n    for numeral, numeral_num in pairs(numeral_map)\
    \ do\n      if num == numeral_num then\n        result[#result + 1] = numeral\n\
    \      end\n    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local sorted_numbers = {}\n  for numeral in numbers:gmatch(\"%S+\") do\n  \
    \  table.insert(sorted_numbers, numeral_map[numeral])\n  end\n  table.sort(sorted_numbers)\n\
    \  local sorted_numeral_list = {}\n  for _, number in ipairs(sorted_numbers) do\n\
    \    for numeral, number_value in pairs(numeral_map) do\n      if number == number_value\
    \ then\n        table.insert(sorted_numeral_list, numeral)\n      end\n    end\n\
    \  end\n  return table.concat(sorted_numeral_list, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local nums = {}\n  for num in numbers:gmatch(\"%S+\") do\n    table.insert(nums,\
    \ numeral_map[num])\n  end\n  table.sort(nums)\n  local sorted_numbers = {}\n\
    \  for _, num in ipairs(nums) do\n    for numeral, value in pairs(numeral_map)\
    \ do\n      if value == num then\n        table.insert(sorted_numbers, numeral)\n\
    \      end\n    end\n  end\n  return table.concat(sorted_numbers, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%w+\") do\n        table.insert(nums, numeral_map[num])\n\
    \    end\n    table.sort(nums)\n    local result = {}\n    for _, num in ipairs(nums)\
    \ do\n        for numeral, value in pairs(numeral_map) do\n            if value\
    \ == num then\n                table.insert(result, numeral)\n               \
    \ break\n            end\n        end\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local number_to_numeral\
    \ = {\n        [0] = 'zero',\n        [1] = 'one',\n        [2] = 'two',\n   \
    \     [3] = 'three',\n        [4] = 'four',\n        [5] = 'five',\n        [6]\
    \ = 'six',\n        [7] = 'seven',\n        [8] = 'eight',\n        [9] = 'nine'\n\
    \    }\n    local numbers_list = {}\n    for number in numbers:gmatch('%w+') do\n\
    \        table.insert(numbers_list, numeral_to_number[number])\n    end\n    table.sort(numbers_list)\n\
    \    local sorted_numbers = ''\n    for _, number in ipairs(numbers_list) do\n\
    \        sorted_numbers = sorted_numbers .. number_to_numeral[number] .. ' '\n\
    \    end\n    return sorted_numbers:sub(1, -2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        table.insert(nums, numeral_map[num])\n\
    \    end\n    table.sort(nums)\n    local numeral_map_inv = {}\n    for k, v in\
    \ pairs(numeral_map) do\n        numeral_map_inv[v] = k\n    end\n    local result\
    \ = {}\n    for _, num in ipairs(nums) do\n        table.insert(result, numeral_map_inv[num])\n\
    \    end\n    return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ numeral_list = {}\n\tfor numeral in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(numeral_list,\
    \ numeral_map[numeral])\n\tend\n\ttable.sort(numeral_list)\n\tlocal sorted_numbers\
    \ = {}\n\tfor _, numeral in ipairs(numeral_list) do\n\t\tfor name, value in pairs(numeral_map)\
    \ do\n\t\t\tif value == numeral then\n\t\t\t\ttable.insert(sorted_numbers, name)\n\
    \t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local numbers_table = {}\n\
    \    for number in numbers:gmatch(\"%S+\") do\n        table.insert(numbers_table,\
    \ numeral_to_number[number])\n    end\n    table.sort(numbers_table)\n    local\
    \ sorted_numbers = {}\n    for _, number in ipairs(numbers_table) do\n       \
    \ for numeral, numeral_number in pairs(numeral_to_number) do\n            if number\
    \ == numeral_number then\n                table.insert(sorted_numbers, numeral)\n\
    \            end\n        end\n    end\n    return table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ nums = {}\n\tfor num in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(nums, numeral_map[num])\n\
    \tend\n\ttable.sort(nums)\n\tlocal sorted_numbers = {}\n\tfor _, num in ipairs(nums)\
    \ do\n\t\ttable.insert(sorted_numbers, num)\n\tend\n\treturn table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpglck8zzq.lua:33:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpglck8zzq.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        nums[#nums + 1] = numeral_map[num]\n\
    \    end\n    table.sort(nums)\n    local sorted = {}\n    for _, num in ipairs(nums)\
    \ do\n        for numeral, value in pairs(numeral_map) do\n            if value\
    \ == num then\n                sorted[#sorted + 1] = numeral\n               \
    \ break\n            end\n        end\n    end\n    return table.concat(sorted,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        ['zero'] = 0,\n        ['one'] = 1,\n        ['two'] = 2,\n   \
    \     ['three'] = 3,\n        ['four'] = 4,\n        ['five'] = 5,\n        ['six']\
    \ = 6,\n        ['seven'] = 7,\n        ['eight'] = 8,\n        ['nine'] = 9,\n\
    \    }\n    local number_to_numeral = {\n        [0] = 'zero',\n        [1] =\
    \ 'one',\n        [2] = 'two',\n        [3] = 'three',\n        [4] = 'four',\n\
    \        [5] = 'five',\n        [6] = 'six',\n        [7] = 'seven',\n       \
    \ [8] = 'eight',\n        [9] = 'nine',\n    }\n    local numbers_list = {}\n\
    \    for number in numbers:gmatch('%S+') do\n        table.insert(numbers_list,\
    \ numeral_to_number[number])\n    end\n    table.sort(numbers_list)\n    local\
    \ sorted_numbers = {}\n    for _, number in ipairs(numbers_list) do\n        table.insert(sorted_numbers,\
    \ number_to_numeral[number])\n    end\n    return table.concat(sorted_numbers,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_to_number\
    \ = {\n    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n\
    \    five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n \
    \ }\n  local numbers_table = {}\n  for number in numbers:gmatch(\"%S+\") do\n\
    \    table.insert(numbers_table, numeral_to_number[number])\n  end\n  table.sort(numbers_table)\n\
    \  local number_to_numeral = {\n    [0] = \"zero\",\n    [1] = \"one\",\n    [2]\
    \ = \"two\",\n    [3] = \"three\",\n    [4] = \"four\",\n    [5] = \"five\",\n\
    \    [6] = \"six\",\n    [7] = \"seven\",\n    [8] = \"eight\",\n    [9] = \"\
    nine\"\n  }\n  local sorted_numbers = {}\n  for _, number in ipairs(numbers_table)\
    \ do\n    table.insert(sorted_numbers, number_to_numeral[number])\n  end\n  return\
    \ table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        local numeral = numeral_map[num]\n  \
    \      if numeral then\n            table.insert(nums, numeral)\n        end\n\
    \    end\n    table.sort(nums)\n    local sorted_numbers = {}\n    for _, num\
    \ in ipairs(nums) do\n        table.insert(sorted_numbers, num)\n    end\n   \
    \ return table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyuw7zcqw.lua:36:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpyuw7zcqw.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_to_number\
    \ = {\n    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n\
    \    five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n \
    \ }\n  local number_to_numeral = {\n    [0] = 'zero',\n    [1] = 'one',\n    [2]\
    \ = 'two',\n    [3] = 'three',\n    [4] = 'four',\n    [5] = 'five',\n    [6]\
    \ = 'six',\n    [7] = 'seven',\n    [8] = 'eight',\n    [9] = 'nine'\n  }\n  local\
    \ numbers_table = {}\n  for numeral in numbers:gmatch('%w+') do\n    table.insert(numbers_table,\
    \ numeral_to_number[numeral])\n  end\n  table.sort(numbers_table)\n  local sorted_numbers\
    \ = ''\n  for _, number in ipairs(numbers_table) do\n    sorted_numbers = sorted_numbers\
    \ .. number_to_numeral[number] .. ' '\n  end\n  return sorted_numbers:sub(1, -2)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_to_number\
    \ = {\n\t\tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\
    \t\tfive = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t\
    }\n\tlocal number_to_numeral = {\n\t\t[0] = 'zero',\n\t\t[1] = 'one',\n\t\t[2]\
    \ = 'two',\n\t\t[3] = 'three',\n\t\t[4] = 'four',\n\t\t[5] = 'five',\n\t\t[6]\
    \ = 'six',\n\t\t[7] = 'seven',\n\t\t[8] = 'eight',\n\t\t[9] = 'nine'\n\t}\n\t\
    local numbers_table = {}\n\tfor number in numbers:gmatch('%S+') do\n\t\ttable.insert(numbers_table,\
    \ numeral_to_number[number])\n\tend\n\ttable.sort(numbers_table)\n\tlocal sorted_numbers\
    \ = {}\n\tfor _, number in ipairs(numbers_table) do\n\t\ttable.insert(sorted_numbers,\
    \ number_to_numeral[number])\n\tend\n\treturn table.concat(sorted_numbers, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for numeral\
    \ in numbers:gmatch(\"%S+\") do\n        local num = numeral_map[numeral]\n  \
    \      if num then\n            table.insert(nums, num)\n        end\n    end\n\
    \    table.sort(nums)\n    local sorted_numbers = {}\n    for _, num in ipairs(nums)\
    \ do\n        for numeral, numeral_num in pairs(numeral_map) do\n            if\
    \ numeral_num == num then\n                table.insert(sorted_numbers, numeral)\n\
    \                break\n            end\n        end\n    end\n    return table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local numeral_list = {}\n   \
    \ for numeral in numbers:gmatch(\"%S+\") do\n        if numeral_map[numeral] then\n\
    \            table.insert(numeral_list, numeral_map[numeral])\n        end\n \
    \   end\n    table.sort(numeral_list)\n    local sorted_numbers = \"\"\n    for\
    \ _, numeral in ipairs(numeral_list) do\n        for k, v in pairs(numeral_map)\
    \ do\n            if v == numeral then\n                sorted_numbers = sorted_numbers\
    \ .. k .. \" \"\n            end\n        end\n    end\n    return sorted_numbers:sub(1,\
    \ -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local numbers_table = {}\n  \
    \  for numeral in numbers:gmatch(\"%S+\") do\n        table.insert(numbers_table,\
    \ numeral_map[numeral])\n    end\n    table.sort(numbers_table)\n    local sorted_numbers\
    \ = {}\n    for _, number in ipairs(numbers_table) do\n        for numeral, numeral_number\
    \ in pairs(numeral_map) do\n            if numeral_number == number then\n   \
    \             table.insert(sorted_numbers, numeral)\n            end\n       \
    \ end\n    end\n    return table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local nums = {}\n    for\
    \ num in numbers:gmatch(\"%S+\") do\n        table.insert(nums, tonumber(num))\n\
    \    end\n    table.sort(nums)\n    return table.concat(nums, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpepjr2k66.lua:17:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpepjr2k66.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal nums = {}\n\tfor num\
    \ in numbers:gmatch(\"%w+\") do\n\t\ttable.insert(nums, num)\n\tend\n\ttable.sort(nums)\n\
    \treturn table.concat(nums, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1bbirkt6.lua:18:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp1bbirkt6.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        table.insert(nums, numeral_map[num])\n\
    \    end\n    table.sort(nums)\n    local sorted_numbers = {}\n    for _, num\
    \ in ipairs(nums) do\n        for k, v in pairs(numeral_map) do\n            if\
    \ v == num then\n                table.insert(sorted_numbers, k)\n           \
    \     break\n            end\n        end\n    end\n    return table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local numbers_table = {}\n  \
    \  for number in numbers:gmatch(\"%S+\") do\n        table.insert(numbers_table,\
    \ numeral_map[number])\n    end\n    table.sort(numbers_table)\n    local sorted_numbers\
    \ = \"\"\n    for _, number in ipairs(numbers_table) do\n        sorted_numbers\
    \ = sorted_numbers .. number .. \" \"\n    end\n    return sorted_numbers:sub(1,\
    \ -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45o3iafu.lua:33:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmp45o3iafu.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ numeral_list = {}\n\tfor numeral in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(numeral_list,\
    \ numeral_map[numeral])\n\tend\n\ttable.sort(numeral_list)\n\tlocal sorted_numbers\
    \ = {}\n\tfor _, numeral in ipairs(numeral_list) do\n\t\ttable.insert(sorted_numbers,\
    \ numeral)\n\tend\n\treturn table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_6n6024.lua:33:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmp7_6n6024.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local num_table = {}\n\
    \    for num in numbers:gmatch(\"%S+\") do\n        table.insert(num_table, num)\n\
    \    end\n    table.sort(num_table)\n    return table.concat(num_table, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_uto4a5.lua:18:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpb_uto4a5.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local number_to_numeral\
    \ = {\n        [0] = 'zero',\n        [1] = 'one',\n        [2] = 'two',\n   \
    \     [3] = 'three',\n        [4] = 'four',\n        [5] = 'five',\n        [6]\
    \ = 'six',\n        [7] = 'seven',\n        [8] = 'eight',\n        [9] = 'nine'\n\
    \    }\n    local numbers_table = {}\n    for number in numbers:gmatch('%S+')\
    \ do\n        table.insert(numbers_table, numeral_to_number[number])\n    end\n\
    \    table.sort(numbers_table)\n    local sorted_numbers = {}\n    for _, number\
    \ in ipairs(numbers_table) do\n        table.insert(sorted_numbers, number_to_numeral[number])\n\
    \    end\n    return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local numbers_table = {}\n\
    \    for numeral in numbers:gmatch(\"%S+\") do\n        table.insert(numbers_table,\
    \ numeral_to_number[numeral])\n    end\n    table.sort(numbers_table)\n    local\
    \ sorted_numbers = {}\n    for _, number in ipairs(numbers_table) do\n       \
    \ for numeral, number_value in pairs(numeral_to_number) do\n            if number\
    \ == number_value then\n                table.insert(sorted_numbers, numeral)\n\
    \            end\n        end\n    end\n    return table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ nums = {}\n\tfor num in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(nums, numeral_map[num])\n\
    \tend\n\ttable.sort(nums)\n\tlocal sorted_numbers = {}\n\tfor _, num in ipairs(nums)\
    \ do\n\t\ttable.insert(sorted_numbers, num)\n\tend\n\treturn table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpglck8zzq.lua:33:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpglck8zzq.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        local n = numeral_map[num]\n        if\
    \ n == nil then\n            return nil\n        end\n        table.insert(nums,\
    \ n)\n    end\n    table.sort(nums)\n    local result = {}\n    for _, n in ipairs(nums)\
    \ do\n        table.insert(result, tostring(n))\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl78nbqur.lua:37:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpl78nbqur.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ nums = {}\n\tfor num in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(nums, numeral_map[num])\n\
    \tend\n\ttable.sort(nums)\n\tlocal sorted_numbers = {}\n\tfor _, num in ipairs(nums)\
    \ do\n\t\tfor numeral, numeral_num in pairs(numeral_map) do\n\t\t\tif numeral_num\
    \ == num then\n\t\t\t\ttable.insert(sorted_numbers, numeral)\n\t\t\t\tbreak\n\t\
    \t\tend\n\t\tend\n\tend\n\treturn table.concat(sorted_numbers, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local nums = {}\n  for num in numbers:gmatch(\"%S+\") do\n    table.insert(nums,\
    \ numeral_map[num])\n  end\n  table.sort(nums)\n  local numeral_map_inv = {}\n\
    \  for k, v in pairs(numeral_map) do\n    numeral_map_inv[v] = k\n  end\n  local\
    \ numeral_nums = {}\n  for _, num in ipairs(nums) do\n    table.insert(numeral_nums,\
    \ numeral_map_inv[num])\n  end\n  return table.concat(numeral_nums, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local nums = {}\n  for num in numbers:gmatch(\"%S+\") do\n    table.insert(nums,\
    \ numeral_map[num])\n  end\n  table.sort(nums)\n  local result = {}\n  for _,\
    \ num in ipairs(nums) do\n    for numeral, value in pairs(numeral_map) do\n  \
    \    if value == num then\n        table.insert(result, numeral)\n        break\n\
    \      end\n    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        local n = numeral_map[num]\n        if\
    \ n then\n            table.insert(nums, n)\n        end\n    end\n    table.sort(nums)\n\
    \    local sorted = {}\n    for _, n in ipairs(nums) do\n        table.insert(sorted,\
    \ tostring(n))\n    end\n    return table.concat(sorted, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdivltagm.lua:36:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpdivltagm.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local number_to_numeral\
    \ = {\n        [0] = 'zero',\n        [1] = 'one',\n        [2] = 'two',\n   \
    \     [3] = 'three',\n        [4] = 'four',\n        [5] = 'five',\n        [6]\
    \ = 'six',\n        [7] = 'seven',\n        [8] = 'eight',\n        [9] = 'nine'\n\
    \    }\n    local numbers_list = {}\n    for number in numbers:gmatch('%S+') do\n\
    \        table.insert(numbers_list, numeral_to_number[number])\n    end\n    table.sort(numbers_list)\n\
    \    local sorted_numbers = {}\n    for _, number in ipairs(numbers_list) do\n\
    \        table.insert(sorted_numbers, number_to_numeral[number])\n    end\n  \
    \  return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_to_number\
    \ = {\n    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n\
    \    five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n \
    \ }\n  local numbers_table = {}\n  for number in numbers:gmatch(\"%S+\") do\n\
    \    table.insert(numbers_table, numeral_to_number[number])\n  end\n  table.sort(numbers_table)\n\
    \  local sorted_numbers = {}\n  for _, number in ipairs(numbers_table) do\n  \
    \  table.insert(sorted_numbers, number)\n  end\n  return table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvzc46u2s.lua:33:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpvzc46u2s.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        table.insert(nums, numeral_map[num])\n\
    \    end\n    table.sort(nums)\n    local sorted_numbers = {}\n    for i, num\
    \ in ipairs(nums) do\n        for numeral, value in pairs(numeral_map) do\n  \
    \          if value == num then\n                table.insert(sorted_numbers,\
    \ numeral)\n            end\n        end\n    end\n    return table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        local n = numeral_map[num]\n        if\
    \ n then\n            table.insert(nums, n)\n        end\n    end\n    table.sort(nums)\n\
    \    local sorted = {}\n    for _, n in ipairs(nums) do\n        for num, v in\
    \ pairs(numeral_map) do\n            if v == n then\n                table.insert(sorted,\
    \ num)\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(sorted, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        table.insert(nums, numeral_map[num])\n\
    \    end\n    table.sort(nums)\n    local result = {}\n    for _, num in ipairs(nums)\
    \ do\n        table.insert(result, num)\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1oh0hqnp.lua:33:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmp1oh0hqnp.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        local n = numeral_map[num]\n        if\
    \ n then\n            table.insert(nums, n)\n        end\n    end\n    table.sort(nums)\n\
    \    local sorted = {}\n    for _, n in ipairs(nums) do\n        table.insert(sorted,\
    \ tostring(n))\n    end\n    return table.concat(sorted, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdivltagm.lua:36:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpdivltagm.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_to_number\
    \ = {\n    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n\
    \    five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n \
    \ }\n  local numbers_table = {}\n  for number in numbers:gmatch(\"%S+\") do\n\
    \    table.insert(numbers_table, numeral_to_number[number])\n  end\n  table.sort(numbers_table)\n\
    \  local numbers_sorted = {}\n  for _, number in ipairs(numbers_table) do\n  \
    \  for numeral, number_value in pairs(numeral_to_number) do\n      if number ==\
    \ number_value then\n        table.insert(numbers_sorted, numeral)\n      end\n\
    \    end\n  end\n  return table.concat(numbers_sorted, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        table.insert(nums, numeral_map[num])\n\
    \    end\n    table.sort(nums)\n    local result = {}\n    for _, num in ipairs(nums)\
    \ do\n        for numeral, numeral_num in pairs(numeral_map) do\n            if\
    \ numeral_num == num then\n                table.insert(result, numeral)\n   \
    \             break\n            end\n        end\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local number_to_numeral\
    \ = {\n        [0] = 'zero',\n        [1] = 'one',\n        [2] = 'two',\n   \
    \     [3] = 'three',\n        [4] = 'four',\n        [5] = 'five',\n        [6]\
    \ = 'six',\n        [7] = 'seven',\n        [8] = 'eight',\n        [9] = 'nine'\n\
    \    }\n    local numbers_table = {}\n    for number in numbers:gmatch('%w+')\
    \ do\n        table.insert(numbers_table, numeral_to_number[number])\n    end\n\
    \    table.sort(numbers_table)\n    local sorted_numbers = {}\n    for _, number\
    \ in ipairs(numbers_table) do\n        table.insert(sorted_numbers, number_to_numeral[number])\n\
    \    end\n    return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local number_to_numeral\
    \ = {\n        [0] = 'zero',\n        [1] = 'one',\n        [2] = 'two',\n   \
    \     [3] = 'three',\n        [4] = 'four',\n        [5] = 'five',\n        [6]\
    \ = 'six',\n        [7] = 'seven',\n        [8] = 'eight',\n        [9] = 'nine'\n\
    \    }\n    local numbers_table = {}\n    for number in numbers:gmatch('%a+')\
    \ do\n        table.insert(numbers_table, numeral_to_number[number])\n    end\n\
    \    table.sort(numbers_table)\n    local sorted_numbers = {}\n    for _, number\
    \ in ipairs(numbers_table) do\n        table.insert(sorted_numbers, number_to_numeral[number])\n\
    \    end\n    return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_to_number\
    \ = {\n\t\tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\
    \t\tfive = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t\
    }\n\tlocal number_to_numeral = {\n\t\t[0] = 'zero',\n\t\t[1] = 'one',\n\t\t[2]\
    \ = 'two',\n\t\t[3] = 'three',\n\t\t[4] = 'four',\n\t\t[5] = 'five',\n\t\t[6]\
    \ = 'six',\n\t\t[7] = 'seven',\n\t\t[8] = 'eight',\n\t\t[9] = 'nine'\n\t}\n\t\
    local numeral_list = {}\n\tfor numeral in numbers:gmatch('%a+') do\n\t\ttable.insert(numeral_list,\
    \ numeral)\n\tend\n\ttable.sort(numeral_list, function(a, b)\n\t\treturn numeral_to_number[a]\
    \ < numeral_to_number[b]\n\tend)\n\tlocal number_list = {}\n\tfor _, numeral in\
    \ ipairs(numeral_list) do\n\t\ttable.insert(number_list, number_to_numeral[numeral_to_number[numeral]])\n\
    \tend\n\treturn table.concat(number_list, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local numbers_table = {}\n\
    \    for number in numbers:gmatch(\"%S+\") do\n        table.insert(numbers_table,\
    \ numeral_to_number[number])\n    end\n    table.sort(numbers_table)\n    local\
    \ sorted_numbers = {}\n    for _, number in ipairs(numbers_table) do\n       \
    \ table.insert(sorted_numbers, number)\n    end\n    return table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjkloc8v.lua:33:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpmjkloc8v.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%w+\") do\n        table.insert(nums, numeral_map[num])\n\
    \    end\n    table.sort(nums)\n    local sorted_numbers = {}\n    for _, num\
    \ in ipairs(nums) do\n        for numeral, value in pairs(numeral_map) do\n  \
    \          if value == num then\n                table.insert(sorted_numbers,\
    \ numeral)\n            end\n        end\n    end\n    return table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local numbers_table = {}\n  \
    \  for number in numbers:gmatch(\"%S+\") do\n        table.insert(numbers_table,\
    \ numeral_map[number])\n    end\n    table.sort(numbers_table)\n    local sorted_numbers\
    \ = {}\n    for _, number in ipairs(numbers_table) do\n        for numeral, value\
    \ in pairs(numeral_map) do\n            if value == number then\n            \
    \    table.insert(sorted_numbers, numeral)\n            end\n        end\n   \
    \ end\n    return table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_to_number\
    \ = {\n    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n\
    \    five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n \
    \ }\n  local number_to_numeral = {\n    [0] = 'zero',\n    [1] = 'one',\n    [2]\
    \ = 'two',\n    [3] = 'three',\n    [4] = 'four',\n    [5] = 'five',\n    [6]\
    \ = 'six',\n    [7] = 'seven',\n    [8] = 'eight',\n    [9] = 'nine'\n  }\n  local\
    \ numbers_table = {}\n  for numeral in numbers:gmatch('%w+') do\n    table.insert(numbers_table,\
    \ numeral_to_number[numeral])\n  end\n  table.sort(numbers_table)\n  local sorted_numbers\
    \ = {}\n  for _, number in ipairs(numbers_table) do\n    table.insert(sorted_numbers,\
    \ number_to_numeral[number])\n  end\n  return table.concat(sorted_numbers, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local number_to_numeral\
    \ = {\n        [0] = 'zero',\n        [1] = 'one',\n        [2] = 'two',\n   \
    \     [3] = 'three',\n        [4] = 'four',\n        [5] = 'five',\n        [6]\
    \ = 'six',\n        [7] = 'seven',\n        [8] = 'eight',\n        [9] = 'nine'\n\
    \    }\n    local numbers_table = {}\n    for number in numbers:gmatch('%S+')\
    \ do\n        table.insert(numbers_table, numeral_to_number[number])\n    end\n\
    \    table.sort(numbers_table)\n    local sorted_numbers = {}\n    for _, number\
    \ in ipairs(numbers_table) do\n        table.insert(sorted_numbers, number_to_numeral[number])\n\
    \    end\n    return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        table.insert(nums, numeral_map[num])\n\
    \    end\n    table.sort(nums)\n    local result = {}\n    for _, num in ipairs(nums)\
    \ do\n        for k, v in pairs(numeral_map) do\n            if v == num then\n\
    \                table.insert(result, k)\n                break\n            end\n\
    \        end\n    end\n    return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local numeral_list = {}\n  for numeral in numbers:gmatch(\"%S+\") do\n    if\
    \ numeral_map[numeral] then\n      table.insert(numeral_list, numeral_map[numeral])\n\
    \    end\n  end\n  table.sort(numeral_list)\n  local sorted_numbers = {}\n  for\
    \ _, numeral in ipairs(numeral_list) do\n    for k, v in pairs(numeral_map) do\n\
    \      if v == numeral then\n        table.insert(sorted_numbers, k)\n      end\n\
    \    end\n  end\n  return table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        local n = numeral_map[num]\n        if\
    \ n then\n            table.insert(nums, n)\n        end\n    end\n    table.sort(nums)\n\
    \    local result = {}\n    for _, n in ipairs(nums) do\n        table.insert(result,\
    \ tostring(n))\n    end\n    return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe22pbt6k.lua:36:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpe22pbt6k.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ nums = {}\n\tfor num in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(nums, numeral_map[num])\n\
    \tend\n\ttable.sort(nums)\n\tlocal sorted_numbers = {}\n\tfor _, num in ipairs(nums)\
    \ do\n\t\tfor numeral, value in pairs(numeral_map) do\n\t\t\tif value == num then\n\
    \t\t\t\ttable.insert(sorted_numbers, numeral)\n\t\t\t\tbreak\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local numeral_list = {}\n  for numeral in numbers:gmatch(\"%S+\") do\n    local\
    \ number = numeral_map[numeral]\n    if number then\n      table.insert(numeral_list,\
    \ number)\n    end\n  end\n  table.sort(numeral_list)\n  local sorted_numbers\
    \ = {}\n  for _, number in ipairs(numeral_list) do\n    table.insert(sorted_numbers,\
    \ tostring(number))\n  end\n  return table.concat(sorted_numbers, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps4dy6bp8.lua:36:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmps4dy6bp8.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local number_to_numeral\
    \ = {\n        [0] = 'zero',\n        [1] = 'one',\n        [2] = 'two',\n   \
    \     [3] = 'three',\n        [4] = 'four',\n        [5] = 'five',\n        [6]\
    \ = 'six',\n        [7] = 'seven',\n        [8] = 'eight',\n        [9] = 'nine'\n\
    \    }\n    local numbers_table = {}\n    for number in numbers:gmatch('%S+')\
    \ do\n        table.insert(numbers_table, numeral_to_number[number])\n    end\n\
    \    table.sort(numbers_table)\n    local sorted_numbers = {}\n    for _, number\
    \ in ipairs(numbers_table) do\n        table.insert(sorted_numbers, number_to_numeral[number])\n\
    \    end\n    return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local words = {}\n  for\
    \ word in numbers:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n \
    \ table.sort(words, function(a, b)\n    return number_to_numeral[a] < number_to_numeral[b]\n\
    \  end)\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpblue9id1.lua:10:\
    \ attempt to index global 'number_to_numeral' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpblue9id1.lua:10: in function </tmp/tmpblue9id1.lua:9>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmpblue9id1.lua:9: in function 'candidate'\n\t/tmp/tmpblue9id1.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local number_to_numeral\
    \ = {\n        [0] = 'zero',\n        [1] = 'one',\n        [2] = 'two',\n   \
    \     [3] = 'three',\n        [4] = 'four',\n        [5] = 'five',\n        [6]\
    \ = 'six',\n        [7] = 'seven',\n        [8] = 'eight',\n        [9] = 'nine'\n\
    \    }\n    local numbers_table = {}\n    for number in numbers:gmatch('%a+')\
    \ do\n        table.insert(numbers_table, numeral_to_number[number])\n    end\n\
    \    table.sort(numbers_table)\n    local sorted_numbers = {}\n    for _, number\
    \ in ipairs(numbers_table) do\n        table.insert(sorted_numbers, number_to_numeral[number])\n\
    \    end\n    return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ numeral_list = {}\n\tfor numeral in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(numeral_list,\
    \ numeral_map[numeral])\n\tend\n\ttable.sort(numeral_list)\n\tlocal sorted_numbers\
    \ = {}\n\tfor _, numeral in ipairs(numeral_list) do\n\t\ttable.insert(sorted_numbers,\
    \ numeral)\n\tend\n\treturn table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_6n6024.lua:33:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmp7_6n6024.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local number_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local number_list = {}\n    for\
    \ number in numbers:gmatch(\"%S+\") do\n        if number_map[number] then\n \
    \           table.insert(number_list, number_map[number])\n        end\n    end\n\
    \    table.sort(number_list)\n    local sorted_numbers = {}\n    for _, number\
    \ in ipairs(number_list) do\n        for name, value in pairs(number_map) do\n\
    \            if value == number then\n                table.insert(sorted_numbers,\
    \ name)\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local numeral_list = {}\n  for numeral in numbers:gmatch(\"%S+\") do\n    table.insert(numeral_list,\
    \ numeral_map[numeral])\n  end\n  table.sort(numeral_list)\n  local sorted_numbers\
    \ = {}\n  for _, numeral in ipairs(numeral_list) do\n    for key, value in pairs(numeral_map)\
    \ do\n      if value == numeral then\n        table.insert(sorted_numbers, key)\n\
    \      end\n    end\n  end\n  return table.concat(sorted_numbers, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal nums = {}\n\tfor num\
    \ in numbers:gmatch(\"%S+\") do\n\t\tnums[#nums+1] = num\n\tend\n\ttable.sort(nums)\n\
    \treturn table.concat(nums, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqg3vbdb.lua:18:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmphqg3vbdb.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        local num_val = numeral_map[num]\n  \
    \      if num_val then\n            table.insert(nums, num_val)\n        end\n\
    \    end\n    table.sort(nums)\n    local result = {}\n    for _, num in ipairs(nums)\
    \ do\n        table.insert(result, num)\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ynck555.lua:36:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmp7ynck555.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ nums = {}\n\tfor num in numbers:gmatch(\"%S+\") do\n\t\tlocal n = numeral_map[num]\n\
    \t\tif n then\n\t\t\ttable.insert(nums, n)\n\t\tend\n\tend\n\ttable.sort(nums)\n\
    \tlocal result = {}\n\tfor _, n in ipairs(nums) do\n\t\ttable.insert(result, numeral_map[n])\n\
    \tend\n\treturn table.concat(result, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppv5w3e1i.lua:36:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmppv5w3e1i.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        table.insert(nums, numeral_map[num])\n\
    \    end\n    table.sort(nums)\n    local result = {}\n    for _, num in ipairs(nums)\
    \ do\n        for numeral, value in pairs(numeral_map) do\n            if value\
    \ == num then\n                table.insert(result, numeral)\n               \
    \ break\n            end\n        end\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local number_to_numeral\
    \ = {\n        [0] = 'zero',\n        [1] = 'one',\n        [2] = 'two',\n   \
    \     [3] = 'three',\n        [4] = 'four',\n        [5] = 'five',\n        [6]\
    \ = 'six',\n        [7] = 'seven',\n        [8] = 'eight',\n        [9] = 'nine'\n\
    \    }\n    local numbers_table = {}\n    for number in numbers:gmatch('%w+')\
    \ do\n        table.insert(numbers_table, numeral_to_number[number])\n    end\n\
    \    table.sort(numbers_table)\n    local sorted_numbers = {}\n    for _, number\
    \ in ipairs(numbers_table) do\n        table.insert(sorted_numbers, number_to_numeral[number])\n\
    \    end\n    return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_to_number\
    \ = {\n    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n\
    \    five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n \
    \ }\n  local number_to_numeral = {\n    [0] = 'zero',\n    [1] = 'one',\n    [2]\
    \ = 'two',\n    [3] = 'three',\n    [4] = 'four',\n    [5] = 'five',\n    [6]\
    \ = 'six',\n    [7] = 'seven',\n    [8] = 'eight',\n    [9] = 'nine'\n  }\n  local\
    \ numbers_list = {}\n  for number in numbers:gmatch('%w+') do\n    table.insert(numbers_list,\
    \ numeral_to_number[number])\n  end\n  table.sort(numbers_list)\n  local result\
    \ = ''\n  for _, number in ipairs(numbers_list) do\n    result = result .. number_to_numeral[number]\
    \ .. ' '\n  end\n  return result:sub(1, -2)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local num_table = {}\n \
    \ local num_str = \"\"\n  local num_array = {}\n  local num_array_sorted = {}\n\
    \  local num_array_sorted_str = \"\"\n  local num_array_sorted_str_final = \"\"\
    \n  local num_array_sorted_str_final_final = \"\"\n  local num_array_sorted_str_final_final_final\
    \ = \"\"\n  local num_array_sorted_str_final_final_final_final = \"\"\n  local\
    \ num_array_sorted_str_final_final_final_final_final = \"\"\n  local num_array_sorted_str_final_final_final_final_final_final\
    \ = \"\"\n  local num_array_sorted_str_final_final_final_final_final_final_final\
    \ = \"\"\n  local num_array_sorted_str_final_final_final_final_final_final_final_final\
    \ = \"\"\n  local num_array_sorted_str_final_final_final_final_final_final_final_final_final\
    \ = \"\"\n  local num_array_sorted_str_final_final_final_final_final_final_final_final_final_final\
    \ = \"\"\n  local num_array_sorted_str_final_final_final_final_final_final_final_final_final_final_final\
    \ = \"\"\n  local num_array_sorted_str_final_final_final_final_final_final_final_final_final_final_final_final\
    \ = \"\"\n  local num_array_sorted_str_final_final_final_final_final_final_final_final_final_final_final_final_final\
    \ = \"\"\n  local num_array_sorted_str_final_final_final_final_final_final_final_final_final_final_final_final_final_final\
    \ = \"\"\n  local num_array_sorted_str_final_final_final_final_final_final_final_final_final_final_final_final_final_final_final\
    \ = \"\"\n  local num_array_sorted_str_final_final_final_final_final_final_final_final_final\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx6ss7q7q.lua:37: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_to_number\
    \ = {\n\t\tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\
    \t\tfive = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t\
    }\n\tlocal numbers_table = {}\n\tfor number in numbers:gmatch(\"%S+\") do\n\t\t\
    table.insert(numbers_table, numeral_to_number[number])\n\tend\n\ttable.sort(numbers_table)\n\
    \tlocal sorted_numbers = \"\"\n\tfor _, number in ipairs(numbers_table) do\n\t\
    \tsorted_numbers = sorted_numbers .. number .. \" \"\n\tend\n\treturn sorted_numbers:sub(1,\
    \ -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqgtqeanl.lua:33:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpqgtqeanl.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numbers_table = {}\n\
    \  for number in numbers:gmatch(\"%S+\") do\n    table.insert(numbers_table, number)\n\
    \  end\n  table.sort(numbers_table)\n  return table.concat(numbers_table, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy2uktkqg.lua:18:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpy2uktkqg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local number_to_numeral\
    \ = {\n        [0] = 'zero',\n        [1] = 'one',\n        [2] = 'two',\n   \
    \     [3] = 'three',\n        [4] = 'four',\n        [5] = 'five',\n        [6]\
    \ = 'six',\n        [7] = 'seven',\n        [8] = 'eight',\n        [9] = 'nine'\n\
    \    }\n    local numbers_table = {}\n    for numeral in numbers:gmatch('%S+')\
    \ do\n        table.insert(numbers_table, numeral_to_number[numeral])\n    end\n\
    \    table.sort(numbers_table)\n    local sorted_numbers = {}\n    for _, number\
    \ in ipairs(numbers_table) do\n        table.insert(sorted_numbers, number_to_numeral[number])\n\
    \    end\n    return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local numeral_list = {}\n  for numeral in numbers:gmatch(\"%S+\") do\n    if\
    \ numeral_map[numeral] then\n      table.insert(numeral_list, numeral_map[numeral])\n\
    \    end\n  end\n  table.sort(numeral_list)\n  local sorted_numbers = {}\n  for\
    \ _, numeral in ipairs(numeral_list) do\n    for k, v in pairs(numeral_map) do\n\
    \      if v == numeral then\n        table.insert(sorted_numbers, k)\n      end\n\
    \    end\n  end\n  return table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ numeral_list = {}\n\tfor numeral in numbers:gmatch(\"%S+\") do\n\t\tlocal num\
    \ = numeral_map[numeral]\n\t\tif num then\n\t\t\ttable.insert(numeral_list, num)\n\
    \t\tend\n\tend\n\ttable.sort(numeral_list)\n\tlocal sorted_numbers = {}\n\tfor\
    \ _, num in ipairs(numeral_list) do\n\t\ttable.insert(sorted_numbers, numeral_map[num])\n\
    \tend\n\treturn table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_fnmq_u.lua:36:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpx_fnmq_u.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ nums = {}\n\tfor num in numbers:gmatch(\"%S+\") do\n\t\tlocal n = numeral_map[num]\n\
    \t\tif n then\n\t\t\ttable.insert(nums, n)\n\t\tend\n\tend\n\ttable.sort(nums)\n\
    \tlocal numeral_map_inv = {}\n\tfor k, v in pairs(numeral_map) do\n\t\tnumeral_map_inv[v]\
    \ = k\n\tend\n\tlocal sorted_numbers = {}\n\tfor _, n in ipairs(nums) do\n\t\t\
    table.insert(sorted_numbers, numeral_map_inv[n])\n\tend\n\treturn table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local number_to_numeral\
    \ = {\n        [0] = 'zero',\n        [1] = 'one',\n        [2] = 'two',\n   \
    \     [3] = 'three',\n        [4] = 'four',\n        [5] = 'five',\n        [6]\
    \ = 'six',\n        [7] = 'seven',\n        [8] = 'eight',\n        [9] = 'nine'\n\
    \    }\n    local numbers_list = {}\n    for number in numbers:gmatch('%S+') do\n\
    \        table.insert(numbers_list, numeral_to_number[number])\n    end\n    table.sort(numbers_list)\n\
    \    local sorted_numbers = {}\n    for _, number in ipairs(numbers_list) do\n\
    \        table.insert(sorted_numbers, number_to_numeral[number])\n    end\n  \
    \  return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local numeral_list = {}\n  for numeral in numbers:gmatch(\"%S+\") do\n    table.insert(numeral_list,\
    \ numeral_map[numeral])\n  end\n  table.sort(numeral_list)\n  local sorted_numbers\
    \ = {}\n  for _, numeral in ipairs(numeral_list) do\n    for k, v in pairs(numeral_map)\
    \ do\n      if v == numeral then\n        table.insert(sorted_numbers, k)\n  \
    \    end\n    end\n  end\n  return table.concat(sorted_numbers, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_to_number\
    \ = {\n    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n\
    \    five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n \
    \ }\n  local number_to_numeral = {\n    [0] = 'zero',\n    [1] = 'one',\n    [2]\
    \ = 'two',\n    [3] = 'three',\n    [4] = 'four',\n    [5] = 'five',\n    [6]\
    \ = 'six',\n    [7] = 'seven',\n    [8] = 'eight',\n    [9] = 'nine'\n  }\n  local\
    \ numbers_list = {}\n  for number in numbers:gmatch('%w+') do\n    table.insert(numbers_list,\
    \ numeral_to_number[number])\n  end\n  table.sort(numbers_list)\n  local sorted_numbers\
    \ = {}\n  for _, number in ipairs(numbers_list) do\n    table.insert(sorted_numbers,\
    \ number_to_numeral[number])\n  end\n  return table.concat(sorted_numbers, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ nums = {}\n\tfor num in numbers:gmatch(\"%S+\") do\n\t\tif numeral_map[num]\
    \ then\n\t\t\ttable.insert(nums, numeral_map[num])\n\t\tend\n\tend\n\ttable.sort(nums)\n\
    \tlocal result = {}\n\tfor _, num in ipairs(nums) do\n\t\ttable.insert(result,\
    \ num)\n\tend\n\treturn table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8tveinfu.lua:35:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmp8tveinfu.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_to_number\
    \ = {\n\t\tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\
    \t\tfive = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t\
    }\n\tlocal number_to_numeral = {\n\t\t[0] = 'zero',\n\t\t[1] = 'one',\n\t\t[2]\
    \ = 'two',\n\t\t[3] = 'three',\n\t\t[4] = 'four',\n\t\t[5] = 'five',\n\t\t[6]\
    \ = 'six',\n\t\t[7] = 'seven',\n\t\t[8] = 'eight',\n\t\t[9] = 'nine'\n\t}\n\t\
    local numbers_list = {}\n\tfor number in numbers:gmatch('%S+') do\n\t\ttable.insert(numbers_list,\
    \ numeral_to_number[number])\n\tend\n\ttable.sort(numbers_list)\n\tlocal sorted_numbers\
    \ = {}\n\tfor _, number in ipairs(numbers_list) do\n\t\ttable.insert(sorted_numbers,\
    \ number_to_numeral[number])\n\tend\n\treturn table.concat(sorted_numbers, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local number_to_numeral\
    \ = {\n        [0] = 'zero',\n        [1] = 'one',\n        [2] = 'two',\n   \
    \     [3] = 'three',\n        [4] = 'four',\n        [5] = 'five',\n        [6]\
    \ = 'six',\n        [7] = 'seven',\n        [8] = 'eight',\n        [9] = 'nine'\n\
    \    }\n    local numbers_table = {}\n    for number in numbers:gmatch('%w+')\
    \ do\n        table.insert(numbers_table, numeral_to_number[number])\n    end\n\
    \    table.sort(numbers_table)\n    local sorted_numbers = {}\n    for _, number\
    \ in ipairs(numbers_table) do\n        table.insert(sorted_numbers, number_to_numeral[number])\n\
    \    end\n    return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_to_number\
    \ = {\n    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n\
    \    five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n \
    \ }\n  local number_to_numeral = {\n    'zero',\n    'one',\n    'two',\n    'three',\n\
    \    'four',\n    'five',\n    'six',\n    'seven',\n    'eight',\n    'nine'\n\
    \  }\n  local numbers_table = {}\n  for number in numbers:gmatch('%S+') do\n \
    \   table.insert(numbers_table, numeral_to_number[number])\n  end\n  table.sort(numbers_table)\n\
    \  local sorted_numbers = {}\n  for _, number in ipairs(numbers_table) do\n  \
    \  table.insert(sorted_numbers, number_to_numeral[number])\n  end\n  return table.concat(sorted_numbers,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnf4lt8a2.lua:45:\
    \ expected: \"three\"\nactual: \"two\"\nstack traceback:\n\t/tmp/tmpnf4lt8a2.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ numeral_list = {}\n\tfor numeral in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(numeral_list,\
    \ numeral_map[numeral])\n\tend\n\ttable.sort(numeral_list)\n\tlocal sorted_numbers\
    \ = {}\n\tfor _, numeral in ipairs(numeral_list) do\n\t\ttable.insert(sorted_numbers,\
    \ numeral)\n\tend\n\treturn table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_6n6024.lua:33:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmp7_6n6024.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ nums = {}\n\tfor num in numbers:gmatch(\"%S+\") do\n\t\tlocal n = numeral_map[num]\n\
    \t\tif n then\n\t\t\ttable.insert(nums, n)\n\t\tend\n\tend\n\ttable.sort(nums)\n\
    \tlocal sorted = {}\n\tfor _, n in ipairs(nums) do\n\t\ttable.insert(sorted, numeral_map[n])\n\
    \tend\n\treturn table.concat(sorted, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptz2ou86h.lua:36:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmptz2ou86h.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        local numeral = numeral_map[num]\n  \
    \      if numeral then\n            table.insert(nums, numeral)\n        end\n\
    \    end\n    table.sort(nums)\n    local sorted_numbers = {}\n    for _, num\
    \ in ipairs(nums) do\n        table.insert(sorted_numbers, num)\n    end\n   \
    \ return table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyuw7zcqw.lua:36:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpyuw7zcqw.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        table.insert(nums, numeral_map[num])\n\
    \    end\n    table.sort(nums)\n    local result = {}\n    for _, num in ipairs(nums)\
    \ do\n        table.insert(result, num)\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1oh0hqnp.lua:33:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmp1oh0hqnp.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numbers_table =\
    \ {}\n    local numbers_sorted = {}\n    local numbers_sorted_string = ''\n  \
    \  local numbers_table_index = 1\n    local numbers_sorted_index = 1\n    local\
    \ numbers_sorted_string_index = 1\n    local numbers_table_length = 0\n    local\
    \ numbers_sorted_length = 0\n    local numbers_sorted_string_length = 0\n    local\
    \ numbers_table_value = 0\n    local numbers_sorted_value = 0\n    local numbers_sorted_string_value\
    \ = 0\n    local numbers_table_value_string = ''\n    local numbers_sorted_value_string\
    \ = ''\n    local numbers_sorted_string_value_string = ''\n    local numbers_table_value_string_length\
    \ = 0\n    local numbers_sorted_value_string_length = 0\n    local numbers_sorted_string_value_string_length\
    \ = 0\n    local numbers_table_value_string_index = 1\n    local numbers_sorted_value_string_index\
    \ = 1\n    local numbers_sorted_string_value_string_index = 1\n    local numbers_table_value_string_value\
    \ = ''\n    local numbers_sorted_value_string_value = ''\n    local numbers_sorted_string_value_string_value\
    \ = ''\n    local numbers_table_value_string_value_length = 0\n    local numbers_sorted_value_string_value_length\
    \ = 0\n    local numbers_sorted_string_value_string_value_length = 0\n    local\
    \ numbers_table_value_string_value_index = 1\n    local numbers_sorted_value_string_value_index\
    \ = 1\n    local numbers_sorted_string_value_string_value_index = 1\n    local\
    \ numbers_table_value_string_value_value = ''\n    local numbers_sorted_value_string_value_value\
    \ = ''\n    local numbers_sorted_string_value_string_value_value = ''\n    local\
    \ numbers_table_value_string_value_value_length = 0\n    local numbers_sorted_value_string_value_value_length\
    \ = 0\n    local numbers_sorted_string_value\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd2t99h8w.lua:52: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ nums = {}\n\tfor num in numbers:gmatch(\"%S+\") do\n\t\tlocal n = numeral_map[num]\n\
    \t\tif n then\n\t\t\ttable.insert(nums, n)\n\t\tend\n\tend\n\ttable.sort(nums)\n\
    \tlocal result = {}\n\tfor _, n in ipairs(nums) do\n\t\ttable.insert(result, tostring(n))\n\
    \tend\n\treturn table.concat(result, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6j_xkyur.lua:36:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmp6j_xkyur.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        table.insert(nums, numeral_map[num])\n\
    \    end\n    table.sort(nums)\n    local sorted_numbers = {}\n    for _, num\
    \ in ipairs(nums) do\n        table.insert(sorted_numbers, num)\n    end\n   \
    \ return table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprx_lzf5z.lua:33:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmprx_lzf5z.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local number_to_numeral\
    \ = {\n        [0] = 'zero',\n        [1] = 'one',\n        [2] = 'two',\n   \
    \     [3] = 'three',\n        [4] = 'four',\n        [5] = 'five',\n        [6]\
    \ = 'six',\n        [7] = 'seven',\n        [8] = 'eight',\n        [9] = 'nine'\n\
    \    }\n    local numbers_table = {}\n    for numeral in numbers:gmatch('%S+')\
    \ do\n        table.insert(numbers_table, numeral_to_number[numeral])\n    end\n\
    \    table.sort(numbers_table)\n    local sorted_numbers = {}\n    for _, number\
    \ in ipairs(numbers_table) do\n        table.insert(sorted_numbers, number_to_numeral[number])\n\
    \    end\n    return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_to_number\
    \ = {\n    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n\
    \    five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n \
    \ }\n  local numbers_table = {}\n  for number in numbers:gmatch(\"%w+\") do\n\
    \    table.insert(numbers_table, numeral_to_number[number])\n  end\n  table.sort(numbers_table)\n\
    \  local sorted_numbers = \"\"\n  for _, number in ipairs(numbers_table) do\n\
    \    sorted_numbers = sorted_numbers .. number .. \" \"\n  end\n  return sorted_numbers:sub(1,\
    \ -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprju1j6zj.lua:33:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmprju1j6zj.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        if numeral_map[num] then\n          \
    \  table.insert(nums, numeral_map[num])\n        end\n    end\n    table.sort(nums)\n\
    \    local result = {}\n    for _, num in ipairs(nums) do\n        for k, v in\
    \ pairs(numeral_map) do\n            if v == num then\n                table.insert(result,\
    \ k)\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(result, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local sorted = {}\n  \
    \  for num in numbers:gmatch(\"%w+\") do\n        table.insert(sorted, num)\n\
    \    end\n    table.sort(sorted, function(a, b)\n        return number_to_numeral[a]\
    \ < number_to_numeral[b]\n    end)\n    return table.concat(sorted, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr1xppeeo.lua:10:\
    \ attempt to index global 'number_to_numeral' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpr1xppeeo.lua:10: in function </tmp/tmpr1xppeeo.lua:9>\n\t[C]: in function\
    \ 'sort'\n\t/tmp/tmpr1xppeeo.lua:9: in function 'candidate'\n\t/tmp/tmpr1xppeeo.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local nums = {}\n  for num in numbers:gmatch(\"%S+\") do\n    table.insert(nums,\
    \ numeral_map[num])\n  end\n  table.sort(nums)\n  local sorted_numbers = {}\n\
    \  for _, num in ipairs(nums) do\n    for numeral, value in pairs(numeral_map)\
    \ do\n      if value == num then\n        table.insert(sorted_numbers, numeral)\n\
    \      end\n    end\n  end\n  return table.concat(sorted_numbers, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        ['zero'] = 0,\n        ['one'] = 1,\n        ['two'] = 2,\n   \
    \     ['three'] = 3,\n        ['four'] = 4,\n        ['five'] = 5,\n        ['six']\
    \ = 6,\n        ['seven'] = 7,\n        ['eight'] = 8,\n        ['nine'] = 9,\n\
    \    }\n    local number_to_numeral = {\n        [0] = 'zero',\n        [1] =\
    \ 'one',\n        [2] = 'two',\n        [3] = 'three',\n        [4] = 'four',\n\
    \        [5] = 'five',\n        [6] = 'six',\n        [7] = 'seven',\n       \
    \ [8] = 'eight',\n        [9] = 'nine',\n    }\n    local numbers_table = {}\n\
    \    for number in numbers:gmatch('%w+') do\n        table.insert(numbers_table,\
    \ numeral_to_number[number])\n    end\n    table.sort(numbers_table)\n    local\
    \ sorted_numbers = {}\n    for _, number in ipairs(numbers_table) do\n       \
    \ table.insert(sorted_numbers, number_to_numeral[number])\n    end\n    return\
    \ table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local nums = {}\n    for\
    \ num in numbers:gmatch(\"%S+\") do\n        table.insert(nums, num)\n    end\n\
    \    table.sort(nums)\n    return table.concat(nums, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe9nfedct.lua:18:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpe9nfedct.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal nums = {}\n\tfor num\
    \ in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(nums, num)\n\tend\n\ttable.sort(nums)\n\
    \treturn table.concat(nums, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5koj4678.lua:18:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp5koj4678.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local numeral_list = {}\n  for numeral in numbers:gmatch(\"%S+\") do\n    table.insert(numeral_list,\
    \ numeral_map[numeral])\n  end\n  table.sort(numeral_list)\n  local sorted_numbers\
    \ = {}\n  for _, numeral in ipairs(numeral_list) do\n    for name, value in pairs(numeral_map)\
    \ do\n      if value == numeral then\n        table.insert(sorted_numbers, name)\n\
    \      end\n    end\n  end\n  return table.concat(sorted_numbers, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local nums = {}\n    for\
    \ num in numbers:gmatch(\"%S+\") do\n        table.insert(nums, num)\n    end\n\
    \    table.sort(nums)\n    return table.concat(nums, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe9nfedct.lua:18:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpe9nfedct.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local number_to_numeral\
    \ = {\n        [0] = 'zero',\n        [1] = 'one',\n        [2] = 'two',\n   \
    \     [3] = 'three',\n        [4] = 'four',\n        [5] = 'five',\n        [6]\
    \ = 'six',\n        [7] = 'seven',\n        [8] = 'eight',\n        [9] = 'nine'\n\
    \    }\n    local numbers_table = {}\n    for numeral in numbers:gmatch('%w+')\
    \ do\n        table.insert(numbers_table, numeral_to_number[numeral])\n    end\n\
    \    table.sort(numbers_table)\n    local sorted_numbers = {}\n    for _, number\
    \ in ipairs(numbers_table) do\n        table.insert(sorted_numbers, number_to_numeral[number])\n\
    \    end\n    return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ numbers_list = {}\n\tfor numeral in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(numbers_list,\
    \ numeral_map[numeral])\n\tend\n\ttable.sort(numbers_list)\n\tlocal sorted_numbers\
    \ = {}\n\tfor _, number in ipairs(numbers_list) do\n\t\tfor numeral, numeral_number\
    \ in pairs(numeral_map) do\n\t\t\tif numeral_number == number then\n\t\t\t\ttable.insert(sorted_numbers,\
    \ numeral)\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn table.concat(sorted_numbers,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local numeral_list = {}\n  for numeral in numbers:gmatch(\"%S+\") do\n    table.insert(numeral_list,\
    \ numeral_map[numeral])\n  end\n  table.sort(numeral_list)\n  local sorted_numbers\
    \ = \"\"\n  for _, numeral in ipairs(numeral_list) do\n    for k, v in pairs(numeral_map)\
    \ do\n      if v == numeral then\n        sorted_numbers = sorted_numbers .. k\
    \ .. \" \"\n      end\n    end\n  end\n  return sorted_numbers:sub(1, -2)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ nums = {}\n\tfor num in numbers:gmatch(\"%S+\") do\n\t\tlocal n = numeral_map[num]\n\
    \t\tif n then\n\t\t\ttable.insert(nums, n)\n\t\tend\n\tend\n\ttable.sort(nums)\n\
    \tlocal numeral_map_inv = {}\n\tfor k, v in pairs(numeral_map) do\n\t\tnumeral_map_inv[v]\
    \ = k\n\tend\n\tlocal nums_str = {}\n\tfor _, n in ipairs(nums) do\n\t\ttable.insert(nums_str,\
    \ numeral_map_inv[n])\n\tend\n\treturn table.concat(nums_str, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        table.insert(nums, numeral_map[num])\n\
    \    end\n    table.sort(nums)\n    local result = {}\n    for _, num in ipairs(nums)\
    \ do\n        for numeral, value in pairs(numeral_map) do\n            if value\
    \ == num then\n                table.insert(result, numeral)\n               \
    \ break\n            end\n        end\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local nums = {}\n    for num\
    \ in numbers:gmatch(\"%S+\") do\n        if numeral_map[num] then\n          \
    \  table.insert(nums, numeral_map[num])\n        end\n    end\n    table.sort(nums)\n\
    \    local sorted_numbers = {}\n    for _, num in ipairs(nums) do\n        for\
    \ numeral, value in pairs(numeral_map) do\n            if value == num then\n\
    \                table.insert(sorted_numbers, numeral)\n            end\n    \
    \    end\n    end\n    return table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local num_table = {}\n\
    \    for num in numbers:gmatch(\"%S+\") do\n        table.insert(num_table, num)\n\
    \    end\n    table.sort(num_table)\n    return table.concat(num_table, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_uto4a5.lua:18:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmpb_uto4a5.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ nums = {}\n\tfor num in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(nums, numeral_map[num])\n\
    \tend\n\ttable.sort(nums)\n\tlocal numeral_map_inv = {}\n\tfor k, v in pairs(numeral_map)\
    \ do\n\t\tnumeral_map_inv[v] = k\n\tend\n\tlocal nums_str = {}\n\tfor _, num in\
    \ ipairs(nums) do\n\t\ttable.insert(nums_str, numeral_map_inv[num])\n\tend\n\t\
    return table.concat(nums_str, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local nums = {}\n  for num\
    \ in numbers:gmatch(\"%S+\") do\n    table.insert(nums, num)\n  end\n  table.sort(nums)\n\
    \  return table.concat(nums, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4lh2__u.lua:18:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp_4lh2__u.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_to_number\
    \ = {\n\t\tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\
    \t\tfive = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t\
    }\n\tlocal number_to_numeral = {\n\t\t[0] = 'zero',\n\t\t[1] = 'one',\n\t\t[2]\
    \ = 'two',\n\t\t[3] = 'three',\n\t\t[4] = 'four',\n\t\t[5] = 'five',\n\t\t[6]\
    \ = 'six',\n\t\t[7] = 'seven',\n\t\t[8] = 'eight',\n\t\t[9] = 'nine'\n\t}\n\t\
    local numbers_list = {}\n\tfor number in numbers:gmatch('%S+') do\n\t\ttable.insert(numbers_list,\
    \ numeral_to_number[number])\n\tend\n\ttable.sort(numbers_list)\n\tlocal sorted_numbers\
    \ = {}\n\tfor _, number in ipairs(numbers_list) do\n\t\ttable.insert(sorted_numbers,\
    \ number_to_numeral[number])\n\tend\n\treturn table.concat(sorted_numbers, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ nums = {}\n\tfor num in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(nums, numeral_map[num])\n\
    \tend\n\ttable.sort(nums)\n\tlocal numeral_map_inverse = {}\n\tfor k, v in pairs(numeral_map)\
    \ do\n\t\tnumeral_map_inverse[v] = k\n\tend\n\tlocal result = {}\n\tfor _, num\
    \ in ipairs(nums) do\n\t\ttable.insert(result, numeral_map_inverse[num])\n\tend\n\
    \treturn table.concat(result, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local nums = {}\n  for num in numbers:gmatch(\"%S+\") do\n    table.insert(nums,\
    \ numeral_map[num])\n  end\n  table.sort(nums)\n  local sorted_numbers = {}\n\
    \  for _, num in ipairs(nums) do\n    for numeral, value in pairs(numeral_map)\
    \ do\n      if value == num then\n        table.insert(sorted_numbers, numeral)\n\
    \      end\n    end\n  end\n  return table.concat(sorted_numbers, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ nums = {}\n\tfor num in numbers:gmatch(\"%S+\") do\n\t\tlocal n = numeral_map[num]\n\
    \t\tif n then\n\t\t\ttable.insert(nums, n)\n\t\tend\n\tend\n\ttable.sort(nums)\n\
    \tlocal sorted = {}\n\tfor _, n in ipairs(nums) do\n\t\ttable.insert(sorted, tostring(n))\n\
    \tend\n\treturn table.concat(sorted, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx9bmbghi.lua:36:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpx9bmbghi.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ numeral_list = {}\n\tfor numeral in numbers:gmatch(\"%S+\") do\n\t\tlocal number\
    \ = numeral_map[numeral]\n\t\tif number then\n\t\t\ttable.insert(numeral_list,\
    \ number)\n\t\tend\n\tend\n\ttable.sort(numeral_list)\n\tlocal sorted_numbers\
    \ = {}\n\tfor _, number in ipairs(numeral_list) do\n\t\ttable.insert(sorted_numbers,\
    \ number)\n\tend\n\treturn table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf53_bj82.lua:36:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpf53_bj82.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local nums = {}\n    for\
    \ num in numbers:gmatch(\"%w+\") do\n        table.insert(nums, num)\n    end\n\
    \    table.sort(nums)\n    return table.concat(nums, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kbwk02r.lua:18:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp3kbwk02r.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_to_number\
    \ = {\n\t\tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\
    \t\tfive = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t\
    }\n\tlocal number_to_numeral = {\n\t\t[0] = 'zero',\n\t\t[1] = 'one',\n\t\t[2]\
    \ = 'two',\n\t\t[3] = 'three',\n\t\t[4] = 'four',\n\t\t[5] = 'five',\n\t\t[6]\
    \ = 'six',\n\t\t[7] = 'seven',\n\t\t[8] = 'eight',\n\t\t[9] = 'nine'\n\t}\n\t\
    local numbers_table = {}\n\tfor number in numbers:gmatch('%S+') do\n\t\ttable.insert(numbers_table,\
    \ numeral_to_number[number])\n\tend\n\ttable.sort(numbers_table)\n\tlocal sorted_numbers\
    \ = {}\n\tfor _, number in ipairs(numbers_table) do\n\t\ttable.insert(sorted_numbers,\
    \ number_to_numeral[number])\n\tend\n\treturn table.concat(sorted_numbers, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_map = {\n\
    \        zero = 0,\n        one = 1,\n        two = 2,\n        three = 3,\n \
    \       four = 4,\n        five = 5,\n        six = 6,\n        seven = 7,\n \
    \       eight = 8,\n        nine = 9\n    }\n    local numeral_list = {}\n   \
    \ for numeral in numbers:gmatch(\"%S+\") do\n        local number = numeral_map[numeral]\n\
    \        if number then\n            table.insert(numeral_list, number)\n    \
    \    end\n    end\n    table.sort(numeral_list)\n    local sorted_numbers = {}\n\
    \    for _, number in ipairs(numeral_list) do\n        table.insert(sorted_numbers,\
    \ number)\n    end\n    return table.concat(sorted_numbers, \" \")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4bw50pfs.lua:36:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmp4bw50pfs.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local num_map = {\n    zero\
    \ = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n    five =\
    \ 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n  local\
    \ nums = {}\n  for num in numbers:gmatch(\"%S+\") do\n    table.insert(nums, num_map[num])\n\
    \  end\n  table.sort(nums)\n  local result = {}\n  for _, num in ipairs(nums)\
    \ do\n    for name, value in pairs(num_map) do\n      if value == num then\n \
    \       table.insert(result, name)\n        break\n      end\n    end\n  end\n\
    \  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n  local numeral_map = {\n\
    \    zero = 0,\n    one = 1,\n    two = 2,\n    three = 3,\n    four = 4,\n  \
    \  five = 5,\n    six = 6,\n    seven = 7,\n    eight = 8,\n    nine = 9\n  }\n\
    \  local numeral_list = {}\n  for numeral in numbers:gmatch(\"%S+\") do\n    table.insert(numeral_list,\
    \ numeral_map[numeral])\n  end\n  table.sort(numeral_list)\n  local sorted_numbers\
    \ = {}\n  for _, numeral in ipairs(numeral_list) do\n    for k, v in pairs(numeral_map)\
    \ do\n      if v == numeral then\n        table.insert(sorted_numbers, k)\n  \
    \    end\n    end\n  end\n  return table.concat(sorted_numbers, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local number_to_numeral\
    \ = {\n        [0] = 'zero',\n        [1] = 'one',\n        [2] = 'two',\n   \
    \     [3] = 'three',\n        [4] = 'four',\n        [5] = 'five',\n        [6]\
    \ = 'six',\n        [7] = 'seven',\n        [8] = 'eight',\n        [9] = 'nine'\n\
    \    }\n    local numbers_table = {}\n    for number in numbers:gmatch('%a+')\
    \ do\n        table.insert(numbers_table, numeral_to_number[number])\n    end\n\
    \    table.sort(numbers_table)\n    local sorted_numbers = {}\n    for _, number\
    \ in ipairs(numbers_table) do\n        table.insert(sorted_numbers, number_to_numeral[number])\n\
    \    end\n    return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local numbers_table = {}\n\
    \    for number in numbers:gmatch(\"%w+\") do\n        table.insert(numbers_table,\
    \ numeral_to_number[number])\n    end\n    table.sort(numbers_table)\n    local\
    \ sorted_numbers = {}\n    for _, number in ipairs(numbers_table) do\n       \
    \ for numeral, value in pairs(numeral_to_number) do\n            if value == number\
    \ then\n                table.insert(sorted_numbers, numeral)\n            end\n\
    \        end\n    end\n    return table.concat(sorted_numbers, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal nums = {}\n\tfor num\
    \ in numbers:gmatch(\"%S+\") do\n\t\tnums[#nums+1] = num\n\tend\n\ttable.sort(nums)\n\
    \treturn table.concat(nums, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqg3vbdb.lua:18:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmphqg3vbdb.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal numeral_map = {\n\t\
    \tzero = 0,\n\t\tone = 1,\n\t\ttwo = 2,\n\t\tthree = 3,\n\t\tfour = 4,\n\t\tfive\
    \ = 5,\n\t\tsix = 6,\n\t\tseven = 7,\n\t\teight = 8,\n\t\tnine = 9\n\t}\n\tlocal\
    \ numeral_list = {}\n\tfor numeral in numbers:gmatch(\"%w+\") do\n\t\ttable.insert(numeral_list,\
    \ numeral_map[numeral])\n\tend\n\ttable.sort(numeral_list)\n\tlocal sorted_numbers\
    \ = {}\n\tfor _, numeral in ipairs(numeral_list) do\n\t\ttable.insert(sorted_numbers,\
    \ numeral)\n\tend\n\treturn table.concat(sorted_numbers, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_ytyzqp.lua:33:\
    \ expected: \"three\"\nactual: \"3\"\nstack traceback:\n\t/tmp/tmpt_ytyzqp.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n    local numeral_to_number\
    \ = {\n        zero = 0,\n        one = 1,\n        two = 2,\n        three =\
    \ 3,\n        four = 4,\n        five = 5,\n        six = 6,\n        seven =\
    \ 7,\n        eight = 8,\n        nine = 9\n    }\n    local numbers_table = {}\n\
    \    for number in numbers:gmatch(\"%S+\") do\n        table.insert(numbers_table,\
    \ numeral_to_number[number])\n    end\n    table.sort(numbers_table)\n    local\
    \ output = {}\n    for _, number in ipairs(numbers_table) do\n        for numeral,\
    \ numeral_number in pairs(numeral_to_number) do\n            if number == numeral_number\
    \ then\n                table.insert(output, numeral)\n            end\n     \
    \   end\n    end\n    return table.concat(output, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\nlocal function sort_numbers(numbers)\n\tlocal nums = {}\n\tfor num\
    \ in numbers:gmatch(\"%S+\") do\n\t\ttable.insert(nums, num)\n\tend\n\ttable.sort(nums)\n\
    \treturn table.concat(nums, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5koj4678.lua:18:\
    \ expected: \"three five nine\"\nactual: \"five nine three\"\nstack traceback:\n\
    \t/tmp/tmp5koj4678.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
