language: lua
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local levels = {}\n    local level = 0\n    for i = 1, #paren_string do\n\
    \        local c = paren_string:sub(i, i)\n        if c == '(' then\n        \
    \    level = level + 1\n        elseif c == ')' then\n            level = level\
    \ - 1\n        end\n        levels[i] = level\n    end\n    return levels\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdhbzmw8s.lua:22:\
    \ expected: \n{2, 3, 1, 3}\nactual: \n{\n    1,\n    2,\n    1,\n    2,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    0,\n    0,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    2,\n    1,\n    2,\n\
    \    1,\n    0\n}\nstack traceback:\n\t/tmp/tmpdhbzmw8s.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in string.gmatch(paren_string, \"\
    %S+\") do\n    local paren_stack = {}\n    local max_depth = 0\n    for paren\
    \ in string.gmatch(paren_group, \".\") do\n      if paren == \"(\" then\n    \
    \    table.insert(paren_stack, paren)\n        max_depth = math.max(max_depth,\
    \ #paren_stack)\n      elseif paren == \")\" then\n        table.remove(paren_stack)\n\
    \      end\n    end\n    table.insert(paren_groups, max_depth)\n  end\n  return\
    \ paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_depth = 0\n    local depth = 0\n    for i = 1, #paren_string do\n\
    \        local c = paren_string:sub(i, i)\n        if c == '(' then\n        \
    \    depth = depth + 1\n            if depth > max_depth then\n              \
    \  max_depth = depth\n            end\n        elseif c == ')' then\n        \
    \    depth = depth - 1\n        end\n    end\n    return max_depth\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjijminri.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpjijminri.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for group in paren_string:gmatch(\"%b()\") do\n\
    \        local max_level = 0\n        local level = 0\n        for c in group:gmatch(\"\
    .\") do\n            if c == \"(\" then\n                level = level + 1\n \
    \           elseif c == \")\" then\n                level = level - 1\n      \
    \      end\n            if level > max_level then\n                max_level =\
    \ level\n            end\n        end\n        table.insert(paren_groups, max_level)\n\
    \    end\n    return paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local paren_level = 0\n    local paren_start\
    \ = 0\n    local paren_end = 0\n    local paren_count = 0\n    local paren_max\
    \ = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            paren_count = paren_count + 1\n  \
    \          if paren_count > paren_max then\n                paren_max = paren_count\n\
    \            end\n            paren_level = paren_level + 1\n            if paren_level\
    \ == 1 then\n                paren_start = i\n            end\n        elseif\
    \ c == ')' then\n            paren_count = paren_count - 1\n            paren_level\
    \ = paren_level - 1\n            if paren_level == 0 then\n                paren_end\
    \ = i\n                table.insert(paren_levels, paren_string:sub(paren_start,\
    \ paren_end))\n            end\n        end\n    end\n    return paren_levels,\
    \ paren_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnlt_5bl_.lua:37:\
    \ expected: {2, 3, 1, 3}\nactual: {\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    }\nstack traceback:\n\t/tmp/tmpnlt_5bl_.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"%S+\")\
    \ do\n    local max_depth = 0\n    local depth = 0\n    for c in paren_group:gmatch(\"\
    .\") do\n      if c == \"(\" then\n        depth = depth + 1\n        if depth\
    \ > max_depth then\n          max_depth = depth\n        end\n      elseif c ==\
    \ \")\" then\n        depth = depth - 1\n      end\n    end\n    table.insert(paren_groups,\
    \ max_depth)\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local levels = {}\n    local level = 0\n    for i = 1, #paren_string do\n\
    \        local c = paren_string:sub(i, i)\n        if c == '(' then\n        \
    \    level = level + 1\n        elseif c == ')' then\n            levels[level]\
    \ = (levels[level] or 0) + 1\n            level = level - 1\n        end\n   \
    \ end\n    return levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp30ti31dg.lua:22:\
    \ expected: {2, 3, 1, 3}\nactual: {4, 6, 2}\nstack traceback:\n\t/tmp/tmp30ti31dg.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_depth = 0\n  local depth = 0\n  for i = 1, #paren_string do\n   \
    \ local c = paren_string:sub(i, i)\n    if c == '(' then\n      depth = depth\
    \ + 1\n      if depth > max_depth then\n        max_depth = depth\n      end\n\
    \    elseif c == ')' then\n      depth = depth - 1\n    end\n  end\n  return max_depth\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ioju6kl.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmp4ioju6kl.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"%S+\"\
    ) do\n        local max_nesting = 0\n        local current_nesting = 0\n     \
    \   for paren in paren_group:gmatch(\".\") do\n            if paren == \"(\" then\n\
    \                current_nesting = current_nesting + 1\n            elseif paren\
    \ == \")\" then\n                current_nesting = current_nesting - 1\n     \
    \       end\n            if current_nesting > max_nesting then\n             \
    \   max_nesting = current_nesting\n            end\n        end\n        table.insert(paren_groups,\
    \ max_nesting)\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local paren_level = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         paren_level = paren_level + 1\n        elseif c == ')' then\n      \
    \      paren_level = paren_level - 1\n        end\n        paren_levels[i] = paren_level\n\
    \    end\n    return paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3js9f_4c.lua:22:\
    \ expected: \n{2, 3, 1, 3}\nactual: \n{\n    1,\n    2,\n    1,\n    2,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    0,\n    0,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    2,\n    1,\n    2,\n\
    \    1,\n    0\n}\nstack traceback:\n\t/tmp/tmp3js9f_4c.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_depth = 0\n    local depth = 0\n    for i = 1, #paren_string do\n\
    \        local c = paren_string:sub(i, i)\n        if c == '(' then\n        \
    \    depth = depth + 1\n            if depth > max_depth then\n              \
    \  max_depth = depth\n            end\n        elseif c == ')' then\n        \
    \    depth = depth - 1\n        end\n    end\n    return max_depth\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjijminri.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpjijminri.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local levels = {}\n    local level = 0\n    for i = 1, #paren_string do\n\
    \        local ch = paren_string:sub(i, i)\n        if ch == '(' then\n      \
    \      level = level + 1\n        elseif ch == ')' then\n            levels[level]\
    \ = (levels[level] or 0) + 1\n            level = level - 1\n        end\n   \
    \ end\n    return levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbut9s9o3.lua:22:\
    \ expected: {2, 3, 1, 3}\nactual: {4, 6, 2}\nstack traceback:\n\t/tmp/tmpbut9s9o3.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"%S+\"\
    ) do\n        local max_nesting = 0\n        local nesting = 0\n        for paren\
    \ in paren_group:gmatch(\".\") do\n            if paren == \"(\" then\n      \
    \          nesting = nesting + 1\n            elseif paren == \")\" then\n   \
    \             nesting = nesting - 1\n            end\n            if nesting >\
    \ max_nesting then\n                max_nesting = nesting\n            end\n \
    \       end\n        table.insert(paren_groups, max_nesting)\n    end\n    return\
    \ paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_nesting = 0\n  for paren_group in paren_string:gmatch(\"%b()\") do\n\
    \    local nesting = 0\n    for _ in paren_group:gmatch(\"%(\") do\n      nesting\
    \ = nesting + 1\n    end\n    max_nesting = math.max(max_nesting, nesting)\n \
    \ end\n  return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw7livrrj.lua:19:\
    \ expected: {2, 3, 1, 3}\nactual: 5\nstack traceback:\n\t/tmp/tmpw7livrrj.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"%b()\"\
    ) do\n        table.insert(paren_groups, paren_group)\n    end\n    local max_nesting\
    \ = 0\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        for _ in paren_group:gmatch(\"%(\") do\n            nesting = nesting\
    \ + 1\n        end\n        if nesting > max_nesting then\n            max_nesting\
    \ = nesting\n        end\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bi8edoz.lua:25:\
    \ expected: {2, 3, 1, 3}\nactual: 5\nstack traceback:\n\t/tmp/tmp8bi8edoz.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_depth = 0\n    local depth = 0\n    for i = 1, #paren_string do\n\
    \        local char = paren_string:sub(i, i)\n        if char == '(' then\n  \
    \          depth = depth + 1\n            if depth > max_depth then\n        \
    \        max_depth = depth\n            end\n        elseif char == ')' then\n\
    \            depth = depth - 1\n        end\n    end\n    return max_depth\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpru02sf0f.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpru02sf0f.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"%b()\"\
    ) do\n    table.insert(paren_groups, paren_group)\n  end\n  local max_nesting\
    \ = 0\n  for _, paren_group in ipairs(paren_groups) do\n    local cur_nesting\
    \ = 0\n    for c in paren_group:gmatch(\".\") do\n      if c == \"(\" then\n \
    \       cur_nesting = cur_nesting + 1\n      elseif c == \")\" then\n        cur_nesting\
    \ = cur_nesting - 1\n      end\n      max_nesting = math.max(max_nesting, cur_nesting)\n\
    \    end\n  end\n  return max_nesting\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdeq18m6a.lua:27:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpdeq18m6a.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local paren_level = 0\n    for i=1,#paren_string\
    \ do\n        local c = paren_string:sub(i,i)\n        if c == '(' then\n    \
    \        paren_level = paren_level + 1\n        elseif c == ')' then\n       \
    \     paren_level = paren_level - 1\n        elseif c == ' ' then\n          \
    \  paren_levels[#paren_levels+1] = paren_level\n            paren_level = 0\n\
    \        end\n    end\n    paren_levels[#paren_levels+1] = paren_level\n    return\
    \ paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ond1y4s.lua:25:\
    \ expected: {2, 3, 1, 3}\nactual: {0, 0, 0, 0}\nstack traceback:\n\t/tmp/tmp1ond1y4s.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_nesting = 0\n    local current_nesting = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            current_nesting = current_nesting + 1\n            if current_nesting\
    \ > max_nesting then\n                max_nesting = current_nesting\n        \
    \    end\n        elseif char == ')' then\n            current_nesting = current_nesting\
    \ - 1\n        end\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvqc6c6em.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpvqc6c6em.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"%S+\")\
    \ do\n    local paren_levels = {}\n    local level = 0\n    for paren in paren_group:gmatch(\"\
    .\") do\n      if paren == \"(\" then\n        level = level + 1\n      elseif\
    \ paren == \")\" then\n        level = level - 1\n      end\n      paren_levels[level]\
    \ = (paren_levels[level] or 0) + 1\n    end\n    table.insert(paren_groups, paren_levels)\n\
    \  end\n  return paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpewrwtp46.lua:25:\
    \ expected: {2, 3, 1, 3}\nactual: {{0=1, 3, 2}, {0=1, 2, 2, 1}, {0=1, 1}, {0=1,\
    \ 4, 4, 1}}\nstack traceback:\n\t/tmp/tmpewrwtp46.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"%b()\"\
    ) do\n    table.insert(paren_groups, paren_group)\n  end\n  local max_depth =\
    \ 0\n  for _, paren_group in ipairs(paren_groups) do\n    local depth = 0\n  \
    \  for _ in paren_group:gmatch(\"%(\") do\n      depth = depth + 1\n    end\n\
    \    max_depth = math.max(max_depth, depth)\n  end\n  return max_depth\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1izue3ly.lua:23:\
    \ expected: {2, 3, 1, 3}\nactual: 5\nstack traceback:\n\t/tmp/tmp1izue3ly.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_levels = {}\n  for paren_group in paren_string:gmatch(\"%S+\")\
    \ do\n    local level = 0\n    local max_level = 0\n    for c in paren_group:gmatch(\"\
    .\") do\n      if c == \"(\" then\n        level = level + 1\n      elseif c ==\
    \ \")\" then\n        level = level - 1\n      end\n      max_level = math.max(max_level,\
    \ level)\n    end\n    table.insert(paren_levels, max_level)\n  end\n  return\
    \ paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_nesting = 0\n  local nesting = 0\n  for i = 1, #paren_string do\n\
    \    local c = paren_string:sub(i, i)\n    if c == '(' then\n      nesting = nesting\
    \ + 1\n      if nesting > max_nesting then\n        max_nesting = nesting\n  \
    \    end\n    elseif c == ')' then\n      nesting = nesting - 1\n    end\n  end\n\
    \  return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpew9h6eox.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpew9h6eox.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"%S+\"\
    ) do\n        local max_depth = 0\n        local depth = 0\n        for c in paren_group:gmatch(\"\
    .\") do\n            if c == \"(\" then\n                depth = depth + 1\n \
    \               if depth > max_depth then\n                    max_depth = depth\n\
    \                end\n            elseif c == \")\" then\n                depth\
    \ = depth - 1\n            end\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for group in paren_string:gmatch(\"%b()\") do\n\
    \    local max_depth = 0\n    local depth = 0\n    for c in group:gmatch(\".\"\
    ) do\n      if c == \"(\" then\n        depth = depth + 1\n        if depth >\
    \ max_depth then\n          max_depth = depth\n        end\n      elseif c ==\
    \ \")\" then\n        depth = depth - 1\n      end\n    end\n    table.insert(paren_groups,\
    \ max_depth)\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"%S+\")\
    \ do\n    local max_level = 0\n    local level = 0\n    for char in paren_group:gmatch(\"\
    .\") do\n      if char == \"(\" then\n        level = level + 1\n      elseif\
    \ char == \")\" then\n        level = level - 1\n      end\n      if level > max_level\
    \ then\n        max_level = level\n      end\n    end\n    paren_groups[#paren_groups\
    \ + 1] = max_level\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"%b()\"\
    ) do\n        paren_groups[#paren_groups + 1] = paren_group\n    end\n    local\
    \ max_nesting = 0\n    for _, paren_group in ipairs(paren_groups) do\n       \
    \ local nesting = 0\n        for paren in paren_group:gmatch(\"%(\") do\n    \
    \        nesting = nesting + 1\n        end\n        if nesting > max_nesting\
    \ then\n            max_nesting = nesting\n        end\n    end\n    return max_nesting\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnvk3v3f0.lua:25:\
    \ expected: {2, 3, 1, 3}\nactual: 5\nstack traceback:\n\t/tmp/tmpnvk3v3f0.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"%b()\"\
    ) do\n    local max_nesting = 0\n    local current_nesting = 0\n    for _ in paren_group:gmatch(\"\
    %(\") do\n      current_nesting = current_nesting + 1\n      if current_nesting\
    \ > max_nesting then\n        max_nesting = current_nesting\n      end\n    end\n\
    \    for _ in paren_group:gmatch(\"%)\") do\n      current_nesting = current_nesting\
    \ - 1\n    end\n    table.insert(paren_groups, max_nesting)\n  end\n  return paren_groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsr9h1nqc.lua:26:\
    \ expected: {2, 3, 1, 3}\nactual: {3, 3, 1, 5}\nstack traceback:\n\t/tmp/tmpsr9h1nqc.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_levels = {}\n  for paren_group in paren_string:gmatch(\"%S+\")\
    \ do\n    local max_level = 0\n    local level = 0\n    for char in paren_group:gmatch(\"\
    .\") do\n      if char == \"(\" then\n        level = level + 1\n      elseif\
    \ char == \")\" then\n        level = level - 1\n      end\n      if level > max_level\
    \ then\n        max_level = level\n      end\n    end\n    table.insert(paren_levels,\
    \ max_level)\n  end\n  return paren_levels\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \tlocal max_depth = 0\n\tlocal depth = 0\n\tfor i = 1, #paren_string do\n\t\t\
    local c = paren_string:sub(i, i)\n\t\tif c == '(' then\n\t\t\tdepth = depth +\
    \ 1\n\t\t\tif depth > max_depth then\n\t\t\t\tmax_depth = depth\n\t\t\tend\n\t\
    \telseif c == ')' then\n\t\t\tdepth = depth - 1\n\t\tend\n\tend\n\treturn max_depth\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4gqkjdo.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpo4gqkjdo.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_level = 0\n    local level = 0\n    for i = 1, #paren_string do\n\
    \        local c = paren_string:sub(i, i)\n        if c == '(' then\n        \
    \    level = level + 1\n            if level > max_level then\n              \
    \  max_level = level\n            end\n        elseif c == ')' then\n        \
    \    level = level - 1\n        end\n    end\n    return max_level\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnri_o1pc.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpnri_o1pc.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_depth = 0\n  local depth = 0\n  for c in paren_string:gmatch(\".\"\
    ) do\n    if c == \"(\" then\n      depth = depth + 1\n      if depth > max_depth\
    \ then\n        max_depth = depth\n      end\n    elseif c == \")\" then\n   \
    \   depth = depth - 1\n    end\n  end\n  return max_depth\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp87ewur2s.lua:23:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmp87ewur2s.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for group in paren_string:gmatch(\"%b()\") do\n\
    \        table.insert(paren_groups, group)\n    end\n    local max_nesting = 0\n\
    \    for _, group in ipairs(paren_groups) do\n        local nesting = 0\n    \
    \    for _ in group:gmatch(\"%(\") do\n            nesting = nesting + 1\n   \
    \     end\n        if nesting > max_nesting then\n            max_nesting = nesting\n\
    \        end\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9q0f2y1s.lua:25:\
    \ expected: {2, 3, 1, 3}\nactual: 5\nstack traceback:\n\t/tmp/tmp9q0f2y1s.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for group in paren_string:gmatch(\"%b()\") do\n\
    \    local depth = 0\n    local max_depth = 0\n    for c in group:gmatch(\".\"\
    ) do\n      if c == \"(\" then\n        depth = depth + 1\n        if depth >\
    \ max_depth then\n          max_depth = depth\n        end\n      elseif c ==\
    \ \")\" then\n        depth = depth - 1\n      end\n    end\n    table.insert(paren_groups,\
    \ max_depth)\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"%b()\"\
    ) do\n    paren_groups[#paren_groups + 1] = paren_group\n  end\n  local max_nesting\
    \ = 0\n  for _, paren_group in ipairs(paren_groups) do\n    local nesting = 0\n\
    \    for paren in paren_group:gmatch(\"%(\") do\n      nesting = nesting + 1\n\
    \    end\n    if nesting > max_nesting then\n      max_nesting = nesting\n   \
    \ end\n  end\n  return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp44qht3cz.lua:25:\
    \ expected: {2, 3, 1, 3}\nactual: 5\nstack traceback:\n\t/tmp/tmp44qht3cz.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for group in paren_string:gmatch(\"%b()\") do\n\
    \    table.insert(paren_groups, group)\n  end\n  local max_nesting = 0\n  for\
    \ _, group in ipairs(paren_groups) do\n    local nesting = 0\n    for c in group:gmatch(\"\
    .\") do\n      if c == \"(\" then\n        nesting = nesting + 1\n      elseif\
    \ c == \")\" then\n        nesting = nesting - 1\n      end\n    end\n    if nesting\
    \ > max_nesting then\n      max_nesting = nesting\n    end\n  end\n  return max_nesting\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3vaqbqu1.lua:29:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmp3vaqbqu1.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"%S+\"\
    ) do\n        local max_depth = 0\n        local depth = 0\n        for char in\
    \ paren_group:gmatch(\".\") do\n            if char == \"(\" then\n          \
    \      depth = depth + 1\n                if depth > max_depth then\n        \
    \            max_depth = depth\n                end\n            elseif char ==\
    \ \")\" then\n                depth = depth - 1\n            end\n        end\n\
    \        table.insert(paren_groups, max_depth)\n    end\n    return paren_groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"%S+\")\
    \ do\n    local depth = 0\n    local max_depth = 0\n    for paren in paren_group:gmatch(\"\
    .\") do\n      if paren == \"(\" then\n        depth = depth + 1\n      elseif\
    \ paren == \")\" then\n        depth = depth - 1\n      end\n      if depth >\
    \ max_depth then\n        max_depth = depth\n      end\n    end\n    table.insert(paren_groups,\
    \ max_depth)\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_depth = 0\n    local depth = 0\n    for i = 1, #paren_string do\n\
    \        local c = paren_string:sub(i, i)\n        if c == '(' then\n        \
    \    depth = depth + 1\n            if depth > max_depth then\n              \
    \  max_depth = depth\n            end\n        elseif c == ')' then\n        \
    \    depth = depth - 1\n        end\n    end\n    return max_depth\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjijminri.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpjijminri.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local levels = {}\n    local level = 0\n    for i = 1, #paren_string do\n\
    \        local c = paren_string:sub(i, i)\n        if c == '(' then\n        \
    \    level = level + 1\n        elseif c == ')' then\n            levels[level]\
    \ = (levels[level] or 0) + 1\n            level = level - 1\n        end\n   \
    \ end\n    return levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp30ti31dg.lua:22:\
    \ expected: {2, 3, 1, 3}\nactual: {4, 6, 2}\nstack traceback:\n\t/tmp/tmp30ti31dg.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_depth = 0\n  local current_depth = 0\n  for i = 1, #paren_string\
    \ do\n    if paren_string:sub(i, i) == '(' then\n      current_depth = current_depth\
    \ + 1\n      if current_depth > max_depth then\n        max_depth = current_depth\n\
    \      end\n    elseif paren_string:sub(i, i) == ')' then\n      current_depth\
    \ = current_depth - 1\n    end\n  end\n  return max_depth\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5mtiszj.lua:23:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpv5mtiszj.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local paren_level = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            paren_level = paren_level + 1\n        elseif char == ')' then\n\
    \            paren_level = paren_level - 1\n        end\n        paren_levels[i]\
    \ = paren_level\n    end\n    return paren_levels\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_d46_cg6.lua:22:\
    \ expected: \n{2, 3, 1, 3}\nactual: \n{\n    1,\n    2,\n    1,\n    2,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    0,\n    0,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    2,\n    1,\n    2,\n\
    \    1,\n    0\n}\nstack traceback:\n\t/tmp/tmp_d46_cg6.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local paren_level = 0\n    local paren_start\
    \ = 0\n    local paren_end = 0\n    local paren_string_len = string.len(paren_string)\n\
    \    for i = 1, paren_string_len do\n        local c = string.sub(paren_string,\
    \ i, i)\n        if c == '(' then\n            paren_level = paren_level + 1\n\
    \            if paren_level == 1 then\n                paren_start = i\n     \
    \       end\n        elseif c == ')' then\n            if paren_level == 1 then\n\
    \                paren_end = i\n                table.insert(paren_levels, paren_end\
    \ - paren_start + 1)\n            end\n            paren_level = paren_level -\
    \ 1\n        end\n    end\n    return paren_levels\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppkjaa39s.lua:31:\
    \ expected: {2, 3, 1, 3}\nactual: {6, 6, 2, 10}\nstack traceback:\n\t/tmp/tmppkjaa39s.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_table = {}\n  for paren_group in string.gmatch(paren_string, \"\
    %S+\") do\n    local level = 0\n    local max_level = 0\n    for i = 1, #paren_group\
    \ do\n      local char = paren_group:sub(i, i)\n      if char == \"(\" then\n\
    \        level = level + 1\n      elseif char == \")\" then\n        level = level\
    \ - 1\n      end\n      if level > max_level then\n        max_level = level\n\
    \      end\n    end\n    table.insert(paren_table, max_level)\n  end\n  return\
    \ paren_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_depth = 0\n    local depth = 0\n    local paren_stack = {}\n  \
    \  for i = 1, #paren_string do\n        local c = paren_string:sub(i, i)\n   \
    \     if c == '(' then\n            depth = depth + 1\n            if depth >\
    \ max_depth then\n                max_depth = depth\n            end\n       \
    \     paren_stack[#paren_stack + 1] = c\n        elseif c == ')' then\n      \
    \      depth = depth - 1\n            paren_stack[#paren_stack] = nil\n      \
    \  end\n    end\n    return max_depth\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3u8hyn4e.lua:27:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmp3u8hyn4e.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"%S+\"\
    ) do\n        local paren_count = 0\n        local max_paren_count = 0\n     \
    \   for paren in paren_group:gmatch(\".\") do\n            if paren == \"(\" then\n\
    \                paren_count = paren_count + 1\n            elseif paren == \"\
    )\" then\n                paren_count = paren_count - 1\n            end\n   \
    \         if paren_count > max_paren_count then\n                max_paren_count\
    \ = paren_count\n            end\n        end\n        table.insert(paren_groups,\
    \ max_paren_count)\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_depth = 0\n    local depth = 0\n    for i = 1, #paren_string do\n\
    \        local c = paren_string:sub(i, i)\n        if c == '(' then\n        \
    \    depth = depth + 1\n            if depth > max_depth then\n              \
    \  max_depth = depth\n            end\n        elseif c == ')' then\n        \
    \    depth = depth - 1\n        end\n    end\n    return max_depth\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjijminri.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpjijminri.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_nesting = 0\n    local current_nesting = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            current_nesting = current_nesting + 1\n            if current_nesting\
    \ > max_nesting then\n                max_nesting = current_nesting\n        \
    \    end\n        elseif char == ')' then\n            current_nesting = current_nesting\
    \ - 1\n        end\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvqc6c6em.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpvqc6c6em.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_nesting = 0\n  local current_nesting = 0\n  for i = 1, #paren_string\
    \ do\n    local char = paren_string:sub(i, i)\n    if char == '(' then\n     \
    \ current_nesting = current_nesting + 1\n      if current_nesting > max_nesting\
    \ then\n        max_nesting = current_nesting\n      end\n    elseif char == ')'\
    \ then\n      current_nesting = current_nesting - 1\n    end\n  end\n  return\
    \ max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjry03_4l.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpjry03_4l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for group in paren_string:gmatch(\"%b()\") do\n\
    \    local max_nesting = 0\n    for _ in group:gmatch(\"%b()\") do\n      max_nesting\
    \ = max_nesting + 1\n    end\n    table.insert(paren_groups, max_nesting)\n  end\n\
    \  return paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpig1w23vd.lua:19:\
    \ expected: {2, 3, 1, 3}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpig1w23vd.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_depth = 0\n    local curr_depth = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            curr_depth = curr_depth + 1\n            if curr_depth > max_depth\
    \ then\n                max_depth = curr_depth\n            end\n        elseif\
    \ char == ')' then\n            curr_depth = curr_depth - 1\n        end\n   \
    \ end\n    return max_depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_fsv3puq.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmp_fsv3puq.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local levels = {}\n    local level = 0\n    for i = 1, #paren_string do\n\
    \        local c = paren_string:sub(i, i)\n        if c == '(' then\n        \
    \    level = level + 1\n        elseif c == ')' then\n            levels[level]\
    \ = (levels[level] or 0) + 1\n            level = level - 1\n        end\n   \
    \ end\n    return levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp30ti31dg.lua:22:\
    \ expected: {2, 3, 1, 3}\nactual: {4, 6, 2}\nstack traceback:\n\t/tmp/tmp30ti31dg.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local paren_level = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         paren_level = paren_level + 1\n        elseif c == ')' then\n      \
    \      paren_level = paren_level - 1\n        end\n        paren_levels[i] = paren_level\n\
    \    end\n    return paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3js9f_4c.lua:22:\
    \ expected: \n{2, 3, 1, 3}\nactual: \n{\n    1,\n    2,\n    1,\n    2,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    0,\n    0,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    2,\n    1,\n    2,\n\
    \    1,\n    0\n}\nstack traceback:\n\t/tmp/tmp3js9f_4c.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"%b()\"\
    ) do\n    table.insert(paren_groups, paren_group)\n  end\n  local max_depth =\
    \ 0\n  for _, paren_group in ipairs(paren_groups) do\n    local depth = 0\n  \
    \  for _ in paren_group:gmatch(\"%(\") do\n      depth = depth + 1\n    end\n\
    \    max_depth = math.max(max_depth, depth)\n  end\n  return max_depth\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1izue3ly.lua:23:\
    \ expected: {2, 3, 1, 3}\nactual: 5\nstack traceback:\n\t/tmp/tmp1izue3ly.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = stringx.split(paren_string, ' ')\n    local max_nesting\
    \ = 0\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        for c in paren_group:gmatch('.') do\n            if c == '(' then\n\
    \                nesting = nesting + 1\n            elseif c == ')' then\n   \
    \             nesting = nesting - 1\n            end\n            max_nesting\
    \ = math.max(max_nesting, nesting)\n        end\n    end\n    return max_nesting\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp69frkmv6.lua:5:\
    \ attempt to index global 'stringx' (a nil value)\nstack traceback:\n\t/tmp/tmp69frkmv6.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmp69frkmv6.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_depth = 0\n    local depth = 0\n    local paren_groups = {}\n \
    \   for paren in paren_string:gmatch(\"%S+\") do\n        depth = 0\n        for\
    \ c in paren:gmatch(\".\") do\n            if c == \"(\" then\n              \
    \  depth = depth + 1\n            elseif c == \")\" then\n                depth\
    \ = depth - 1\n            end\n            if depth > max_depth then\n      \
    \          max_depth = depth\n            end\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprjbsfjuk.lua:28:\
    \ expected: {2, 3, 1, 3}\nactual: {2, 3, 3, 3}\nstack traceback:\n\t/tmp/tmprjbsfjuk.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local current_level = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            current_level = current_level + 1\n        elseif char == ')' then\n\
    \            current_level = current_level - 1\n        end\n        table.insert(paren_levels,\
    \ current_level)\n    end\n    return paren_levels\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphps7c7vo.lua:22:\
    \ expected: \n{2, 3, 1, 3}\nactual: \n{\n    1,\n    2,\n    1,\n    2,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    0,\n    0,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    2,\n    1,\n    2,\n\
    \    1,\n    0\n}\nstack traceback:\n\t/tmp/tmphps7c7vo.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_levels = {}\n  for paren_group in paren_string:gmatch(\"%b()\"\
    ) do\n    local paren_level = 0\n    for c in paren_group:gmatch(\".\") do\n \
    \     if c == \"(\" then\n        paren_level = paren_level + 1\n      elseif\
    \ c == \")\" then\n        paren_level = paren_level - 1\n      end\n    end\n\
    \    table.insert(paren_levels, paren_level)\n  end\n  return paren_levels\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp27kb2qi4.lua:23:\
    \ expected: {2, 3, 1, 3}\nactual: {0, 0, 0, 0}\nstack traceback:\n\t/tmp/tmp27kb2qi4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = {}\n  local max_level = 0\n  local level = 0\n  for i = 1, #paren_string\
    \ do\n    local c = paren_string:sub(i, i)\n    if c == '(' then\n      level\
    \ = level + 1\n      max_level = math.max(max_level, level)\n    elseif c == ')'\
    \ then\n      level = level - 1\n    end\n  end\n  return max_level\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp807l4j5h.lua:23:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmp807l4j5h.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"%S+\")\
    \ do\n    local level = 0\n    local max_level = 0\n    for paren in paren_group:gmatch(\"\
    .\") do\n      if paren == \"(\" then\n        level = level + 1\n      elseif\
    \ paren == \")\" then\n        level = level - 1\n      end\n      if level >\
    \ max_level then\n        max_level = level\n      end\n    end\n    table.insert(paren_groups,\
    \ max_level)\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local current_level = 0\n    local max_level\
    \ = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == '(' then\n            current_level = current_level +\
    \ 1\n            if current_level > max_level then\n                max_level\
    \ = current_level\n            end\n        elseif char == ')' then\n        \
    \    current_level = current_level - 1\n        end\n    end\n    return max_level\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr5mnucko.lua:25:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpr5mnucko.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"%S+\")\
    \ do\n    local max_level = 0\n    local level = 0\n    for c in paren_group:gmatch(\"\
    .\") do\n      if c == \"(\" then\n        level = level + 1\n      elseif c ==\
    \ \")\" then\n        level = level - 1\n      end\n      max_level = math.max(max_level,\
    \ level)\n    end\n    table.insert(paren_groups, max_level)\n  end\n  return\
    \ paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \tlocal paren_groups = {}\n\tfor paren_group in paren_string:gmatch(\"%b()\")\
    \ do\n\t\ttable.insert(paren_groups, paren_group)\n\tend\n\tlocal max_nesting\
    \ = 0\n\tfor _, paren_group in ipairs(paren_groups) do\n\t\tlocal nesting = 0\n\
    \t\tfor paren in paren_group:gmatch(\"%(\") do\n\t\t\tnesting = nesting + 1\n\t\
    \tend\n\t\tif nesting > max_nesting then\n\t\t\tmax_nesting = nesting\n\t\tend\n\
    \tend\n\treturn max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp17hyuca2.lua:25:\
    \ expected: {2, 3, 1, 3}\nactual: 5\nstack traceback:\n\t/tmp/tmp17hyuca2.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    for paren_group in paren_string:gmatch(\"%b()\"\
    ) do\n        local paren_level = 0\n        for paren in paren_group:gmatch(\"\
    %b()\") do\n            paren_level = paren_level + 1\n        end\n        table.insert(paren_levels,\
    \ paren_level)\n    end\n    return paren_levels\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnv68e6nv.lua:19:\
    \ expected: {2, 3, 1, 3}\nactual: {1, 1, 1, 1}\nstack traceback:\n\t/tmp/tmpnv68e6nv.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"%S+\")\
    \ do\n    local max_depth = 0\n    local depth = 0\n    for paren in paren_group:gmatch(\"\
    .\") do\n      if paren == \"(\" then\n        depth = depth + 1\n      elseif\
    \ paren == \")\" then\n        depth = depth - 1\n      end\n      if depth >\
    \ max_depth then\n        max_depth = depth\n      end\n    end\n    paren_groups[#paren_groups\
    \ + 1] = max_depth\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"%b()\"\
    ) do\n        table.insert(paren_groups, paren_group)\n    end\n    local max_nesting\
    \ = 0\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        for _ in paren_group:gmatch(\"%(\") do\n            nesting = nesting\
    \ + 1\n        end\n        if nesting > max_nesting then\n            max_nesting\
    \ = nesting\n        end\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bi8edoz.lua:25:\
    \ expected: {2, 3, 1, 3}\nactual: 5\nstack traceback:\n\t/tmp/tmp8bi8edoz.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for group in paren_string:gmatch(\"%b()\") do\n\
    \    local level = 0\n    local max_level = 0\n    for paren in group:gmatch(\"\
    .\") do\n      if paren == \"(\" then\n        level = level + 1\n      elseif\
    \ paren == \")\" then\n        level = level - 1\n      end\n      max_level =\
    \ math.max(max_level, level)\n    end\n    table.insert(paren_groups, max_level)\n\
    \  end\n  return paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_depth = 0\n  local depth = 0\n  for i = 1, #paren_string do\n   \
    \ local c = paren_string:sub(i, i)\n    if c == '(' then\n      depth = depth\
    \ + 1\n      if depth > max_depth then\n        max_depth = depth\n      end\n\
    \    elseif c == ')' then\n      depth = depth - 1\n    end\n  end\n  return max_depth\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ioju6kl.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmp4ioju6kl.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"%S+\"\
    ) do\n        local max_level = 0\n        local level = 0\n        for c in paren_group:gmatch(\"\
    .\") do\n            if c == \"(\" then\n                level = level + 1\n \
    \           elseif c == \")\" then\n                level = level - 1\n      \
    \      end\n            if level > max_level then\n                max_level =\
    \ level\n            end\n        end\n        paren_groups[#paren_groups + 1]\
    \ = max_level\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"%S+\")\
    \ do\n    local max_depth = 0\n    local depth = 0\n    for c in paren_group:gmatch(\"\
    .\") do\n      if c == \"(\" then\n        depth = depth + 1\n        if depth\
    \ > max_depth then\n          max_depth = depth\n        end\n      elseif c ==\
    \ \")\" then\n        depth = depth - 1\n      end\n    end\n    table.insert(paren_groups,\
    \ max_depth)\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_depth = 0\n  local depth = 0\n  for i = 1, #paren_string do\n   \
    \ local c = paren_string:sub(i, i)\n    if c == '(' then\n      depth = depth\
    \ + 1\n      if depth > max_depth then\n        max_depth = depth\n      end\n\
    \    elseif c == ')' then\n      depth = depth - 1\n    end\n  end\n  return max_depth\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ioju6kl.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmp4ioju6kl.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_nesting = 0\n    local current_nesting = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            current_nesting = current_nesting + 1\n            if current_nesting\
    \ > max_nesting then\n                max_nesting = current_nesting\n        \
    \    end\n        elseif char == ')' then\n            current_nesting = current_nesting\
    \ - 1\n        end\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvqc6c6em.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpvqc6c6em.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"%S+\"\
    ) do\n        local max_level = 0\n        local level = 0\n        for c in paren_group:gmatch(\"\
    .\") do\n            if c == \"(\" then\n                level = level + 1\n \
    \           elseif c == \")\" then\n                level = level - 1\n      \
    \      end\n            if level > max_level then\n                max_level =\
    \ level\n            end\n        end\n        table.insert(paren_groups, max_level)\n\
    \    end\n    return paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_depth = 0\n    local depth = 0\n    for i = 1, #paren_string do\n\
    \        local c = paren_string:sub(i, i)\n        if c == '(' then\n        \
    \    depth = depth + 1\n            if depth > max_depth then\n              \
    \  max_depth = depth\n            end\n        elseif c == ')' then\n        \
    \    depth = depth - 1\n        end\n    end\n    return max_depth\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjijminri.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpjijminri.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local paren_level = 0\n    local paren_level_max\
    \ = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            paren_level = paren_level + 1\n  \
    \          if paren_level > paren_level_max then\n                paren_level_max\
    \ = paren_level\n            end\n        elseif c == ')' then\n            paren_level\
    \ = paren_level - 1\n        end\n    end\n    return paren_level_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps31pgs5s.lua:25:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmps31pgs5s.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local current_level = 0\n    local max_level\
    \ = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == '(' then\n            current_level = current_level +\
    \ 1\n            if current_level > max_level then\n                max_level\
    \ = current_level\n            end\n        elseif char == ')' then\n        \
    \    current_level = current_level - 1\n        end\n        paren_levels[i] =\
    \ current_level\n    end\n    return paren_levels\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0cgo3s96.lua:26:\
    \ expected: \n{2, 3, 1, 3}\nactual: \n{\n    1,\n    2,\n    1,\n    2,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    0,\n    0,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    2,\n    1,\n    2,\n\
    \    1,\n    0\n}\nstack traceback:\n\t/tmp/tmp0cgo3s96.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in string.gmatch(paren_string, '%S+')\
    \ do\n    local max_depth = 0\n    local depth = 0\n    for c in string.gmatch(paren_group,\
    \ '.') do\n      if c == '(' then\n        depth = depth + 1\n        if depth\
    \ > max_depth then\n          max_depth = depth\n        end\n      elseif c ==\
    \ ')' then\n        depth = depth - 1\n      end\n    end\n    table.insert(paren_groups,\
    \ max_depth)\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_depth = 0\n  local current_depth = 0\n  for i = 1, #paren_string\
    \ do\n    local char = paren_string:sub(i, i)\n    if char == '(' then\n     \
    \ current_depth = current_depth + 1\n      if current_depth > max_depth then\n\
    \        max_depth = current_depth\n      end\n    elseif char == ')' then\n \
    \     current_depth = current_depth - 1\n    end\n  end\n  return max_depth\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt08fi1k1.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpt08fi1k1.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"%S+\")\
    \ do\n    local max_level = 0\n    local level = 0\n    for paren in paren_group:gmatch(\"\
    .\") do\n      if paren == \"(\" then\n        level = level + 1\n      elseif\
    \ paren == \")\" then\n        level = level - 1\n      end\n      if level >\
    \ max_level then\n        max_level = level\n      end\n    end\n    table.insert(paren_groups,\
    \ max_level)\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  for i = 1, #paren_string do\n   \
    \ local c = paren_string:sub(i, i)\n    if c == '(' then\n      level = level\
    \ + 1\n      if level > max_level then\n        max_level = level\n      end\n\
    \    elseif c == ')' then\n      level = level - 1\n    end\n  end\n  return max_level\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpon42n5yq.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpon42n5yq.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for group in paren_string:gmatch(\"%b()\") do\n\
    \        local level = 0\n        local max_level = 0\n        for c in group:gmatch(\"\
    .\") do\n            if c == \"(\" then\n                level = level + 1\n \
    \               if level > max_level then\n                    max_level = level\n\
    \                end\n            elseif c == \")\" then\n                level\
    \ = level - 1\n            end\n        end\n        table.insert(paren_groups,\
    \ max_level)\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local paren_level = 0\n    local paren_start\
    \ = 0\n    local paren_end = 0\n    local paren_start_index = 0\n    local paren_end_index\
    \ = 0\n    local paren_string_length = string.len(paren_string)\n    for i = 1,\
    \ paren_string_length do\n        local char = string.sub(paren_string, i, i)\n\
    \        if char == \"(\" then\n            paren_level = paren_level + 1\n  \
    \          if paren_level == 1 then\n                paren_start = i\n       \
    \         paren_start_index = i\n            end\n        elseif char == \")\"\
    \ then\n            paren_level = paren_level - 1\n            if paren_level\
    \ == 0 then\n                paren_end = i\n                paren_end_index =\
    \ i\n                table.insert(paren_levels, {paren_start, paren_end})\n  \
    \          end\n        end\n    end\n    return paren_levels\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppra_sx8f.lua:35:\
    \ expected: {2, 3, 1, 3}\nactual: {{1, 6}, {8, 13}, {15, 16}, {18, 27}}\nstack\
    \ traceback:\n\t/tmp/tmppra_sx8f.lua:35: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_levels = {}\n  local paren_level = 0\n  for i = 1, #paren_string\
    \ do\n    local c = paren_string:sub(i, i)\n    if c == '(' then\n      paren_level\
    \ = paren_level + 1\n    elseif c == ')' then\n      paren_level = paren_level\
    \ - 1\n    elseif c == ' ' then\n      table.insert(paren_levels, paren_level)\n\
    \      paren_level = 0\n    end\n  end\n  table.insert(paren_levels, paren_level)\n\
    \  return paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpau6far4q.lua:25:\
    \ expected: {2, 3, 1, 3}\nactual: {0, 0, 0, 0}\nstack traceback:\n\t/tmp/tmpau6far4q.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"%b()\"\
    ) do\n        table.insert(paren_groups, paren_group)\n    end\n    local max_nesting\
    \ = 0\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        for paren in paren_group:gmatch(\"%(\") do\n            nesting\
    \ = nesting + 1\n        end\n        if nesting > max_nesting then\n        \
    \    max_nesting = nesting\n        end\n    end\n    return max_nesting\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpikufdyk4.lua:25:\
    \ expected: {2, 3, 1, 3}\nactual: 5\nstack traceback:\n\t/tmp/tmpikufdyk4.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_nesting = 0\n  for paren_group in paren_string:gmatch(\"%S+\") do\n\
    \    local nesting = 0\n    for paren in paren_group:gmatch(\".\") do\n      if\
    \ paren == \"(\" then\n        nesting = nesting + 1\n      elseif paren == \"\
    )\" then\n        nesting = nesting - 1\n      end\n      max_nesting = math.max(max_nesting,\
    \ nesting)\n    end\n  end\n  return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp13dcy05.lua:23:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpp13dcy05.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for group in paren_string:gmatch(\"%b()\") do\n\
    \        local depth = 0\n        local max_depth = 0\n        for c in group:gmatch(\"\
    .\") do\n            if c == \"(\" then\n                depth = depth + 1\n \
    \               if depth > max_depth then\n                    max_depth = depth\n\
    \                end\n            elseif c == \")\" then\n                depth\
    \ = depth - 1\n            end\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_depth = 0\n    local depth = 0\n    for i = 1, #paren_string do\n\
    \        local c = paren_string:sub(i, i)\n        if c == '(' then\n        \
    \    depth = depth + 1\n            if depth > max_depth then\n              \
    \  max_depth = depth\n            end\n        elseif c == ')' then\n        \
    \    depth = depth - 1\n        end\n    end\n    return max_depth\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjijminri.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpjijminri.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_levels = {}\n  local paren_level = 0\n  for i = 1, #paren_string\
    \ do\n    local char = paren_string:sub(i, i)\n    if char == '(' then\n     \
    \ paren_level = paren_level + 1\n    elseif char == ')' then\n      paren_level\
    \ = paren_level - 1\n    end\n    paren_levels[i] = paren_level\n  end\n  return\
    \ paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqow6h3rp.lua:22:\
    \ expected: \n{2, 3, 1, 3}\nactual: \n{\n    1,\n    2,\n    1,\n    2,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    0,\n    0,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    2,\n    1,\n    2,\n\
    \    1,\n    0\n}\nstack traceback:\n\t/tmp/tmpqow6h3rp.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_nesting = 0\n    local current_nesting = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            current_nesting = current_nesting + 1\n            if current_nesting\
    \ > max_nesting then\n                max_nesting = current_nesting\n        \
    \    end\n        elseif char == ')' then\n            current_nesting = current_nesting\
    \ - 1\n        end\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvqc6c6em.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpvqc6c6em.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local paren_level = 0\n    for c in paren_string:gmatch(\"\
    .\") do\n        if c == \"(\" then\n            paren_level = paren_level + 1\n\
    \        elseif c == \")\" then\n            paren_level = paren_level - 1\n \
    \       end\n        table.insert(paren_levels, paren_level)\n    end\n    return\
    \ paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptdh7xgrk.lua:21:\
    \ expected: \n{2, 3, 1, 3}\nactual: \n{\n    1,\n    2,\n    1,\n    2,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    0,\n    0,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    2,\n    1,\n    2,\n\
    \    1,\n    0\n}\nstack traceback:\n\t/tmp/tmptdh7xgrk.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"%b()\"\
    ) do\n        local max_nesting = 0\n        local nesting = 0\n        for c\
    \ in paren_group:gmatch(\".\") do\n            if c == \"(\" then\n          \
    \      nesting = nesting + 1\n                if nesting > max_nesting then\n\
    \                    max_nesting = nesting\n                end\n            elseif\
    \ c == \")\" then\n                nesting = nesting - 1\n            end\n  \
    \      end\n        table.insert(paren_groups, max_nesting)\n    end\n    return\
    \ paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for group in paren_string:gmatch(\"%b()\") do\n\
    \    local level = 0\n    local max_level = 0\n    for char in group:gmatch(\"\
    .\") do\n      if char == \"(\" then\n        level = level + 1\n      elseif\
    \ char == \")\" then\n        level = level - 1\n      end\n      if level > max_level\
    \ then\n        max_level = level\n      end\n    end\n    table.insert(paren_groups,\
    \ max_level)\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_depth = 0\n    local depth = 0\n    for i = 1, #paren_string do\n\
    \        local c = paren_string:sub(i, i)\n        if c == '(' then\n        \
    \    depth = depth + 1\n            if depth > max_depth then\n              \
    \  max_depth = depth\n            end\n        elseif c == ')' then\n        \
    \    depth = depth - 1\n        end\n    end\n    return max_depth\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjijminri.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpjijminri.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local paren_level = 0\n    local paren_level_max\
    \ = 0\n    for i = 1, #paren_string do\n        local c = paren_string:sub(i,\
    \ i)\n        if c == '(' then\n            paren_level = paren_level + 1\n  \
    \          if paren_level > paren_level_max then\n                paren_level_max\
    \ = paren_level\n            end\n        elseif c == ')' then\n            paren_level\
    \ = paren_level - 1\n        end\n    end\n    return paren_level_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps31pgs5s.lua:25:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmps31pgs5s.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"%S+\")\
    \ do\n    local max_nesting = 0\n    local nesting = 0\n    for paren in paren_group:gmatch(\"\
    .\") do\n      if paren == \"(\" then\n        nesting = nesting + 1\n      elseif\
    \ paren == \")\" then\n        nesting = nesting - 1\n      end\n      if nesting\
    \ > max_nesting then\n        max_nesting = nesting\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for group in paren_string:gmatch(\"%b()\") do\n\
    \    local depth = 0\n    local max_depth = 0\n    for char in group:gmatch(\"\
    .\") do\n      if char == \"(\" then\n        depth = depth + 1\n        if depth\
    \ > max_depth then\n          max_depth = depth\n        end\n      elseif char\
    \ == \")\" then\n        depth = depth - 1\n      end\n    end\n    table.insert(paren_groups,\
    \ max_depth)\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_count = 0\n    local max_paren_count = 0\n    for i = 1, #paren_string\
    \ do\n        if paren_string:sub(i, i) == '(' then\n            paren_count =\
    \ paren_count + 1\n            if paren_count > max_paren_count then\n       \
    \         max_paren_count = paren_count\n            end\n        elseif paren_string:sub(i,\
    \ i) == ')' then\n            paren_count = paren_count - 1\n        end\n   \
    \ end\n    return max_paren_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqween_ii.lua:23:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpqween_ii.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local paren_level = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         paren_level = paren_level + 1\n        elseif c == ')' then\n      \
    \      paren_level = paren_level - 1\n        end\n        paren_levels[i] = paren_level\n\
    \    end\n    return paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3js9f_4c.lua:22:\
    \ expected: \n{2, 3, 1, 3}\nactual: \n{\n    1,\n    2,\n    1,\n    2,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    0,\n    0,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    2,\n    1,\n    2,\n\
    \    1,\n    0\n}\nstack traceback:\n\t/tmp/tmp3js9f_4c.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"%S+\"\
    ) do\n        local max_depth = 0\n        local depth = 0\n        for c in paren_group:gmatch(\"\
    .\") do\n            if c == \"(\" then\n                depth = depth + 1\n \
    \               if depth > max_depth then\n                    max_depth = depth\n\
    \                end\n            elseif c == \")\" then\n                depth\
    \ = depth - 1\n            end\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_levels = {}\n  for paren_group in paren_string:gmatch(\"%S+\")\
    \ do\n    local level = 0\n    local max_level = 0\n    for c in paren_group:gmatch(\"\
    .\") do\n      if c == \"(\" then\n        level = level + 1\n      elseif c ==\
    \ \")\" then\n        level = level - 1\n      end\n      max_level = math.max(max_level,\
    \ level)\n    end\n    table.insert(paren_levels, max_level)\n  end\n  return\
    \ paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local paren_level = 0\n    local paren_start\
    \ = 0\n    local paren_end = 0\n    local paren_count = 0\n    local paren_max\
    \ = 0\n    local paren_max_start = 0\n    local paren_max_end = 0\n    local paren_max_count\
    \ = 0\n    local paren_max_level = 0\n    local paren_max_level_start = 0\n  \
    \  local paren_max_level_end = 0\n    local paren_max_level_count = 0\n    local\
    \ paren_max_level_max = 0\n    local paren_max_level_max_start = 0\n    local\
    \ paren_max_level_max_end = 0\n    local paren_max_level_max_count = 0\n    local\
    \ paren_max_level_max_level = 0\n    local paren_max_level_max_level_start = 0\n\
    \    local paren_max_level_max_level_end = 0\n    local paren_max_level_max_level_count\
    \ = 0\n    local paren_max_level_max_level_max = 0\n    local paren_max_level_max_level_max_start\
    \ = 0\n    local paren_max_level_max_level_max_end = 0\n    local paren_max_level_max_level_max_count\
    \ = 0\n    local paren_max_level_max_level_max_level = 0\n    local paren_max_level_max_level_max_level_start\
    \ = 0\n    local paren_max_level_max_level_max_level_end = 0\n    local paren_max_level_max_level_max_level_count\
    \ = 0\n    local paren_max_level_max_level_max_level_max = 0\n    local paren_max_level_max_level_max_level_max_start\
    \ = 0\n    local paren_max_level_max_level_max_level_max_end = 0\n    local paren_max_level_max_level_max_level_max_count\
    \ = 0\n    local paren\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptf9d7rbz.lua:48: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local depth = 0\n    local max_depth = 0\n    for i = 1, #paren_string do\n\
    \        if paren_string:sub(i, i) == '(' then\n            depth = depth + 1\n\
    \            if depth > max_depth then\n                max_depth = depth\n  \
    \          end\n        elseif paren_string:sub(i, i) == ')' then\n          \
    \  depth = depth - 1\n        end\n    end\n    return max_depth\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1feo49gd.lua:23:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmp1feo49gd.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"%S+\")\
    \ do\n    local max_depth = 0\n    local depth = 0\n    for c in paren_group:gmatch(\"\
    .\") do\n      if c == \"(\" then\n        depth = depth + 1\n        if depth\
    \ > max_depth then\n          max_depth = depth\n        end\n      elseif c ==\
    \ \")\" then\n        depth = depth - 1\n      end\n    end\n    table.insert(paren_groups,\
    \ max_depth)\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for group in paren_string:gmatch(\"%b()\") do\n\
    \    local max_nesting = 0\n    local current_nesting = 0\n    for _ in group:gmatch(\"\
    %(\") do\n      current_nesting = current_nesting + 1\n      if current_nesting\
    \ > max_nesting then\n        max_nesting = current_nesting\n      end\n    end\n\
    \    for _ in group:gmatch(\"%)\") do\n      current_nesting = current_nesting\
    \ - 1\n    end\n    table.insert(paren_groups, max_nesting)\n  end\n  return paren_groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp15cxr1s.lua:26:\
    \ expected: {2, 3, 1, 3}\nactual: {3, 3, 1, 5}\nstack traceback:\n\t/tmp/tmpp15cxr1s.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_depth = 0\n    local current_depth = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            current_depth = current_depth + 1\n            if current_depth >\
    \ max_depth then\n                max_depth = current_depth\n            end\n\
    \        elseif char == ')' then\n            current_depth = current_depth -\
    \ 1\n        end\n    end\n    return max_depth\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpua0jn7jy.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpua0jn7jy.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"%S+\")\
    \ do\n    local depth = 0\n    local max_depth = 0\n    for char in paren_group:gmatch(\"\
    .\") do\n      if char == \"(\" then\n        depth = depth + 1\n        if depth\
    \ > max_depth then\n          max_depth = depth\n        end\n      elseif char\
    \ == \")\" then\n        depth = depth - 1\n      end\n    end\n    table.insert(paren_groups,\
    \ max_depth)\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local paren_level = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         paren_level = paren_level + 1\n        elseif c == ')' then\n      \
    \      paren_level = paren_level - 1\n        end\n        paren_levels[i] = paren_level\n\
    \    end\n    return paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3js9f_4c.lua:22:\
    \ expected: \n{2, 3, 1, 3}\nactual: \n{\n    1,\n    2,\n    1,\n    2,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    0,\n    0,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    2,\n    1,\n    2,\n\
    \    1,\n    0\n}\nstack traceback:\n\t/tmp/tmp3js9f_4c.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for group in paren_string:gmatch(\"%b()\") do\n\
    \        local depth = 0\n        local max_depth = 0\n        for char in group:gmatch(\"\
    .\") do\n            if char == \"(\" then\n                depth = depth + 1\n\
    \                if depth > max_depth then\n                    max_depth = depth\n\
    \                end\n            elseif char == \")\" then\n                depth\
    \ = depth - 1\n            end\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"[^%s]+\"\
    ) do\n    local max_nesting = 0\n    local nesting = 0\n    for paren in paren_group:gmatch(\"\
    .\") do\n      if paren == \"(\" then\n        nesting = nesting + 1\n      elseif\
    \ paren == \")\" then\n        nesting = nesting - 1\n      end\n      if nesting\
    \ > max_nesting then\n        max_nesting = nesting\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local paren_level = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            paren_level = paren_level + 1\n        elseif char == ')' then\n\
    \            paren_level = paren_level - 1\n        end\n        table.insert(paren_levels,\
    \ paren_level)\n    end\n    return paren_levels\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyoez02we.lua:22:\
    \ expected: \n{2, 3, 1, 3}\nactual: \n{\n    1,\n    2,\n    1,\n    2,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    0,\n    0,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    2,\n    1,\n    2,\n\
    \    1,\n    0\n}\nstack traceback:\n\t/tmp/tmpyoez02we.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"%b()\"\
    ) do\n    local max_nesting = 0\n    local nesting = 0\n    for c in paren_group:gmatch(\"\
    .\") do\n      if c == \"(\" then\n        nesting = nesting + 1\n        if nesting\
    \ > max_nesting then\n          max_nesting = nesting\n        end\n      elseif\
    \ c == \")\" then\n        nesting = nesting - 1\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_levels = {}\n  local paren_level = 0\n  for i = 1, #paren_string\
    \ do\n    local c = paren_string:sub(i, i)\n    if c == '(' then\n      paren_level\
    \ = paren_level + 1\n    elseif c == ')' then\n      paren_level = paren_level\
    \ - 1\n    elseif c == ' ' then\n      table.insert(paren_levels, paren_level)\n\
    \      paren_level = 0\n    end\n  end\n  table.insert(paren_levels, paren_level)\n\
    \  return paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpau6far4q.lua:25:\
    \ expected: {2, 3, 1, 3}\nactual: {0, 0, 0, 0}\nstack traceback:\n\t/tmp/tmpau6far4q.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"%S+\")\
    \ do\n    local max_nesting = 0\n    local nesting = 0\n    for paren in paren_group:gmatch(\"\
    .\") do\n      if paren == \"(\" then\n        nesting = nesting + 1\n      elseif\
    \ paren == \")\" then\n        nesting = nesting - 1\n      end\n      if nesting\
    \ > max_nesting then\n        max_nesting = nesting\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"[^%s]+\"\
    ) do\n    local max_depth = 0\n    local depth = 0\n    for paren in paren_group:gmatch(\"\
    .\") do\n      if paren == \"(\" then\n        depth = depth + 1\n      elseif\
    \ paren == \")\" then\n        depth = depth - 1\n      end\n      if depth >\
    \ max_depth then\n        max_depth = depth\n      end\n    end\n    table.insert(paren_groups,\
    \ max_depth)\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"%S+\")\
    \ do\n    local max_nesting = 0\n    local nesting = 0\n    for paren in paren_group:gmatch(\"\
    .\") do\n      if paren == \"(\" then\n        nesting = nesting + 1\n      elseif\
    \ paren == \")\" then\n        nesting = nesting - 1\n      end\n      if nesting\
    \ > max_nesting then\n        max_nesting = nesting\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"%b()\"\
    ) do\n    table.insert(paren_groups, paren_group)\n  end\n  local max_nesting\
    \ = 0\n  for _, paren_group in ipairs(paren_groups) do\n    local nesting = 0\n\
    \    for paren in paren_group:gmatch(\"%(\") do\n      nesting = nesting + 1\n\
    \    end\n    if nesting > max_nesting then\n      max_nesting = nesting\n   \
    \ end\n  end\n  return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdtfgjsvh.lua:25:\
    \ expected: {2, 3, 1, 3}\nactual: 5\nstack traceback:\n\t/tmp/tmpdtfgjsvh.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_depth = 0\n    local current_depth = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         current_depth = current_depth + 1\n            if current_depth > max_depth\
    \ then\n                max_depth = current_depth\n            end\n        elseif\
    \ c == ')' then\n            current_depth = current_depth - 1\n        end\n\
    \    end\n    return max_depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmro4quhc.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpmro4quhc.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"%b()\"\
    ) do\n    paren_groups[#paren_groups + 1] = paren_group\n  end\n  local max_nesting\
    \ = 0\n  for _, paren_group in ipairs(paren_groups) do\n    local nesting = 0\n\
    \    for char in paren_group:gmatch(\".\") do\n      if char == \"(\" then\n \
    \       nesting = nesting + 1\n      elseif char == \")\" then\n        nesting\
    \ = nesting - 1\n      end\n    end\n    max_nesting = math.max(max_nesting, nesting)\n\
    \  end\n  return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgs2xz8i8.lua:27:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpgs2xz8i8.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local level = 0\n    for _, c in utf8.codes(paren_string)\
    \ do\n        if c == 40 then\n            level = level + 1\n        elseif c\
    \ == 41 then\n            level = level - 1\n        end\n        paren_levels[#paren_levels\
    \ + 1] = level\n    end\n    return paren_levels\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpatqzmuv1.lua:7:\
    \ attempt to index global 'utf8' (a nil value)\nstack traceback:\n\t/tmp/tmpatqzmuv1.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpatqzmuv1.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_depth = 0\n    local depth = 0\n    for i = 1, #paren_string do\n\
    \        local char = paren_string:sub(i, i)\n        if char == '(' then\n  \
    \          depth = depth + 1\n            if depth > max_depth then\n        \
    \        max_depth = depth\n            end\n        elseif char == ')' then\n\
    \            depth = depth - 1\n        end\n    end\n    return max_depth\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpru02sf0f.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpru02sf0f.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_nesting = 0\n    local current_nesting = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            current_nesting = current_nesting + 1\n            if current_nesting\
    \ > max_nesting then\n                max_nesting = current_nesting\n        \
    \    end\n        elseif char == ')' then\n            current_nesting = current_nesting\
    \ - 1\n        end\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvqc6c6em.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpvqc6c6em.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_levels = {}\n  local current_level = 0\n  for i = 1, #paren_string\
    \ do\n    local char = paren_string:sub(i, i)\n    if char == '(' then\n     \
    \ current_level = current_level + 1\n    elseif char == ')' then\n      current_level\
    \ = current_level - 1\n    end\n    paren_levels[i] = current_level\n  end\n \
    \ return paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzhg0ekrc.lua:22:\
    \ expected: \n{2, 3, 1, 3}\nactual: \n{\n    1,\n    2,\n    1,\n    2,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    0,\n    0,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    2,\n    1,\n    2,\n\
    \    1,\n    0\n}\nstack traceback:\n\t/tmp/tmpzhg0ekrc.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  local paren_group = \"\"\n  for i = 1, #paren_string\
    \ do\n    local char = paren_string:sub(i, i)\n    if char == \" \" then\n   \
    \   table.insert(paren_groups, paren_group)\n      paren_group = \"\"\n    else\n\
    \      paren_group = paren_group .. char\n    end\n  end\n  table.insert(paren_groups,\
    \ paren_group)\n  local max_nesting = 0\n  for _, paren_group in ipairs(paren_groups)\
    \ do\n    local nesting = 0\n    for i = 1, #paren_group do\n      local char\
    \ = paren_group:sub(i, i)\n      if char == \"(\" then\n        nesting = nesting\
    \ + 1\n      elseif char == \")\" then\n        nesting = nesting - 1\n      end\n\
    \      if nesting > max_nesting then\n        max_nesting = nesting\n      end\n\
    \    end\n  end\n  return max_nesting\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiy0fs6xg.lua:38:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpiy0fs6xg.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"%S+\"\
    ) do\n        local max_level = 0\n        local level = 0\n        for char in\
    \ paren_group:gmatch(\".\") do\n            if char == \"(\" then\n          \
    \      level = level + 1\n            elseif char == \")\" then\n            \
    \    level = level - 1\n            end\n            if level > max_level then\n\
    \                max_level = level\n            end\n        end\n        table.insert(paren_groups,\
    \ max_level)\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_string = paren_string:gsub(\"%s+\", \"\")\n    local max_nesting\
    \ = 0\n    local nesting = 0\n    for i = 1, #paren_string do\n        local char\
    \ = paren_string:sub(i, i)\n        if char == \"(\" then\n            nesting\
    \ = nesting + 1\n            if nesting > max_nesting then\n                max_nesting\
    \ = nesting\n            end\n        elseif char == \")\" then\n            nesting\
    \ = nesting - 1\n        end\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0z07os1.lua:25:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpj0z07os1.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_depth = 0\n  local depth = 0\n  for i = 1, #paren_string do\n   \
    \ if paren_string:sub(i, i) == '(' then\n      depth = depth + 1\n      if depth\
    \ > max_depth then\n        max_depth = depth\n      end\n    elseif paren_string:sub(i,\
    \ i) == ')' then\n      depth = depth - 1\n    end\n  end\n  return max_depth\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3lyizlw6.lua:23:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmp3lyizlw6.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_levels = {}\n  local paren_level = 0\n  for i = 1, #paren_string\
    \ do\n    local c = paren_string:sub(i, i)\n    if c == '(' then\n      paren_level\
    \ = paren_level + 1\n    elseif c == ')' then\n      paren_level = paren_level\
    \ - 1\n    end\n    paren_levels[i] = paren_level\n  end\n  return paren_levels\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_nkkhvcg.lua:22:\
    \ expected: \n{2, 3, 1, 3}\nactual: \n{\n    1,\n    2,\n    1,\n    2,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    0,\n    0,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    2,\n    1,\n    2,\n\
    \    1,\n    0\n}\nstack traceback:\n\t/tmp/tmp_nkkhvcg.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_nesting = 0\n    local nesting = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            nesting = nesting + 1\n            if nesting > max_nesting then\n\
    \                max_nesting = nesting\n            end\n        elseif char ==\
    \ ')' then\n            nesting = nesting - 1\n        end\n    end\n    return\
    \ max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbe8rlph9.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpbe8rlph9.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_depth = 0\n    local depth = 0\n    for i = 1, #paren_string do\n\
    \        local c = paren_string:sub(i, i)\n        if c == '(' then\n        \
    \    depth = depth + 1\n            if depth > max_depth then\n              \
    \  max_depth = depth\n            end\n        elseif c == ')' then\n        \
    \    depth = depth - 1\n        end\n    end\n    return max_depth\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjijminri.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpjijminri.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local paren_level = 0\n    local paren_level_max\
    \ = 0\n    for i = 1, #paren_string do\n        local char = paren_string:sub(i,\
    \ i)\n        if char == '(' then\n            paren_level = paren_level + 1\n\
    \            if paren_level > paren_level_max then\n                paren_level_max\
    \ = paren_level\n            end\n        elseif char == ')' then\n          \
    \  paren_level = paren_level - 1\n        end\n    end\n    return paren_level_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_e1soikf.lua:25:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmp_e1soikf.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_nesting = 0\n  local current_nesting = 0\n  for i = 1, #paren_string\
    \ do\n    local char = paren_string:sub(i, i)\n    if char == '(' then\n     \
    \ current_nesting = current_nesting + 1\n      if current_nesting > max_nesting\
    \ then\n        max_nesting = current_nesting\n      end\n    elseif char == ')'\
    \ then\n      current_nesting = current_nesting - 1\n    end\n  end\n  return\
    \ max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjry03_4l.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpjry03_4l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_levels = {}\n  for paren_group in paren_string:gmatch(\"%S+\")\
    \ do\n    local max_level = 0\n    local level = 0\n    for c in paren_group:gmatch(\"\
    .\") do\n      if c == \"(\" then\n        level = level + 1\n      elseif c ==\
    \ \")\" then\n        level = level - 1\n      end\n      if level > max_level\
    \ then\n        max_level = level\n      end\n    end\n    table.insert(paren_levels,\
    \ max_level)\n  end\n  return paren_levels\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"%S+\"\
    ) do\n        local level = 0\n        local max_level = 0\n        for c in paren_group:gmatch(\"\
    .\") do\n            if c == \"(\" then\n                level = level + 1\n \
    \           elseif c == \")\" then\n                level = level - 1\n      \
    \      end\n            max_level = math.max(max_level, level)\n        end\n\
    \        table.insert(paren_groups, max_level)\n    end\n    return paren_groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_depth = 0\n  local curr_depth = 0\n  for i = 1, #paren_string do\n\
    \    local char = paren_string:sub(i, i)\n    if char == '(' then\n      curr_depth\
    \ = curr_depth + 1\n      if curr_depth > max_depth then\n        max_depth =\
    \ curr_depth\n      end\n    elseif char == ')' then\n      curr_depth = curr_depth\
    \ - 1\n    end\n  end\n  return max_depth\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb2znrl2h.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpb2znrl2h.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for group in paren_string:gmatch(\"%b()\") do\n\
    \    local max_level = 0\n    local level = 0\n    for c in group:gmatch(\".\"\
    ) do\n      if c == \"(\" then\n        level = level + 1\n        if level >\
    \ max_level then\n          max_level = level\n        end\n      elseif c ==\
    \ \")\" then\n        level = level - 1\n      end\n    end\n    table.insert(paren_groups,\
    \ max_level)\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_levels = {}\n  local paren_level = 0\n  for i = 1, #paren_string\
    \ do\n    local c = paren_string:sub(i, i)\n    if c == '(' then\n      paren_level\
    \ = paren_level + 1\n    elseif c == ')' then\n      paren_level = paren_level\
    \ - 1\n    elseif c == ' ' then\n      paren_levels[#paren_levels + 1] = paren_level\n\
    \      paren_level = 0\n    end\n  end\n  paren_levels[#paren_levels + 1] = paren_level\n\
    \  return paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3evb1a5b.lua:25:\
    \ expected: {2, 3, 1, 3}\nactual: {0, 0, 0, 0}\nstack traceback:\n\t/tmp/tmp3evb1a5b.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local paren_level = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            paren_level = paren_level + 1\n        elseif char == ')' then\n\
    \            paren_level = paren_level - 1\n        end\n        paren_levels[i]\
    \ = paren_level\n    end\n    return paren_levels\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_d46_cg6.lua:22:\
    \ expected: \n{2, 3, 1, 3}\nactual: \n{\n    1,\n    2,\n    1,\n    2,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    0,\n    0,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    2,\n    1,\n    2,\n\
    \    1,\n    0\n}\nstack traceback:\n\t/tmp/tmp_d46_cg6.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for group in paren_string:gmatch(\"%b()\") do\n\
    \        table.insert(paren_groups, group)\n    end\n    local max_nesting = 0\n\
    \    for _, group in ipairs(paren_groups) do\n        local nesting = 0\n    \
    \    for paren in group:gmatch(\"%(\") do\n            nesting = nesting + 1\n\
    \        end\n        if nesting > max_nesting then\n            max_nesting =\
    \ nesting\n        end\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwr3xk2m0.lua:25:\
    \ expected: {2, 3, 1, 3}\nactual: 5\nstack traceback:\n\t/tmp/tmpwr3xk2m0.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for group in paren_string:gmatch(\"%b()\") do\n\
    \        table.insert(paren_groups, group)\n    end\n    local max_nesting = 0\n\
    \    for _, group in ipairs(paren_groups) do\n        local nesting = 0\n    \
    \    for _ in group:gmatch(\"%(\") do\n            nesting = nesting + 1\n   \
    \     end\n        if nesting > max_nesting then\n            max_nesting = nesting\n\
    \        end\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9q0f2y1s.lua:25:\
    \ expected: {2, 3, 1, 3}\nactual: 5\nstack traceback:\n\t/tmp/tmp9q0f2y1s.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_depth = 0\n  local depth = 0\n  for i = 1, #paren_string do\n   \
    \ local char = paren_string:sub(i, i)\n    if char == '(' then\n      depth =\
    \ depth + 1\n      if depth > max_depth then\n        max_depth = depth\n    \
    \  end\n    elseif char == ')' then\n      depth = depth - 1\n    end\n  end\n\
    \  return max_depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnqu14owt.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpnqu14owt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"%S+\"\
    ) do\n        local max_depth = 0\n        local depth = 0\n        for c in paren_group:gmatch(\"\
    .\") do\n            if c == \"(\" then\n                depth = depth + 1\n \
    \               if depth > max_depth then\n                    max_depth = depth\n\
    \                end\n            elseif c == \")\" then\n                depth\
    \ = depth - 1\n            end\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"%S+\"\
    ) do\n        local max_depth = 0\n        local depth = 0\n        for paren\
    \ in paren_group:gmatch(\".\") do\n            if paren == \"(\" then\n      \
    \          depth = depth + 1\n            elseif paren == \")\" then\n       \
    \         depth = depth - 1\n            end\n            if depth > max_depth\
    \ then\n                max_depth = depth\n            end\n        end\n    \
    \    table.insert(paren_groups, max_depth)\n    end\n    return paren_groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_depth = 0\n    local current_depth = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         current_depth = current_depth + 1\n            if current_depth > max_depth\
    \ then\n                max_depth = current_depth\n            end\n        elseif\
    \ c == ')' then\n            current_depth = current_depth - 1\n        end\n\
    \    end\n    return max_depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmro4quhc.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpmro4quhc.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_levels = {}\n  local paren_level = 0\n  for paren in paren_string:gmatch(\"\
    %S\") do\n    if paren == \"(\" then\n      paren_level = paren_level + 1\n  \
    \  elseif paren == \")\" then\n      paren_levels[paren_level] = true\n      paren_level\
    \ = paren_level - 1\n    end\n  end\n  local max_level = 0\n  for level, _ in\
    \ pairs(paren_levels) do\n    max_level = math.max(max_level, level)\n  end\n\
    \  return max_level\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1incz8r.lua:25:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpi1incz8r.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"%S+\"\
    ) do\n        local paren_stack = {}\n        local max_level = 0\n        for\
    \ paren in paren_group:gmatch(\".\") do\n            if paren == \"(\" then\n\
    \                table.insert(paren_stack, paren)\n                max_level =\
    \ math.max(max_level, #paren_stack)\n            elseif paren == \")\" then\n\
    \                table.remove(paren_stack)\n            end\n        end\n   \
    \     table.insert(paren_groups, max_level)\n    end\n    return paren_groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = stringx.split(paren_string, ' ')\n  local max_nesting\
    \ = 0\n  for _, paren_group in ipairs(paren_groups) do\n    local nesting = 0\n\
    \    for _, c in utf8.next, paren_group do\n      if c == '(' then\n        nesting\
    \ = nesting + 1\n      elseif c == ')' then\n        nesting = nesting - 1\n \
    \     end\n    end\n    max_nesting = math.max(max_nesting, nesting)\n  end\n\
    \  return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplemq7y5f.lua:5:\
    \ attempt to index global 'stringx' (a nil value)\nstack traceback:\n\t/tmp/tmplemq7y5f.lua:5:\
    \ in function 'candidate'\n\t/tmp/tmplemq7y5f.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for group in paren_string:gmatch(\"%b()\") do\n\
    \        local depth = 0\n        local max_depth = 0\n        for c in group:gmatch(\"\
    .\") do\n            if c == \"(\" then\n                depth = depth + 1\n \
    \               if depth > max_depth then\n                    max_depth = depth\n\
    \                end\n            elseif c == \")\" then\n                depth\
    \ = depth - 1\n            end\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local paren_level = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            paren_level = paren_level + 1\n        elseif char == ')' then\n\
    \            paren_level = paren_level - 1\n        end\n        paren_levels[i]\
    \ = paren_level\n    end\n    return paren_levels\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_d46_cg6.lua:22:\
    \ expected: \n{2, 3, 1, 3}\nactual: \n{\n    1,\n    2,\n    1,\n    2,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    0,\n    0,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    2,\n    1,\n    2,\n\
    \    1,\n    0\n}\nstack traceback:\n\t/tmp/tmp_d46_cg6.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"%S+\"\
    ) do\n        local max_depth = 0\n        local depth = 0\n        for c in paren_group:gmatch(\"\
    .\") do\n            if c == \"(\" then\n                depth = depth + 1\n \
    \               if depth > max_depth then\n                    max_depth = depth\n\
    \                end\n            elseif c == \")\" then\n                depth\
    \ = depth - 1\n            end\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local paren_level = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            paren_level = paren_level + 1\n        elseif char == ')' then\n\
    \            paren_level = paren_level - 1\n        end\n        paren_levels[i]\
    \ = paren_level\n    end\n    return paren_levels\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_d46_cg6.lua:22:\
    \ expected: \n{2, 3, 1, 3}\nactual: \n{\n    1,\n    2,\n    1,\n    2,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    0,\n    0,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    2,\n    1,\n    2,\n\
    \    1,\n    0\n}\nstack traceback:\n\t/tmp/tmp_d46_cg6.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_levels = {}\n  local paren_level = 0\n  for i = 1, #paren_string\
    \ do\n    local char = paren_string:sub(i, i)\n    if char == '(' then\n     \
    \ paren_level = paren_level + 1\n    elseif char == ')' then\n      paren_level\
    \ = paren_level - 1\n    end\n    if char == ' ' then\n      paren_levels[#paren_levels\
    \ + 1] = paren_level\n      paren_level = 0\n    end\n  end\n  paren_levels[#paren_levels\
    \ + 1] = paren_level\n  return paren_levels\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpazo8q5rl.lua:26:\
    \ expected: {2, 3, 1, 3}\nactual: {0, 0, 0, 0}\nstack traceback:\n\t/tmp/tmpazo8q5rl.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for group in paren_string:gmatch(\"%S+\") do\n\
    \        local max_depth = 0\n        local depth = 0\n        for c in group:gmatch(\"\
    .\") do\n            if c == \"(\" then\n                depth = depth + 1\n \
    \               if depth > max_depth then\n                    max_depth = depth\n\
    \                end\n            elseif c == \")\" then\n                depth\
    \ = depth - 1\n            end\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_nesting = 0\n  local current_nesting = 0\n  for i = 1, #paren_string\
    \ do\n    local char = paren_string:sub(i, i)\n    if char == '(' then\n     \
    \ current_nesting = current_nesting + 1\n      if current_nesting > max_nesting\
    \ then\n        max_nesting = current_nesting\n      end\n    elseif char == ')'\
    \ then\n      current_nesting = current_nesting - 1\n    end\n  end\n  return\
    \ max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjry03_4l.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpjry03_4l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"%S+\")\
    \ do\n    local max_depth = 0\n    local depth = 0\n    for c in paren_group:gmatch(\"\
    .\") do\n      if c == \"(\" then\n        depth = depth + 1\n        if depth\
    \ > max_depth then\n          max_depth = depth\n        end\n      elseif c ==\
    \ \")\" then\n        depth = depth - 1\n      end\n    end\n    table.insert(paren_groups,\
    \ max_depth)\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_levels = {}\n  for paren_group in paren_string:gmatch(\"%S+\")\
    \ do\n    local level = 0\n    local max_level = 0\n    for paren in paren_group:gmatch(\"\
    .\") do\n      if paren == \"(\" then\n        level = level + 1\n      elseif\
    \ paren == \")\" then\n        level = level - 1\n      end\n      if level >\
    \ max_level then\n        max_level = level\n      end\n    end\n    table.insert(paren_levels,\
    \ max_level)\n  end\n  return paren_levels\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_nesting = 0\n  local curr_nesting = 0\n  for i = 1, #paren_string\
    \ do\n    local c = paren_string:sub(i, i)\n    if c == '(' then\n      curr_nesting\
    \ = curr_nesting + 1\n      if curr_nesting > max_nesting then\n        max_nesting\
    \ = curr_nesting\n      end\n    elseif c == ')' then\n      curr_nesting = curr_nesting\
    \ - 1\n    end\n  end\n  return max_nesting\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7hb5gctn.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmp7hb5gctn.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"%b()\"\
    ) do\n        table.insert(paren_groups, paren_group)\n    end\n    local max_nesting\
    \ = 0\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        for _ in paren_group:gmatch(\"%(\") do\n            nesting = nesting\
    \ + 1\n        end\n        if nesting > max_nesting then\n            max_nesting\
    \ = nesting\n        end\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bi8edoz.lua:25:\
    \ expected: {2, 3, 1, 3}\nactual: 5\nstack traceback:\n\t/tmp/tmp8bi8edoz.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_levels = {}\n  local paren_level = 0\n  local paren_start = 0\n\
    \  local paren_end = 0\n  local paren_start_index = 0\n  local paren_end_index\
    \ = 0\n  local paren_string_length = string.len(paren_string)\n  local paren_group_index\
    \ = 0\n  local paren_group_start = 0\n  local paren_group_end = 0\n  local paren_group_start_index\
    \ = 0\n  local paren_group_end_index = 0\n  local paren_group_length = 0\n  local\
    \ paren_group_string = \"\"\n  local paren_group_levels = {}\n  local paren_group_level\
    \ = 0\n  local paren_group_level_index = 0\n  local paren_group_level_start =\
    \ 0\n  local paren_group_level_end = 0\n  local paren_group_level_start_index\
    \ = 0\n  local paren_group_level_end_index = 0\n  local paren_group_level_string\
    \ = \"\"\n  local paren_group_level_length = 0\n  local paren_group_level_count\
    \ = 0\n  local paren_group_level_count_index = 0\n  local paren_group_level_count_start\
    \ = 0\n  local paren_group_level_count_end = 0\n  local paren_group_level_count_start_index\
    \ = 0\n  local paren_group_level_count_end_index = 0\n  local paren_group_level_count_string\
    \ = \"\"\n  local paren_group_level_count_length = 0\n  local paren_group_level_count_number\
    \ = 0\n  local paren_group_level_count_number_index = 0\n  local paren_group_level_count_number_start\
    \ = 0\n  local paren_group_level_count_number_end = 0\n  local paren_group_level_count_number_start_index\
    \ = 0\n  local paren_group_level_count_number_end_index = 0\n  local paren_group_level_count_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnsphrn6y.lua:52: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_nesting = 0\n  for paren_group in paren_string:gmatch(\"%b()\") do\n\
    \    local nesting = 0\n    for _ in paren_group:gmatch(\"%(\") do\n      nesting\
    \ = nesting + 1\n    end\n    if nesting > max_nesting then\n      max_nesting\
    \ = nesting\n    end\n  end\n  return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_rh1lxw.lua:21:\
    \ expected: {2, 3, 1, 3}\nactual: 5\nstack traceback:\n\t/tmp/tmpa_rh1lxw.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_depth = 0\n  local depth = 0\n  local paren_string = paren_string:gsub(\"\
    %s+\", \"\")\n  for i = 1, #paren_string do\n    local char = paren_string:sub(i,\
    \ i)\n    if char == \"(\" then\n      depth = depth + 1\n      if depth > max_depth\
    \ then\n        max_depth = depth\n      end\n    elseif char == \")\" then\n\
    \      depth = depth - 1\n    end\n  end\n  return max_depth\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj2fkc66z.lua:25:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpj2fkc66z.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_depth = 0\n    local depth = 0\n    for i = 1, #paren_string do\n\
    \        local c = paren_string:sub(i, i)\n        if c == '(' then\n        \
    \    depth = depth + 1\n            if depth > max_depth then\n              \
    \  max_depth = depth\n            end\n        elseif c == ')' then\n        \
    \    depth = depth - 1\n        end\n    end\n    return max_depth\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjijminri.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpjijminri.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_nesting = 0\n    local current_nesting = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         current_nesting = current_nesting + 1\n            if current_nesting\
    \ > max_nesting then\n                max_nesting = current_nesting\n        \
    \    end\n        elseif c == ')' then\n            current_nesting = current_nesting\
    \ - 1\n        end\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpidquykap.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpidquykap.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_depth = 0\n    local depth = 0\n    for i = 1, #paren_string do\n\
    \        local c = paren_string:sub(i, i)\n        if c == '(' then\n        \
    \    depth = depth + 1\n            if depth > max_depth then\n              \
    \  max_depth = depth\n            end\n        elseif c == ')' then\n        \
    \    depth = depth - 1\n        end\n    end\n    return max_depth\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjijminri.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpjijminri.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_nesting = 0\n  local current_nesting = 0\n  for i = 1, #paren_string\
    \ do\n    local char = paren_string:sub(i, i)\n    if char == '(' then\n     \
    \ current_nesting = current_nesting + 1\n      if current_nesting > max_nesting\
    \ then\n        max_nesting = current_nesting\n      end\n    elseif char == ')'\
    \ then\n      current_nesting = current_nesting - 1\n    end\n  end\n  return\
    \ max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjry03_4l.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpjry03_4l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_string = paren_string:gsub(\"%s+\", \"\")\n    local paren_string_len\
    \ = paren_string:len()\n    local max_nesting = 0\n    local nesting = 0\n   \
    \ for i = 1, paren_string_len do\n        local char = paren_string:sub(i, i)\n\
    \        if char == \"(\" then\n            nesting = nesting + 1\n          \
    \  if nesting > max_nesting then\n                max_nesting = nesting\n    \
    \        end\n        elseif char == \")\" then\n            nesting = nesting\
    \ - 1\n        end\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphfnqj01c.lua:26:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmphfnqj01c.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_nesting = 0\n    local nesting = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            nesting = nesting + 1\n            if nesting > max_nesting then\n\
    \                max_nesting = nesting\n            end\n        elseif char ==\
    \ ')' then\n            nesting = nesting - 1\n        end\n    end\n    return\
    \ max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbe8rlph9.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpbe8rlph9.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"%S+\"\
    ) do\n        local max_depth = 0\n        local depth = 0\n        for c in paren_group:gmatch(\"\
    .\") do\n            if c == \"(\" then\n                depth = depth + 1\n \
    \               if depth > max_depth then\n                    max_depth = depth\n\
    \                end\n            elseif c == \")\" then\n                depth\
    \ = depth - 1\n            end\n        end\n        table.insert(paren_groups,\
    \ max_depth)\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_depth = 0\n    local depth = 0\n    for i = 1, #paren_string do\n\
    \        local char = paren_string:sub(i, i)\n        if char == '(' then\n  \
    \          depth = depth + 1\n            if depth > max_depth then\n        \
    \        max_depth = depth\n            end\n        elseif char == ')' then\n\
    \            depth = depth - 1\n        end\n    end\n    return max_depth\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpru02sf0f.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpru02sf0f.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  for i = 1, #paren_string do\n   \
    \ local c = paren_string:sub(i, i)\n    if c == '(' then\n      level = level\
    \ + 1\n      if level > max_level then\n        max_level = level\n      end\n\
    \    elseif c == ')' then\n      level = level - 1\n    end\n  end\n  return max_level\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpon42n5yq.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpon42n5yq.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"%S+\"\
    ) do\n        local paren_stack = {}\n        local max_depth = 0\n        for\
    \ paren in paren_group:gmatch(\".\") do\n            if paren == \"(\" then\n\
    \                table.insert(paren_stack, paren)\n                max_depth =\
    \ math.max(max_depth, #paren_stack)\n            elseif paren == \")\" then\n\
    \                table.remove(paren_stack)\n            end\n        end\n   \
    \     table.insert(paren_groups, max_depth)\n    end\n    return paren_groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"%S+\"\
    ) do\n        local max_nesting = 0\n        local current_nesting = 0\n     \
    \   for paren in paren_group:gmatch(\".\") do\n            if paren == \"(\" then\n\
    \                current_nesting = current_nesting + 1\n            elseif paren\
    \ == \")\" then\n                current_nesting = current_nesting - 1\n     \
    \       end\n            if current_nesting > max_nesting then\n             \
    \   max_nesting = current_nesting\n            end\n        end\n        table.insert(paren_groups,\
    \ max_nesting)\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for group in string.gmatch(paren_string, \"%S+\"\
    ) do\n    local max_level = 0\n    local level = 0\n    for char in string.gmatch(group,\
    \ \".\") do\n      if char == \"(\" then\n        level = level + 1\n      elseif\
    \ char == \")\" then\n        level = level - 1\n      end\n      if level > max_level\
    \ then\n        max_level = level\n      end\n    end\n    table.insert(paren_groups,\
    \ max_level)\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for group in paren_string:gmatch(\"%b()\") do\n\
    \        local level = 0\n        local max_level = 0\n        for c in group:gmatch(\"\
    .\") do\n            if c == \"(\" then\n                level = level + 1\n \
    \               if level > max_level then\n                    max_level = level\n\
    \                end\n            elseif c == \")\" then\n                level\
    \ = level - 1\n            end\n        end\n        table.insert(paren_groups,\
    \ max_level)\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"%S+\"\
    ) do\n        local max_nesting = 0\n        local current_nesting = 0\n     \
    \   for paren in paren_group:gmatch(\".\") do\n            if paren == \"(\" then\n\
    \                current_nesting = current_nesting + 1\n            elseif paren\
    \ == \")\" then\n                current_nesting = current_nesting - 1\n     \
    \       end\n            if current_nesting > max_nesting then\n             \
    \   max_nesting = current_nesting\n            end\n        end\n        table.insert(paren_groups,\
    \ max_nesting)\n    end\n    return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_levels = {}\n  for paren_group in paren_string:gmatch(\"%S+\")\
    \ do\n    local paren_level = 0\n    local max_level = 0\n    for paren in paren_group:gmatch(\"\
    .\") do\n      if paren == \"(\" then\n        paren_level = paren_level + 1\n\
    \      elseif paren == \")\" then\n        paren_level = paren_level - 1\n   \
    \   end\n      if paren_level > max_level then\n        max_level = paren_level\n\
    \      end\n    end\n    table.insert(paren_levels, max_level)\n  end\n  return\
    \ paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_nesting = 0\n    local current_nesting = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            current_nesting = current_nesting + 1\n            if current_nesting\
    \ > max_nesting then\n                max_nesting = current_nesting\n        \
    \    end\n        elseif char == ')' then\n            current_nesting = current_nesting\
    \ - 1\n        end\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvqc6c6em.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpvqc6c6em.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_levels = {}\n  local paren_level = 0\n  for i = 1, #paren_string\
    \ do\n    local char = paren_string:sub(i, i)\n    if char == '(' then\n     \
    \ paren_level = paren_level + 1\n    elseif char == ')' then\n      paren_level\
    \ = paren_level - 1\n    end\n    paren_levels[i] = paren_level\n  end\n  return\
    \ paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqow6h3rp.lua:22:\
    \ expected: \n{2, 3, 1, 3}\nactual: \n{\n    1,\n    2,\n    1,\n    2,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    0,\n    0,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    2,\n    1,\n    2,\n\
    \    1,\n    0\n}\nstack traceback:\n\t/tmp/tmpqow6h3rp.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_nesting = 0\n    local current_nesting = 0\n    local paren_stack\
    \ = {}\n    local paren_string_len = string.len(paren_string)\n    for i = 1,\
    \ paren_string_len do\n        local current_char = string.sub(paren_string, i,\
    \ i)\n        if current_char == \"(\" then\n            current_nesting = current_nesting\
    \ + 1\n            table.insert(paren_stack, current_char)\n        elseif current_char\
    \ == \")\" then\n            current_nesting = current_nesting - 1\n         \
    \   table.remove(paren_stack)\n        end\n        if current_nesting > max_nesting\
    \ then\n            max_nesting = current_nesting\n        end\n    end\n    return\
    \ max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpku3tbza_.lua:28:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpku3tbza_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_depth = 0\n  local depth = 0\n  for i = 1, #paren_string do\n   \
    \ local c = paren_string:sub(i, i)\n    if c == '(' then\n      depth = depth\
    \ + 1\n      if depth > max_depth then\n        max_depth = depth\n      end\n\
    \    elseif c == ')' then\n      depth = depth - 1\n    end\n  end\n  return max_depth\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ioju6kl.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmp4ioju6kl.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_levels = {}\n  local current_level = 0\n  local max_level = 0\n\
    \  for i = 1, #paren_string do\n    local char = paren_string:sub(i, i)\n    if\
    \ char == '(' then\n      current_level = current_level + 1\n      max_level =\
    \ math.max(max_level, current_level)\n    elseif char == ')' then\n      current_level\
    \ = current_level - 1\n    end\n  end\n  return max_level\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1fxbvfbp.lua:23:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmp1fxbvfbp.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_depth = 0\n    local depth = 0\n    for i = 1, #paren_string do\n\
    \        local c = paren_string:sub(i, i)\n        if c == '(' then\n        \
    \    depth = depth + 1\n            if depth > max_depth then\n              \
    \  max_depth = depth\n            end\n        elseif c == ')' then\n        \
    \    depth = depth - 1\n        end\n    end\n    return max_depth\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjijminri.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpjijminri.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_nesting = 0\n  for paren_group in paren_string:gmatch(\"%b()\") do\n\
    \    local nesting = 0\n    for c in paren_group:gmatch(\"%(\") do\n      nesting\
    \ = nesting + 1\n    end\n    for c in paren_group:gmatch(\"%)\") do\n      nesting\
    \ = nesting - 1\n    end\n    if nesting > max_nesting then\n      max_nesting\
    \ = nesting\n    end\n  end\n  return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqvufia6j.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpqvufia6j.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local paren_level = 0\n    for i = 1, #paren_string\
    \ do\n        local char = paren_string:sub(i, i)\n        if char == '(' then\n\
    \            paren_level = paren_level + 1\n        elseif char == ')' then\n\
    \            paren_level = paren_level - 1\n        end\n        paren_levels[i]\
    \ = paren_level\n    end\n    return paren_levels\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_d46_cg6.lua:22:\
    \ expected: \n{2, 3, 1, 3}\nactual: \n{\n    1,\n    2,\n    1,\n    2,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    0,\n    0,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    2,\n    1,\n    2,\n\
    \    1,\n    0\n}\nstack traceback:\n\t/tmp/tmp_d46_cg6.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local depth = 0\n    local max_depth = 0\n    for i = 1, #paren_string do\n\
    \        local c = paren_string:sub(i, i)\n        if c == '(' then\n        \
    \    depth = depth + 1\n            if depth > max_depth then\n              \
    \  max_depth = depth\n            end\n        elseif c == ')' then\n        \
    \    depth = depth - 1\n        end\n    end\n    return max_depth\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo9bjqnwz.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpo9bjqnwz.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"%S+\"\
    ) do\n        local max_nesting = 0\n        local nesting = 0\n        for paren\
    \ in paren_group:gmatch(\".\") do\n            if paren == \"(\" then\n      \
    \          nesting = nesting + 1\n            elseif paren == \")\" then\n   \
    \             nesting = nesting - 1\n            end\n            if nesting >\
    \ max_nesting then\n                max_nesting = nesting\n            end\n \
    \       end\n        table.insert(paren_groups, max_nesting)\n    end\n    return\
    \ paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_depth = 0\n    local depth = 0\n    for i = 1, #paren_string do\n\
    \        local c = paren_string:sub(i, i)\n        if c == '(' then\n        \
    \    depth = depth + 1\n            if depth > max_depth then\n              \
    \  max_depth = depth\n            end\n        elseif c == ')' then\n        \
    \    depth = depth - 1\n        end\n    end\n    return max_depth\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjijminri.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpjijminri.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local levels = {}\n    local level = 0\n    for i = 1, #paren_string do\n\
    \        local c = paren_string:sub(i, i)\n        if c == '(' then\n        \
    \    level = level + 1\n        elseif c == ')' then\n            level = level\
    \ - 1\n        end\n        levels[i] = level\n    end\n    return levels\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdhbzmw8s.lua:22:\
    \ expected: \n{2, 3, 1, 3}\nactual: \n{\n    1,\n    2,\n    1,\n    2,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    0,\n    0,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    2,\n    1,\n    2,\n\
    \    1,\n    0\n}\nstack traceback:\n\t/tmp/tmpdhbzmw8s.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_levels = {}\n  local paren_level = 0\n  for i = 1, #paren_string\
    \ do\n    local char = paren_string:sub(i, i)\n    if char == '(' then\n     \
    \ paren_level = paren_level + 1\n    elseif char == ')' then\n      paren_level\
    \ = paren_level - 1\n    end\n    paren_levels[i] = paren_level\n  end\n  return\
    \ paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqow6h3rp.lua:22:\
    \ expected: \n{2, 3, 1, 3}\nactual: \n{\n    1,\n    2,\n    1,\n    2,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    0,\n    0,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    2,\n    1,\n    2,\n\
    \    1,\n    0\n}\nstack traceback:\n\t/tmp/tmpqow6h3rp.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"%b()\"\
    ) do\n    table.insert(paren_groups, paren_group)\n  end\n  local max_nesting\
    \ = 0\n  for _, paren_group in ipairs(paren_groups) do\n    local nesting = 0\n\
    \    for _ in paren_group:gmatch(\"%(\") do\n      nesting = nesting + 1\n   \
    \ end\n    if nesting > max_nesting then\n      max_nesting = nesting\n    end\n\
    \  end\n  return max_nesting\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptowuaw28.lua:25:\
    \ expected: {2, 3, 1, 3}\nactual: 5\nstack traceback:\n\t/tmp/tmptowuaw28.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local paren_level = 0\n    for i = 1, #paren_string\
    \ do\n        local c = paren_string:sub(i, i)\n        if c == '(' then\n   \
    \         paren_level = paren_level + 1\n        elseif c == ')' then\n      \
    \      paren_level = paren_level - 1\n        end\n        paren_levels[i] = paren_level\n\
    \    end\n    return paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3js9f_4c.lua:22:\
    \ expected: \n{2, 3, 1, 3}\nactual: \n{\n    1,\n    2,\n    1,\n    2,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    0,\n    0,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    2,\n    1,\n    2,\n\
    \    1,\n    0\n}\nstack traceback:\n\t/tmp/tmp3js9f_4c.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750342
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for group in paren_string:gmatch(\"%b()\") do\n\
    \    local level = 0\n    local max_level = 0\n    for paren in group:gmatch(\"\
    .\") do\n      if paren == \"(\" then\n        level = level + 1\n      elseif\
    \ paren == \")\" then\n        level = level - 1\n      end\n      max_level =\
    \ math.max(max_level, level)\n    end\n    table.insert(paren_groups, max_level)\n\
    \  end\n  return paren_groups\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_depth = 0\n  local depth = 0\n  for i = 1, #paren_string do\n   \
    \ local char = paren_string:sub(i, i)\n    if char == '(' then\n      depth =\
    \ depth + 1\n      if depth > max_depth then\n        max_depth = depth\n    \
    \  end\n    elseif char == ')' then\n      depth = depth - 1\n    end\n  end\n\
    \  return max_depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnqu14owt.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpnqu14owt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"%S+\")\
    \ do\n    local max_depth = 0\n    local depth = 0\n    for paren in paren_group:gmatch(\"\
    .\") do\n      if paren == \"(\" then\n        depth = depth + 1\n      elseif\
    \ paren == \")\" then\n        depth = depth - 1\n      end\n      if depth >\
    \ max_depth then\n        max_depth = depth\n      end\n    end\n    table.insert(paren_groups,\
    \ max_depth)\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"%S+\")\
    \ do\n    local max_nesting = 0\n    local current_nesting = 0\n    for paren\
    \ in paren_group:gmatch(\".\") do\n      if paren == \"(\" then\n        current_nesting\
    \ = current_nesting + 1\n      elseif paren == \")\" then\n        current_nesting\
    \ = current_nesting - 1\n      end\n      if current_nesting > max_nesting then\n\
    \        max_nesting = current_nesting\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local depth = 0\n    local max_depth = 0\n    for i = 1, #paren_string do\n\
    \        local c = paren_string:sub(i, i)\n        if c == '(' then\n        \
    \    depth = depth + 1\n            if depth > max_depth then\n              \
    \  max_depth = depth\n            end\n        elseif c == ')' then\n        \
    \    depth = depth - 1\n        end\n    end\n    return max_depth\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo9bjqnwz.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpo9bjqnwz.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750343
- exit_code: 0
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  for paren_group in paren_string:gmatch(\"%S+\")\
    \ do\n    local max_nesting = 0\n    local nesting = 0\n    for paren in paren_group:gmatch(\"\
    .\") do\n      if paren == \"(\" then\n        nesting = nesting + 1\n      elseif\
    \ paren == \")\" then\n        nesting = nesting - 1\n      end\n      if nesting\
    \ > max_nesting then\n        max_nesting = nesting\n      end\n    end\n    table.insert(paren_groups,\
    \ max_nesting)\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local paren_level = 0\n    local paren_start\
    \ = 0\n    local paren_end = 0\n    local paren_start_index = 0\n    local paren_end_index\
    \ = 0\n    local paren_string_length = string.len(paren_string)\n    for i = 1,\
    \ paren_string_length do\n        local char = string.sub(paren_string, i, i)\n\
    \        if char == \"(\" then\n            paren_level = paren_level + 1\n  \
    \          if paren_level == 1 then\n                paren_start = i\n       \
    \         paren_start_index = i\n            end\n        elseif char == \")\"\
    \ then\n            paren_level = paren_level - 1\n            if paren_level\
    \ == 0 then\n                paren_end = i\n                paren_end_index =\
    \ i\n                table.insert(paren_levels, {start = paren_start, end = paren_end,\
    \ start_index = paren_start_index, end_index = paren_end_index})\n           \
    \ end\n        end\n    end\n    return paren_levels\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2teqfybc.lua:25: unexpected symbol near ''end''

    '
  stdout: ''
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_levels = {}\n    local paren_level = 0\n    for c in paren_string:gmatch(\"\
    .\") do\n        if c == \"(\" then\n            paren_level = paren_level + 1\n\
    \        elseif c == \")\" then\n            paren_level = paren_level - 1\n \
    \       end\n        paren_levels[#paren_levels + 1] = paren_level\n    end\n\
    \    return paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa97yx7e4.lua:21:\
    \ expected: \n{2, 3, 1, 3}\nactual: \n{\n    1,\n    2,\n    1,\n    2,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    0,\n    0,\n    1,\n\
    \    0,\n    0,\n    1,\n    2,\n    3,\n    2,\n    1,\n    2,\n    1,\n    2,\n\
    \    1,\n    0\n}\nstack traceback:\n\t/tmp/tmpa97yx7e4.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750343
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local paren_groups = {}\n    for paren_group in paren_string:gmatch(\"%b()\"\
    ) do\n        table.insert(paren_groups, paren_group)\n    end\n    local max_nesting\
    \ = 0\n    for _, paren_group in ipairs(paren_groups) do\n        local nesting\
    \ = 0\n        for _ in paren_group:gmatch(\"%(\") do\n            nesting = nesting\
    \ + 1\n        end\n        if nesting > max_nesting then\n            max_nesting\
    \ = nesting\n        end\n    end\n    return max_nesting\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bi8edoz.lua:25:\
    \ expected: {2, 3, 1, 3}\nactual: 5\nstack traceback:\n\t/tmp/tmp8bi8edoz.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\nlocal function parse_nested_parens(paren_string)\n\
    \    local max_depth = 0\n    local depth = 0\n    for i = 1, #paren_string do\n\
    \        local char = paren_string:sub(i, i)\n        if char == '(' then\n  \
    \          depth = depth + 1\n            if depth > max_depth then\n        \
    \        max_depth = depth\n            end\n        elseif char == ')' then\n\
    \            depth = depth - 1\n        end\n    end\n    return max_depth\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpru02sf0f.lua:24:\
    \ expected: {2, 3, 1, 3}\nactual: 3\nstack traceback:\n\t/tmp/tmpru02sf0f.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750342
