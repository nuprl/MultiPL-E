name: HumanEval_100_make_a_pile
language: lua
prompt: "-- Given a positive integer n, you have to make a pile of n levels of stones.\n\
  -- The first level has n stones.\n-- The number of stones in the next level is:\n\
  -- - the next odd number if n is odd.\n-- - the next even number if n is even.\n\
  -- Return the number of stones in each level in a list, where element at index\n\
  -- i represents the number of stones in the level (i+1).\n-- Examples:\nlocal function\
  \ make_a_pile(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_a_pile\n\
  \    lu.assertEquals(candidate(3), {3, 5, 7})\n    lu.assertEquals(candidate(4),\
  \ {4, 6, 8, 10})\n    lu.assertEquals(candidate(5), {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6),\
  \ {6, 8, 10, 12, 14, 16})\n    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16,\
  \ 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local pile = {}\n    local level = n\n    while level > 0 do\n\
    \        pile[#pile+1] = level\n        if level % 2 == 0 then\n            level\
    \ = level - 1\n        else\n            level = level - 2\n        end\n    end\n\
    \    return pile\nend", "    local res = {}\n    for i = 1, n do\n        res[i]\
    \ = n\n        if n % 2 == 0 then\n            n = n + 1\n        else\n     \
    \       n = n + 2\n        end\n    end\n    return res\nend", "    local pile\
    \ = {}\n    for i = 1, n do\n        pile[i] = i\n    end\n    return pile\nend",
  "    local res = {}\n    local i = 1\n    while n > 0 do\n        res[i] = n\n \
    \       if n % 2 == 0 then\n            n = n + 1\n        else\n            n\
    \ = n + 2\n        end\n        i = i + 1\n    end\n    return res\nend", "  local\
    \ t = {n}\n  while t[#t] > 1 do\n    if t[#t] % 2 == 0 then\n      t[#t+1] = t[#t]\
    \ / 2\n    else\n      t[#t+1] = (t[#t] + 1) / 2\n    end\n  end\n  return t\n\
    end", "    local res = {}\n    local i = 1\n    while n > 0 do\n        res[i]\
    \ = n\n        if n % 2 == 0 then\n            n = n - 1\n        else\n     \
    \       n = n - 2\n        end\n        i = i + 1\n    end\n    return res\nend",
  "  local res = {}\n  local i = 1\n  while n > 0 do\n    res[i] = n\n    if n % 2\
    \ == 0 then\n      n = n + 1\n    else\n      n = n + 2\n    end\n    i = i +\
    \ 1\n  end\n  return res\nend", "    local res = {}\n    local i = 1\n    while\
    \ n > 0 do\n        res[i] = n\n        if n % 2 == 0 then\n            n = n\
    \ + 1\n        else\n            n = n + 2\n        end\n        i = i + 1\n \
    \   end\n    return res\nend", "    local res = {}\n    local i = 1\n    while\
    \ n > 0 do\n        res[i] = n\n        if n % 2 == 0 then\n            n = n\
    \ + 1\n        else\n            n = n + 2\n        end\n        i = i + 1\n \
    \   end\n    return res\nend", "    local pile = {}\n    local i = 1\n    while\
    \ n > 0 do\n        pile[i] = n\n        if n % 2 == 0 then\n            n = n\
    \ - 1\n        else\n            n = n - 2\n        end\n        i = i + 1\n \
    \   end\n    return pile\nend", "    local t = {n}\n    for i = 1, n - 1 do\n\
    \        t[i + 1] = t[i] + (t[i] % 2 == 0 and 2 or 1)\n    end\n    return t\n\
    end", "  local res = {}\n  local i = 1\n  while n > 0 do\n    res[i] = n\n   \
    \ if n % 2 == 0 then\n      n = n - 1\n    else\n      n = n - 2\n    end\n  \
    \  i = i + 1\n  end\n  return res\nend", "    local pile = {}\n    local i = 1\n\
    \    while i <= n do\n        pile[i] = n\n        if n % 2 == 0 then\n      \
    \      n = n + 1\n        else\n            n = n + 2\n        end\n        i\
    \ = i + 1\n    end\n    return pile\nend", "  local pile = {n}\n  local i = 1\n\
    \  while pile[i] > 1 do\n    pile[i+1] = pile[i] % 2 == 0 and pile[i] - 1 or pile[i]\
    \ + 1\n    i = i + 1\n  end\n  return pile\nend", "  local pile = {n}\n  while\
    \ n > 1 do\n    n = n % 2 == 0 and n - 1 or n + 1\n    pile[#pile + 1] = n\n \
    \ end\n  return pile\nend", "  local res = {}\n  for i = 1, n do\n    res[i] =\
    \ i\n  end\n  return res\nend", "    local pile = {}\n    local i = 1\n    while\
    \ n > 0 do\n        pile[i] = n\n        if n % 2 == 0 then\n            n = n\
    \ - 1\n        else\n            n = n - 2\n        end\n        i = i + 1\n \
    \   end\n    return pile\nend", "    local pile = {}\n    local i = 1\n    while\
    \ n > 0 do\n        pile[i] = n\n        if n % 2 == 0 then\n            n = n\
    \ + 1\n        else\n            n = n + 2\n        end\n        i = i + 1\n \
    \   end\n    return pile\nend", "    local pile = {}\n    local i = 1\n    while\
    \ n > 0 do\n        pile[i] = n\n        if n % 2 == 0 then\n            n = n\
    \ + 1\n        else\n            n = n + 2\n        end\n        i = i + 1\n \
    \   end\n    return pile\nend", "  local pile = {n}\n  while n > 1 do\n    if\
    \ n % 2 == 0 then\n      n = n / 2\n    else\n      n = (n + 1) / 2\n    end\n\
    \    table.insert(pile, n)\n  end\n  return pile\nend", "    local stones = {n}\n\
    \    for i = 1, n - 1 do\n        if stones[i] % 2 == 0 then\n            stones[i\
    \ + 1] = stones[i] + 2\n        else\n            stones[i + 1] = stones[i] +\
    \ 1\n        end\n    end\n    return stones\nend\nassert(make_a_pile(1) == {1})\n\
    assert(make_a_pile(2) == {2, 3})\nassert(make_a_pile(3) == {3, 5})\nassert(make_a_pile(4)\
    \ == {4, 6, 8})\nassert(make_a_pile(5) == {5, 7, 9, 11})\nassert(make_a_pile(6)\
    \ == {6, 8, 10, 12, 14})\nassert(make_a_pile(7) == {7, 9, 11, 13, 15, 17})\nassert(make_a_pile(8)\
    \ == {8, 10, 12, 14, 16, 18, 20})\nassert(make_a_pile(9) == {9, 11, 13, 15, 17,\
    \ 19, 21, 23})\nassert(make_a_pile(10) == {10, 12, 14, 16, 18, 20, 22, 24, 26})",
  "  local t = {n}\n  local i = 1\n  while t[i] > 1 do\n    t[i+1] = t[i] % 2 == 0\
    \ and t[i] - 1 or t[i] + 1\n    i = i + 1\n  end\n  return t\nend", "  local pile\
    \ = {n}\n  local i = 1\n  while pile[i] > 1 do\n    pile[i+1] = pile[i] % 2 ==\
    \ 0 and pile[i] - 1 or pile[i] + 1\n    i = i + 1\n  end\n  return pile\nend",
  "    local res = {}\n    while n > 0 do\n        table.insert(res, 1, n)\n     \
    \   if n % 2 == 0 then\n            n = n / 2\n        else\n            n = (n\
    \ + 1) / 2\n        end\n    end\n    return res\nend", "  local t = {n}\n  for\
    \ i = 1, n - 1 do\n    t[i + 1] = (n + i) % 2 == 0 and n + i + 1 or n + i\n  end\n\
    \  return t\nend", "    local pile = {}\n    for i = 1, n do\n        pile[i]\
    \ = i\n    end\n    return pile\nend", "    local pile = {}\n    for i = 1, n\
    \ do\n        pile[i] = n\n        if n % 2 == 0 then\n            n = n + 1\n\
    \        else\n            n = n + 2\n        end\n    end\n    return pile\n\
    end", "    local res = {}\n    local i = 1\n    while n > 0 do\n        res[i]\
    \ = n\n        n = n % 2 == 0 and n + 1 or n + 2\n        i = i + 1\n    end\n\
    \    return res\nend", "    local res = {}\n    for i = 1, n do\n        res[i]\
    \ = i * 2 - 1\n    end\n    return res\nend", "    local pile = {}\n    local\
    \ i = 1\n    while n > 0 do\n        pile[i] = n\n        if n % 2 == 0 then\n\
    \            n = n - 1\n        else\n            n = n - 2\n        end\n   \
    \     i = i + 1\n    end\n    return pile\nend", "    local stones = {n}\n   \
    \ for i = 1, n - 1 do\n        if stones[i] % 2 == 0 then\n            stones[i\
    \ + 1] = stones[i] + 2\n        else\n            stones[i + 1] = stones[i] +\
    \ 1\n        end\n    end\n    return stones\nend", "  local function make_a_pile_rec(n,\
    \ acc)\n    if n == 0 then\n      return acc\n    else\n      return make_a_pile_rec(n\
    \ - 1, n % 2 == 0 and n + 1 or n + 2)\n    end\n  end\n  return make_a_pile_rec(n,\
    \ {})\nend", "    local pile = {}\n    local i = 1\n    while n > 0 do\n     \
    \   pile[i] = n\n        if n % 2 == 0 then\n            n = n + 1\n        else\n\
    \            n = n + 2\n        end\n        i = i + 1\n    end\n    return pile\n\
    end", "    local r = {}\n    for i = 1, n do\n        r[i] = i\n    end\n    return\
    \ r\nend", "    local res = {}\n    local i = 1\n    while n > 0 do\n        res[i]\
    \ = n\n        if n % 2 == 0 then\n            n = n + 1\n        else\n     \
    \       n = n + 2\n        end\n        i = i + 1\n    end\n    return res\nend",
  "    local result = {}\n    local i = 1\n    while n > 0 do\n        result[i] =\
    \ n\n        if n % 2 == 0 then\n            n = n + 1\n        else\n       \
    \     n = n + 2\n        end\n        i = i + 1\n    end\n    return result\n\
    end", "    local pile = {}\n    for i = 1, n do\n        pile[i] = n\n       \
    \ if n % 2 == 0 then\n            n = n + 1\n        else\n            n = n +\
    \ 2\n        end\n    end\n    return pile\nend", "    local res = {}\n    local\
    \ i = 1\n    while n > 0 do\n        res[i] = n\n        if n % 2 == 0 then\n\
    \            n = n - 1\n        else\n            n = n - 2\n        end\n   \
    \     i = i + 1\n    end\n    return res\nend", "    local res = {}\n    for i\
    \ = 1, n do\n        res[i] = i\n    end\n    return res\nend", "    local res\
    \ = {}\n    for i = 1, n do\n        res[i] = i\n    end\n    return res\nend",
  "  local t = {n}\n  for i = 1, n-1 do\n    t[i+1] = (t[i] % 2 == 0) and t[i] + 2\
    \ or t[i] + 1\n  end\n  return t\nend", "  local result = {}\n  local i = 1\n\
    \  while n > 0 do\n    result[i] = n\n    if n % 2 == 0 then\n      n = n - 1\n\
    \    else\n      n = n - 2\n    end\n    i = i + 1\n  end\n  return result\nend",
  "    local res = {}\n    local i = 1\n    while n > 0 do\n        res[i] = n\n \
    \       if n % 2 == 0 then\n            n = n + 1\n        else\n            n\
    \ = n + 2\n        end\n        i = i + 1\n    end\n    return res\nend", "  \
    \  local res = {}\n    local i = 1\n    while n > 0 do\n        res[i] = n\n \
    \       if n % 2 == 0 then\n            n = n - 1\n        else\n            n\
    \ = n - 2\n        end\n        i = i + 1\n    end\n    return res\nend\nassert(make_a_pile(1)\
    \ == {1})\nassert(make_a_pile(2) == {2, 1})\nassert(make_a_pile(3) == {3, 1})\n\
    assert(make_a_pile(4) == {4, 2, 1})\nassert(make_a_pile(5) == {5, 3, 1})\nassert(make_a_pile(6)\
    \ == {6, 4, 2, 1})\nassert(make_a_pile(7) == {7, 5, 3, 1})\nassert(make_a_pile(8)\
    \ == {8, 6, 4, 2, 1})\nassert(make_a_pile(9) == {9, 7, 5, 3, 1})\nassert(make_a_pile(10)\
    \ == {10, 8, 6, 4, 2, 1})\nassert(make_a_pile(11) == {11, 9, 7, 5, 3, 1})\nassert(make_a_pile(12)\
    \ == {12, 10, 8, 6, 4, 2, 1})\nassert(make_a_pile(13) == {13, 11, 9, 7, 5, 3,\
    \ 1})\nassert(make_a_pile(14) == {14, 12, 10, 8, 6, 4, 2, 1})\nassert(make_a_pile(15)\
    \ == {15, 13, 11, 9, 7, 5, 3, 1})\nassert(make_a_pile(16) == {16, 14, 12, 10,\
    \ 8, 6, 4, 2, 1})\nassert(make_a_pile(17) == {17, 15, 13, 11, 9, 7, 5, 3, 1})\n\
    assert(make_a_pile(18) == {18, 16, 14, 12, 10,", "    local res = {}\n    for\
    \ i = 1, n do\n        res[i] = i\n    end\n    return res\nend", "  local res\
    \ = {}\n  local i = 1\n  while n > 0 do\n    res[i] = n\n    if n % 2 == 0 then\n\
    \      n = n + 1\n    else\n      n = n + 2\n    end\n    i = i + 1\n  end\n \
    \ return res\nend", "    local res = {}\n    for i = 1, n do\n        res[i] =\
    \ i\n    end\n    return res\nend", "  local res = {}\n  local i = 1\n  while\
    \ n > 0 do\n    res[i] = n\n    if n % 2 == 0 then\n      n = n + 1\n    else\n\
    \      n = n + 2\n    end\n    i = i + 1\n  end\n  return res\nend", "    local\
    \ res = {}\n    local i = 1\n    while n > 0 do\n        res[i] = n\n        n\
    \ = n % 2 == 0 and n + 1 or n + 2\n        i = i + 1\n    end\n    return res\n\
    end", "  local res = {}\n  local i = 1\n  while n > 0 do\n    res[i] = n\n   \
    \ if n % 2 == 0 then\n      n = n + 1\n    else\n      n = n + 2\n    end\n  \
    \  i = i + 1\n  end\n  return res\nend", "  local stones = {n}\n  for i = 1, n\
    \ - 1 do\n    if stones[i] % 2 == 0 then\n      stones[i + 1] = stones[i] + 2\n\
    \    else\n      stones[i + 1] = stones[i] + 1\n    end\n  end\n  return stones\n\
    end", "  local r = {n}\n  for i = 1, n - 1 do\n    r[i + 1] = (n + i) % 2 == 0\
    \ and n + i + 1 or n + i\n  end\n  return r\nend", "    local pile = {}\n    local\
    \ level = n\n    while level > 0 do\n        table.insert(pile, level)\n     \
    \   if level % 2 == 0 then\n            level = level - 1\n        else\n    \
    \        level = level - 2\n        end\n    end\n    return pile\nend", "  local\
    \ t = {n}\n  while n > 1 do\n    n = n % 2 == 0 and n / 2 or (n + 1) / 2\n   \
    \ t[#t + 1] = n\n  end\n  return t\nend", "    local t = {n}\n    while n > 1\
    \ do\n        if n % 2 == 0 then\n            n = n / 2\n        else\n      \
    \      n = (n - 1) / 2\n        end\n        table.insert(t, n)\n    end\n   \
    \ return t\nend", "    local res = {}\n    local i = 1\n    while n > 0 do\n \
    \       res[i] = n\n        if n % 2 == 0 then\n            n = n + 1\n      \
    \  else\n            n = n + 2\n        end\n        i = i + 1\n    end\n    return\
    \ res\nend", "    local pile = {}\n    local i = 1\n    while n > 0 do\n     \
    \   pile[i] = n\n        n = n % 2 == 0 and n / 2 or (n + 1) / 2\n        i =\
    \ i + 1\n    end\n    return pile\nend", "  local t = {n}\n  while n > 1 do\n\
    \    n = n % 2 == 0 and n / 2 or (n + 1) / 2\n    t[#t + 1] = n\n  end\n  return\
    \ t\nend", "  local res = {}\n  local i = 1\n  while n > 0 do\n    res[i] = n\n\
    \    if n % 2 == 0 then\n      n = n + 1\n    else\n      n = n + 2\n    end\n\
    \    i = i + 1\n  end\n  return res\nend", "    local pile = {}\n    for i = 1,\
    \ n do\n        pile[i] = i\n    end\n    return pile\nend", "  local res = {}\n\
    \  local i = 1\n  while n > 0 do\n    res[i] = n\n    if n % 2 == 0 then\n   \
    \   n = n + 1\n    else\n      n = n + 2\n    end\n    i = i + 1\n  end\n  return\
    \ res\nend", "    local result = {}\n    local i = 1\n    while i <= n do\n  \
    \      result[i] = n\n        if n % 2 == 0 then\n            n = n + 1\n    \
    \    else\n            n = n + 2\n        end\n        i = i + 1\n    end\n  \
    \  return result\nend", "    local pile = {}\n    for i = 1, n do\n        pile[i]\
    \ = i\n    end\n    return pile\nend", "    local pile = {}\n    local i = 1\n\
    \    while n > 0 do\n        pile[i] = n\n        n = n % 2 == 0 and n - 1 or\
    \ n - 2\n        i = i + 1\n    end\n    return pile\nend", "    local res = {}\n\
    \    local i = 1\n    while n > 0 do\n        res[i] = n\n        if n % 2 ==\
    \ 0 then\n            n = n + 1\n        else\n            n = n + 2\n       \
    \ end\n        i = i + 1\n    end\n    return res\nend", "    local stones = {n}\n\
    \    for i = 1, n - 1 do\n        if stones[i] % 2 == 0 then\n            stones[i\
    \ + 1] = stones[i] + 2\n        else\n            stones[i + 1] = stones[i] +\
    \ 1\n        end\n    end\n    return stones\nend", "    local t = {n}\n    local\
    \ i = 1\n    while t[i] > 1 do\n        if t[i] % 2 == 0 then\n            t[i+1]\
    \ = t[i] / 2\n        else\n            t[i+1] = (t[i] + 1) / 2\n        end\n\
    \        i = i + 1\n    end\n    return t\nend", "    local pile = {}\n    local\
    \ i = 1\n    while n > 0 do\n        pile[i] = n\n        n = n % 2 == 0 and n\
    \ + 1 or n + 2\n        i = i + 1\n    end\n    return pile\nend", "  local pile\
    \ = {n}\n  for i = 1, n - 1 do\n    pile[i + 1] = (pile[i] % 2 == 0) and (pile[i]\
    \ + 2) or (pile[i] + 1)\n  end\n  return pile\nend", "    local pile = {}\n  \
    \  for i = 1, n do\n        pile[i] = n\n        if n % 2 == 0 then\n        \
    \    n = n + 1\n        else\n            n = n + 2\n        end\n    end\n  \
    \  return pile\nend", "    local result = {}\n    local i = 1\n    while n > 0\
    \ do\n        result[i] = n\n        if n % 2 == 0 then\n            n = n + 1\n\
    \        else\n            n = n + 2\n        end\n        i = i + 1\n    end\n\
    \    return result\nend", "    local res = {}\n    local i = 1\n    while n >\
    \ 0 do\n        res[i] = n\n        if n % 2 == 0 then\n            n = n - 1\n\
    \        else\n            n = n - 2\n        end\n        i = i + 1\n    end\n\
    \    return res\nend", "  local t = {n}\n  for i = 1, n - 1 do\n    if t[i] %\
    \ 2 == 0 then\n      t[i + 1] = t[i] + 2\n    else\n      t[i + 1] = t[i] + 1\n\
    \    end\n  end\n  return t\nend", "  local pile = {n}\n  local i = 1\n  while\
    \ pile[i] > 1 do\n    pile[i+1] = pile[i] % 2 == 0 and pile[i] - 1 or pile[i]\
    \ + 1\n    i = i + 1\n  end\n  return pile\nend", "    local t = {n}\n    while\
    \ n > 1 do\n        n = n % 2 == 0 and n - 1 or n + 1\n        t[#t + 1] = n\n\
    \    end\n    return t\nend", "    local t = {n}\n    for i = 1, n - 1 do\n  \
    \      t[i + 1] = (t[i] % 2 == 0) and t[i] + 2 or t[i] + 1\n    end\n    return\
    \ t\nend", "    local res = {}\n    local i = 1\n    while n > 0 do\n        res[i]\
    \ = n\n        if n % 2 == 0 then\n            n = n - 1\n        else\n     \
    \       n = n - 2\n        end\n        i = i + 1\n    end\n    return res\nend",
  "  local pile = {n}\n  while n > 1 do\n    n = n % 2 == 0 and n / 2 or (n + 1) /\
    \ 2\n    pile[#pile + 1] = n\n  end\n  return pile\nend", "    local pile = {}\n\
    \    local stones = n\n    while stones > 0 do\n        table.insert(pile, stones)\n\
    \        if stones % 2 == 0 then\n            stones = stones + 1\n        else\n\
    \            stones = stones + 2\n        end\n    end\n    return pile\nend",
  "  local res = {}\n  while n > 0 do\n    res[#res+1] = n\n    if n % 2 == 0 then\n\
    \      n = n - 1\n    else\n      n = n - 2\n    end\n  end\n  return res\nend",
  "    local result = {}\n    local i = 1\n    while i <= n do\n        result[i]\
    \ = n\n        if n % 2 == 0 then\n            n = n + 1\n        else\n     \
    \       n = n + 2\n        end\n        i = i + 1\n    end\n    return result\n\
    end", "    local res = {}\n    while n > 0 do\n        table.insert(res, 1, n)\n\
    \        n = n % 2 == 0 and n / 2 or (n + 1) / 2\n    end\n    return res\nend",
  "    local result = {}\n    local i = 1\n    while n > 0 do\n        result[i] =\
    \ n\n        if n % 2 == 0 then\n            n = n / 2\n        else\n       \
    \     n = (n + 1) / 2\n        end\n        i = i + 1\n    end\n    return result\n\
    end", "    local result = {}\n    local i = 1\n    while n > 0 do\n        result[i]\
    \ = n\n        n = n % 2 == 0 and n + 1 or n + 2\n        i = i + 1\n    end\n\
    \    return result\nend", "    local res = {}\n    while n > 0 do\n        table.insert(res,\
    \ 1, n)\n        n = n % 2 == 0 and n + 1 or n + 2\n    end\n    return res\n\
    end", "    local res = {}\n    while n > 0 do\n        table.insert(res, 1, n)\n\
    \        if n % 2 == 0 then\n            n = n / 2\n        else\n           \
    \ n = (n + 1) / 2\n        end\n    end\n    return res\nend", "  local t = {n}\n\
    \  while n > 1 do\n    n = n % 2 == 0 and n / 2 or (n + 1) / 2\n    t[#t + 1]\
    \ = n\n  end\n  return t\nend", "    local res = {}\n    while n > 0 do\n    \
    \    res[#res+1] = n\n        if n % 2 == 0 then\n            n = n // 2\n   \
    \     else\n            n = (n + 1) // 2\n        end\n    end\n    return res\n\
    end", "    local res = {}\n    while n > 0 do\n        res[#res+1] = n\n     \
    \   if n % 2 == 0 then\n            n = n / 2\n        else\n            n = (n\
    \ + 1) / 2\n        end\n    end\n    return res\nend", "  local res = {}\n  while\
    \ n > 0 do\n    table.insert(res, 1, n)\n    if n % 2 == 0 then\n      n = n /\
    \ 2\n    else\n      n = (n + 1) / 2\n    end\n  end\n  return res\nend", "  \
    \  local t = {n}\n    while n > 1 do\n        if n % 2 == 0 then\n           \
    \ n = n / 2\n        else\n            n = (n + 1) / 2\n        end\n        table.insert(t,\
    \ n)\n    end\n    return t\nend", "    local t = {n}\n    while n > 1 do\n  \
    \      n = n % 2 == 0 and n - 1 or n + 1\n        t[#t + 1] = n\n    end\n   \
    \ return t\nend\nassert(make_a_pile(1) == {1})\nassert(make_a_pile(2) == {2, 1})\n\
    assert(make_a_pile(3) == {3, 2, 1})\nassert(make_a_pile(4) == {4, 3, 2, 1})\n\
    assert(make_a_pile(5) == {5, 4, 3, 2, 1})\nassert(make_a_pile(6) == {6, 5, 4,\
    \ 3, 2, 1})\nassert(make_a_pile(7) == {7, 6, 5, 4, 3, 2, 1})\nassert(make_a_pile(8)\
    \ == {8, 7, 6, 5, 4, 3, 2, 1})\nassert(make_a_pile(9) == {9, 8, 7, 6, 5, 4, 3,\
    \ 2, 1})\nassert(make_a_pile(10) == {10, 9, 8, 7, 6, 5, 4, 3, 2, 1})", "    local\
    \ res = {}\n    local i = 1\n    while n > 0 do\n        res[i] = n\n        if\
    \ n % 2 == 0 then\n            n = n + 1\n        else\n            n = n + 2\n\
    \        end\n        i = i + 1\n    end\n    return res\nend", "  local pile\
    \ = {n}\n  while n > 1 do\n    n = n % 2 == 0 and n / 2 or (n + 1) / 2\n    pile[#pile\
    \ + 1] = n\n  end\n  return pile\nend", "  local pile = {n}\n  while n > 1 do\n\
    \    n = n % 2 == 0 and n - 1 or n + 1\n    pile[#pile + 1] = n\n  end\n  return\
    \ pile\nend", "    local res = {}\n    local i = 1\n    while n > 0 do\n     \
    \   res[i] = n\n        if n % 2 == 0 then\n            n = n + 1\n        else\n\
    \            n = n + 2\n        end\n        i = i + 1\n    end\n    return res\n\
    end", "  local pile = {n}\n  while n > 1 do\n    n = n % 2 == 0 and n / 2 or (n\
    \ + 1) / 2\n    pile[#pile + 1] = n\n  end\n  return pile\nend", "    local res\
    \ = {}\n    local i = 1\n    while n > 0 do\n        res[i] = n\n        if n\
    \ % 2 == 0 then\n            n = n / 2\n        else\n            n = (n + 1)\
    \ / 2\n        end\n        i = i + 1\n    end\n    return res\nend", "    local\
    \ result = {}\n    local i = 1\n    while n > 0 do\n        result[i] = n\n  \
    \      if n % 2 == 0 then\n            n = n + 1\n        else\n            n\
    \ = n + 2\n        end\n        i = i + 1\n    end\n    return result\nend", " \
    \   local pile = {}\n    local i = 1\n    while n > 0 do\n        pile[i] = n\n\
    \        if n % 2 == 0 then\n            n = n - 1\n        else\n           \
    \ n = n - 2\n        end\n        i = i + 1\n    end\n    return pile\nend", " \
    \   local res = {}\n    local i = 1\n    while n > 0 do\n        res[i] = n\n\
    \        if n % 2 == 0 then\n            n = n - 1\n        else\n           \
    \ n = n - 2\n        end\n        i = i + 1\n    end\n    return res\nend", " \
    \   local t = {n}\n    while n > 1 do\n        n = n % 2 == 0 and n / 2 or (n\
    \ + 1) / 2\n        t[#t + 1] = n\n    end\n    return t\nend", "  local res =\
    \ {}\n  local i = 1\n  while n > 0 do\n    res[i] = n\n    if n % 2 == 0 then\n\
    \      n = n - 1\n    else\n      n = n - 2\n    end\n    i = i + 1\n  end\n \
    \ return res\nend", "    local res = {}\n    local i = 1\n    while n > 0 do\n\
    \        res[i] = n\n        if n % 2 == 0 then\n            n = n - 1\n     \
    \   else\n            n = n - 2\n        end\n        i = i + 1\n    end\n   \
    \ return res\nend", "    local result = {}\n    local i = 1\n    while n > 0 do\n\
    \        result[i] = n\n        if n % 2 == 0 then\n            n = n + 1\n  \
    \      else\n            n = n + 2\n        end\n        i = i + 1\n    end\n\
    \    return result\nend", "    local res = {}\n    while n > 0 do\n        table.insert(res,\
    \ 1, n)\n        if n % 2 == 0 then\n            n = n / 2\n        else\n   \
    \         n = (n + 1) / 2\n        end\n    end\n    return res\nend", "    local\
    \ res = {}\n    local i = 1\n    while n > 0 do\n        res[i] = n\n        if\
    \ n % 2 == 0 then\n            n = n - 1\n        else\n            n = n - 2\n\
    \        end\n        i = i + 1\n    end\n    return res\nend", "  local pile\
    \ = {n}\n  while n > 1 do\n    n = n % 2 == 0 and n / 2 or (n + 1) / 2\n    pile[#pile\
    \ + 1] = n\n  end\n  return pile\nend", "    local result = {}\n    local i =\
    \ 1\n    while n > 0 do\n        result[i] = n\n        if n % 2 == 0 then\n \
    \           n = n / 2\n        else\n            n = (n + 1) / 2\n        end\n\
    \        i = i + 1\n    end\n    return result\nend", "  local res = {}\n  while\
    \ n > 0 do\n    res[#res+1] = n\n    if n % 2 == 0 then\n      n = n - 1\n   \
    \ else\n      n = n - 2\n    end\n  end\n  return res\nend", "    local t = {n}\n\
    \    while n > 1 do\n        n = n % 2 == 0 and n - 1 or n + 1\n        t[#t +\
    \ 1] = n\n    end\n    return t\nend", "    local pile = {}\n    local level =\
    \ n\n    while level > 0 do\n        pile[#pile+1] = level\n        if level %\
    \ 2 == 0 then\n            level = level - 1\n        else\n            level\
    \ = level - 2\n        end\n    end\n    return pile\nend", "    local pile =\
    \ {}\n    local i = 1\n    while n > 0 do\n        pile[i] = n\n        if n %\
    \ 2 == 0 then\n            n = n - 1\n        else\n            n = n - 2\n  \
    \      end\n        i = i + 1\n    end\n    return pile\nend", "  local res =\
    \ {}\n  while n > 0 do\n    res[#res+1] = n\n    if n % 2 == 0 then\n      n =\
    \ n / 2\n    else\n      n = (n + 1) / 2\n    end\n  end\n  return res\nend",
  "    local pile = {}\n    for i = 1, n do\n        pile[i] = n\n        if n % 2\
    \ == 0 then\n            n = n + 1\n        else\n            n = n + 2\n    \
    \    end\n    end\n    return pile\nend", "    local pile = {}\n    local i =\
    \ 1\n    while n > 0 do\n        pile[i] = n\n        n = n % 2 == 0 and n + 1\
    \ or n + 2\n        i = i + 1\n    end\n    return pile\nend", "  local t = {n}\n\
    \  local i = 1\n  while t[i] > 1 do\n    t[i+1] = t[i] % 2 == 0 and t[i] - 1 or\
    \ t[i] + 1\n    i = i + 1\n  end\n  return t\nend", "  local result = {}\n  local\
    \ i = 1\n  while n > 0 do\n    result[i] = n\n    if n % 2 == 0 then\n      n\
    \ = n + 1\n    else\n      n = n + 2\n    end\n    i = i + 1\n  end\n  return\
    \ result\nend", "    local res = {}\n    local i = 1\n    while n > 0 do\n   \
    \     res[i] = n\n        if n % 2 == 0 then\n            n = n - 1\n        else\n\
    \            n = n - 2\n        end\n        i = i + 1\n    end\n    return res\n\
    end", "  local res = {}\n  local i = 1\n  while n > 0 do\n    res[i] = n\n   \
    \ if n % 2 == 0 then\n      n = n / 2\n    else\n      n = (n + 1) / 2\n    end\n\
    \    i = i + 1\n  end\n  return res\nend", "    local res = {}\n    local i =\
    \ 1\n    while n > 0 do\n        res[i] = n\n        if n % 2 == 0 then\n    \
    \        n = n - 1\n        else\n            n = n - 2\n        end\n       \
    \ i = i + 1\n    end\n    return res\nend", "    local res = {}\n    for i = 1,\
    \ n do\n        res[i] = i\n    end\n    return res\nend", "    local pile = {}\n\
    \    local i = 1\n    while n > 0 do\n        pile[i] = n\n        if n % 2 ==\
    \ 0 then\n            n = n - 1\n        else\n            n = n - 2\n       \
    \ end\n        i = i + 1\n    end\n    return pile\nend", "    local pile = {}\n\
    \    local i = 1\n    while n > 0 do\n        pile[i] = n\n        if n % 2 ==\
    \ 0 then\n            n = n - 1\n        else\n            n = n - 2\n       \
    \ end\n        i = i + 1\n    end\n    return pile\nend", "  local pile = {n}\n\
    \  while n > 1 do\n    if n % 2 == 0 then\n      n = n / 2\n    else\n      n\
    \ = (n + 1) / 2\n    end\n    table.insert(pile, n)\n  end\n  return pile\nend",
  "    local result = {}\n    local i = 1\n    while n > 0 do\n        result[i] =\
    \ n\n        if n % 2 == 0 then\n            n = n + 1\n        else\n       \
    \     n = n + 2\n        end\n        i = i + 1\n    end\n    return result\n\
    end", "  local res = {}\n  local i = 1\n  while n > 0 do\n    res[i] = n\n   \
    \ if n % 2 == 0 then\n      n = n - 1\n    else\n      n = n - 2\n    end\n  \
    \  i = i + 1\n  end\n  return res\nend", "  local pile = {n}\n  for i = 1, n -\
    \ 1 do\n    pile[i + 1] = (pile[i] % 2 == 0) and (pile[i] + 1) or (pile[i] + 2)\n\
    \  end\n  return pile\nend", "    local pile = {}\n    while n > 0 do\n      \
    \  table.insert(pile, n)\n        if n % 2 == 0 then\n            n = n / 2\n\
    \        else\n            n = (n + 1) / 2\n        end\n    end\n    return pile\n\
    end", "  local stones = {n}\n  while stones[#stones] > 1 do\n    local last =\
    \ stones[#stones]\n    if last % 2 == 0 then\n      stones[#stones + 1] = last\
    \ / 2\n    else\n      stones[#stones + 1] = (last - 1) / 2\n    end\n  end\n\
    \  return stones\nend", "    local res = {}\n    while n > 0 do\n        res[#res+1]\
    \ = n\n        if n % 2 == 0 then\n            n = n - 1\n        else\n     \
    \       n = n - 2\n        end\n    end\n    return res\nend", "  local res =\
    \ {}\n  local i = 1\n  while n > 0 do\n    res[i] = n\n    if n % 2 == 0 then\n\
    \      n = n - 1\n    else\n      n = n - 2\n    end\n    i = i + 1\n  end\n \
    \ return res\nend", "  local result = {}\n  local i = 1\n  while n > 0 do\n  \
    \  result[i] = n\n    if n % 2 == 0 then\n      n = n - 1\n    else\n      n =\
    \ n - 2\n    end\n    i = i + 1\n  end\n  return result\nend", "  local res =\
    \ {}\n  local i = 1\n  while n > 0 do\n    res[i] = n\n    if n % 2 == 0 then\n\
    \      n = n + 1\n    else\n      n = n + 2\n    end\n    i = i + 1\n  end\n \
    \ return res\nend", "    local t = {n}\n    for i = 2, n do\n        t[i] = (n\
    \ % 2 == 0) and (t[i-1] + 2) or (t[i-1] + 1)\n    end\n    return t\nend", " \
    \ local res = {}\n  local i = 1\n  while n > 0 do\n    res[i] = n\n    if n %\
    \ 2 == 0 then\n      n = n + 1\n    else\n      n = n + 2\n    end\n    i = i\
    \ + 1\n  end\n  return res\nend", "    local stones = {n}\n    while n > 1 do\n\
    \        n = n % 2 == 0 and n / 2 or (n + 1) / 2\n        table.insert(stones,\
    \ n)\n    end\n    return stones\nend", "    local res = {}\n    local i = 1\n\
    \    while n > 0 do\n        res[i] = n\n        if n % 2 == 0 then\n        \
    \    n = n - 1\n        else\n            n = n - 2\n        end\n        i =\
    \ i + 1\n    end\n    return res\nend", "    local res = {}\n    local i = 1\n\
    \    while n > 0 do\n        res[i] = n\n        if n % 2 == 0 then\n        \
    \    n = n + 1\n        else\n            n = n + 2\n        end\n        i =\
    \ i + 1\n    end\n    return res\nend", "    local stones = {n}\n    while n >\
    \ 1 do\n        if n % 2 == 0 then\n            n = n / 2\n        else\n    \
    \        n = (n + 1) / 2\n        end\n        table.insert(stones, n)\n    end\n\
    \    return stones\nend", "    local res = {}\n    for i = 1, n do\n        res[i]\
    \ = i\n    end\n    return res\nend", "    local pile = {}\n    local i = 1\n\
    \    while n > 0 do\n        pile[i] = n\n        if n % 2 == 0 then\n       \
    \     n = n / 2\n        else\n            n = (n + 1) / 2\n        end\n    \
    \    i = i + 1\n    end\n    return pile\nend\nassert(make_a_pile(1) == {1})\n\
    assert(make_a_pile(2) == {2, 1})\nassert(make_a_pile(3) == {3, 2, 1})\nassert(make_a_pile(4)\
    \ == {4, 2, 1})\nassert(make_a_pile(5) == {5, 3, 2, 1})\nassert(make_a_pile(6)\
    \ == {6, 3, 2, 1})\nassert(make_a_pile(7) == {7, 4, 2, 1})\nassert(make_a_pile(8)\
    \ == {8, 4, 2, 1})\nassert(make_a_pile(9) == {9, 5, 3, 2, 1})\nassert(make_a_pile(10)\
    \ == {10, 5, 3, 2, 1})\nassert(make_a_pile(11) == {11, 6, 3, 2, 1})\nassert(make_a_pile(12)\
    \ == {12, 6, 3, 2, 1})\nassert(make_a_pile(13) == {13, 7, 4, 2, 1})\nassert(make_a_pile(14)\
    \ == {14, 7, 4, 2, 1})\nassert(make_a_pile(15) == {15, 8, 4, 2, 1})\nassert(make_a_pile(16)\
    \ == {16, 8, 4, 2, 1})\nassert(make_a_pile(17) == {17, 9, 5, 3, 2, 1})\nassert(make_a_pile(18)\
    \ == {18, 9, 5, 3, 2, 1})\nassert(make_a_pile(19) == {19, 10, 5, 3, 2, 1})\nassert(make",
  "    local pile = {}\n    local i = 1\n    while n > 0 do\n        pile[i] = n\n\
    \        if n % 2 == 0 then\n            n = n - 1\n        else\n           \
    \ n = n - 2\n        end\n        i = i + 1\n    end\n    return pile\nend", " \
    \   local res = {}\n    local i = 1\n    while n > 0 do\n        res[i] = n\n\
    \        if n % 2 == 0 then\n            n = n - 1\n        else\n           \
    \ n = n - 2\n        end\n        i = i + 1\n    end\n    return res\nend", " \
    \   local result = {}\n    local i = 1\n    while i <= n do\n        result[i]\
    \ = n\n        if n % 2 == 0 then\n            n = n + 1\n        else\n     \
    \       n = n + 2\n        end\n        i = i + 1\n    end\n    return result\n\
    end", "    local res = {}\n    while n > 0 do\n        table.insert(res, 1, n)\n\
    \        if n % 2 == 0 then\n            n = n / 2\n        else\n           \
    \ n = (n + 1) / 2\n        end\n    end\n    return res\nend", "    local res\
    \ = {}\n    local i = 1\n    while n > 0 do\n        res[i] = n\n        if n\
    \ % 2 == 0 then\n            n = n - 1\n        else\n            n = n - 2\n\
    \        end\n        i = i + 1\n    end\n    return res\nend", "    local res\
    \ = {}\n    local i = 1\n    while n > 0 do\n        res[i] = n\n        if n\
    \ % 2 == 0 then\n            n = n + 1\n        else\n            n = n + 2\n\
    \        end\n        i = i + 1\n    end\n    return res\nend", "    local res\
    \ = {}\n    local i = 1\n    while n > 0 do\n        res[i] = n\n        if n\
    \ % 2 == 0 then\n            n = n + 1\n        else\n            n = n + 2\n\
    \        end\n        i = i + 1\n    end\n    return res\nend", "    local pile\
    \ = {}\n    local i = 1\n    while n > 0 do\n        pile[i] = n\n        if n\
    \ % 2 == 0 then\n            n = n + 1\n        else\n            n = n + 2\n\
    \        end\n        i = i + 1\n    end\n    return pile\nend", "    local res\
    \ = {}\n    for i = 1, n do\n        res[i] = n\n        if n % 2 == 0 then\n\
    \            n = n + 1\n        else\n            n = n + 2\n        end\n   \
    \ end\n    return res\nend", "  local result = {}\n  local i = 1\n  while i <=\
    \ n do\n    table.insert(result, n)\n    if n % 2 == 0 then\n      n = n + 1\n\
    \    else\n      n = n + 2\n    end\n    i = i + 1\n  end\n  return result\nend",
  "  local pile = {n}\n  local i = 1\n  while i < n do\n    if pile[i] % 2 == 0 then\n\
    \      pile[i+1] = pile[i] + 2\n    else\n      pile[i+1] = pile[i] + 1\n    end\n\
    \    i = i + 1\n  end\n  return pile\nend", "    local stones = {n}\n    for i\
    \ = 1, n - 1 do\n        local next_level = stones[i] + (stones[i] % 2 == 0 and\
    \ 2 or 1)\n        table.insert(stones, next_level)\n    end\n    return stones\n\
    end", "    local pile = {}\n    local i = 1\n    while n > 0 do\n        pile[i]\
    \ = n\n        if n % 2 == 0 then\n            n = n - 1\n        else\n     \
    \       n = n - 2\n        end\n        i = i + 1\n    end\n    return pile\n\
    end", "  local res = {}\n  local i = 1\n  while n > 0 do\n    res[i] = n\n   \
    \ if n % 2 == 0 then\n      n = n + 1\n    else\n      n = n + 2\n    end\n  \
    \  i = i + 1\n  end\n  return res\nend", "    local result = {}\n    local i =\
    \ 1\n    while n > 0 do\n        result[i] = n\n        if n % 2 == 0 then\n \
    \           n = n + 1\n        else\n            n = n + 2\n        end\n    \
    \    i = i + 1\n    end\n    return result\nend", "    local stones = {}\n   \
    \ local level = n\n    while level > 0 do\n        table.insert(stones, level)\n\
    \        level = level % 2 == 0 and level - 1 or level - 2\n    end\n    return\
    \ stones\nend", "    local pile = {}\n    local i = 1\n    while n > 0 do\n  \
    \      pile[i] = n\n        if n % 2 == 0 then\n            n = n / 2\n      \
    \  else\n            n = (n + 1) / 2\n        end\n        i = i + 1\n    end\n\
    \    return pile\nend", "    local res = {}\n    for i = 1, n do\n        res[i]\
    \ = i\n    end\n    return res\nend", "  local pile = {n}\n  while n > 1 do\n\
    \    n = n % 2 == 0 and n / 2 or (n + 1) / 2\n    pile[#pile + 1] = n\n  end\n\
    \  return pile\nend", "  local res = {}\n  local i = 1\n  while n > 0 do\n   \
    \ res[i] = n\n    if n % 2 == 0 then\n      n = n / 2\n    else\n      n = (n\
    \ + 1) / 2\n    end\n    i = i + 1\n  end\n  return res\nend", "    local result\
    \ = {}\n    local stones = n\n    while stones > 0 do\n        table.insert(result,\
    \ stones)\n        if stones % 2 == 0 then\n            stones = stones + 1\n\
    \        else\n            stones = stones + 2\n        end\n    end\n    return\
    \ result\nend", "    local result = {}\n    local stones = n\n    while stones\
    \ > 0 do\n        table.insert(result, stones)\n        stones = stones % 2 ==\
    \ 0 and stones - 1 or stones - 2\n    end\n    return result\nend", "    local\
    \ res = {}\n    local i = 1\n    while n > 0 do\n        res[i] = n\n        if\
    \ n % 2 == 0 then\n            n = n - 1\n        else\n            n = n - 2\n\
    \        end\n        i = i + 1\n    end\n    return res\nend", "    local pile\
    \ = {}\n    local i = 1\n    while n > 0 do\n        pile[i] = n\n        if n\
    \ % 2 == 0 then\n            n = n - 1\n        else\n            n = n - 2\n\
    \        end\n        i = i + 1\n    end\n    return pile\nend", "    local pile\
    \ = {}\n    local level = n\n    while level > 0 do\n        pile[#pile+1] = level\n\
    \        if level % 2 == 0 then\n            level = level - 1\n        else\n\
    \            level = level - 2\n        end\n    end\n    return pile\nend", " \
    \   local pile = {}\n    local stones = n\n    while stones > 0 do\n        table.insert(pile,\
    \ stones)\n        stones = stones % 2 == 0 and stones - 1 or stones - 2\n   \
    \ end\n    return pile\nend", "    local t = {n}\n    for i = 1, n - 1 do\n  \
    \      t[i + 1] = (t[i] % 2 == 0) and t[i] + 1 or t[i] + 2\n    end\n    return\
    \ t\nend", "    local pile = {}\n    local i = 1\n    while n > 0 do\n       \
    \ pile[i] = n\n        if n % 2 == 0 then\n            n = n + 1\n        else\n\
    \            n = n + 2\n        end\n        i = i + 1\n    end\n    return pile\n\
    end", "    local res = {}\n    for i = 1, n do\n        res[i] = i\n    end\n\
    \    return res\nend", "    local res = {}\n    while n > 0 do\n        table.insert(res,\
    \ 1, n)\n        if n % 2 == 0 then\n            n = n / 2\n        else\n   \
    \         n = (n + 1) / 2\n        end\n    end\n    return res\nend", "    local\
    \ t = {n}\n    while n > 1 do\n        n = n % 2 == 0 and n / 2 or (n + 1) / 2\n\
    \        t[#t + 1] = n\n    end\n    return t\nend", "    local t = {n}\n    while\
    \ n > 1 do\n        n = n % 2 == 0 and n / 2 or (n + 1) / 2\n        t[#t + 1]\
    \ = n\n    end\n    return t\nend", "    local pile = {}\n    local i = 1\n  \
    \  while n > 0 do\n        pile[i] = n\n        if n % 2 == 0 then\n         \
    \   n = n - 1\n        else\n            n = n - 2\n        end\n        i = i\
    \ + 1\n    end\n    return pile\nend", "    local pile = {}\n    local level =\
    \ n\n    while level > 0 do\n        pile[#pile+1] = level\n        if level %\
    \ 2 == 0 then\n            level = level - 1\n        else\n            level\
    \ = level - 2\n        end\n    end\n    return pile\nend", "    local t = {n}\n\
    \    while n > 1 do\n        n = n % 2 == 0 and n / 2 or (n + 1) / 2\n       \
    \ t[#t + 1] = n\n    end\n    return t\nend", "    local res = {}\n    local i\
    \ = 1\n    while n > 0 do\n        res[i] = n\n        if n % 2 == 0 then\n  \
    \          n = n + 1\n        else\n            n = n + 2\n        end\n     \
    \   i = i + 1\n    end\n    return res\nend", "    local pile = {}\n    for i\
    \ = 1, n do\n        pile[i] = i\n    end\n    return pile\nend", "  local res\
    \ = {}\n  local i = 1\n  while n > 0 do\n    res[i] = n\n    if n % 2 == 0 then\n\
    \      n = n - 1\n    else\n      n = n - 2\n    end\n    i = i + 1\n  end\n \
    \ return res\nend", "  local t = {n}\n  while n > 1 do\n    n = n % 2 == 0 and\
    \ n / 2 or (n + 1) / 2\n    t[#t + 1] = n\n  end\n  return t\nend", "  local res\
    \ = {}\n  while n > 0 do\n    res[#res+1] = n\n    if n % 2 == 0 then\n      n\
    \ = n + 1\n    else\n      n = n + 2\n    end\n  end\n  return res\nend", "  local\
    \ pile = {n}\n  while n > 1 do\n    n = n % 2 == 0 and n - 1 or n + 1\n    pile[#pile\
    \ + 1] = n\n  end\n  return pile\nend", "    local t = {n}\n    for i = 1, n -\
    \ 1 do\n        if t[i] % 2 == 0 then\n            t[i + 1] = t[i] + 2\n     \
    \   else\n            t[i + 1] = t[i] + 1\n        end\n    end\n    return t\n\
    end", "    local t = {n}\n    while n > 1 do\n        n = n % 2 == 0 and n / 2\
    \ or (n + 1) / 2\n        t[#t + 1] = n\n    end\n    return t\nend", "  local\
    \ res = {}\n  for i = 1, n do\n    res[i] = n\n    if n % 2 == 0 then\n      n\
    \ = n + 1\n    else\n      n = n + 2\n    end\n  end\n  return res\nend", "  \
    \  local res = {}\n    local i = 1\n    while n > 0 do\n        res[i] = n\n \
    \       n = n % 2 == 0 and n + 1 or n + 2\n        i = i + 1\n    end\n    return\
    \ res\nend", "    local pile = {}\n    local i = 1\n    while n > 0 do\n     \
    \   pile[i] = n\n        if n % 2 == 0 then\n            n = n + 1\n        else\n\
    \            n = n + 2\n        end\n        i = i + 1\n    end\n    return pile\n\
    end", "  local res = {}\n  local i = 1\n  while n > 0 do\n    res[i] = n\n   \
    \ if n % 2 == 0 then\n      n = n + 1\n    else\n      n = n + 2\n    end\n  \
    \  i = i + 1\n  end\n  return res\nend", "    local pile = {}\n    for i = 1,\
    \ n do\n        pile[i] = i\n    end\n    return pile\nend", "    local res =\
    \ {}\n    local i = 1\n    while n > 0 do\n        res[i] = n\n        if n %\
    \ 2 == 0 then\n            n = n / 2\n        else\n            n = (n + 1) /\
    \ 2\n        end\n        i = i + 1\n    end\n    return res\nend", "  local t\
    \ = {n}\n  for i = 1, n - 1 do\n    t[i + 1] = (n + i) % 2 == 0 and n + i + 1\
    \ or n + i\n  end\n  return t\nend", "    local pile = {}\n    local i = 1\n \
    \   while n > 0 do\n        pile[i] = n\n        if n % 2 == 0 then\n        \
    \    n = n - 1\n        else\n            n = n - 2\n        end\n        i =\
    \ i + 1\n    end\n    return pile\nend", "    local res = {}\n    while n > 0\
    \ do\n        table.insert(res, 1, n)\n        if n % 2 == 0 then\n          \
    \  n = n / 2\n        else\n            n = (n + 1) / 2\n        end\n    end\n\
    \    return res\nend", "  local res = {}\n  local i = 1\n  while n > 0 do\n  \
    \  res[i] = n\n    if n % 2 == 0 then\n      n = n / 2\n    else\n      n = (n\
    \ + 1) / 2\n    end\n    i = i + 1\n  end\n  return res\nend", "    local t =\
    \ {n}\n    while n > 1 do\n        n = n % 2 == 0 and n - 1 or n + 1\n       \
    \ t[#t + 1] = n\n    end\n    return t\nend", "    local t = {n}\n    for i =\
    \ 1, n - 1 do\n        t[i + 1] = (n + i) % 2 == 0 and n + i + 1 or n + i\n  \
    \  end\n    return t\nend", "    local res = {}\n    local i = 1\n    while n\
    \ > 0 do\n        res[i] = n\n        if n % 2 == 0 then\n            n = n -\
    \ 1\n        else\n            n = n - 2\n        end\n        i = i + 1\n   \
    \ end\n    return res\nend", "    local pile = {}\n    local i = 1\n    while\
    \ n > 0 do\n        pile[i] = n\n        if n % 2 == 0 then\n            n = n\
    \ + 1\n        else\n            n = n + 2\n        end\n        i = i + 1\n \
    \   end\n    return pile\nend", "  local res = {}\n  for i = 1, n do\n    res[i]\
    \ = n\n    if n % 2 == 0 then\n      n = n + 1\n    else\n      n = n + 2\n  \
    \  end\n  end\n  return res\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
