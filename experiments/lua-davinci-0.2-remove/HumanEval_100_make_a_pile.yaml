name: HumanEval_100_make_a_pile
language: lua
prompt: "-- Given a positive integer n, you have to make a pile of n levels of stones.\n\
  -- The first level has n stones.\n-- The number of stones in the next level is:\n\
  -- - the next odd number if n is odd.\n-- - the next even number if n is even.\n\
  -- Return the number of stones in each level in a list, where element at index\n\
  -- i represents the number of stones in the level (i+1).\n-- Examples:\nlocal function\
  \ make_a_pile(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_a_pile\n\
  \    lu.assertEquals(candidate(3), {3, 5, 7})\n    lu.assertEquals(candidate(4),\
  \ {4, 6, 8, 10})\n    lu.assertEquals(candidate(5), {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6),\
  \ {6, 8, 10, 12, 14, 16})\n    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16,\
  \ 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local res = {}\n    local i = 1\n    while n > 0 do\n        res[i]\
    \ = n\n        if n % 2 == 0 then\n            n = n - 1\n        else\n     \
    \       n = n - 2\n        end\n        i = i + 1\n    end\n    return res\nend",
  "  local pile = {n}\n  local i = 1\n  while pile[i] > 1 do\n    pile[i+1] = pile[i]\
    \ % 2 == 0 and pile[i] - 1 or pile[i] + 1\n    i = i + 1\n  end\n  return pile\n\
    end", "    local pile = {}\n    local i = 1\n    while n > 0 do\n        pile[i]\
    \ = n\n        if n % 2 == 0 then\n            n = n + 1\n        else\n     \
    \       n = n + 2\n        end\n        i = i + 1\n    end\n    return pile\n\
    end", "  local result = {}\n  local i = 1\n  while n > 0 do\n    result[i] = n\n\
    \    if n % 2 == 0 then\n      n = n + 1\n    else\n      n = n + 2\n    end\n\
    \    i = i + 1\n  end\n  return result\nend", "    local pile = {}\n    local\
    \ i = 1\n    while n > 0 do\n        pile[i] = n\n        if n % 2 == 0 then\n\
    \            n = n - 1\n        else\n            n = n - 2\n        end\n   \
    \     i = i + 1\n    end\n    return pile\nend", "  local res = {}\n  local i\
    \ = 1\n  while n > 0 do\n    res[i] = n\n    if n % 2 == 0 then\n      n = n /\
    \ 2\n    else\n      n = (n + 1) / 2\n    end\n    i = i + 1\n  end\n  return\
    \ res\nend", "  local t = {n}\n  for i = 1, n - 1 do\n    t[i + 1] = (n + i) %\
    \ 2 == 0 and n + i + 1 or n + i\n  end\n  return t\nend", "    local pile = {}\n\
    \    local i = 1\n    while n > 0 do\n        pile[i] = n\n        if n % 2 ==\
    \ 0 then\n            n = n / 2\n        else\n            n = (n + 1) / 2\n \
    \       end\n        i = i + 1\n    end\n    return pile\nend", "    local res\
    \ = {}\n    local i = 1\n    while n > 0 do\n        res[i] = n\n        if n\
    \ % 2 == 0 then\n            n = n - 1\n        else\n            n = n - 2\n\
    \        end\n        i = i + 1\n    end\n    return res\nend", "    local t =\
    \ {n}\n    while t[#t] > 1 do\n        if t[#t] % 2 == 0 then\n            t[#t+1]\
    \ = t[#t] / 2\n        else\n            t[#t+1] = (t[#t] + 1) / 2\n        end\n\
    \    end\n    return t\nend", "  local pile = {n}\n  local i = 1\n  while pile[i]\
    \ > 1 do\n    pile[i+1] = pile[i] % 2 == 0 and pile[i] - 1 or pile[i] + 1\n  \
    \  i = i + 1\n  end\n  return pile\nend", "    local t = {n}\n    while n > 1\
    \ do\n        n = n % 2 == 0 and n - 1 or n + 1\n        t[#t + 1] = n\n    end\n\
    \    return t\nend", "    local res = {}\n    local i = 1\n    while n > 0 do\n\
    \        res[i] = n\n        if n % 2 == 0 then\n            n = n + 1\n     \
    \   else\n            n = n + 2\n        end\n        i = i + 1\n    end\n   \
    \ return res\nend\nassert(make_a_pile(1) == {1})\nassert(make_a_pile(2) == {2,\
    \ 3})\nassert(make_a_pile(3) == {3, 5})\nassert(make_a_pile(4) == {4, 6, 9})\n\
    assert(make_a_pile(5) == {5, 7, 11})\nassert(make_a_pile(6) == {6, 8, 12, 17})\n\
    assert(make_a_pile(7) == {7, 9, 13, 19})\nassert(make_a_pile(8) == {8, 10, 14,\
    \ 20, 27})\nassert(make_a_pile(9) == {9, 11, 15, 21, 29})\nassert(make_a_pile(10)\
    \ == {10, 12, 16, 22, 30, 39})\nassert(make_a_pile(11) == {11, 13, 17, 23, 31,\
    \ 41})\nassert(make_a_pile(12) == {12, 14, 18, 24, 32, 42, 53})\nassert(make_a_pile(13)\
    \ == {13, 15, 19, 25, 33, 43, 55})\nassert(make_a_pile(14) == {14, 16, 20, 26,\
    \ 34, 44, 56, 69})\nassert(make_a_pile(15) == {15, 17, 21, 27, 35, 45, 57, 71})\n\
    assert(make_a_pile(16) == {16, 18, 22, 28, 36, 46, 58, 72, 87})\nassert(make_a_pile(17)\
    \ == {17, 19, 23, 29, 37, 47, 59, 73, 89})\nassert(make_a_pile(18) == {18, 20,\
    \ 24, 30, 38,", "    local res = {}\n    local i = 1\n    while n > 0 do\n   \
    \     res[i] = n\n        if n % 2 == 0 then\n            n = n - 1\n        else\n\
    \            n = n - 2\n        end\n        i = i + 1\n    end\n    return res\n\
    end", "    local res = {}\n    while n > 0 do\n        res[#res+1] = n\n     \
    \   if n % 2 == 0 then\n            n = n - 1\n        else\n            n = n\
    \ - 2\n        end\n    end\n    return res\nend", "  local pile = {n}\n  while\
    \ pile[#pile] > 1 do\n    if pile[#pile] % 2 == 0 then\n      pile[#pile+1] =\
    \ pile[#pile] / 2\n    else\n      pile[#pile+1] = (pile[#pile] + 1) / 2\n   \
    \ end\n  end\n  return pile\nend", "    local res = {}\n    local i = 1\n    while\
    \ n > 0 do\n        res[i] = n\n        if n % 2 == 0 then\n            n = n\
    \ - 1\n        else\n            n = n - 2\n        end\n        i = i + 1\n \
    \   end\n    return res\nend", "    local res = {}\n    while n > 0 do\n     \
    \   table.insert(res, 1, n)\n        if n % 2 == 0 then\n            n = n / 2\n\
    \        else\n            n = (n + 1) / 2\n        end\n    end\n    return res\n\
    end", "  local pile = {n}\n  for i = 2, n do\n    pile[i] = (pile[i-1] % 2 ==\
    \ 0) and (pile[i-1] + 1) or (pile[i-1] + 2)\n  end\n  return pile\nend", "   \
    \ local res = {}\n    local i = 1\n    while n > 0 do\n        res[i] = n\n  \
    \      if n % 2 == 0 then\n            n = n / 2\n        else\n            n\
    \ = (n + 1) / 2\n        end\n        i = i + 1\n    end\n    return res\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
