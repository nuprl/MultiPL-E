name: HumanEval_16_count_distinct_characters
language: lua
prompt: "-- Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\nlocal function count_distinct_characters(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
  \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
  \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
  \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local chars = {}\n    for c in string:gmatch(\".\") do\n      \
    \  chars[c:lower()] = true\n    end\n    return #chars\nend", "    local characters\
    \ = {}\n    for i = 1, #string do\n        local char = string:sub(i, i)\n   \
    \     characters[char] = true\n    end\n    return #characters\nend", "\tlocal\
    \ chars = {}\n\tfor i = 1, #string do\n\t\tlocal char = string:sub(i, i)\n\t\t\
    if not chars[char] then\n\t\t\tchars[char] = true\n\t\tend\n\tend\n\treturn #chars\n\
    end", "\tlocal chars = {}\n\tfor char in string:gmatch(\".\") do\n\t\tchars[char:lower()]\
    \ = true\n\tend\n\treturn table.count(chars)\nend", "    local chars = {}\n  \
    \  for char in string:gmatch(\".\") do\n        chars[char:lower()] = true\n \
    \   end\n    return #chars\nend", "\tlocal chars = {}\n\tfor char in string:gmatch(\"\
    %a\") do\n\t\tchars[char:lower()] = true\n\tend\n\treturn table.count(chars)\n\
    end", "    local count = 0\n    local characters = {}\n    for i = 1, #string\
    \ do\n        local character = string:sub(i, i)\n        if not characters[character]\
    \ then\n            count = count + 1\n            characters[character] = true\n\
    \        end\n    end\n    return count\nend", "    local chars = {}\n    for\
    \ c in string:gmatch(\".\") do\n        chars[c:lower()] = true\n    end\n   \
    \ return #chars\nend", "    local chars = {}\n    for char in string:gmatch(\"\
    .\") do\n        chars[char:lower()] = true\n    end\n    return table.length(chars)\n\
    end", "\tlocal chars = {}\n\tfor char in string:gmatch('.') do\n\t\tchars[char:lower()]\
    \ = true\n\tend\n\treturn table.length(chars)\nend", "    local chars = {}\n \
    \   for char in string:gmatch('.') do\n        chars[char:lower()] = true\n  \
    \  end\n    return table.getn(chars)\nend", "\tlocal chars = {}\n\tfor i = 1,\
    \ #string do\n\t\tlocal c = string:sub(i, i)\n\t\tif not chars[c] then\n\t\t\t\
    chars[c] = true\n\t\tend\n\tend\n\treturn #chars\nend", "    local characters\
    \ = {}\n    for i = 1, #string do\n        local char = string:sub(i, i)\n   \
    \     characters[char] = true\n    end\n    return #characters\nend", "    local\
    \ chars = {}\n    for i = 1, #string do\n        local char = string:sub(i, i)\n\
    \        if not chars[char] then\n            chars[char] = true\n        end\n\
    \    end\n    return #chars\nend", "    local chars = {}\n    for char in string:gmatch(\"\
    .\") do\n        chars[char:lower()] = true\n    end\n    return table.length(chars)\n\
    end", "\tlocal chars = {}\n\tfor char in string:gmatch(\".\") do\n\t\tif not chars[char:lower()]\
    \ then\n\t\t\tchars[char:lower()] = true\n\t\tend\n\tend\n\treturn table.count(chars)\n\
    end", "\tlocal count = 0\n\tlocal characters = {}\n\tfor i = 1, #string do\n\t\
    \tlocal char = string:sub(i, i)\n\t\tif not characters[char] then\n\t\t\tcharacters[char]\
    \ = true\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "  local\
    \ chars = {}\n  for char in string:gmatch(\".\") do\n    chars[char:lower()] =\
    \ true\n  end\n  return table.length(chars)\nend", "\tlocal chars = {}\n\tfor\
    \ i = 1, #string do\n\t\tlocal char = string:sub(i, i)\n\t\tif not chars[char]\
    \ then\n\t\t\tchars[char] = true\n\t\tend\n\tend\n\treturn #chars\nend", "  local\
    \ chars = {}\n  for char in string:gmatch(\".\") do\n    chars[char:lower()] =\
    \ true\n  end\n  return table.length(chars)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
