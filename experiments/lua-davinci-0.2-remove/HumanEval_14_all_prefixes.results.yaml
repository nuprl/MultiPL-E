language: lua
name: HumanEval_14_all_prefixes
results:
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\tprefixes[#prefixes + 1] = string:sub(1, i)\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\ttable.insert(prefixes, string:sub(1, i))\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, string.len(string)\
    \ do\n        table.insert(prefixes, string.sub(string, 1, i))\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local result = {}\n    for i = 1, #string\
    \ do\n        table.insert(result, string:sub(1, i))\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local result = {}\n    for i = 1, #string\
    \ do\n        result[#result + 1] = string:sub(1, i)\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tlocal len = string.len(string)\n\
    \tfor i = 1, len do\n\t\ttable.insert(prefixes, string.sub(string, 1, i))\n\t\
    end\n\treturn prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\tprefixes[#prefixes + 1] = string:sub(1, i)\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\tprefixes[#prefixes + 1] = string:sub(1, i)\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local result = {}\n    for i = 1, #string\
    \ do\n        result[#result + 1] = string:sub(1, i)\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\tprefixes[#prefixes + 1] = string:sub(1, i)\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local result = {}\n    for i = 1, #string\
    \ do\n        table.insert(result, string:sub(1, i))\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local result = {}\n  for i = 1, #string\
    \ do\n    table.insert(result, string:sub(1, i))\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\tprefixes[#prefixes + 1] = string:sub(1, i)\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\tprefixes[#prefixes + 1] = string:sub(1, i)\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\tprefixes[#prefixes + 1] = string:sub(1, i)\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local result = {}\n    for i = 1, #string\
    \ do\n        table.insert(result, string:sub(1, i))\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\tprefixes[#prefixes + 1] = string:sub(1, i)\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local result = {}\n    for i = 1, #string\
    \ do\n        table.insert(result, string:sub(1, i))\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\tprefixes[#prefixes + 1] = string:sub(1, i)\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\ttable.insert(prefixes, string:sub(1, i))\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\ttable.insert(prefixes, string:sub(1, i))\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local t = {}\n    for i = 1, #string\
    \ do\n        t[#t + 1] = string:sub(1, i)\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\tprefixes[#prefixes + 1] = string:sub(1, i)\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\tprefixes[#prefixes + 1] = string:sub(1, i)\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal result = {}\n\tfor i = 1, #string\
    \ do\n\t\ttable.insert(result, string:sub(1, i))\n\tend\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\tprefixes[#prefixes + 1] = string:sub(1, i)\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\tprefixes[#prefixes + 1] = string:sub(1, i)\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\tprefixes[#prefixes + 1] = string:sub(1, i)\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local result = {}\n  for i = 1, #string\
    \ do\n    result[#result + 1] = string:sub(1, i)\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local result = {}\n  for i = 1, #string\
    \ do\n    result[#result + 1] = string:sub(1, i)\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\ttable.insert(prefixes, string:sub(1, i))\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\tprefixes[#prefixes + 1] = string:sub(1, i)\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\ttable.insert(prefixes, string:sub(1, i))\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\ttable.insert(prefixes, string:sub(1, i))\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal result = {}\n\tfor i = 1, #string\
    \ do\n\t\tresult[#result + 1] = string:sub(1, i)\n\tend\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\tprefixes[#prefixes + 1] = string:sub(1, i)\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\tprefixes[#prefixes + 1] = string:sub(1, i)\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\ttable.insert(prefixes, string:sub(1, i))\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local result = {}\n  for i = 1, #string\
    \ do\n    result[#result + 1] = string:sub(1, i)\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\tprefixes[#prefixes + 1] = string:sub(1, i)\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\ttable.insert(prefixes, string:sub(1, i))\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local result = {}\n    for i = 1, #string\
    \ do\n        table.insert(result, string:sub(1, i))\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\ttable.insert(prefixes, string:sub(1, i))\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\tprefixes[#prefixes + 1] = string:sub(1, i)\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\ttable.insert(prefixes, string:sub(1, i))\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\tprefixes[#prefixes + 1] = string:sub(1, i)\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\tprefixes[#prefixes + 1] = string:sub(1, i)\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\tprefixes[#prefixes + 1] = string:sub(1, i)\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local result = {}\n    for i = 1, #string\
    \ do\n        table.insert(result, string:sub(1, i))\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local result = {}\n    for i = 1, #string\
    \ do\n        result[#result + 1] = string:sub(1, i)\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local result = {}\n    for i = 1, #string\
    \ do\n        result[#result + 1] = string:sub(1, i)\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\tprefixes[#prefixes + 1] = string:sub(1, i)\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\tprefixes[#prefixes + 1] = string:sub(1, i)\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local result = {}\n    for i = 1, #string\
    \ do\n        result[#result + 1] = string:sub(1, i)\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n    local prefixes = {}\n    for i = 1, #string\
    \ do\n        table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local result = {}\n  for i = 1, #string\
    \ do\n    result[#result + 1] = string:sub(1, i)\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\tprefixes[#prefixes + 1] = string:sub(1, i)\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
- exit_code: 0
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    local function all_prefixes(string)\n\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\tprefixes[#prefixes + 1] = string:sub(1, i)\n\tend\n\treturn prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750528
