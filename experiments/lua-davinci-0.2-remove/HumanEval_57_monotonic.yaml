name: HumanEval_57_monotonic
language: lua
prompt: "-- Return True is list elements are monotonically increasing or decreasing.\n\
  local function monotonic(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
  \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n   \
  \ lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
  \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
  \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local inc, dec = true, true\n    for i = 2, #l do\n        if l[i]\
    \ < l[i-1] then inc = false end\n        if l[i] > l[i-1] then dec = false end\n\
    \    end\n    return inc or dec\nend", "  local i, j = 1, 2\n  local d = l[j]\
    \ - l[i]\n  while l[j] do\n    if l[j] - l[i] ~= d then\n      return false\n\
    \    end\n    i, j = i + 1, j + 1\n  end\n  return true\nend", "  local inc =\
    \ true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\n  \
    \    inc = false\n    elseif l[i] > l[i-1] then\n      dec = false\n    end\n\
    \  end\n  return inc or dec\nend", "  local inc = true\n  local dec = true\n \
    \ for i = 2, #l do\n    inc = inc and l[i] >= l[i-1]\n    dec = dec and l[i] <=\
    \ l[i-1]\n  end\n  return inc or dec\nend", "  local direction = nil\n  for i\
    \ = 2, #l do\n    local d = l[i] - l[i-1]\n    if d == 0 then\n      return false\n\
    \    elseif direction == nil then\n      direction = d\n    elseif d * direction\
    \ < 0 then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ direction = nil\n  for i = 2, #l do\n    local d = l[i] - l[i-1]\n    if d ==\
    \ 0 then\n      return false\n    elseif direction == nil then\n      direction\
    \ = d\n    elseif direction * d < 0 then\n      return false\n    end\n  end\n\
    \  return true\nend", "  local d = l[2] - l[1]\n  for i = 3, #l do\n    if l[i]\
    \ - l[i-1] ~= d then\n      return false\n    end\n  end\n  return true\nend",
  "  local d = l[2] - l[1]\n  for i = 3, #l do\n    if d * (l[i] - l[i-1]) <= 0 then\
    \ return false end\n  end\n  return true\nend", "    local inc = true\n    local\
    \ dec = true\n    for i = 2, #l do\n        if l[i] < l[i-1] then\n          \
    \  inc = false\n        elseif l[i] > l[i-1] then\n            dec = false\n \
    \       end\n    end\n    return inc or dec\nend", "  local inc = l[1] < l[2]\n\
    \  for i = 2, #l - 1 do\n    if inc and l[i] > l[i + 1] then return false end\n\
    \    if not inc and l[i] < l[i + 1] then return false end\n  end\n  return true\n\
    end", "  local t = type(l)\n  if t ~= 'table' then\n    error('monotonic: list\
    \ must be a table, not ' .. t)\n  end\n  if #l < 2 then\n    return true\n  end\n\
    \  local inc = l[2] > l[1]\n  for i = 3, #l do\n    if inc ~= (l[i] > l[i - 1])\
    \ then\n      return false\n    end\n  end\n  return true\nend", "    local inc\
    \ = true\n    local dec = true\n    for i = 2, #l do\n        if l[i] < l[i-1]\
    \ then\n            inc = false\n        elseif l[i] > l[i-1] then\n         \
    \   dec = false\n        end\n    end\n    return inc or dec\nend", "  local increasing\
    \ = true\n  local decreasing = true\n  for i = 2, #l do\n    if l[i] < l[i-1]\
    \ then\n      increasing = false\n    elseif l[i] > l[i-1] then\n      decreasing\
    \ = false\n    end\n  end\n  return increasing or decreasing\nend", "    local\
    \ direction = nil\n    for i = 2, #l do\n        if l[i] > l[i - 1] then\n   \
    \         if direction == false then\n                return false\n         \
    \   end\n            direction = true\n        elseif l[i] < l[i - 1] then\n \
    \           if direction == true then\n                return false\n        \
    \    end\n            direction = false\n        end\n    end\n    return true\n\
    end", "  local inc, dec = true, true\n  for i = 2, #l do\n    if l[i] < l[i-1]\
    \ then\n      inc = false\n    elseif l[i] > l[i-1] then\n      dec = false\n\
    \    end\n  end\n  return inc or dec\nend", "  local inc, dec = true, true\n \
    \ for i = 2, #l do\n    if l[i] < l[i-1] then inc = false end\n    if l[i] > l[i-1]\
    \ then dec = false end\n  end\n  return inc or dec\nend", "    local n = #l\n\
    \    if n < 2 then return true end\n    local inc = l[2] > l[1]\n    for i = 3,\
    \ n do\n        if l[i] ~= l[i-1] and (l[i] > l[i-1]) ~= inc then return false\
    \ end\n    end\n    return true\nend", "\tlocal direction = l[2] - l[1]\n\tfor\
    \ i = 3, #l do\n\t\tif direction * (l[i] - l[i-1]) <= 0 then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn true\nend", "    local direction = 0\n    for i = 2,\
    \ #l do\n        local d = l[i] - l[i - 1]\n        if d == 0 then\n         \
    \   return false\n        elseif direction == 0 then\n            direction =\
    \ d\n        elseif direction * d < 0 then\n            return false\n       \
    \ end\n    end\n    return true\nend", "  local d = l[2] - l[1]\n  for i = 3,\
    \ #l do\n    if d * (l[i] - l[i-1]) <= 0 then return false end\n  end\n  return\
    \ true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
