name: HumanEval_57_monotonic
language: lua
prompt: "-- Return True is list elements are monotonically increasing or decreasing.\n\
  local function monotonic(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
  \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n   \
  \ lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
  \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
  \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local inc, dec = true, true\n    for i = 2, #l do\n        if l[i]\
    \ < l[i-1] then inc = false end\n        if l[i] > l[i-1] then dec = false end\n\
    \    end\n    return inc or dec\nend", "  local i, j = 1, 2\n  local d = l[j]\
    \ - l[i]\n  while l[j] do\n    if l[j] - l[i] ~= d then\n      return false\n\
    \    end\n    i, j = i + 1, j + 1\n  end\n  return true\nend", "  local inc =\
    \ true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\n  \
    \    inc = false\n    elseif l[i] > l[i-1] then\n      dec = false\n    end\n\
    \  end\n  return inc or dec\nend", "  local inc = true\n  local dec = true\n \
    \ for i = 2, #l do\n    inc = inc and l[i] >= l[i-1]\n    dec = dec and l[i] <=\
    \ l[i-1]\n  end\n  return inc or dec\nend", "  local direction = nil\n  for i\
    \ = 2, #l do\n    local d = l[i] - l[i-1]\n    if d == 0 then\n      return false\n\
    \    elseif direction == nil then\n      direction = d\n    elseif d * direction\
    \ < 0 then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ direction = nil\n  for i = 2, #l do\n    local d = l[i] - l[i-1]\n    if d ==\
    \ 0 then\n      return false\n    elseif direction == nil then\n      direction\
    \ = d\n    elseif direction * d < 0 then\n      return false\n    end\n  end\n\
    \  return true\nend", "  local d = l[2] - l[1]\n  for i = 3, #l do\n    if l[i]\
    \ - l[i-1] ~= d then\n      return false\n    end\n  end\n  return true\nend",
  "  local d = l[2] - l[1]\n  for i = 3, #l do\n    if d * (l[i] - l[i-1]) <= 0 then\
    \ return false end\n  end\n  return true\nend", "    local inc = true\n    local\
    \ dec = true\n    for i = 2, #l do\n        if l[i] < l[i-1] then\n          \
    \  inc = false\n        elseif l[i] > l[i-1] then\n            dec = false\n \
    \       end\n    end\n    return inc or dec\nend", "  local inc = l[1] < l[2]\n\
    \  for i = 2, #l - 1 do\n    if inc and l[i] > l[i + 1] then return false end\n\
    \    if not inc and l[i] < l[i + 1] then return false end\n  end\n  return true\n\
    end", "  local t = type(l)\n  if t ~= 'table' then\n    error('monotonic: list\
    \ must be a table, not ' .. t)\n  end\n  if #l < 2 then\n    return true\n  end\n\
    \  local inc = l[2] > l[1]\n  for i = 3, #l do\n    if inc ~= (l[i] > l[i - 1])\
    \ then\n      return false\n    end\n  end\n  return true\nend", "    local inc\
    \ = true\n    local dec = true\n    for i = 2, #l do\n        if l[i] < l[i-1]\
    \ then\n            inc = false\n        elseif l[i] > l[i-1] then\n         \
    \   dec = false\n        end\n    end\n    return inc or dec\nend", "  local increasing\
    \ = true\n  local decreasing = true\n  for i = 2, #l do\n    if l[i] < l[i-1]\
    \ then\n      increasing = false\n    elseif l[i] > l[i-1] then\n      decreasing\
    \ = false\n    end\n  end\n  return increasing or decreasing\nend", "    local\
    \ direction = nil\n    for i = 2, #l do\n        if l[i] > l[i - 1] then\n   \
    \         if direction == false then\n                return false\n         \
    \   end\n            direction = true\n        elseif l[i] < l[i - 1] then\n \
    \           if direction == true then\n                return false\n        \
    \    end\n            direction = false\n        end\n    end\n    return true\n\
    end", "  local inc, dec = true, true\n  for i = 2, #l do\n    if l[i] < l[i-1]\
    \ then\n      inc = false\n    elseif l[i] > l[i-1] then\n      dec = false\n\
    \    end\n  end\n  return inc or dec\nend", "  local inc, dec = true, true\n \
    \ for i = 2, #l do\n    if l[i] < l[i-1] then inc = false end\n    if l[i] > l[i-1]\
    \ then dec = false end\n  end\n  return inc or dec\nend", "    local n = #l\n\
    \    if n < 2 then return true end\n    local inc = l[2] > l[1]\n    for i = 3,\
    \ n do\n        if l[i] ~= l[i-1] and (l[i] > l[i-1]) ~= inc then return false\
    \ end\n    end\n    return true\nend", "\tlocal direction = l[2] - l[1]\n\tfor\
    \ i = 3, #l do\n\t\tif direction * (l[i] - l[i-1]) <= 0 then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn true\nend", "    local direction = 0\n    for i = 2,\
    \ #l do\n        local d = l[i] - l[i - 1]\n        if d == 0 then\n         \
    \   return false\n        elseif direction == 0 then\n            direction =\
    \ d\n        elseif direction * d < 0 then\n            return false\n       \
    \ end\n    end\n    return true\nend", "  local d = l[2] - l[1]\n  for i = 3,\
    \ #l do\n    if d * (l[i] - l[i-1]) <= 0 then return false end\n  end\n  return\
    \ true\nend", "  local direction = nil\n  for i = 2, #l do\n    local d = l[i]\
    \ - l[i-1]\n    if direction == nil then\n      direction = d\n    elseif d *\
    \ direction < 0 then\n      return false\n    end\n  end\n  return true\nend",
  "  local d = l[2] - l[1]\n  for i = 3, #l do\n    if d * (l[i] - l[i-1]) <= 0 then\
    \ return false end\n  end\n  return true\nend", "\tlocal inc = l[1] <= l[2]\n\t\
    for i = 2, #l - 1 do\n\t\tif inc ~= (l[i] <= l[i + 1]) then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn true\nend", "  local increasing = true\n  local decreasing\
    \ = true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\n      increasing = false\n\
    \    elseif l[i] > l[i-1] then\n      decreasing = false\n    end\n  end\n  return\
    \ increasing or decreasing\nend", "\tlocal inc, dec = true, true\n\tfor i = 2,\
    \ #l do\n\t\tif l[i] < l[i-1] then inc = false end\n\t\tif l[i] > l[i-1] then\
    \ dec = false end\n\tend\n\treturn inc or dec\nend", "  local inc, dec = true,\
    \ true\n  for i = 2, #l do\n    if l[i] < l[i-1] then inc = false end\n    if\
    \ l[i] > l[i-1] then dec = false end\n  end\n  return inc or dec\nend", "  local\
    \ inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\n\
    \      inc = false\n    elseif l[i] > l[i-1] then\n      dec = false\n    end\n\
    \  end\n  return inc or dec\nend", "  local direction = nil\n  for i = 2, #l do\n\
    \    local d = l[i] - l[i-1]\n    if d == 0 then\n      return false\n    elseif\
    \ direction == nil then\n      direction = d\n    elseif direction * d < 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "    local inc = true\n\
    \    local dec = true\n    for i = 2, #l do\n        if l[i] < l[i-1] then\n \
    \           inc = false\n        elseif l[i] > l[i-1] then\n            dec =\
    \ false\n        end\n    end\n    return inc or dec\nend", "  local increasing\
    \ = true\n  local decreasing = true\n  for i = 2, #l do\n    if l[i] < l[i-1]\
    \ then\n      increasing = false\n    elseif l[i] > l[i-1] then\n      decreasing\
    \ = false\n    end\n  end\n  return increasing or decreasing\nend", "  local inc\
    \ = l[1] < l[2]\n  for i = 2, #l - 1 do\n    if inc and l[i] > l[i + 1] then return\
    \ false end\n    if not inc and l[i] < l[i + 1] then return false end\n  end\n\
    \  return true\nend", "  local inc, dec = true, true\n  for i = 2, #l do\n   \
    \ if l[i] < l[i-1] then inc = false end\n    if l[i] > l[i-1] then dec = false\
    \ end\n  end\n  return inc or dec\nend", "  local inc, dec = true, true\n  for\
    \ i = 2, #l do\n    if l[i] < l[i-1] then inc = false end\n    if l[i] > l[i-1]\
    \ then dec = false end\n  end\n  return inc or dec\nend", "  local direction =\
    \ l[2] - l[1]\n  for i = 3, #l do\n    if direction * (l[i] - l[i-1]) < 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local direction =\
    \ nil\n  for i = 2, #l do\n    local d = l[i] - l[i-1]\n    if direction == nil\
    \ then\n      direction = d\n    elseif d * direction < 0 then\n      return false\n\
    \    end\n  end\n  return true\nend", "    local d = l[2] - l[1]\n    for i =\
    \ 3, #l do\n        if d * (l[i] - l[i-1]) <= 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "  local inc = true\n  local dec\
    \ = true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\n      inc = false\n \
    \   elseif l[i] > l[i-1] then\n      dec = false\n    end\n  end\n  return inc\
    \ or dec\nend", "  local d = l[2] - l[1]\n  for i = 3, #l do\n    if d * (l[i]\
    \ - l[i-1]) <= 0 then return false end\n  end\n  return true\nend", "\tlocal direction\
    \ = nil\n\tfor i = 2, #l do\n\t\tif l[i] ~= l[i-1] then\n\t\t\tif direction ==\
    \ nil then\n\t\t\t\tdirection = l[i] > l[i-1]\n\t\t\telseif direction ~= (l[i]\
    \ > l[i-1]) then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn true\n\
    end", "    local inc = true\n    local dec = true\n    for i = 2, #l do\n    \
    \    if l[i] < l[i-1] then\n            inc = false\n        elseif l[i] > l[i-1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end", "  local inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i]\
    \ < l[i-1] then\n      inc = false\n    elseif l[i] > l[i-1] then\n      dec =\
    \ false\n    end\n  end\n  return inc or dec\nend", "  local inc = true\n  local\
    \ dec = true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\n      inc = false\n\
    \    elseif l[i] > l[i-1] then\n      dec = false\n    end\n  end\n  return inc\
    \ or dec\nend", "    local inc, dec = true, true\n    for i = 2, #l do\n     \
    \   if l[i] < l[i-1] then inc = false end\n        if l[i] > l[i-1] then dec =\
    \ false end\n    end\n    return inc or dec\nend", "    local inc, dec = true,\
    \ true\n    for i = 2, #l do\n        if l[i] < l[i-1] then\n            inc =\
    \ false\n        elseif l[i] > l[i-1] then\n            dec = false\n        end\n\
    \    end\n    return inc or dec\nend", "  local d = l[2] - l[1]\n  for i = 3,\
    \ #l do\n    if d * (l[i] - l[i-1]) <= 0 then return false end\n  end\n  return\
    \ true\nend", "\tlocal d = l[2] - l[1]\n\tfor i = 3, #l do\n\t\tif d * (l[i] -\
    \ l[i-1]) <= 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
  "\tlocal inc = true\n\tlocal dec = true\n\tfor i = 2, #l do\n\t\tif l[i] > l[i-1]\
    \ then\n\t\t\tdec = false\n\t\telseif l[i] < l[i-1] then\n\t\t\tinc = false\n\t\
    \tend\n\tend\n\treturn inc or dec\nend", "  local direction = l[2] - l[1]\n  for\
    \ i = 3, #l do\n    if direction * (l[i] - l[i-1]) < 0 then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local d = l[2] - l[1]\n  for i = 3, #l\
    \ do\n    if d * (l[i] - l[i-1]) <= 0 then return false end\n  end\n  return true\n\
    end", "    local d = l[2] - l[1]\n    for i = 3, #l do\n        if d * (l[i] -\
    \ l[i-1]) <= 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    local inc, dec = true, true\n    for i = 2, #l do\n       \
    \ if l[i] < l[i-1] then\n            inc = false\n        elseif l[i] > l[i-1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end", "\tlocal inc = true\n\tlocal dec = true\n\tlocal last = l[1]\n\tfor i =\
    \ 2, #l do\n\t\tif l[i] > last then\n\t\t\tdec = false\n\t\telseif l[i] < last\
    \ then\n\t\t\tinc = false\n\t\tend\n\t\tlast = l[i]\n\tend\n\treturn inc or dec\n\
    end", "  local d = l[2] - l[1]\n  for i = 3, #l do\n    if d * (l[i] - l[i-1])\
    \ <= 0 then return false end\n  end\n  return true\nend", "  local inc = true\n\
    \  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\n      inc\
    \ = false\n    elseif l[i] > l[i-1] then\n      dec = false\n    end\n  end\n\
    \  return inc or dec\nend", "  local inc, dec = true, true\n  for i = 2, #l do\n\
    \    if l[i] > l[i-1] then dec = false end\n    if l[i] < l[i-1] then inc = false\
    \ end\n  end\n  return inc or dec\nend", "  local direction = nil\n  for i = 2,\
    \ #l do\n    local d = l[i] - l[i-1]\n    if direction == nil then\n      direction\
    \ = d\n    elseif direction * d < 0 then\n      return false\n    end\n  end\n\
    \  return true\nend", "  local inc, dec = true, true\n  for i = 2, #l do\n   \
    \ if l[i] < l[i-1] then inc = false end\n    if l[i] > l[i-1] then dec = false\
    \ end\n  end\n  return inc or dec\nend", "  local d = l[2] - l[1]\n  for i = 3,\
    \ #l do\n    if d * (l[i] - l[i-1]) <= 0 then return false end\n  end\n  return\
    \ true\nend", "  local d = l[2] - l[1]\n  for i = 3, #l do\n    if d * (l[i] -\
    \ l[i-1]) <= 0 then return false end\n  end\n  return true\nend", "  local d =\
    \ l[2] - l[1]\n  for i = 3, #l do\n    if (l[i] - l[i-1]) * d < 0 then\n     \
    \ return false\n    end\n  end\n  return true\nend", "    local d = l[2] - l[1]\n\
    \    for i = 3, #l do\n        if d * (l[i] - l[i-1]) <= 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend", "  local inc = true\n  local\
    \ dec = true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\n      inc = false\n\
    \    elseif l[i] > l[i-1] then\n      dec = false\n    end\n  end\n  return inc\
    \ or dec\nend", "  local inc = true\n  local dec = true\n  for i = 2, #l do\n\
    \    if l[i] < l[i-1] then\n      inc = false\n    elseif l[i] > l[i-1] then\n\
    \      dec = false\n    end\n  end\n  return inc or dec\nend", "  if #l < 2 then\
    \ return true end\n  local inc = l[2] > l[1]\n  for i = 3, #l do\n    if inc ~=\
    \ (l[i] > l[i-1]) then return false end\n  end\n  return true\nend", "  local\
    \ inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\n\
    \      inc = false\n    elseif l[i] > l[i-1] then\n      dec = false\n    end\n\
    \  end\n  return inc or dec\nend", "  local d = l[2] - l[1]\n  for i = 3, #l do\n\
    \    if d * (l[i] - l[i-1]) <= 0 then return false end\n  end\n  return true\n\
    end", "  local inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i]\
    \ < l[i-1] then\n      inc = false\n    elseif l[i] > l[i-1] then\n      dec =\
    \ false\n    end\n  end\n  return inc or dec\nend", "  local inc = true\n  local\
    \ dec = true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\n      inc = false\n\
    \    elseif l[i] > l[i-1] then\n      dec = false\n    end\n  end\n  return inc\
    \ or dec\nend", "    local inc = true\n    local dec = true\n    for i = 2, #l\
    \ do\n        if l[i] < l[i-1] then\n            inc = false\n        elseif l[i]\
    \ > l[i-1] then\n            dec = false\n        end\n    end\n    return inc\
    \ or dec\nend", "    local inc = true\n    local dec = true\n    for i = 2, #l\
    \ do\n        if l[i] < l[i-1] then\n            inc = false\n        elseif l[i]\
    \ > l[i-1] then\n            dec = false\n        end\n    end\n    return inc\
    \ or dec\nend", "  local inc = true\n  local dec = true\n  for i = 2, #l do\n\
    \    if l[i] < l[i-1] then\n      inc = false\n    elseif l[i] > l[i-1] then\n\
    \      dec = false\n    end\n  end\n  return inc or dec\nend", "  local inc =\
    \ true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\n  \
    \    inc = false\n    elseif l[i] > l[i-1] then\n      dec = false\n    end\n\
    \  end\n  return inc or dec\nend", "    local direction = 0\n    for i = 2, #l\
    \ do\n        local d = l[i] - l[i - 1]\n        if d == 0 then\n            return\
    \ false\n        elseif direction == 0 then\n            direction = d\n     \
    \   elseif d * direction < 0 then\n            return false\n        end\n   \
    \ end\n    return true\nend", "    local inc = true\n    local dec = true\n  \
    \  for i = 2, #l do\n        if l[i] < l[i-1] then\n            inc = false\n\
    \        elseif l[i] > l[i-1] then\n            dec = false\n        end\n   \
    \ end\n    return inc or dec\nend", "  local inc = true\n  local dec = true\n\
    \  for i = 2, #l do\n    if l[i] < l[i-1] then\n      inc = false\n    elseif\
    \ l[i] > l[i-1] then\n      dec = false\n    end\n  end\n  return inc or dec\n\
    end", "  local inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i]\
    \ < l[i-1] then\n      inc = false\n    elseif l[i] > l[i-1] then\n      dec =\
    \ false\n    end\n  end\n  return inc or dec\nend", "  local d = l[2] - l[1]\n\
    \  for i = 3, #l do\n    if d * (l[i] - l[i-1]) <= 0 then return false end\n \
    \ end\n  return true\nend", "  local direction = 0\n  local prev = l[1]\n  for\
    \ i = 2, #l do\n    local cur = l[i]\n    if cur > prev then\n      if direction\
    \ < 0 then return false end\n      direction = 1\n    elseif cur < prev then\n\
    \      if direction > 0 then return false end\n      direction = -1\n    end\n\
    \    prev = cur\n  end\n  return true\nend", "  local inc, dec = true, true\n\
    \  for i = 2, #l do\n    if l[i] < l[i-1] then inc = false end\n    if l[i] >\
    \ l[i-1] then dec = false end\n  end\n  return inc or dec\nend", "  local inc\
    \ = true\n  local dec = true\n  for i = 2, #l do\n    if l[i] > l[i-1] then\n\
    \      dec = false\n    elseif l[i] < l[i-1] then\n      inc = false\n    end\n\
    \  end\n  return inc or dec\nend", "    local inc = true\n    local dec = true\n\
    \    for i = 2, #l do\n        if l[i] < l[i-1] then\n            inc = false\n\
    \        elseif l[i] > l[i-1] then\n            dec = false\n        end\n   \
    \ end\n    return inc or dec\nend", "    local inc, dec = true, true\n    for\
    \ i = 2, #l do\n        if l[i] < l[i-1] then inc = false end\n        if l[i]\
    \ > l[i-1] then dec = false end\n    end\n    return inc or dec\nend", "    local\
    \ d = l[2] - l[1]\n    for i = 3, #l do\n        if l[i] - l[i-1] ~= d then\n\
    \            return false\n        end\n    end\n    return true\nend", "  local\
    \ inc, dec = true, true\n  for i = 2, #l do\n    if l[i] < l[i-1] then inc = false\
    \ end\n    if l[i] > l[i-1] then dec = false end\n  end\n  return inc or dec\n\
    end", "    local direction = nil\n    for i = 2, #l do\n        if l[i] > l[i\
    \ - 1] then\n            if direction == false then\n                return false\n\
    \            end\n            direction = true\n        elseif l[i] < l[i - 1]\
    \ then\n            if direction == true then\n                return false\n\
    \            end\n            direction = false\n        end\n    end\n    return\
    \ true\nend", "  local inc = true\n  local dec = true\n  for i = 2, #l do\n  \
    \  if l[i] > l[i-1] then\n      dec = false\n    elseif l[i] < l[i-1] then\n \
    \     inc = false\n    end\n  end\n  return inc or dec\nend", "\tlocal d = l[2]\
    \ - l[1]\n\tfor i = 3, #l do\n\t\tif d * (l[i] - l[i-1]) <= 0 then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "  local n = #l\n  if n < 2 then\
    \ return true end\n  local inc = l[2] > l[1]\n  for i = 3, n do\n    if inc ~=\
    \ (l[i] > l[i-1]) then return false end\n  end\n  return true\nend", "    local\
    \ n = #l\n    if n < 2 then return true end\n    local inc = l[2] > l[1]\n   \
    \ for i = 3, n do\n        if l[i] > l[i-1] ~= inc then return false end\n   \
    \ end\n    return true\nend", "\tlocal d = l[2] - l[1]\n\tfor i = 3, #l do\n\t\
    \tif d * (l[i] - l[i-1]) <= 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ true\nend", "    local inc = true\n    local dec = true\n    for i = 2, #l do\n\
    \        if l[i] < l[i-1] then\n            inc = false\n        elseif l[i] >\
    \ l[i-1] then\n            dec = false\n        end\n    end\n    return inc or\
    \ dec\nend", "\tlocal direction = nil\n\tfor i = 2, #l do\n\t\tlocal d = l[i]\
    \ - l[i - 1]\n\t\tif direction == nil then\n\t\t\tdirection = d\n\t\telseif direction\
    \ * d < 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "  local\
    \ inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\
    \ inc = false end\n    if l[i] > l[i-1] then dec = false end\n  end\n  return\
    \ inc or dec\nend", "  local d = l[2] - l[1]\n  for i = 3, #l do\n    if d * (l[i]\
    \ - l[i-1]) <= 0 then return false end\n  end\n  return true\nend", "  local d\
    \ = l[2] - l[1]\n  for i = 3, #l do\n    if (l[i] - l[i-1]) * d < 0 then\n   \
    \   return false\n    end\n  end\n  return true\nend", "\tlocal d = l[2] - l[1]\n\
    \tfor i = 3, #l do\n\t\tif d * (l[i] - l[i-1]) <= 0 then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn true\nend", "  local inc, dec = true, true\n  for i =\
    \ 2, #l do\n    if l[i] < l[i-1] then inc = false end\n    if l[i] > l[i-1] then\
    \ dec = false end\n  end\n  return inc or dec\nend", "  local inc = true\n  local\
    \ dec = true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\n      inc = false\n\
    \    elseif l[i] > l[i-1] then\n      dec = false\n    end\n  end\n  return inc\
    \ or dec\nend", "  local inc = true\n  local dec = true\n  for i = 2, #l do\n\
    \    if l[i] < l[i-1] then\n      inc = false\n    elseif l[i] > l[i-1] then\n\
    \      dec = false\n    end\n  end\n  return inc or dec\nend", "\tlocal inc =\
    \ true\n\tlocal dec = true\n\tfor i = 2, #l do\n\t\tif l[i] < l[i-1] then\n\t\t\
    \tinc = false\n\t\tend\n\t\tif l[i] > l[i-1] then\n\t\t\tdec = false\n\t\tend\n\
    \tend\n\treturn inc or dec\nend", "    local is_increasing = l[1] < l[2]\n   \
    \ for i = 2, #l - 1 do\n        if is_increasing then\n            if l[i] > l[i\
    \ + 1] then\n                return false\n            end\n        else\n   \
    \         if l[i] < l[i + 1] then\n                return false\n            end\n\
    \        end\n    end\n    return true\nend", "  local inc = true\n  local dec\
    \ = true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\n      inc = false\n \
    \   elseif l[i] > l[i-1] then\n      dec = false\n    end\n  end\n  return inc\
    \ or dec\nend", "  local inc, dec = true, true\n  for i = 2, #l do\n    if l[i]\
    \ < l[i-1] then inc = false end\n    if l[i] > l[i-1] then dec = false end\n \
    \ end\n  return inc or dec\nend", "    local inc = true\n    local dec = true\n\
    \    for i = 2, #l do\n        if l[i] < l[i-1] then\n            inc = false\n\
    \        elseif l[i] > l[i-1] then\n            dec = false\n        end\n   \
    \ end\n    return inc or dec\nend", "    local inc = true\n    local dec = true\n\
    \    for i = 2, #l do\n        if l[i] < l[i-1] then\n            inc = false\n\
    \        elseif l[i] > l[i-1] then\n            dec = false\n        end\n   \
    \ end\n    return inc or dec\nend", "\tlocal d = l[2] - l[1]\n\tfor i = 3, #l\
    \ do\n\t\tif d * (l[i] - l[i-1]) <= 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\
    \treturn true\nend", "    local inc, dec = true, true\n    for i = 2, #l do\n\
    \        if l[i] < l[i-1] then inc = false end\n        if l[i] > l[i-1] then\
    \ dec = false end\n    end\n    return inc or dec\nend", "  local inc = true\n\
    \  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\n      inc\
    \ = false\n    elseif l[i] > l[i-1] then\n      dec = false\n    end\n  end\n\
    \  return inc or dec\nend", "  local d = l[2] - l[1]\n  for i = 3, #l do\n   \
    \ if d * (l[i] - l[i-1]) <= 0 then return false end\n  end\n  return true\nend",
  "  local increasing = true\n  local decreasing = true\n  for i = 2, #l do\n    if\
    \ l[i] < l[i-1] then\n      increasing = false\n    elseif l[i] > l[i-1] then\n\
    \      decreasing = false\n    end\n  end\n  return increasing or decreasing\n\
    end", "  local inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i]\
    \ < l[i-1] then\n      inc = false\n    elseif l[i] > l[i-1] then\n      dec =\
    \ false\n    end\n  end\n  return inc or dec\nend", "  local d = l[2] - l[1]\n\
    \  for i = 3, #l do\n    if d * (l[i] - l[i-1]) <= 0 then return false end\n \
    \ end\n  return true\nend", "\tlocal n = #l\n\tif n < 2 then return true end\n\
    \tlocal inc = l[2] > l[1]\n\tfor i = 3, n do\n\t\tif l[i] == l[i-1] then return\
    \ false end\n\t\tif inc and l[i] < l[i-1] then return false end\n\t\tif not inc\
    \ and l[i] > l[i-1] then return false end\n\tend\n\treturn true\nend", "  local\
    \ increasing = true\n  local decreasing = true\n  for i = 2, #l do\n    if l[i]\
    \ < l[i-1] then\n      increasing = false\n    elseif l[i] > l[i-1] then\n   \
    \   decreasing = false\n    end\n  end\n  return increasing or decreasing\nend",
  "  local d = l[2] - l[1]\n  for i = 3, #l do\n    if d * (l[i] - l[i-1]) <= 0 then\
    \ return false end\n  end\n  return true\nend", "    local inc = true\n    local\
    \ dec = true\n    for i = 2, #l do\n        if l[i] < l[i-1] then\n          \
    \  inc = false\n        elseif l[i] > l[i-1] then\n            dec = false\n \
    \       end\n    end\n    return inc or dec\nend", "    local inc = true\n   \
    \ local dec = true\n    for i = 2, #l do\n        if l[i] > l[i-1] then\n    \
    \        dec = false\n        elseif l[i] < l[i-1] then\n            inc = false\n\
    \        end\n    end\n    return inc or dec\nend", "  local increasing = true\n\
    \  local decreasing = true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\n  \
    \    increasing = false\n    elseif l[i] > l[i-1] then\n      decreasing = false\n\
    \    end\n  end\n  return increasing or decreasing\nend", "    local d = l[2]\
    \ - l[1]\n    for i = 3, #l do\n        if d * (l[i] - l[i-1]) <= 0 then\n   \
    \         return false\n        end\n    end\n    return true\nend", "  local\
    \ d = l[2] - l[1]\n  for i = 3, #l do\n    if d * (l[i] - l[i-1]) <= 0 then return\
    \ false end\n  end\n  return true\nend", "  local direction = l[2] - l[1]\n  for\
    \ i = 3, #l do\n    if direction * (l[i] - l[i-1]) < 0 then\n      return false\n\
    \    end\n  end\n  return true\nend", "    local inc = true\n    local dec = true\n\
    \    for i = 2, #l do\n        if l[i] < l[i-1] then\n            inc = false\n\
    \        elseif l[i] > l[i-1] then\n            dec = false\n        end\n   \
    \ end\n    return inc or dec\nend", "\tlocal inc = l[1] < l[2]\n\tfor i = 2, #l\
    \ - 1 do\n\t\tif inc ~= (l[i] < l[i + 1]) then\n\t\t\treturn false\n\t\tend\n\t\
    end\n\treturn true\nend", "  local d = l[2] - l[1]\n  for i = 3, #l do\n    if\
    \ d * (l[i] - l[i-1]) <= 0 then return false end\n  end\n  return true\nend",
  "  local inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i-1]\
    \ then\n      inc = false\n    elseif l[i] > l[i-1] then\n      dec = false\n\
    \    end\n  end\n  return inc or dec\nend", "\tlocal inc = true\n\tlocal dec =\
    \ true\n\tfor i = 2, #l do\n\t\tif l[i] < l[i-1] then\n\t\t\tinc = false\n\t\t\
    end\n\t\tif l[i] > l[i-1] then\n\t\t\tdec = false\n\t\tend\n\tend\n\treturn inc\
    \ or dec\nend", "\tlocal direction = nil\n\tfor i = 2, #l do\n\t\tif l[i] > l[i\
    \ - 1] then\n\t\t\tif direction == \"decreasing\" then\n\t\t\t\treturn false\n\
    \t\t\tend\n\t\t\tdirection = \"increasing\"\n\t\telseif l[i] < l[i - 1] then\n\
    \t\t\tif direction == \"increasing\" then\n\t\t\t\treturn false\n\t\t\tend\n\t\
    \t\tdirection = \"decreasing\"\n\t\tend\n\tend\n\treturn true\nend", "  local\
    \ d = l[2] - l[1]\n  for i = 3, #l do\n    if d * (l[i] - l[i-1]) <= 0 then return\
    \ false end\n  end\n  return true\nend", "    local n = #l\n    if n < 2 then\
    \ return true end\n    local d = l[2] - l[1]\n    for i = 3, n do\n        if\
    \ d * (l[i] - l[i-1]) <= 0 then return false end\n    end\n    return true\nend",
  "    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if l[i]\
    \ < l[i-1] then\n            inc = false\n        elseif l[i] > l[i-1] then\n\
    \            dec = false\n        end\n    end\n    return inc or dec\nend", " \
    \ local inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i-1]\
    \ then\n      inc = false\n    elseif l[i] > l[i-1] then\n      dec = false\n\
    \    end\n  end\n  return inc or dec\nend", "  local inc = true\n  local dec =\
    \ true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\n      inc = false\n   \
    \ elseif l[i] > l[i-1] then\n      dec = false\n    end\n  end\n  return inc or\
    \ dec\nend", "  local direction = l[2] - l[1]\n  for i = 3, #l do\n    if direction\
    \ * (l[i] - l[i-1]) < 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "  local inc, dec = true, true\n  for i = 2, #l do\n    if l[i] < l[i-1]\
    \ then inc = false end\n    if l[i] > l[i-1] then dec = false end\n  end\n  return\
    \ inc or dec\nend", "  local inc, dec = true, true\n  for i = 2, #l do\n    if\
    \ l[i] < l[i-1] then inc = false end\n    if l[i] > l[i-1] then dec = false end\n\
    \  end\n  return inc or dec\nend", "  local inc, dec = true, true\n  for i = 2,\
    \ #l do\n    if l[i] > l[i-1] then dec = false end\n    if l[i] < l[i-1] then\
    \ inc = false end\n  end\n  return inc or dec\nend", "  local d = l[2] - l[1]\n\
    \  for i = 3, #l do\n    if d * (l[i] - l[i-1]) <= 0 then return false end\n \
    \ end\n  return true\nend", "  local inc, dec = true, true\n  for i = 2, #l do\n\
    \    if l[i] < l[i-1] then inc = false end\n    if l[i] > l[i-1] then dec = false\
    \ end\n  end\n  return inc or dec\nend", "  local inc, dec = true, true\n  for\
    \ i = 2, #l do\n    if l[i] < l[i-1] then inc = false end\n    if l[i] > l[i-1]\
    \ then dec = false end\n  end\n  return inc or dec\nend", "  local inc = true\n\
    \  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\n      inc\
    \ = false\n    elseif l[i] > l[i-1] then\n      dec = false\n    end\n  end\n\
    \  return inc or dec\nend", "  local inc = true\n  local dec = true\n  for i =\
    \ 2, #l do\n    if l[i] < l[i-1] then\n      inc = false\n    elseif l[i] > l[i-1]\
    \ then\n      dec = false\n    end\n  end\n  return inc or dec\nend", "  local\
    \ inc, dec = true, true\n  for i = 2, #l do\n    if l[i] < l[i-1] then inc = false\
    \ end\n    if l[i] > l[i-1] then dec = false end\n  end\n  return inc or dec\n\
    end", "  local inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i]\
    \ < l[i-1] then\n      inc = false\n    elseif l[i] > l[i-1] then\n      dec =\
    \ false\n    end\n  end\n  return inc or dec\nend", "  local inc = true\n  local\
    \ dec = true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\n      inc = false\n\
    \    elseif l[i] > l[i-1] then\n      dec = false\n    end\n  end\n  return inc\
    \ or dec\nend", "    if #l < 2 then return true end\n    local d = l[2] - l[1]\n\
    \    for i = 3, #l do\n        if d * (l[i] - l[i-1]) <= 0 then return false end\n\
    \    end\n    return true\nend", "    local d = l[2] - l[1]\n    for i = 3, #l\
    \ do\n        if d * (l[i] - l[i-1]) <= 0 then\n            return false\n   \
    \     end\n    end\n    return true\nend", "    local direction = l[2] - l[1]\n\
    \    for i = 3, #l do\n        if direction * (l[i] - l[i-1]) < 0 then\n     \
    \       return false\n        end\n    end\n    return true\nend", "  local inc\
    \ = l[1] <= l[2]\n  for i = 2, #l - 1 do\n    if l[i] <= l[i + 1] ~= inc then\n\
    \      return false\n    end\n  end\n  return true\nend", "    local inc, dec\
    \ = true, true\n    for i = 2, #l do\n        if l[i] < l[i-1] then inc = false\
    \ end\n        if l[i] > l[i-1] then dec = false end\n    end\n    return inc\
    \ or dec\nend", "  local d = l[2] - l[1]\n  for i = 3, #l do\n    if d * (l[i]\
    \ - l[i-1]) <= 0 then return false end\n  end\n  return true\nend", "    local\
    \ is_increasing = l[1] < l[2]\n    for i = 2, #l - 1 do\n        if is_increasing\
    \ then\n            if l[i] > l[i + 1] then\n                return false\n  \
    \          end\n        else\n            if l[i] < l[i + 1] then\n          \
    \      return false\n            end\n        end\n    end\n    return true\n\
    end", "  local n = #l\n  if n < 2 then return true end\n  local inc = l[2] > l[1]\n\
    \  for i = 3, n do\n    if l[i] == l[i-1] then return false end\n    if inc and\
    \ l[i] < l[i-1] then return false end\n    if not inc and l[i] > l[i-1] then return\
    \ false end\n  end\n  return true\nend", "  local increasing = true\n  local decreasing\
    \ = true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\n      increasing = false\n\
    \    elseif l[i] > l[i-1] then\n      decreasing = false\n    end\n  end\n  return\
    \ increasing or decreasing\nend", "  local increasing = true\n  local decreasing\
    \ = true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\n      increasing = false\n\
    \    elseif l[i] > l[i-1] then\n      decreasing = false\n    end\n  end\n  return\
    \ increasing or decreasing\nend", "  local a, b = l[1], l[2]\n  if a < b then\n\
    \    for i = 3, #l do\n      if l[i] < b then return false end\n      b = l[i]\n\
    \    end\n  elseif a > b then\n    for i = 3, #l do\n      if l[i] > b then return\
    \ false end\n      b = l[i]\n    end\n  end\n  return true\nend", "  local d =\
    \ l[2] - l[1]\n  for i = 3, #l do\n    if d * (l[i] - l[i-1]) <= 0 then return\
    \ false end\n  end\n  return true\nend", "  local inc = true\n  local dec = true\n\
    \  for i = 2, #l do\n    inc = inc and l[i] >= l[i-1]\n    dec = dec and l[i]\
    \ <= l[i-1]\n  end\n  return inc or dec\nend", "    local inc = true\n    local\
    \ dec = true\n    for i = 2, #l do\n        if l[i] < l[i-1] then\n          \
    \  inc = false\n        elseif l[i] > l[i-1] then\n            dec = false\n \
    \       end\n    end\n    return inc or dec\nend", "\tlocal inc, dec = true, true\n\
    \tfor i = 2, #l do\n\t\tinc = inc and l[i] >= l[i-1]\n\t\tdec = dec and l[i] <=\
    \ l[i-1]\n\tend\n\treturn inc or dec\nend", "  local inc = l[1] <= l[2]\n  for\
    \ i = 2, #l - 1 do\n    if l[i] <= l[i + 1] then\n      if not inc then return\
    \ false end\n    else\n      if inc then return false end\n    end\n  end\n  return\
    \ true\nend", "    local inc = true\n    local dec = true\n    for i = 2, #l do\n\
    \        if l[i] > l[i-1] then\n            dec = false\n        elseif l[i] <\
    \ l[i-1] then\n            inc = false\n        end\n    end\n    return inc or\
    \ dec\nend", "    local inc = true\n    local dec = true\n    for i = 2, #l do\n\
    \        if l[i] < l[i-1] then\n            inc = false\n        elseif l[i] >\
    \ l[i-1] then\n            dec = false\n        end\n    end\n    return inc or\
    \ dec\nend", "  local inc = true\n  local dec = true\n  for i = 2, #l do\n   \
    \ if l[i] < l[i-1] then\n      inc = false\n    elseif l[i] > l[i-1] then\n  \
    \    dec = false\n    end\n  end\n  return inc or dec\nend", "  local inc, dec\
    \ = true, true\n  for i = 2, #l do\n    if l[i] < l[i-1] then inc = false end\n\
    \    if l[i] > l[i-1] then dec = false end\n  end\n  return inc or dec\nend",
  "    local inc, dec = true, true\n    for i = 2, #l do\n        if l[i] < l[i-1]\
    \ then\n            inc = false\n        elseif l[i] > l[i-1] then\n         \
    \   dec = false\n        end\n    end\n    return inc or dec\nend", "  local direction\
    \ = l[2] - l[1]\n  for i = 3, #l do\n    if direction == 0 then\n      direction\
    \ = l[i] - l[i - 1]\n    elseif (direction > 0 and l[i] < l[i - 1]) or (direction\
    \ < 0 and l[i] > l[i - 1]) then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    local inc = l[1] <= l[2]\n    for i = 2, #l - 1 do\n      \
    \  if l[i] <= l[i + 1] ~= inc then\n            return false\n        end\n  \
    \  end\n    return true\nend", "  local n = #l\n  if n < 2 then return true end\n\
    \  local inc = l[2] > l[1]\n  for i = 3, n do\n    if inc ~= (l[i] > l[i-1]) then\
    \ return false end\n  end\n  return true\nend", "    local last = l[1]\n    local\
    \ increasing = true\n    for i = 2, #l do\n        if l[i] < last then\n     \
    \       increasing = false\n            break\n        end\n        last = l[i]\n\
    \    end\n    if increasing then\n        return true\n    end\n    last = l[1]\n\
    \    for i = 2, #l do\n        if l[i] > last then\n            return false\n\
    \        end\n        last = l[i]\n    end\n    return true\nend", "\tlocal inc,\
    \ dec = true, true\n\tfor i = 2, #l do\n\t\tinc = inc and l[i] >= l[i-1]\n\t\t\
    dec = dec and l[i] <= l[i-1]\n\tend\n\treturn inc or dec\nend", "  local direction\
    \ = l[2] - l[1]\n  for i = 3, #l do\n    if direction == 0 then\n      direction\
    \ = l[i] - l[i - 1]\n    elseif (direction > 0 and l[i] < l[i - 1]) or (direction\
    \ < 0 and l[i] > l[i - 1]) then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    local inc = true\n    local dec = true\n    for i = 2, #l do\n\
    \        if l[i] < l[i-1] then\n            inc = false\n        elseif l[i] >\
    \ l[i-1] then\n            dec = false\n        end\n    end\n    return inc or\
    \ dec\nend", "  local inc, dec = true, true\n  for i = 2, #l do\n    if l[i] <\
    \ l[i-1] then inc = false end\n    if l[i] > l[i-1] then dec = false end\n  end\n\
    \  return inc or dec\nend", "  local inc = true\n  local dec = true\n  for i =\
    \ 2, #l do\n    if l[i] < l[i-1] then\n      inc = false\n    elseif l[i] > l[i-1]\
    \ then\n      dec = false\n    end\n  end\n  return inc or dec\nend", "    local\
    \ inc = true\n    local dec = true\n    for i = 2, #l do\n        if l[i] < l[i-1]\
    \ then\n            inc = false\n        elseif l[i] > l[i-1] then\n         \
    \   dec = false\n        end\n    end\n    return inc or dec\nend", "\tlocal inc\
    \ = true\n\tlocal dec = true\n\tfor i = 2, #l do\n\t\tif l[i] < l[i-1] then\n\t\
    \t\tinc = false\n\t\tend\n\t\tif l[i] > l[i-1] then\n\t\t\tdec = false\n\t\tend\n\
    \tend\n\treturn inc or dec\nend", "  local direction = l[2] - l[1]\n  for i =\
    \ 3, #l do\n    if direction * (l[i] - l[i-1]) < 0 then\n      return false\n\
    \    end\n  end\n  return true\nend", "    local d = l[2] - l[1]\n    for i =\
    \ 3, #l do\n        if d * (l[i] - l[i-1]) <= 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "  local d = l[2] - l[1]\n  for\
    \ i = 3, #l do\n    if d * (l[i] - l[i-1]) <= 0 then return false end\n  end\n\
    \  return true\nend", "  local inc = true\n  local dec = true\n  for i = 2, #l\
    \ do\n    if l[i] > l[i-1] then\n      dec = false\n    elseif l[i] < l[i-1] then\n\
    \      inc = false\n    end\n  end\n  return inc or dec\nend", "  local inc =\
    \ true\n  local dec = true\n  for i = 2, #l do\n    if l[i] > l[i-1] then\n  \
    \    dec = false\n    elseif l[i] < l[i-1] then\n      inc = false\n    end\n\
    \  end\n  return inc or dec\nend", "  local d = l[2] - l[1]\n  for i = 2, #l -\
    \ 1 do\n    if d * (l[i + 1] - l[i]) <= 0 then\n      return false\n    end\n\
    \  end\n  return true\nend", "    local n = #l\n    if n < 2 then return true\
    \ end\n    local inc = l[2] > l[1]\n    for i = 3, n do\n        if l[i] == l[i-1]\
    \ then return false end\n        if inc and l[i] < l[i-1] then return false end\n\
    \        if not inc and l[i] > l[i-1] then return false end\n    end\n    return\
    \ true\nend", "  local d = l[2] - l[1]\n  for i = 3, #l do\n    if l[i] - l[i-1]\
    \ ~= d then\n      return false\n    end\n  end\n  return true\nend", "    local\
    \ inc = l[1] <= l[2]\n    for i = 2, #l - 1 do\n        if l[i] <= l[i + 1] ~=\
    \ inc then\n            return false\n        end\n    end\n    return true\n\
    end", "\tlocal inc = true\n\tlocal dec = true\n\tfor i = 2, #l do\n\t\tif l[i]\
    \ < l[i-1] then\n\t\t\tinc = false\n\t\tend\n\t\tif l[i] > l[i-1] then\n\t\t\t\
    dec = false\n\t\tend\n\tend\n\treturn inc or dec\nend", "  local inc = true\n\
    \  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\n      inc\
    \ = false\n    elseif l[i] > l[i-1] then\n      dec = false\n    end\n  end\n\
    \  return inc or dec\nend", "  local inc, dec = true, true\n  for i = 2, #l do\n\
    \    if l[i] < l[i-1] then inc = false end\n    if l[i] > l[i-1] then dec = false\
    \ end\n  end\n  return inc or dec\nend", "    local d = l[2] - l[1]\n    for i\
    \ = 3, #l do\n        if d * (l[i] - l[i-1]) <= 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "\tlocal last = l[1]\n\tlocal increasing\
    \ = true\n\tfor i = 2, #l do\n\t\tif l[i] < last then\n\t\t\tincreasing = false\n\
    \t\t\tbreak\n\t\tend\n\t\tlast = l[i]\n\tend\n\tif increasing then\n\t\treturn\
    \ true\n\tend\n\tlast = l[1]\n\tfor i = 2, #l do\n\t\tif l[i] > last then\n\t\t\
    \treturn false\n\t\tend\n\t\tlast = l[i]\n\tend\n\treturn true\nend", "    local\
    \ inc, dec = true, true\n    for i = 2, #l do\n        if l[i] < l[i-1] then\n\
    \            inc = false\n        elseif l[i] > l[i-1] then\n            dec =\
    \ false\n        end\n    end\n    return inc or dec\nend", "  local direction\
    \ = l[2] - l[1]\n  for i = 3, #l do\n    if direction * (l[i] - l[i-1]) < 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local d = l[2] -\
    \ l[1]\n  for i = 2, #l - 1 do\n    if d * (l[i + 1] - l[i]) <= 0 then\n     \
    \ return false\n    end\n  end\n  return true\nend", "\tlocal inc = l[1] < l[2]\n\
    \tfor i = 2, #l - 1 do\n\t\tif inc ~= (l[i] < l[i + 1]) then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn true\nend", "  local inc, dec = true, true\n  for i =\
    \ 2, #l do\n    inc = inc and l[i] >= l[i-1]\n    dec = dec and l[i] <= l[i-1]\n\
    \  end\n  return inc or dec\nend", "  local inc = 0\n  for i = 2, #l do\n    local\
    \ d = l[i] - l[i-1]\n    if d == 0 then\n      return false\n    elseif d > 0\
    \ then\n      if inc == 0 then\n        inc = 1\n      elseif inc == -1 then\n\
    \        return false\n      end\n    else\n      if inc == 0 then\n        inc\
    \ = -1\n      elseif inc == 1 then\n        return false\n      end\n    end\n\
    \  end\n  return true\nend", "  local inc, dec = true, true\n  for i = 2, #l do\n\
    \    if l[i] < l[i-1] then inc = false end\n    if l[i] > l[i-1] then dec = false\
    \ end\n  end\n  return inc or dec\nend", "  local d = l[2] - l[1]\n  for i = 3,\
    \ #l do\n    if d * (l[i] - l[i-1]) <= 0 then return false end\n  end\n  return\
    \ true\nend", "  local d = l[2] - l[1]\n  for i = 3, #l do\n    if l[i] - l[i-1]\
    \ ~= d then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\n\
    \      inc = false\n    elseif l[i] > l[i-1] then\n      dec = false\n    end\n\
    \  end\n  return inc or dec\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
