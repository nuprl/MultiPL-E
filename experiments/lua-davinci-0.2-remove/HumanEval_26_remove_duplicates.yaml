name: HumanEval_26_remove_duplicates
language: lua
prompt: "-- From a list of integers, remove all elements that occur more than once.\n\
  -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
  \ 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}), {1,\
  \ 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers)\
    \ do\n    if not seen[number] then\n      table.insert(result, number)\n     \
    \ seen[number] = true\n    end\n  end\n  return result\nend", "    local seen\
    \ = {}\n    local result = {}\n    for _, number in ipairs(numbers) do\n     \
    \   if not seen[number] then\n            table.insert(result, number)\n     \
    \       seen[number] = true\n        end\n    end\n    return result\nend", " \
    \   local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, n in ipairs(numbers) do\n\
    \        if not seen[n] then\n            table.insert(result, n)\n          \
    \  seen[n] = true\n        end\n    end\n    return result\nend", "    local seen\
    \ = {}\n    local result = {}\n    for _, number in ipairs(numbers) do\n     \
    \   if not seen[number] then\n            table.insert(result, number)\n     \
    \       seen[number] = true\n        end\n    end\n    return result\nend", " \
    \   local set = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not set[number] then\n            table.insert(result, number)\n\
    \            set[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            seen[number] = true\n    \
    \        table.insert(result, number)\n        end\n    end\n    return result\n\
    end", "    local unique = {}\n    for _, number in ipairs(numbers) do\n      \
    \  if not unique[number] then\n            unique[number] = true\n           \
    \ coroutine.yield(number)\n        end\n    end\nend", "  local seen = {}\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number]\
    \ then\n      table.insert(result, number)\n      seen[number] = true\n    end\n\
    \  end\n  return result\nend", "    local seen = {}\n    local result = {}\n \
    \   for _, number in ipairs(numbers) do\n        if not seen[number] then\n  \
    \          seen[number] = true\n            table.insert(result, number)\n   \
    \     end\n    end\n    return result\nend", "    local seen = {}\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number] then\n\
    \            table.insert(result, number)\n            seen[number] = true\n \
    \       end\n    end\n    return result\nend", "  local unique = {}\n  for _,\
    \ number in ipairs(numbers) do\n    unique[number] = true\n  end\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if unique[number] then\n  \
    \    result[#result + 1] = number\n      unique[number] = nil\n    end\n  end\n\
    \  return result\nend", "  local unique = {}\n  for _, number in ipairs(numbers)\
    \ do\n    unique[number] = true\n  end\n  local result = {}\n  for _, number in\
    \ ipairs(numbers) do\n    if unique[number] then\n      table.insert(result, number)\n\
    \      unique[number] = nil\n    end\n  end\n  return result\nend", "  local seen\
    \ = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n    if not\
    \ seen[number] then\n      table.insert(result, number)\n      seen[number] =\
    \ true\n    end\n  end\n  return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "    local seen = {}\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if not seen[number] then\n           \
    \ table.insert(result, number)\n            seen[number] = true\n        end\n\
    \    end\n    return result\nend", "  local unique = {}\n  for _, number in ipairs(numbers)\
    \ do\n    if not unique[number] then\n      unique[number] = true\n    end\n \
    \ end\n  local result = {}\n  for _, number in ipairs(numbers) do\n    if unique[number]\
    \ then\n      table.insert(result, number)\n      unique[number] = nil\n    end\n\
    \  end\n  return result\nend", "  local seen = {}\n  local result = {}\n  for\
    \ _, number in ipairs(numbers) do\n    if not seen[number] then\n      table.insert(result,\
    \ number)\n      seen[number] = true\n    end\n  end\n  return result\nend", " \
    \ local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      table.insert(result, number)\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend", "    local unique = {}\n    for\
    \ _, number in ipairs(numbers) do\n        if not unique[number] then\n      \
    \      unique[number] = true\n        end\n    end\n    local result = {}\n  \
    \  for _, number in ipairs(numbers) do\n        if unique[number] then\n     \
    \       table.insert(result, number)\n            unique[number] = nil\n     \
    \   end\n    end\n    return result\nend", "    local seen = {}\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number] then\n\
    \            seen[number] = true\n            table.insert(result, number)\n \
    \       end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            seen[number] = true\n            table.insert(result, number)\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "  local seen = {}\n  local result = {}\n  for _, number\
    \ in ipairs(numbers) do\n    if not seen[number] then\n      table.insert(result,\
    \ number)\n      seen[number] = true\n    end\n  end\n  return result\nend", " \
    \   local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local unique = {}\n    for _, number in ipairs(numbers) do\n        if not\
    \ unique[number] then\n            unique[number] = true\n        end\n    end\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        if unique[number]\
    \ then\n            table.insert(result, number)\n            unique[number] =\
    \ nil\n        end\n    end\n    return result\nend", "  local seen = {}\n  local\
    \ result = {}\n  for _, v in ipairs(numbers) do\n    if not seen[v] then\n   \
    \   table.insert(result, v)\n      seen[v] = true\n    end\n  end\n  return result\n\
    end", "    local result = {}\n    local seen = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            seen[number] = true\n    \
    \        table.insert(result, number)\n        end\n    end\n    return result\n\
    end", "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local unique = {}\n    for _, number in ipairs(numbers) do\n        unique[number]\
    \ = true\n    end\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if unique[number] then\n            table.insert(result, number)\n\
    \            unique[number] = nil\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "  local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      table.insert(result, number)\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local unique = {}\n    for\
    \ _, number in ipairs(numbers) do\n        unique[number] = true\n    end\n  \
    \  local result = {}\n    for _, number in ipairs(numbers) do\n        if unique[number]\
    \ then\n            result[#result + 1] = number\n            unique[number] =\
    \ nil\n        end\n    end\n    return result\nend", "    local seen = {}\n \
    \   local result = {}\n    for _, number in ipairs(numbers) do\n        if not\
    \ seen[number] then\n            table.insert(result, number)\n            seen[number]\
    \ = true\n        end\n    end\n    return result\nend", "    local seen = {}\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        if not\
    \ seen[number] then\n            table.insert(result, number)\n            seen[number]\
    \ = true\n        end\n    end\n    return result\nend", "  local seen = {}\n\
    \  local result = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number]\
    \ then\n      table.insert(result, number)\n      seen[number] = true\n    end\n\
    \  end\n  return result\nend", "    local unique = {}\n    for _, number in ipairs(numbers)\
    \ do\n        unique[number] = true\n    end\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if unique[number] then\n            table.insert(result,\
    \ number)\n            unique[number] = nil\n        end\n    end\n    return\
    \ result\nend", "    local result = {}\n    local seen = {}\n    for _, number\
    \ in ipairs(numbers) do\n        if not seen[number] then\n            table.insert(result,\
    \ number)\n            seen[number] = true\n        end\n    end\n    return result\n\
    end", "    local unique = {}\n    for _, number in ipairs(numbers) do\n      \
    \  unique[number] = true\n    end\n    local result = {}\n    for _, number in\
    \ ipairs(numbers) do\n        if unique[number] then\n            table.insert(result,\
    \ number)\n            unique[number] = nil\n        end\n    end\n    return\
    \ result\nend", "    local unique = {}\n    for _, n in ipairs(numbers) do\n \
    \       unique[n] = true\n    end\n    local result = {}\n    for _, n in ipairs(numbers)\
    \ do\n        if unique[n] then\n            table.insert(result, n)\n       \
    \     unique[n] = nil\n        end\n    end\n    return result\nend", "    local\
    \ seen = {}\n    local result = {}\n    for _, number in ipairs(numbers) do\n\
    \        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local unique = {}\n    for _, number in ipairs(numbers) do\n        if not\
    \ unique[number] then\n            unique[number] = true\n        end\n    end\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        if unique[number]\
    \ then\n            table.insert(result, number)\n            unique[number] =\
    \ nil\n        end\n    end\n    return result\nend", "  local seen = {}\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number]\
    \ then\n      table.insert(result, number)\n      seen[number] = true\n    end\n\
    \  end\n  return result\nend", "    local seen = {}\n    local result = {}\n \
    \   for _, number in ipairs(numbers) do\n        if not seen[number] then\n  \
    \          table.insert(result, number)\n            seen[number] = true\n   \
    \     end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, n in ipairs(numbers) do\n    if not seen[n] then\n      seen[n]\
    \ = true\n      table.insert(result, n)\n    end\n  end\n  return result\nend",
  "    local unique = {}\n    for _, n in ipairs(numbers) do\n        unique[n] =\
    \ true\n    end\n    local result = {}\n    for _, n in ipairs(numbers) do\n \
    \       if unique[n] then\n            table.insert(result, n)\n            unique[n]\
    \ = nil\n        end\n    end\n    return result\nend", "    local seen = {}\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        if not\
    \ seen[number] then\n            table.insert(result, number)\n            seen[number]\
    \ = true\n        end\n    end\n    return result\nend", "    local unique = {}\n\
    \    for _, number in ipairs(numbers) do\n        if not unique[number] then\n\
    \            unique[number] = true\n        end\n    end\n    local result = {}\n\
    \    for _, number in ipairs(numbers) do\n        if unique[number] then\n   \
    \         table.insert(result, number)\n            unique[number] = nil\n   \
    \     end\n    end\n    return result\nend", "    local seen = {}\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number] then\n\
    \            table.insert(result, number)\n            seen[number] = true\n \
    \       end\n    end\n    return result\nend", "  local unique = {}\n  for _,\
    \ number in ipairs(numbers) do\n    if not unique[number] then\n      unique[number]\
    \ = true\n    end\n  end\n  local result = {}\n  for _, number in ipairs(numbers)\
    \ do\n    if unique[number] then\n      table.insert(result, number)\n      unique[number]\
    \ = nil\n    end\n  end\n  return result\nend", "    local unique = {}\n    for\
    \ _, number in ipairs(numbers) do\n        if not unique[number] then\n      \
    \      unique[number] = true\n        end\n    end\n    local result = {}\n  \
    \  for _, number in ipairs(numbers) do\n        if unique[number] then\n     \
    \       table.insert(result, number)\n            unique[number] = nil\n     \
    \   end\n    end\n    return result\nend", "    local seen = {}\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number] then\n\
    \            table.insert(result, number)\n            seen[number] = true\n \
    \       end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "\tlocal unique = {}\n\tlocal result = {}\n\tfor _, number\
    \ in ipairs(numbers) do\n\t\tif not unique[number] then\n\t\t\tunique[number]\
    \ = true\n\t\t\ttable.insert(result, number)\n\t\tend\n\tend\n\treturn result\n\
    end", "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "  local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      table.insert(result, number)\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "    local seen = {}\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if not seen[number] then\n           \
    \ seen[number] = true\n            table.insert(result, number)\n        end\n\
    \    end\n    return result\nend", "  local unique = {}\n  for _, number in ipairs(numbers)\
    \ do\n    unique[number] = true\n  end\n  local result = {}\n  for _, number in\
    \ ipairs(numbers) do\n    if unique[number] then\n      table.insert(result, number)\n\
    \      unique[number] = nil\n    end\n  end\n  return result\nend", "    local\
    \ unique = {}\n    for _, number in ipairs(numbers) do\n        if not unique[number]\
    \ then\n            unique[number] = true\n        end\n    end\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        if unique[number] then\n\
    \            table.insert(result, number)\n            unique[number] = nil\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "\tlocal seen = {}\n\tlocal result\
    \ = {}\n\tfor _, number in ipairs(numbers) do\n\t\tif not seen[number] then\n\t\
    \t\tresult[#result + 1] = number\n\t\t\tseen[number] = true\n\t\tend\n\tend\n\t\
    return result\nend", "    local unique = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not unique[number] then\n            unique[number] = true\n\
    \            coroutine.yield(number)\n        end\n    end\nend", "    local seen\
    \ = {}\n    local result = {}\n    for _, number in ipairs(numbers) do\n     \
    \   if not seen[number] then\n            table.insert(result, number)\n     \
    \       seen[number] = true\n        end\n    end\n    return result\nend", " \
    \   local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            seen[number] = true\n    \
    \        table.insert(result, number)\n        end\n    end\n    return result\n\
    end", "    local seen = {}\n    local result = {}\n    for _, n in ipairs(numbers)\
    \ do\n        if not seen[n] then\n            table.insert(result, n)\n     \
    \       seen[n] = true\n        end\n    end\n    return result\nend", "    local\
    \ unique = {}\n    for _, number in ipairs(numbers) do\n        if not unique[number]\
    \ then\n            unique[number] = true\n        end\n    end\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        if unique[number] then\n\
    \            table.insert(result, number)\n            unique[number] = nil\n\
    \        end\n    end\n    return result\nend", "    local unique = {}\n    for\
    \ _, number in ipairs(numbers) do\n        if not unique[number] then\n      \
    \      unique[number] = true\n        end\n    end\n    local result = {}\n  \
    \  for _, number in ipairs(numbers) do\n        if unique[number] then\n     \
    \       table.insert(result, number)\n            unique[number] = nil\n     \
    \   end\n    end\n    return result\nend", "    local result = {}\n    local seen\
    \ = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number] then\n\
    \            table.insert(result, number)\n            seen[number] = true\n \
    \       end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, v in ipairs(numbers) do\n        if not seen[v] then\n\
    \            table.insert(result, v)\n            seen[v] = true\n        end\n\
    \    end\n    return result\nend", "    local seen = {}\n    local result = {}\n\
    \    for _, n in ipairs(numbers) do\n        if not seen[n] then\n           \
    \ table.insert(result, n)\n            seen[n] = true\n        end\n    end\n\
    \    return result\nend", "    local seen = {}\n    local result = {}\n    for\
    \ _, v in ipairs(numbers) do\n        if not seen[v] then\n            table.insert(result,\
    \ v)\n            seen[v] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local result = {}\n    local seen = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, v in ipairs(numbers) do\n\
    \        if not seen[v] then\n            table.insert(result, v)\n          \
    \  seen[v] = true\n        end\n    end\n    return result\nend", "    local result\
    \ = {}\n    local seen = {}\n    for _, number in ipairs(numbers) do\n       \
    \ if not seen[number] then\n            table.insert(result, number)\n       \
    \     seen[number] = true\n        end\n    end\n    return result\nend", "  \
    \  local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "  local unique = {}\n  for _, n in ipairs(numbers) do\n    unique[n] = true\n \
    \ end\n  local result = {}\n  for _, n in ipairs(numbers) do\n    if unique[n]\
    \ then\n      table.insert(result, n)\n      unique[n] = nil\n    end\n  end\n\
    \  return result\nend", "    local seen = {}\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if not seen[number] then\n           \
    \ table.insert(result, number)\n            seen[number] = true\n        end\n\
    \    end\n    return result\nend", "  local seen = {}\n  local result = {}\n \
    \ for _, number in ipairs(numbers) do\n    if not seen[number] then\n      table.insert(result,\
    \ number)\n      seen[number] = true\n    end\n  end\n  return result\nend", " \
    \   local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "  local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      table.insert(result, number)\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local unique = {}\n    for\
    \ _, number in ipairs(numbers) do\n        if not unique[number] then\n      \
    \      unique[number] = true\n            coroutine.yield(number)\n        end\n\
    \    end\nend", "  local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers)\
    \ do\n    if not seen[number] then\n      table.insert(result, number)\n     \
    \ seen[number] = true\n    end\n  end\n  return result\nend", "    local unique\
    \ = {}\n    for _, number in ipairs(numbers) do\n        if not unique[number]\
    \ then\n            unique[number] = true\n        end\n    end\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        if unique[number] then\n\
    \            table.insert(result, number)\n            unique[number] = nil\n\
    \        end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, n in ipairs(numbers) do\n    if not seen[n] then\n      table.insert(result,\
    \ n)\n      seen[n] = true\n    end\n  end\n  return result\nend", "    local\
    \ seen = {}\n    local result = {}\n    for _, number in ipairs(numbers) do\n\
    \        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "\tlocal unique = {}\n\tfor _, n in ipairs(numbers) do\n\t\tunique[n] = true\n\t\
    end\n\tlocal result = {}\n\tfor _, n in ipairs(numbers) do\n\t\tif unique[n] then\n\
    \t\t\ttable.insert(result, n)\n\t\t\tunique[n] = nil\n\t\tend\n\tend\n\treturn\
    \ result\nend", "  local seen = {}\n  local result = {}\n  for _, n in ipairs(numbers)\
    \ do\n    if not seen[n] then\n      table.insert(result, n)\n      seen[n] =\
    \ true\n    end\n  end\n  return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local unique = {}\n    for\
    \ _, n in ipairs(numbers) do\n        unique[n] = true\n    end\n    local result\
    \ = {}\n    for _, n in ipairs(numbers) do\n        if unique[n] then\n      \
    \      result[#result + 1] = n\n            unique[n] = nil\n        end\n   \
    \ end\n    return result\nend", "    local seen = {}\n    local result = {}\n\
    \    for _, number in ipairs(numbers) do\n        if not seen[number] then\n \
    \           table.insert(result, number)\n            seen[number] = true\n  \
    \      end\n    end\n    return result\nend", "    local unique = {}\n    for\
    \ _, number in ipairs(numbers) do\n        unique[number] = true\n    end\n  \
    \  local result = {}\n    for _, number in ipairs(numbers) do\n        if unique[number]\
    \ then\n            table.insert(result, number)\n            unique[number] =\
    \ nil\n        end\n    end\n    return result\nend", "    local seen = {}\n \
    \   local result = {}\n    for _, number in ipairs(numbers) do\n        if not\
    \ seen[number] then\n            table.insert(result, number)\n            seen[number]\
    \ = true\n        end\n    end\n    return result\nend", "\tlocal seen = {}\n\t\
    local result = {}\n\tfor _, number in ipairs(numbers) do\n\t\tif not seen[number]\
    \ then\n\t\t\ttable.insert(result, number)\n\t\t\tseen[number] = true\n\t\tend\n\
    \tend\n\treturn result\nend", "    local seen = {}\n    local result = {}\n  \
    \  for _, number in ipairs(numbers) do\n        if not seen[number] then\n   \
    \         table.insert(result, number)\n            seen[number] = true\n    \
    \    end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "  local seen = {}\n  local result = {}\n  for _, number\
    \ in ipairs(numbers) do\n    if not seen[number] then\n      table.insert(result,\
    \ number)\n      seen[number] = true\n    end\n  end\n  return result\nend", " \
    \ local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      seen[number] = true\n      table.insert(result,\
    \ number)\n    end\n  end\n  return result\nend", "  local seen = {}\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number]\
    \ then\n      table.insert(result, number)\n      seen[number] = true\n    end\n\
    \  end\n  return result\nend", "    local seen = {}\n    local result = {}\n \
    \   for _, number in ipairs(numbers) do\n        if not seen[number] then\n  \
    \          table.insert(result, number)\n            seen[number] = true\n   \
    \     end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "    local unique = {}\n    for _, number in ipairs(numbers)\
    \ do\n        unique[number] = true\n    end\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if unique[number] then\n            table.insert(result,\
    \ number)\n            unique[number] = nil\n        end\n    end\n    return\
    \ result\nend", "  local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers)\
    \ do\n    if not seen[number] then\n      table.insert(result, number)\n     \
    \ seen[number] = true\n    end\n  end\n  return result\nend", "  local seen =\
    \ {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number]\
    \ then\n      table.insert(result, number)\n      seen[number] = true\n    end\n\
    \  end\n  return result\nend", "  local seen = {}\n  local result = {}\n  for\
    \ _, number in ipairs(numbers) do\n    if not seen[number] then\n      table.insert(result,\
    \ number)\n      seen[number] = true\n    end\n  end\n  return result\nend", " \
    \   local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "  local unique = {}\n  for _, number in ipairs(numbers) do\n    unique[number]\
    \ = true\n  end\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if unique[number] then\n      table.insert(result, number)\n      unique[number]\
    \ = nil\n    end\n  end\n  return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      seen[number] = true\n      table.insert(result, number)\n    end\n  end\n\
    \  return result\nend", "  local seen = {}\n  local result = {}\n  for _, n in\
    \ ipairs(numbers) do\n    if not seen[n] then\n      table.insert(result, n)\n\
    \      seen[n] = true\n    end\n  end\n  return result\nend", "    local seen\
    \ = {}\n    local result = {}\n    for _, number in ipairs(numbers) do\n     \
    \   if not seen[number] then\n            table.insert(result, number)\n     \
    \       seen[number] = true\n        end\n    end\n    return result\nend", " \
    \ local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      table.insert(result, number)\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "\tlocal unique = {}\n\tlocal unique_count = 0\n\tfor\
    \ i = 1, #numbers do\n\t\tlocal number = numbers[i]\n\t\tif not unique[number]\
    \ then\n\t\t\tunique_count = unique_count + 1\n\t\t\tunique[number] = unique_count\n\
    \t\tend\n\tend\n\tlocal result = {}\n\tfor i = 1, #numbers do\n\t\tlocal number\
    \ = numbers[i]\n\t\tif unique[number] then\n\t\t\tresult[#result + 1] = number\n\
    \t\t\tunique[number] = nil\n\t\tend\n\tend\n\treturn result\nend", "    local\
    \ seen = {}\n    local result = {}\n    for _, number in ipairs(numbers) do\n\
    \        if not seen[number] then\n            seen[number] = true\n         \
    \   table.insert(result, number)\n        end\n    end\n    return result\nend",
  "  local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      table.insert(result, number)\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      seen[number] = true\n      table.insert(result, number)\n    end\n  end\n\
    \  return result\nend", "  local seen = {}\n  local result = {}\n  for _, number\
    \ in ipairs(numbers) do\n    if not seen[number] then\n      table.insert(result,\
    \ number)\n      seen[number] = true\n    end\n  end\n  return result\nend", " \
    \   local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local unique = {}\n    for _, number in ipairs(numbers) do\n        unique[number]\
    \ = true\n    end\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if unique[number] then\n            result[#result + 1] = number\n\
    \            unique[number] = nil\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local unique = {}\n    for _, number in ipairs(numbers) do\n        if not\
    \ unique[number] then\n            unique[number] = true\n        end\n    end\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        if unique[number]\
    \ then\n            table.insert(result, number)\n            unique[number] =\
    \ nil\n        end\n    end\n    return result\nend", "    local seen = {}\n \
    \   local result = {}\n    for _, n in ipairs(numbers) do\n        if not seen[n]\
    \ then\n            table.insert(result, n)\n            seen[n] = true\n    \
    \    end\n    end\n    return result\nend", "    local seen = {}\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number] then\n\
    \            table.insert(result, number)\n            seen[number] = true\n \
    \       end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "    local seen = {}\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if not seen[number] then\n           \
    \ table.insert(result, number)\n            seen[number] = true\n        end\n\
    \    end\n    return result\nend", "    local seen = {}\n    local result = {}\n\
    \    for _, number in ipairs(numbers) do\n        if not seen[number] then\n \
    \           table.insert(result, number)\n            seen[number] = true\n  \
    \      end\n    end\n    return result\nend", "    local result = {}\n    local\
    \ seen = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            result[#result + 1] = number\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "  local seen = {}\n  local result = {}\n  for _, number\
    \ in ipairs(numbers) do\n    if not seen[number] then\n      table.insert(result,\
    \ number)\n      seen[number] = true\n    end\n  end\n  return result\nend", " \
    \ local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      table.insert(result, number)\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "  local unique = {}\n  for _,\
    \ number in ipairs(numbers) do\n    unique[number] = true\n  end\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if unique[number] then\n  \
    \    table.insert(result, number)\n      unique[number] = nil\n    end\n  end\n\
    \  return result\nend", "  local seen = {}\n  local result = {}\n  for _, n in\
    \ ipairs(numbers) do\n    if not seen[n] then\n      table.insert(result, n)\n\
    \      seen[n] = true\n    end\n  end\n  return result\nend", "  local seen =\
    \ {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number]\
    \ then\n      table.insert(result, number)\n      seen[number] = true\n    end\n\
    \  end\n  return result\nend", "    local seen = {}\n    local result = {}\n \
    \   for _, number in ipairs(numbers) do\n        if not seen[number] then\n  \
    \          table.insert(result, number)\n            seen[number] = true\n   \
    \     end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      seen[number] = true\n      table.insert(result, number)\n    end\n  end\n\
    \  return result\nend", "    local seen = {}\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if not seen[number] then\n           \
    \ table.insert(result, number)\n            seen[number] = true\n        end\n\
    \    end\n    return result\nend", "  local seen = {}\n  local result = {}\n \
    \ for _, number in ipairs(numbers) do\n    if not seen[number] then\n      table.insert(result,\
    \ number)\n      seen[number] = true\n    end\n  end\n  return result\nend", " \
    \   local result = {}\n    local seen = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend",
  "  local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      table.insert(result, number)\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "    local seen = {}\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if not seen[number] then\n           \
    \ table.insert(result, number)\n            seen[number] = true\n        end\n\
    \    end\n    return result\nend", "  local seen = {}\n  local result = {}\n \
    \ for _, number in ipairs(numbers) do\n    if not seen[number] then\n      table.insert(result,\
    \ number)\n      seen[number] = true\n    end\n  end\n  return result\nend", " \
    \ local unique = {}\n  for _, n in ipairs(numbers) do\n    if not unique[n] then\n\
    \      unique[n] = true\n    end\n  end\n  local result = {}\n  for _, n in ipairs(numbers)\
    \ do\n    if unique[n] then\n      table.insert(result, n)\n      unique[n] =\
    \ nil\n    end\n  end\n  return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, n in ipairs(numbers) do\n        if not seen[n] then\n\
    \            table.insert(result, n)\n            seen[n] = true\n        end\n\
    \    end\n    return result\nend", "    local unique = {}\n    for _, number in\
    \ ipairs(numbers) do\n        unique[number] = true\n    end\n    local result\
    \ = {}\n    for _, number in ipairs(numbers) do\n        if unique[number] then\n\
    \            table.insert(result, number)\n            unique[number] = nil\n\
    \        end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "    local seen = {}\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if not seen[number] then\n           \
    \ table.insert(result, number)\n            seen[number] = true\n        end\n\
    \    end\n    return result\nend", "    local seen = {}\n    local result = {}\n\
    \    for _, number in ipairs(numbers) do\n        if not seen[number] then\n \
    \           table.insert(result, number)\n            seen[number] = true\n  \
    \      end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            table.insert(result, number)\n            seen[number] = true\n\
    \        end\n    end\n    return result\nend", "    local unique = {}\n    for\
    \ _, number in ipairs(numbers) do\n        if not unique[number] then\n      \
    \      unique[number] = true\n        end\n    end\n    local result = {}\n  \
    \  for _, number in ipairs(numbers) do\n        if unique[number] then\n     \
    \       table.insert(result, number)\n            unique[number] = nil\n     \
    \   end\n    end\n    return result\nend", "    local unique = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if not unique[number] then\n         \
    \   unique[number] = true\n            coroutine.yield(number)\n        end\n\
    \    end\nend", "    local seen = {}\n    local result = {}\n    for _, n in ipairs(numbers)\
    \ do\n        if not seen[n] then\n            seen[n] = true\n            table.insert(result,\
    \ n)\n        end\n    end\n    return result\nend", "  local seen = {}\n  local\
    \ result = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number]\
    \ then\n      table.insert(result, number)\n      seen[number] = true\n    end\n\
    \  end\n  return result\nend", "    local seen = {}\n    local result = {}\n \
    \   for _, number in ipairs(numbers) do\n        if not seen[number] then\n  \
    \          table.insert(result, number)\n            seen[number] = true\n   \
    \     end\n    end\n    return result\nend", "    local seen = {}\n    local result\
    \ = {}\n    for _, n in ipairs(numbers) do\n        if not seen[n] then\n    \
    \        seen[n] = true\n            table.insert(result, n)\n        end\n  \
    \  end\n    return result\nend", "  local seen = {}\n  local result = {}\n  for\
    \ _, number in ipairs(numbers) do\n    if not seen[number] then\n      table.insert(result,\
    \ number)\n      seen[number] = true\n    end\n  end\n  return result\nend", " \
    \ local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      table.insert(result, number)\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend", "    local seen = {}\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if not seen[number] then\n           \
    \ table.insert(result, number)\n            seen[number] = true\n        end\n\
    \    end\n    return result\nend", "    local seen = {}\n    local result = {}\n\
    \    for _, number in ipairs(numbers) do\n        if not seen[number] then\n \
    \           table.insert(result, number)\n            seen[number] = true\n  \
    \      end\n    end\n    return result\nend", "    local seen = {}\n    local\
    \ result = {}\n    for _, number in ipairs(numbers) do\n        if not seen[number]\
    \ then\n            seen[number] = true\n            table.insert(result, number)\n\
    \        end\n    end\n    return result\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, number in ipairs(numbers) do\n    if not seen[number] then\n\
    \      table.insert(result, number)\n      seen[number] = true\n    end\n  end\n\
    \  return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
