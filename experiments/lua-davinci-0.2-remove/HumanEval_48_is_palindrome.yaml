name: HumanEval_48_is_palindrome
language: lua
prompt: "-- Checks if given string is a palindrome\nlocal function is_palindrome(text)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
  \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
  \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
  \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
  \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local text_len = string.len(text)\n    local half_len = math.floor(text_len\
    \ / 2)\n    for i = 1, half_len do\n        if string.sub(text, i, i) ~= string.sub(text,\
    \ text_len - i + 1, text_len - i + 1) then\n            return false\n       \
    \ end\n    end\n    return true\nend", "  local text = text:gsub(\"%s+\", \"\"\
    )\n  local text_reverse = string.reverse(text)\n  return text == text_reverse\n\
    end", "    local len = text:len()\n    for i = 1, len / 2 do\n        if text:sub(i,\
    \ i) ~= text:sub(len - i + 1, len - i + 1) then\n            return false\n  \
    \      end\n    end\n    return true\nend", "    local text_len = string.len(text)\n\
    \    local half_len = math.floor(text_len / 2)\n    local is_palindrome = true\n\
    \    for i = 1, half_len do\n        if string.sub(text, i, i) ~= string.sub(text,\
    \ text_len - i + 1, text_len - i + 1) then\n            is_palindrome = false\n\
    \            break\n        end\n    end\n    return is_palindrome\nend", "  \
    \  local len = #text\n    for i = 1, len do\n        if text:sub(i, i) ~= text:sub(len\
    \ - i + 1, len - i + 1) then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local text_len = string.len(text)\n    local half_len\
    \ = math.floor(text_len / 2)\n    for i = 1, half_len do\n        if string.sub(text,\
    \ i, i) ~= string.sub(text, text_len - i + 1, text_len - i + 1) then\n       \
    \     return false\n        end\n    end\n    return true\nend", "  local text_len\
    \ = string.len(text)\n  local text_half_len = math.floor(text_len / 2)\n  for\
    \ i = 1, text_half_len do\n    if string.sub(text, i, i) ~= string.sub(text, text_len\
    \ - i + 1, text_len - i + 1) then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    local text_len = string.len(text)\n    for i = 1, text_len\
    \ do\n        if string.sub(text, i, i) ~= string.sub(text, text_len - i + 1,\
    \ text_len - i + 1) then\n            return false\n        end\n    end\n   \
    \ return true\nend", "    if text == nil then\n        return false\n    end\n\
    \    text = string.lower(text)\n    local reverse = string.reverse(text)\n   \
    \ return text == reverse\nend", "    local text_len = string.len(text)\n    local\
    \ half_len = math.floor(text_len / 2)\n    for i = 1, half_len do\n        if\
    \ string.sub(text, i, i) ~= string.sub(text, text_len - i + 1, text_len - i +\
    \ 1) then\n            return false\n        end\n    end\n    return true\nend",
  "    local text_len = string.len(text)\n    local text_half_len = math.floor(text_len\
    \ / 2)\n    local text_half_len_plus_one = text_half_len + 1", "    local text_len\
    \ = string.len(text)\n    for i = 1, text_len do\n        if string.sub(text,\
    \ i, i) ~= string.sub(text, text_len - i + 1, text_len - i + 1) then\n       \
    \     return false\n        end\n    end\n    return true\nend", "    local text_len\
    \ = string.len(text)\n    for i = 1, text_len do\n        if string.sub(text,\
    \ i, i) ~= string.sub(text, text_len - i + 1, text_len - i + 1) then\n       \
    \     return false\n        end\n    end\n    return true\nend", "    local text_len\
    \ = text:len()\n    local half_len = math.floor(text_len / 2)\n    local text_rev\
    \ = text:reverse()\n    for i = 1, half_len do\n        if text:sub(i, i) ~= text_rev:sub(i,\
    \ i) then\n            return false\n        end\n    end\n    return true\nend",
  "    local text_len = string.len(text)\n    local half_len = math.floor(text_len\
    \ / 2)", "  local text_len = string.len(text)\n  local half_len = math.floor(text_len\
    \ / 2)\n  local is_palindrome = true\n  for i = 1, half_len do\n    if string.sub(text,\
    \ i, i) ~= string.sub(text, text_len - i + 1, text_len - i + 1) then\n      is_palindrome\
    \ = false\n      break\n    end\n  end\n  return is_palindrome\nend", "    local\
    \ text_len = string.len(text)\n    local text_len_half = math.floor(text_len /\
    \ 2)\n    for i = 1, text_len_half do\n        if string.sub(text, i, i) ~= string.sub(text,\
    \ text_len - i + 1, text_len - i + 1) then\n            return false\n       \
    \ end\n    end\n    return true\nend", "    local text_len = string.len(text)\n\
    \    local i = 1\n    local j = text_len\n    while i < j do\n        if string.sub(text,\
    \ i, i) ~= string.sub(text, j, j) then\n            return false\n        end\n\
    \        i = i + 1\n        j = j - 1\n    end\n    return true\nend", "  local\
    \ text_len = string.len(text)\n  local half_len = math.floor(text_len / 2)\n \
    \ for i = 1, half_len do\n    if string.sub(text, i, i) ~= string.sub(text, text_len\
    \ - i + 1, text_len - i + 1) then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    local text_len = string.len(text)\n    local text_len_half\
    \ = math.floor(text_len / 2)\n    local text_first_half = string.sub(text, 1,\
    \ text_len_half)\n    local text_second_half = string.sub(text, text_len - text_len_half\
    \ + 1, text_len)\n    return text_first_half == string.reverse(text_second_half)\n\
    end", "    local text_len = string.len(text)\n    local half_len = math.floor(text_len\
    \ / 2)\n    for i = 1, half_len do\n        if string.sub(text, i, i) ~= string.sub(text,\
    \ text_len - i + 1, text_len - i + 1) then\n            return false\n       \
    \ end\n    end\n    return true\nend", "    local text_len = string.len(text)\n\
    \    local half_len = math.floor(text_len / 2)\n    for i = 1, half_len do\n \
    \       if string.sub(text, i, i) ~= string.sub(text, text_len - i + 1, text_len\
    \ - i + 1) then\n            return false\n        end\n    end\n    return true\n\
    end", "    local text_len = string.len(text)\n    local half_len = math.floor(text_len\
    \ / 2)\n    for i = 1, half_len do\n        if string.sub(text, i, i) ~= string.sub(text,\
    \ text_len - i + 1, text_len - i + 1) then\n            return false\n       \
    \ end\n    end\n    return true\nend", "  local text_len = #text\n  local half_len\
    \ = math.floor(text_len / 2)\n  for i = 1, half_len do\n    if text:sub(i, i)\
    \ ~= text:sub(text_len - i + 1, text_len - i + 1) then\n      return false\n \
    \   end\n  end\n  return true\nend", "  local text_len = string.len(text)\n  local\
    \ half_len = math.floor(text_len / 2)\n  for i = 1, half_len do\n    if string.sub(text,\
    \ i, i) ~= string.sub(text, text_len - i + 1, text_len - i + 1) then\n      return\
    \ false\n    end\n  end\n  return true\nend", "    local text_len = string.len(text)\n\
    \    local text_half_len = math.floor(text_len / 2)\n    for i = 1, text_half_len\
    \ do\n        if string.sub(text, i, i) ~= string.sub(text, text_len - i + 1,\
    \ text_len - i + 1) then\n            return false\n        end\n    end\n   \
    \ return true\nend", "    local text_len = #text\n    for i = 1, math.floor(text_len\
    \ / 2) do\n        if text:sub(i, i) ~= text:sub(text_len - i + 1, text_len -\
    \ i + 1) then\n            return false\n        end\n    end\n    return true\n\
    end", "    local text_len = string.len(text)\n    local half_len = math.floor(text_len\
    \ / 2)\n    local is_palindrome = true\n    for i = 1, half_len do\n        if\
    \ string.sub(text, i, i) ~= string.sub(text, text_len - i + 1, text_len - i +\
    \ 1) then\n            is_palindrome = false\n            break\n        end\n\
    \    end\n    return is_palindrome\nend", "    local text = text:lower()\n   \
    \ local text_len = text:len()\n    local half_len = math.floor(text_len / 2)\n\
    \    for i = 1, half_len do\n        if text:sub(i, i) ~= text:sub(text_len -\
    \ i + 1, text_len - i + 1) then\n            return false\n        end\n    end\n\
    \    return true\nend", "  local text = string.lower(text)\n  local text_reverse\
    \ = string.reverse(text)\n  return text == text_reverse\nend", "  local text_len\
    \ = string.len(text)\n  for i = 1, text_len do\n    if string.sub(text, i, i)\
    \ ~= string.sub(text, text_len - i + 1, text_len - i + 1) then\n      return false\n\
    \    end\n  end\n  return true\nend", "    local text_len = string.len(text)\n\
    \    local half_len = math.floor(text_len / 2)\n    for i = 1, half_len do\n \
    \       if string.sub(text, i, i) ~= string.sub(text, text_len - i + 1, text_len\
    \ - i + 1) then\n            return false\n        end\n    end\n    return true\n\
    end", "    if text == nil then\n        return false\n    end\n    text = text:lower()\n\
    \    local len = text:len()\n    for i = 1, len do\n        if text:sub(i, i)\
    \ ~= text:sub(len - i + 1, len - i + 1) then\n            return false\n     \
    \   end\n    end\n    return true\nend", "    local text_len = string.len(text)\n\
    \    for i = 1, text_len do\n        if string.sub(text, i, i) ~= string.sub(text,\
    \ text_len - i + 1, text_len - i + 1) then\n            return false\n       \
    \ end\n    end\n    return true\nend", "    local text_len = string.len(text)\n\
    \    local half_len = math.floor(text_len / 2)\n    for i = 1, half_len do\n \
    \       if string.sub(text, i, i) ~= string.sub(text, text_len - i + 1, text_len\
    \ - i + 1) then\n            return false\n        end\n    end\n    return true\n\
    end", "  local text_len = string.len(text)\n  local half_len = math.floor(text_len\
    \ / 2)\n  for i = 1, half_len do\n    if string.sub(text, i, i) ~= string.sub(text,\
    \ text_len - i + 1, text_len - i + 1) then\n      return false\n    end\n  end\n\
    \  return true\nend", "    local text = text:lower()\n    local text_len = text:len()\n\
    \    local half_len = math.floor(text_len / 2)\n    for i = 1, half_len do\n \
    \       if text:sub(i, i) ~= text:sub(text_len - i + 1, text_len - i + 1) then\n\
    \            return false\n        end\n    end\n    return true\nend", "  local\
    \ text_len = string.len(text)\n  local half_len = math.floor(text_len / 2)\n \
    \ for i = 1, half_len do\n    if string.sub(text, i, i) ~= string.sub(text, text_len\
    \ - i + 1, text_len - i + 1) then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    local text = text:lower()\n    local text_len = text:len()\n\
    \    local half_len = math.floor(text_len / 2)\n    for i = 1, half_len do\n \
    \       if text:sub(i, i) ~= text:sub(text_len - i + 1, text_len - i + 1) then\n\
    \            return false\n        end\n    end\n    return true\nend", "    local\
    \ s = string.lower(text)\n    local l = string.len(s)\n    local i = 1\n    while\
    \ i <= l do\n        if s:sub(i, i) ~= s:sub(l, l) then\n            return false\n\
    \        end\n        i = i + 1\n        l = l - 1\n    end\n    return true\n\
    end", "  local text_len = string.len(text)\n  local half_len = math.floor(text_len\
    \ / 2)\n  for i = 1, half_len do\n    if text:sub(i, i) ~= text:sub(text_len -\
    \ i + 1, text_len - i + 1) then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    local text_len = string.len(text)\n    local text_half_len\
    \ = math.floor(text_len / 2)\n    for i = 1, text_half_len do\n        if string.sub(text,\
    \ i, i) ~= string.sub(text, text_len - i + 1, text_len - i + 1) then\n       \
    \     return false\n        end\n    end\n    return true\nend", "    local text_length\
    \ = string.len(text)\n    local half_length = math.floor(text_length / 2)\n  \
    \  local is_palindrome = true\n    for i = 1, half_length do\n        local first_char\
    \ = string.sub(text, i, i)\n        local last_char = string.sub(text, text_length\
    \ - i + 1, text_length - i + 1)\n        if first_char ~= last_char then\n   \
    \         is_palindrome = false\n            break\n        end\n    end\n   \
    \ return is_palindrome\nend", "\tlocal text = text:gsub(\"%s+\", \"\")\n\tlocal\
    \ reversed = string.reverse(text)\n\treturn text == reversed\nend", "    local\
    \ text_len = string.len(text)\n    for i = 1, math.floor(text_len / 2) do\n  \
    \      if string.sub(text, i, i) ~= string.sub(text, text_len - i + 1, text_len\
    \ - i + 1) then\n            return false\n        end\n    end\n    return true\n\
    end", "    local text_len = string.len(text)\n    local text_half_len = math.floor(text_len\
    \ / 2)\n    local text_half_len_plus_one = text_half_len + 1", "\tlocal text =\
    \ text:gsub(\"%s+\", \"\")\n\tlocal reversed = string.reverse(text)\n\treturn\
    \ text == reversed\nend", "\tlocal text_len = string.len(text)\n\tlocal half_len\
    \ = math.floor(text_len / 2)\n\tfor i = 1, half_len do\n\t\tif string.sub(text,\
    \ i, i) ~= string.sub(text, text_len - i + 1, text_len - i + 1) then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "    local text_len = string.len(text)\n\
    \    local text_half_len = math.floor(text_len / 2)\n    local text_half_len_plus_one\
    \ = text_half_len + 1", "    local text = text:lower()\n    local text_len = text:len()\n\
    \    local text_half = math.floor(text_len / 2)\n    local text_reversed = text:reverse()",
  "    local text_len = string.len(text)\n    local text_len_half = math.floor(text_len\
    \ / 2)\n    local is_palindrome = true\n    for i = 1, text_len_half do\n    \
    \    if string.sub(text, i, i) ~= string.sub(text, text_len - i + 1, text_len\
    \ - i + 1) then\n            is_palindrome = false\n            break\n      \
    \  end\n    end\n    return is_palindrome\nend", "  local text_len = string.len(text)\n\
    \  local half_len = math.floor(text_len / 2)\n  local is_palindrome = true\n \
    \ for i = 1, half_len do\n    if string.sub(text, i, i) ~= string.sub(text, text_len\
    \ - i + 1, text_len - i + 1) then\n      is_palindrome = false\n      break\n\
    \    end\n  end\n  return is_palindrome\nend", "    local reversed = string.reverse(text)\n\
    \    return text == reversed\nend", "  local i = 1\n  local j = #text\n  while\
    \ i < j do\n    if text:sub(i, i) ~= text:sub(j, j) then\n      return false\n\
    \    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend", "    local\
    \ len = #text\n    for i = 1, len do\n        if text:sub(i, i) ~= text:sub(len\
    \ - i + 1, len - i + 1) then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local text_len = string.len(text)\n    for i = 1,\
    \ text_len do\n        if string.sub(text, i, i) ~= string.sub(text, text_len\
    \ - i + 1, text_len - i + 1) then\n            return false\n        end\n   \
    \ end\n    return true\nend", "    local text = text:lower()\n    local text_len\
    \ = text:len()\n    local half_len = math.floor(text_len / 2)", "    local text_len\
    \ = string.len(text)\n    for i = 1, text_len do\n        if string.sub(text,\
    \ i, i) ~= string.sub(text, text_len - i + 1, text_len - i + 1) then\n       \
    \     return false\n        end\n    end\n    return true\nend", "  local len\
    \ = #text\n  for i = 1, len / 2 do\n    if text:sub(i, i) ~= text:sub(len - i\
    \ + 1, len - i + 1) then\n      return false\n    end\n  end\n  return true\n\
    end", "    local len = string.len(text)\n    for i = 1, len do\n        if string.sub(text,\
    \ i, i) ~= string.sub(text, len - i + 1, len - i + 1) then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    local text = text:lower()\n\
    \    local text_len = text:len()\n    local half_len = math.floor(text_len / 2)\n\
    \    for i = 1, half_len do\n        if text:sub(i, i) ~= text:sub(text_len -\
    \ i + 1, text_len - i + 1) then\n            return false\n        end\n    end\n\
    \    return true\nend", "  local len = string.len(text)\n  for i = 1, len do\n\
    \    if string.sub(text, i, i) ~= string.sub(text, len - i + 1, len - i + 1) then\n\
    \      return false\n    end\n  end\n  return true\nend", "    local text_len\
    \ = string.len(text)\n    local half_len = math.floor(text_len / 2)\n    for i\
    \ = 1, half_len do\n        if string.sub(text, i, i) ~= string.sub(text, text_len\
    \ - i + 1, text_len - i + 1) then\n            return false\n        end\n   \
    \ end\n    return true\nend", "    local text_len = string.len(text)\n    local\
    \ text_len_half = math.floor(text_len / 2)\n    local text_len_half_plus = text_len_half\
    \ + 1\n    for i = 1, text_len_half do\n        if string.sub(text, i, i) ~= string.sub(text,\
    \ text_len - i + 1, text_len - i + 1) then\n            return false\n       \
    \ end\n    end\n    return true\nend", "  local text_len = string.len(text)\n\
    \  local half_len = math.floor(text_len / 2)\n  local is_palindrome = true\n \
    \ for i = 1, half_len do\n    if string.sub(text, i, i) ~= string.sub(text, text_len\
    \ - i + 1, text_len - i + 1) then\n      is_palindrome = false\n      break\n\
    \    end\n  end\n  return is_palindrome\nend", "    local len = string.len(text)\n\
    \    for i = 1, len / 2 do\n        if string.sub(text, i, i) ~= string.sub(text,\
    \ len - i + 1, len - i + 1) then\n            return false\n        end\n    end\n\
    \    return true\nend", "  local text_len = string.len(text)\n  local half_len\
    \ = math.floor(text_len / 2)\n  for i = 1, half_len do\n    if string.sub(text,\
    \ i, i) ~= string.sub(text, text_len - i + 1, text_len - i + 1) then\n      return\
    \ false\n    end\n  end\n  return true\nend", "    local text = text:lower()\n\
    \    local text_len = text:len()\n    local half_len = math.floor(text_len / 2)\n\
    \    for i = 1, half_len do\n        if text:sub(i, i) ~= text:sub(text_len -\
    \ i + 1, text_len - i + 1) then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local text_len = string.len(text)\n    local text_half_len\
    \ = math.floor(text_len / 2)\n    local text_half_len_plus_one = text_half_len\
    \ + 1", "    local length = string.len(text)\n    local half_length = math.floor(length\
    \ / 2)\n    for i = 1, half_length do\n        if string.sub(text, i, i) ~= string.sub(text,\
    \ length - i + 1, length - i + 1) then\n            return false\n        end\n\
    \    end\n    return true\nend", "  local text_len = string.len(text)\n  for i\
    \ = 1, text_len / 2 do\n    if string.sub(text, i, i) ~= string.sub(text, text_len\
    \ - i + 1, text_len - i + 1) then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    local text_len = string.len(text)\n    local half_len = math.floor(text_len\
    \ / 2)\n    for i = 1, half_len do\n        if string.sub(text, i, i) ~= string.sub(text,\
    \ text_len - i + 1, text_len - i + 1) then\n            return false\n       \
    \ end\n    end\n    return true\nend", "    local text_len = string.len(text)\n\
    \    local half_len = math.floor(text_len / 2)\n    for i = 1, half_len do\n \
    \       if string.sub(text, i, i) ~= string.sub(text, text_len - i + 1, text_len\
    \ - i + 1) then\n            return false\n        end\n    end\n    return true\n\
    end", "    local len = string.len(text)\n    for i = 1, len / 2 do\n        if\
    \ text:sub(i, i) ~= text:sub(len - i + 1, len - i + 1) then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    local text_len = #text\n\
    \    for i = 1, text_len / 2 do\n        if text:sub(i, i) ~= text:sub(text_len\
    \ - i + 1, text_len - i + 1) then\n            return false\n        end\n   \
    \ end\n    return true\nend", "    local text_len = string.len(text)\n    local\
    \ text_len_half = math.floor(text_len / 2)\n    local text_len_half_plus = text_len_half\
    \ + 1\n    for i = 1, text_len_half do\n        if string.sub(text, i, i) ~= string.sub(text,\
    \ text_len - i + 1, text_len - i + 1) then\n            return false\n       \
    \ end\n    end\n    return true\nend", "  local text_length = string.len(text)\n\
    \  local half_length = math.floor(text_length / 2)\n  local is_palindrome = true\n\
    \  for i = 1, half_length do\n    if string.sub(text, i, i) ~= string.sub(text,\
    \ text_length - i + 1, text_length - i + 1) then\n      is_palindrome = false\n\
    \      break\n    end\n  end\n  return is_palindrome\nend", "  local text_length\
    \ = string.len(text)\n  local half_length = math.floor(text_length / 2)\n  local\
    \ first_half = string.sub(text, 1, half_length)\n  local second_half = string.sub(text,\
    \ text_length - half_length + 1, text_length)\n  local second_half_reversed =\
    \ string.reverse(second_half)\n  return first_half == second_half_reversed\nend",
  "  local text_len = #text\n  for i = 1, text_len do\n    if text:sub(i, i) ~= text:sub(text_len\
    \ - i + 1, text_len - i + 1) then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    local text_len = string.len(text)\n    local half_len = math.floor(text_len\
    \ / 2)\n    for i = 1, half_len do\n        if string.sub(text, i, i) ~= string.sub(text,\
    \ text_len - i + 1, text_len - i + 1) then\n            return false\n       \
    \ end\n    end\n    return true\nend", "  local text = text:gsub(\"%s+\", \"\"\
    )\n  local reversed = string.reverse(text)\n  return text == reversed\nend", " \
    \ local text_length = string.len(text)\n  local half_length = math.floor(text_length\
    \ / 2)\n  local is_palindrome = true\n  for i = 1, half_length do\n    local first_char\
    \ = string.sub(text, i, i)\n    local last_char = string.sub(text, text_length\
    \ - i + 1, text_length - i + 1)\n    if first_char ~= last_char then\n      is_palindrome\
    \ = false\n      break\n    end\n  end\n  return is_palindrome\nend", "    local\
    \ text_length = string.len(text)\n    local half_length = math.floor(text_length\
    \ / 2)\n    local is_palindrome = true\n    for i = 1, half_length do\n      \
    \  local left_index = i\n        local right_index = text_length - i + 1\n   \
    \     if string.sub(text, left_index, left_index) ~= string.sub(text, right_index,\
    \ right_index) then\n            is_palindrome = false\n            break\n  \
    \      end\n    end\n    return is_palindrome\nend", "    local text_len = text:len()\n\
    \    for i = 1, text_len do\n        if text:sub(i, i) ~= text:sub(text_len -\
    \ i + 1, text_len - i + 1) then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local text = text:lower()\n    local text_len = text:len()\n\
    \    local half_len = math.floor(text_len / 2)\n    for i = 1, half_len do\n \
    \       if text:sub(i, i) ~= text:sub(text_len - i + 1, text_len - i + 1) then\n\
    \            return false\n        end\n    end\n    return true\nend", "\tlocal\
    \ text_len = string.len(text)\n\tlocal text_half = math.floor(text_len / 2)\n\t\
    local text_half_len = text_half\n\tif text_len % 2 == 1 then\n\t\ttext_half_len\
    \ = text_half_len + 1\n\tend\n\tlocal text_half_a = string.sub(text, 1, text_half_len)\n\
    \tlocal text_half_b = string.sub(text, text_len - text_half + 1, text_len)\n\t\
    text_half_b = string.reverse(text_half_b)\n\treturn text_half_a == text_half_b\n\
    end", "    local text_len = string.len(text)\n    for i = 1, text_len do\n   \
    \     if string.sub(text, i, i) ~= string.sub(text, text_len - i + 1, text_len\
    \ - i + 1) then\n            return false\n        end\n    end\n    return true\n\
    end", "    local text_len = string.len(text)\n    local half_len = math.floor(text_len\
    \ / 2)\n    local i = 1\n    while i <= half_len do\n        if string.sub(text,\
    \ i, i) ~= string.sub(text, text_len - i + 1, text_len - i + 1) then\n       \
    \     return false\n        end\n        i = i + 1\n    end\n    return true\n\
    end", "  local text_len = string.len(text)\n  local half_len = math.floor(text_len\
    \ / 2)\n  for i = 1, half_len do\n    if string.sub(text, i, i) ~= string.sub(text,\
    \ text_len - i + 1, text_len - i + 1) then\n      return false\n    end\n  end\n\
    \  return true\nend", "  local text_length = string.len(text)\n  local half_length\
    \ = math.floor(text_length / 2)\n  for i = 1, half_length do\n    if string.sub(text,\
    \ i, i) ~= string.sub(text, text_length - i + 1, text_length - i + 1) then\n \
    \     return false\n    end\n  end\n  return true\nend", "    local text_len =\
    \ string.len(text)\n    for i = 1, text_len do\n        if string.sub(text, i,\
    \ i) ~= string.sub(text, text_len - i + 1, text_len - i + 1) then\n          \
    \  return false\n        end\n    end\n    return true\nend", "\tlocal text_len\
    \ = #text\n\tlocal half_len = math.floor(text_len / 2)\n\tfor i = 1, half_len\
    \ do\n\t\tif text:sub(i, i) ~= text:sub(text_len - i + 1, text_len - i + 1) then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "    local text_len =\
    \ string.len(text)\n    for i = 1, text_len / 2 do\n        if string.sub(text,\
    \ i, i) ~= string.sub(text, text_len - i + 1, text_len - i + 1) then\n       \
    \     return false\n        end\n    end\n    return true\nend", "    local text_len\
    \ = string.len(text)\n    local half_len = math.floor(text_len / 2)\n    for i\
    \ = 1, half_len do\n        if string.sub(text, i, i) ~= string.sub(text, text_len\
    \ - i + 1, text_len - i + 1) then\n            return false\n        end\n   \
    \ end\n    return true\nend", "    local len = #text\n    for i = 1, len / 2 do\n\
    \        if text:sub(i, i) ~= text:sub(len - i + 1, len - i + 1) then\n      \
    \      return false\n        end\n    end\n    return true\nend", "  local text_len\
    \ = string.len(text)\n  local text_half_len = math.floor(text_len / 2)\n  local\
    \ text_half_len_plus_one = text_half_len + 1\n  local text_half_len_minus_one\
    \ = text_half_len - 1\n  local text_half_len_plus_one_minus_one = text_half_len_plus_one\
    \ - 1\n  local text_half_len_minus_one_plus_one = text_half_len_minus_one + 1\n\
    \  local text_half_len_plus_one_minus_one_plus_one = text_half_len_plus_one_minus_one\
    \ + 1\n  local text_half_len_minus_one_plus_one_minus_one = text_half_len_minus_one_plus_one\
    \ - 1\n  local text_half_len_plus_one_minus_one_plus_one_minus_one = text_half_len_plus_one_minus_one_plus_one\
    \ - 1\n  local text_half_len_minus_one_plus_one_minus_one_plus_one = text_half_len_minus_one_plus_one_minus_one\
    \ + 1\n  local text_half_len_plus_one_minus_one_plus_one_minus_one_plus_one =\
    \ text_half_len_plus_one_minus_one_plus_one_minus_one + 1\n  local text_half_len_minus_one_plus_one_minus_one_plus_one_minus_one\
    \ = text_half_len_minus_one_plus_one_minus_one_plus_one - 1\n  local text_half_len_plus_one_minus_one_plus_one_minus_one_plus_one_minus_one\
    \ = text_half_len_plus_one_minus_one_plus_one_minus_one_plus_one - 1\n  local\
    \ text_half_len_minus_one_plus_one_minus_one_plus_one_minus_one_plus_one = text_half_len_minus_one_plus_one_minus_one_plus_one_minus_one\
    \ + 1", "  local text_len = text:len()\n  local half_len = math.floor(text_len\
    \ / 2)\n  for i = 1, half_len do\n    if text:sub(i, i) ~= text:sub(text_len -\
    \ i + 1, text_len - i + 1) then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    local text_len = string.len(text)\n    local half_len = math.floor(text_len\
    \ / 2)\n    for i = 1, half_len do\n        if string.sub(text, i, i) ~= string.sub(text,\
    \ text_len - i + 1, text_len - i + 1) then\n            return false\n       \
    \ end\n    end\n    return true\nend", "  local text_len = text:len()\n  local\
    \ half_len = math.floor(text_len / 2)\n  for i = 1, half_len do\n    if text:sub(i,\
    \ i) ~= text:sub(text_len - i + 1, text_len - i + 1) then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local text = text:gsub(\"%s+\", \"\"\
    )\n  local reversed = string.reverse(text)\n  return text == reversed\nend", "\t\
    local text_len = text:len()\n\tfor i = 1, text_len do\n\t\tif text:sub(i, i) ~=\
    \ text:sub(text_len - i + 1, text_len - i + 1) then\n\t\t\treturn false\n\t\t\
    end\n\tend\n\treturn true\nend", "  local text_len = #text\n  for i = 1, text_len\
    \ / 2 do\n    if text:sub(i, i) ~= text:sub(text_len - i + 1, text_len - i + 1)\
    \ then\n      return false\n    end\n  end\n  return true\nend", "    local text\
    \ = text:lower()\n    local reversed = string.reverse(text)\n    return text ==\
    \ reversed\nend", "  local text_len = text:len()\n  for i = 1, text_len do\n \
    \   if text:sub(i, i) ~= text:sub(text_len - i + 1, text_len - i + 1) then\n \
    \     return false\n    end\n  end\n  return true\nend", "    local text_len =\
    \ string.len(text)\n    for i = 1, text_len / 2 do\n        if string.sub(text,\
    \ i, i) ~= string.sub(text, text_len - i + 1, text_len - i + 1) then\n       \
    \     return false\n        end\n    end\n    return true\nend", "\tlocal text_len\
    \ = string.len(text)\n\tlocal text_len_half = math.floor(text_len / 2)\n\tlocal\
    \ text_len_half_plus = text_len_half + 1\n\tlocal text_len_half_minus = text_len_half\
    \ - 1\n\tlocal text_len_half_minus_plus = text_len_half_minus + 1\n\tlocal text_len_half_minus_minus\
    \ = text_len_half_minus - 1\n\tlocal text_len_half_minus_minus_plus = text_len_half_minus_minus\
    \ + 1\n\tlocal text_len_half_minus_minus_minus = text_len_half_minus_minus - 1\n\
    \tlocal text_len_half_minus_minus_minus_plus = text_len_half_minus_minus_minus\
    \ + 1\n\tlocal text_len_half_minus_minus_minus_minus = text_len_half_minus_minus_minus\
    \ - 1\n\tlocal text_len_half_minus_minus_minus_minus_plus = text_len_half_minus_minus_minus_minus\
    \ + 1\n\tlocal text_len_half_minus_minus_minus_minus_minus = text_len_half_minus_minus_minus_minus\
    \ - 1\n\tlocal text_len_half_minus_minus_minus_minus_minus_plus = text_len_half_minus_minus_minus_minus_minus\
    \ + 1\n\tlocal text_len_half_minus_minus_minus_minus_minus_minus = text_len_half_minus_minus_minus_minus_minus\
    \ - 1\n\tlocal text_len_half_minus_minus_minus_minus_minus_minus_plus = text_len_half_minus_minus_minus_minus_minus_minus\
    \ + 1\n\tlocal text_len_half_minus_minus_minus_minus_minus_minus_minus = text_len_half_minus_minus_minus_minus_minus_minus\
    \ - 1\n\tlocal text_len_half_minus_minus_minus_minus_minus_minus_minus_plus =\
    \ text_len_half_minus_minus_minus_minus_minus_minus_minus + 1\n\tlocal text_len_half_minus_minus_minus",
  "  local text_len = #text\n  local text_len_half = math.floor(text_len / 2)\n  local\
    \ text_len_odd = text_len % 2 == 1\n  for i = 1, text_len_half do\n    if text:sub(i,\
    \ i) ~= text:sub(text_len - i + 1, text_len - i + 1) then\n      return false\n\
    \    end\n  end\n  return true\nend", "\tlocal text_len = string.len(text)\n\t\
    local half_len = math.floor(text_len / 2)\n\tfor i = 1, half_len do\n\t\tif string.sub(text,\
    \ i, i) ~= string.sub(text, text_len - i + 1, text_len - i + 1) then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "    local text = text:lower()\n\
    \    local text_len = text:len()\n    local half_len = math.floor(text_len / 2)\n\
    \    for i = 1, half_len do\n        if text:sub(i, i) ~= text:sub(text_len -\
    \ i + 1, text_len - i + 1) then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local text = text:lower()\n    local text_len = text:len()\n\
    \    local text_half = math.floor(text_len / 2)", "    local text_len = string.len(text)\n\
    \    local text_half_len = math.floor(text_len / 2)\n    local text_half_len_plus_one\
    \ = text_half_len + 1", "  local reversed = string.reverse(text)\n  return text\
    \ == reversed\nend", "  local reversed = string.reverse(text)\n  return text ==\
    \ reversed\nend", "    local text_len = string.len(text)\n    local half_len =\
    \ math.floor(text_len / 2)\n    for i = 1, half_len do\n        if string.sub(text,\
    \ i, i) ~= string.sub(text, text_len - i + 1, text_len - i + 1) then\n       \
    \     return false\n        end\n    end\n    return true\nend", "    local text_len\
    \ = string.len(text)\n    local text_half_len = math.floor(text_len / 2)\n   \
    \ for i = 1, text_half_len do\n        if string.sub(text, i, i) ~= string.sub(text,\
    \ text_len - i + 1, text_len - i + 1) then\n            return false\n       \
    \ end\n    end\n    return true\nend", "  local text_len = string.len(text)\n\
    \  local half_len = math.floor(text_len / 2)\n  local is_palindrome = true\n \
    \ for i = 1, half_len do\n    local first_char = string.sub(text, i, i)\n    local\
    \ last_char = string.sub(text, text_len - i + 1, text_len - i + 1)\n    if first_char\
    \ ~= last_char then\n      is_palindrome = false\n      break\n    end\n  end\n\
    \  return is_palindrome\nend", "  local text_len = text:len()\n  local half_len\
    \ = math.floor(text_len / 2)\n  for i = 1, half_len do\n    if text:sub(i, i)\
    \ ~= text:sub(text_len - i + 1, text_len - i + 1) then\n      return false\n \
    \   end\n  end\n  return true\nend", "  local text_len = string.len(text)\n  for\
    \ i = 1, text_len do\n    if string.sub(text, i, i) ~= string.sub(text, text_len\
    \ - i + 1, text_len - i + 1) then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    local text = text:lower()\n    local text_len = text:len()\n\
    \    local text_half = math.floor(text_len / 2)\n    local text_end = text_len\
    \ - 1\n    for i = 1, text_half do\n        if text:sub(i, i) ~= text:sub(text_end\
    \ - i + 1, text_end - i + 1) then\n            return false\n        end\n   \
    \ end\n    return true\nend", "    local text_len = string.len(text)\n    local\
    \ half_len = math.floor(text_len / 2)\n    for i = 1, half_len do\n        if\
    \ string.sub(text, i, i) ~= string.sub(text, text_len - i + 1, text_len - i +\
    \ 1) then\n            return false\n        end\n    end\n    return true\nend",
  "    local text_len = string.len(text)\n    local half_len = math.floor(text_len\
    \ / 2)\n    for i = 1, half_len do\n        if string.sub(text, i, i) ~= string.sub(text,\
    \ text_len - i + 1, text_len - i + 1) then\n            return false\n       \
    \ end\n    end\n    return true\nend", "  local i, j = 1, #text\n  while i < j\
    \ do\n    if text:sub(i, i) ~= text:sub(j, j) then\n      return false\n    end\n\
    \    i = i + 1\n    j = j - 1\n  end\n  return true\nend", "    local text = text:lower()\n\
    \    local text_len = text:len()\n    local text_half = math.floor(text_len /\
    \ 2)", "\tlocal text_len = text:len()\n\tlocal half_len = math.floor(text_len\
    \ / 2)\n\tfor i = 1, half_len do\n\t\tif text:sub(i, i) ~= text:sub(text_len -\
    \ i + 1, text_len - i + 1) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ true\nend", "    local text_len = string.len(text)\n    local half_len = math.floor(text_len\
    \ / 2)\n    for i = 1, half_len do\n        if string.sub(text, i, i) ~= string.sub(text,\
    \ text_len - i + 1, text_len - i + 1) then\n            return false\n       \
    \ end\n    end\n    return true\nend", "    local text = text:lower()\n    local\
    \ text_len = text:len()\n    local half_len = math.floor(text_len / 2)\n    for\
    \ i = 1, half_len do\n        if text:sub(i, i) ~= text:sub(text_len - i + 1,\
    \ text_len - i + 1) then\n            return false\n        end\n    end\n   \
    \ return true\nend", "    local text = text:lower()\n    local text_len = text:len()\n\
    \    local i = 1\n    while i <= text_len do\n        if text:sub(i, i) ~= text:sub(text_len,\
    \ text_len) then\n            return false\n        end\n        i = i + 1\n \
    \       text_len = text_len - 1\n    end\n    return true\nend", "  local text_len\
    \ = string.len(text)\n  for i = 1, text_len / 2 do\n    if string.sub(text, i,\
    \ i) ~= string.sub(text, text_len - i + 1, text_len - i + 1) then\n      return\
    \ false\n    end\n  end\n  return true\nend", "\tlocal text = text:gsub(\"%s+\"\
    , \"\")\n\tlocal text_reverse = text:reverse()\n\treturn text == text_reverse\n\
    end", "    local text_len = string.len(text)\n    local half_len = math.floor(text_len\
    \ / 2)\n    local is_palindrome = true\n    for i = 1, half_len do\n        local\
    \ left_char = string.sub(text, i, i)\n        local right_char = string.sub(text,\
    \ text_len - i + 1, text_len - i + 1)\n        if left_char ~= right_char then\n\
    \            is_palindrome = false\n            break\n        end\n    end\n\
    \    return is_palindrome\nend", "    local text_len = string.len(text)\n    for\
    \ i = 1, text_len do\n        if string.sub(text, i, i) ~= string.sub(text, text_len\
    \ - i + 1, text_len - i + 1) then\n            return false\n        end\n   \
    \ end\n    return true\nend", "    local text = text:lower()\n    local text_len\
    \ = text:len()\n    local half_len = math.floor(text_len / 2)\n    for i = 1,\
    \ half_len do\n        if text:sub(i, i) ~= text:sub(text_len - i + 1, text_len\
    \ - i + 1) then\n            return false\n        end\n    end\n    return true\n\
    end", "  local text_len = string.len(text)\n  local half_len = math.floor(text_len\
    \ / 2)\n  for i = 1, half_len do\n    if string.sub(text, i, i) ~= string.sub(text,\
    \ text_len - i + 1, text_len - i + 1) then\n      return false\n    end\n  end\n\
    \  return true\nend", "    local reverse = string.reverse(text)\n    if text ==\
    \ reverse then\n        return true\n    else\n        return false\n    end\n\
    end", "    local text = text:lower()\n    local len = text:len()\n    for i =\
    \ 1, len do\n        if text:sub(i, i) ~= text:sub(len - i + 1, len - i + 1) then\n\
    \            return false\n        end\n    end\n    return true\nend", "  local\
    \ text_len = text:len()\n  local half_len = math.floor(text_len / 2)\n  for i\
    \ = 1, half_len do\n    if text:sub(i, i) ~= text:sub(text_len - i + 1, text_len\
    \ - i + 1) then\n      return false\n    end\n  end\n  return true\nend", "  \
    \  local reversed = string.reverse(text)\n    return text == reversed\nend", " \
    \   local text_len = string.len(text)\n    for i = 1, text_len do\n        if\
    \ string.sub(text, i, i) ~= string.sub(text, text_len - i + 1, text_len - i +\
    \ 1) then\n            return false\n        end\n    end\n    return true\nend",
  "    local text_len = string.len(text)\n    for i = 1, text_len do\n        if text:sub(i,\
    \ i) ~= text:sub(text_len - i + 1, text_len - i + 1) then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    local len = string.len(text)\n\
    \    for i = 1, len do\n        if string.sub(text, i, i) ~= string.sub(text,\
    \ len - i + 1, len - i + 1) then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local text_len = string.len(text)\n    for i = 1,\
    \ text_len do\n        if string.sub(text, i, i) ~= string.sub(text, text_len\
    \ - i + 1, text_len - i + 1) then\n            return false\n        end\n   \
    \ end\n    return true\nend", "    local text_len = string.len(text)\n    for\
    \ i = 1, text_len do\n        if string.sub(text, i, i) ~= string.sub(text, text_len\
    \ - i + 1, text_len - i + 1) then\n            return false\n        end\n   \
    \ end\n    return true\nend", "    local text = text:lower()\n    local text_len\
    \ = text:len()\n    local half_text_len = math.floor(text_len / 2)\n    local\
    \ is_palindrome = true", "    local text = text:lower()\n    local text_len =\
    \ text:len()\n    local half_len = math.floor(text_len / 2)\n    for i = 1, half_len\
    \ do\n        if text:sub(i, i) ~= text:sub(text_len - i + 1, text_len - i + 1)\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "    local len = #text\n    for i = 1, len do\n        if text:sub(i, i) ~= text:sub(len\
    \ - i + 1, len - i + 1) then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local text_len = string.len(text)\n    local half_len\
    \ = math.floor(text_len / 2)\n    for i = 1, half_len do\n        if string.sub(text,\
    \ i, i) ~= string.sub(text, text_len - i + 1, text_len - i + 1) then\n       \
    \     return false\n        end\n    end\n    return true\nend", "  local text_len\
    \ = string.len(text)\n  for i = 1, text_len / 2 do\n    if string.sub(text, i,\
    \ i) ~= string.sub(text, text_len - i + 1, text_len - i + 1) then\n      return\
    \ false\n    end\n  end\n  return true\nend", "    local text_len = string.len(text)\n\
    \    local half_len = math.floor(text_len / 2)\n    for i = 1, half_len do\n \
    \       if string.sub(text, i, i) ~= string.sub(text, text_len - i + 1, text_len\
    \ - i + 1) then\n            return false\n        end\n    end\n    return true\n\
    end", "    local len = string.len(text)\n    local half = math.floor(len / 2)\n\
    \    for i = 1, half do\n        if string.sub(text, i, i) ~= string.sub(text,\
    \ len - i + 1, len - i + 1) then\n            return false\n        end\n    end\n\
    \    return true\nend", "  local text_len = string.len(text)\n  local text_half_len\
    \ = math.floor(text_len / 2)\n  for i = 1, text_half_len do\n    if string.sub(text,\
    \ i, i) ~= string.sub(text, text_len - i + 1, text_len - i + 1) then\n      return\
    \ false\n    end\n  end\n  return true\nend", "    local text_len = string.len(text)\n\
    \    for i = 1, text_len do\n        if string.sub(text, i, i) ~= string.sub(text,\
    \ text_len - i + 1, text_len - i + 1) then\n            return false\n       \
    \ end\n    end\n    return true\nend", "    local text = text:lower()\n    local\
    \ text_len = text:len()\n    local half_len = math.floor(text_len / 2)\n    for\
    \ i = 1, half_len do\n        if text:sub(i, i) ~= text:sub(text_len - i + 1,\
    \ text_len - i + 1) then\n            return false\n        end\n    end\n   \
    \ return true\nend", "    local text_length = string.len(text)\n    local half_length\
    \ = math.floor(text_length / 2)\n    for i = 1, half_length do\n        if string.sub(text,\
    \ i, i) ~= string.sub(text, text_length - i + 1, text_length - i + 1) then\n \
    \           return false\n        end\n    end\n    return true\nend", "  local\
    \ text = text:gsub(\"%s+\", \"\")\n  local reversed = string.reverse(text)\n \
    \ return text == reversed\nend", "    local text_len = string.len(text)\n    local\
    \ half_len = math.floor(text_len / 2)\n    local is_palindrome = true\n    for\
    \ i = 1, half_len do\n        if string.sub(text, i, i) ~= string.sub(text, text_len\
    \ - i + 1, text_len - i + 1) then\n            is_palindrome = false\n       \
    \     break\n        end\n    end\n    return is_palindrome\nend", "  local i\
    \ = 1\n  local j = #text\n  while i < j do\n    if text:sub(i, i) ~= text:sub(j,\
    \ j) then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n\
    \  return true\nend", "    return text == string.reverse(text)\nend", "    local\
    \ text_len = string.len(text)\n    local half_len = math.floor(text_len / 2)",
  "    local text_len = string.len(text)\n    local half_len = math.floor(text_len\
    \ / 2)\n    for i = 1, half_len do\n        if string.sub(text, i, i) ~= string.sub(text,\
    \ text_len - i + 1, text_len - i + 1) then\n            return false\n       \
    \ end\n    end\n    return true\nend", "    return text == string.reverse(text)\n\
    end", "    local text_len = string.len(text)\n    local text_half_len = math.floor(text_len\
    \ / 2)\n    local text_half_len_plus_one = text_half_len + 1", "\tlocal text =\
    \ text:gsub(\"%s+\", \"\")\n\tlocal text_len = text:len()\n\tlocal half_len =\
    \ math.floor(text_len / 2)\n\tfor i = 1, half_len do\n\t\tif text:sub(i, i) ~=\
    \ text:sub(text_len - i + 1, text_len - i + 1) then\n\t\t\treturn false\n\t\t\
    end\n\tend\n\treturn true\nend", "\tlocal text_len = text:len()\n\tlocal half_len\
    \ = math.floor(text_len / 2)\n\tfor i = 1, half_len do\n\t\tif text:sub(i, i)\
    \ ~= text:sub(text_len - i + 1, text_len - i + 1) then\n\t\t\treturn false\n\t\
    \tend\n\tend\n\treturn true\nend", "  local text_len = text:len()\n  local half_len\
    \ = math.floor(text_len / 2)\n  for i = 1, half_len do\n    if text:sub(i, i)\
    \ ~= text:sub(text_len - i + 1, text_len - i + 1) then\n      return false\n \
    \   end\n  end\n  return true\nend", "    local len = #text\n    for i = 1, len\
    \ do\n        if text:sub(i, i) ~= text:sub(len - i + 1, len - i + 1) then\n \
    \           return false\n        end\n    end\n    return true\nend", "    local\
    \ text = text:lower()\n    local rev = string.reverse(text)\n    return text ==\
    \ rev\nend", "    local text_len = #text\n    local half_text_len = math.floor(text_len\
    \ / 2)\n    for i = 1, half_text_len do\n        if text:sub(i, i) ~= text:sub(text_len\
    \ - i + 1, text_len - i + 1) then\n            return false\n        end\n   \
    \ end\n    return true\nend", "  local text_len = string.len(text)\n  local half_len\
    \ = math.floor(text_len / 2)\n  local is_palindrome = true\n  for i = 1, half_len\
    \ do\n    if string.sub(text, i, i) ~= string.sub(text, text_len - i + 1, text_len\
    \ - i + 1) then\n      is_palindrome = false\n      break\n    end\n  end\n  return\
    \ is_palindrome\nend", "    local text = text:lower()\n    local text_len = text:len()\n\
    \    local half_len = math.floor(text_len / 2)\n    local is_palindrome = true\n\
    \    for i = 1, half_len do\n        local left_char = text:sub(i, i)\n      \
    \  local right_char = text:sub(text_len - i + 1, text_len - i + 1)\n        if\
    \ left_char ~= right_char then\n            is_palindrome = false\n          \
    \  break\n        end\n    end\n    return is_palindrome\nend", "    local len\
    \ = #text\n    for i = 1, len / 2 do\n        if text:sub(i, i) ~= text:sub(len\
    \ - i + 1, len - i + 1) then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local len = string.len(text)\n    local half = math.floor(len\
    \ / 2)\n    for i = 1, half do\n        if text:sub(i, i) ~= text:sub(len - i\
    \ + 1, len - i + 1) then\n            return false\n        end\n    end\n   \
    \ return true\nend", "    local text_len = string.len(text)\n    local half_len\
    \ = text_len / 2\n    for i = 1, half_len do\n        if string.sub(text, i, i)\
    \ ~= string.sub(text, text_len - i + 1, text_len - i + 1) then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    local text_len = string.len(text)\n\
    \    for i = 1, math.floor(text_len / 2) do\n        if string.sub(text, i, i)\
    \ ~= string.sub(text, text_len - i + 1, text_len - i + 1) then\n            return\
    \ false\n        end\n    end\n    return true\nend", "  local text_reversed =\
    \ string.reverse(text)\n  if text == text_reversed then\n    return true\n  else\n\
    \    return false\n  end\nend", "    local text = text:lower()\n    local text_len\
    \ = text:len()\n    local half_len = math.floor(text_len / 2)\n    for i = 1,\
    \ half_len do\n        if text:sub(i, i) ~= text:sub(text_len - i + 1, text_len\
    \ - i + 1) then\n            return false\n        end\n    end\n    return true\n\
    end", "  local text_len = string.len(text)\n  local half_len = math.floor(text_len\
    \ / 2)\n  for i = 1, half_len do\n    if string.sub(text, i, i) ~= string.sub(text,\
    \ text_len - i + 1, text_len - i + 1) then\n      return false\n    end\n  end\n\
    \  return true\nend", "    local text_len = string.len(text)\n    local half_len\
    \ = math.floor(text_len / 2)\n    for i = 1, half_len do\n        if string.sub(text,\
    \ i, i) ~= string.sub(text, text_len - i + 1, text_len - i + 1) then\n       \
    \     return false\n        end\n    end\n    return true\nend", "  local text_len\
    \ = string.len(text)\n  local half_len = math.floor(text_len / 2)\n  local is_palindrome\
    \ = true\n  for i = 1, half_len do\n    if text:sub(i, i) ~= text:sub(text_len\
    \ - i + 1, text_len - i + 1) then\n      is_palindrome = false\n      break\n\
    \    end\n  end\n  return is_palindrome\nend", "  local text_len = #text\n  for\
    \ i = 1, text_len do\n    if text:sub(i, i) ~= text:sub(text_len - i + 1, text_len\
    \ - i + 1) then\n      return false\n    end\n  end\n  return true\nend", "  \
    \  local text_length = string.len(text)\n    local text_half_length = math.floor(text_length\
    \ / 2)\n    local text_half_length_plus_one = text_half_length + 1", "  local\
    \ text_len = string.len(text)\n  local half_len = math.floor(text_len / 2)\n \
    \ for i = 1, half_len do\n    if string.sub(text, i, i) ~= string.sub(text, text_len\
    \ - i + 1, text_len - i + 1) then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  local text_len = text:len()\n  for i = 1, math.floor(text_len\
    \ / 2) do\n    if text:sub(i, i) ~= text:sub(text_len - i + 1, text_len - i +\
    \ 1) then\n      return false\n    end\n  end\n  return true\nend", "    local\
    \ text_len = #text\n    local half_len = math.floor(text_len / 2)\n    local is_palindrome\
    \ = true\n    for i = 1, half_len do\n        if text:sub(i, i) ~= text:sub(text_len\
    \ - i + 1, text_len - i + 1) then\n            is_palindrome = false\n       \
    \     break\n        end\n    end\n    return is_palindrome\nend", "    local\
    \ text_len = string.len(text)\n    for i = 1, text_len do\n        if string.sub(text,\
    \ i, i) ~= string.sub(text, text_len - i + 1, text_len - i + 1) then\n       \
    \     return false\n        end\n    end\n    return true\nend", "    local reversed\
    \ = string.reverse(text)\n    return text == reversed\nend", "    local text_len\
    \ = string.len(text)\n    for i = 1, text_len do\n        if string.sub(text,\
    \ i, i) ~= string.sub(text, text_len - i + 1, text_len - i + 1) then\n       \
    \     return false\n        end\n    end\n    return true\nend", "  local text_len\
    \ = string.len(text)\n  for i = 1, text_len / 2 do\n    if string.sub(text, i,\
    \ i) ~= string.sub(text, text_len - i + 1, text_len - i + 1) then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local text_len = string.len(text)\n\
    \  for i = 1, text_len do\n    if string.sub(text, i, i) ~= string.sub(text, text_len\
    \ - i + 1, text_len - i + 1) then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    local text_len = string.len(text)\n    local half_len = math.floor(text_len\
    \ / 2)\n    local is_palindrome = true\n    for i = 1, half_len do\n        if\
    \ string.sub(text, i, i) ~= string.sub(text, text_len - i + 1, text_len - i +\
    \ 1) then\n            is_palindrome = false\n            break\n        end\n\
    \    end\n    return is_palindrome\nend", "    local text = text:lower()\n   \
    \ local text_len = text:len()\n    local text_half = math.floor(text_len / 2)\n\
    \    local text_end = text_len - 1", "  local text_len = string.len(text)\n  for\
    \ i = 1, text_len do\n    if string.sub(text, i, i) ~= string.sub(text, text_len\
    \ - i + 1, text_len - i + 1) then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    local text_len = string.len(text)\n    local half_len = math.floor(text_len\
    \ / 2)\n    for i = 1, half_len do\n        if string.sub(text, i, i) ~= string.sub(text,\
    \ text_len - i + 1, text_len - i + 1) then\n            return false\n       \
    \ end\n    end\n    return true\nend", "    local text_len = text:len()\n    local\
    \ half_len = math.floor(text_len / 2)\n    for i = 1, half_len do\n        if\
    \ text:sub(i, i) ~= text:sub(text_len - i + 1, text_len - i + 1) then\n      \
    \      return false\n        end\n    end\n    return true\nend", "  local len\
    \ = string.len(text)\n  for i = 1, len/2 do\n    if string.sub(text, i, i) ~=\
    \ string.sub(text, len-i+1, len-i+1) then\n      return false\n    end\n  end\n\
    \  return true\nend", "  local text_len = string.len(text)\n  for i = 1, text_len\
    \ do\n    if string.sub(text, i, i) ~= string.sub(text, text_len - i + 1, text_len\
    \ - i + 1) then\n      return false\n    end\n  end\n  return true\nend", "  \
    \  local text_len = string.len(text)\n    for i = 1, text_len do\n        if string.sub(text,\
    \ i, i) ~= string.sub(text, text_len - i + 1, text_len - i + 1) then\n       \
    \     return false\n        end\n    end\n    return true\nend", "    local text\
    \ = text:lower()\n    local text_len = text:len()\n    local half_len = math.floor(text_len\
    \ / 2)\n    for i = 1, half_len do\n        if text:sub(i, i) ~= text:sub(text_len\
    \ - i + 1, text_len - i + 1) then\n            return false\n        end\n   \
    \ end\n    return true\nend", "    local text_len = string.len(text)\n    local\
    \ half_len = math.floor(text_len / 2)\n    local is_palindrome = true\n    for\
    \ i = 1, half_len do\n        local first_char = string.sub(text, i, i)\n    \
    \    local last_char = string.sub(text, text_len - i + 1, text_len - i + 1)\n\
    \        if first_char ~= last_char then\n            is_palindrome = false\n\
    \            break\n        end\n    end\n    return is_palindrome\nend", "  local\
    \ text_len = string.len(text)\n  local text_half_len = math.floor(text_len / 2)\n\
    \  local text_half_len_plus_one = text_half_len + 1\n  for i = 1, text_half_len\
    \ do\n    if string.sub(text, i, i) ~= string.sub(text, text_len - i + 1, text_len\
    \ - i + 1) then\n      return false\n    end\n  end\n  return true\nend", "  \
    \  local text_len = string.len(text)\n    local half_len = math.floor(text_len\
    \ / 2)\n    for i = 1, half_len do\n        if string.sub(text, i, i) ~= string.sub(text,\
    \ text_len - i + 1, text_len - i + 1) then\n            return false\n       \
    \ end\n    end\n    return true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
