name: HumanEval_48_is_palindrome
language: lua
prompt: "-- Checks if given string is a palindrome\nlocal function is_palindrome(text)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_palindrome\n\
  \    lu.assertEquals(candidate(''), true)\n    lu.assertEquals(candidate('aba'),\
  \ true)\n    lu.assertEquals(candidate('aaaaa'), true)\n    lu.assertEquals(candidate('zbcd'),\
  \ false)\n    lu.assertEquals(candidate('xywyx'), true)\n    lu.assertEquals(candidate('xywyz'),\
  \ false)\n    lu.assertEquals(candidate('xywzx'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local len = #text\n    for i = 1, len do\n        if text:sub(i,\
    \ i) ~= text:sub(len - i + 1, len - i + 1) then\n            return false\n  \
    \      end\n    end\n    return true\nend", "    local length = string.len(text)\n\
    \    local half = math.floor(length / 2)\n    for i = 1, half do\n        if string.sub(text,\
    \ i, i) ~= string.sub(text, length - i + 1, length - i + 1) then\n           \
    \ return false\n        end\n    end\n    return true\nend", "    local text_len\
    \ = string.len(text)\n    local text_half_len = math.floor(text_len / 2)\n   \
    \ for i = 1, text_half_len do\n        if string.sub(text, i, i) ~= string.sub(text,\
    \ text_len - i + 1, text_len - i + 1) then\n            return false\n       \
    \ end\n    end\n    return true\nend", "  local reversed = string.reverse(text)\n\
    \  return text == reversed\nend", "    local text_len = string.len(text)\n   \
    \ local half_len = math.floor(text_len / 2)\n    for i = 1, half_len do\n    \
    \    if string.sub(text, i, i) ~= string.sub(text, text_len - i + 1, text_len\
    \ - i + 1) then\n            return false\n        end\n    end\n    return true\n\
    end", "    local i = 1\n    local j = #text\n    while i < j do\n        if text:sub(i,\
    \ i) ~= text:sub(j, j) then\n            return false\n        end\n        i\
    \ = i + 1\n        j = j - 1\n    end\n    return true\nend", "    local len =\
    \ #text\n    local half = math.floor(len / 2)\n    for i = 1, half do\n      \
    \  if text:sub(i, i) ~= text:sub(len - i + 1, len - i + 1) then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    local text_len = string.len(text)\n\
    \    local half_len = math.floor(text_len / 2)\n    for i = 1, half_len do\n \
    \       if string.sub(text, i, i) ~= string.sub(text, text_len - i + 1, text_len\
    \ - i + 1) then\n            return false\n        end\n    end\n    return true\n\
    end", "    local text_len = string.len(text)\n    local i = 1\n    local j = text_len\n\
    \    while i < j do\n        if string.sub(text, i, i) ~= string.sub(text, j,\
    \ j) then\n            return false\n        end\n        i = i + 1\n        j\
    \ = j - 1\n    end\n    return true\nend", "    local text_len = string.len(text)\n\
    \    local text_half_len = math.floor(text_len / 2)\n    for i = 1, text_half_len\
    \ do\n        if string.sub(text, i, i) ~= string.sub(text, text_len - i + 1,\
    \ text_len - i + 1) then\n            return false\n        end\n    end\n   \
    \ return true\nend", "  local text_len = #text\n  for i = 1, text_len / 2 do\n\
    \    if text:sub(i, i) ~= text:sub(text_len - i + 1, text_len - i + 1) then\n\
    \      return false\n    end\n  end\n  return true\nend", "    local len = string.len(text)\n\
    \    local half = math.floor(len / 2)\n    for i = 1, half do\n        if string.sub(text,\
    \ i, i) ~= string.sub(text, len - i + 1, len - i + 1) then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    local text = text:lower()\n\
    \    local text_len = text:len()\n    local half_len = math.floor(text_len / 2)\n\
    \    for i = 1, half_len do\n        if text:sub(i, i) ~= text:sub(text_len -\
    \ i + 1, text_len - i + 1) then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local text_length = string.len(text)\n    local half_length\
    \ = math.floor(text_length / 2)\n    for i = 1, half_length do\n        if string.sub(text,\
    \ i, i) ~= string.sub(text, text_length - i + 1, text_length - i + 1) then\n \
    \           return false\n        end\n    end\n    return true\nend", "  local\
    \ text_len = string.len(text)\n  local text_half_len = math.floor(text_len / 2)\n\
    \  local text_half_len_1 = text_half_len + 1\n  local text_half_len_2 = text_half_len\
    \ - 1\n  local text_half_len_1_char = string.sub(text, text_half_len_1, text_half_len_1)\n\
    \  local text_half_len_2_char = string.sub(text, text_half_len_2, text_half_len_2)\n\
    \  local text_len_char = string.sub(text, text_len, text_len)\n  local text_len_1_char\
    \ = string.sub(text, text_len - 1, text_len - 1)\n  local text_len_2_char = string.sub(text,\
    \ text_len - 2, text_len - 2)\n  local text_len_3_char = string.sub(text, text_len\
    \ - 3, text_len - 3)\n  local text_len_4_char = string.sub(text, text_len - 4,\
    \ text_len - 4)\n  local text_len_5_char = string.sub(text, text_len - 5, text_len\
    \ - 5)\n  local text_len_6_char = string.sub(text, text_len - 6, text_len - 6)\n\
    \  local text_len_7_char = string.sub(text, text_len - 7, text_len - 7)\n  local\
    \ text_len_8_char = string.sub(text, text_len - 8, text_len - 8)\n  local text_len_9_char\
    \ = string.sub(text, text_len - 9, text_len - 9)\n  local text_len_10_char = string.sub(text,\
    \ text_len - 10, text_len - 10)\n  local text_len_11_char = string.sub(text, text_len\
    \ - 11, text_len - 11)\n  local text_len_12_char = string.sub(text, text_len -\
    \ 12, text_len - 12)\n  local", "  local len = string.len(text)\n  for i = 1,\
    \ len / 2 do\n    if string.sub(text, i, i) ~= string.sub(text, len - i + 1, len\
    \ - i + 1) then\n      return false\n    end\n  end\n  return true\nend", "  \
    \  local text_len = string.len(text)\n    local half_len = math.floor(text_len\
    \ / 2)\n    for i = 1, half_len do\n        if text:sub(i, i) ~= text:sub(text_len\
    \ - i + 1, text_len - i + 1) then\n            return false\n        end\n   \
    \ end\n    return true\nend", "    local text = text:lower()\n    local text_len\
    \ = text:len()\n    local text_len_half = math.floor(text_len / 2)\n    for i\
    \ = 1, text_len_half do\n        if text:sub(i, i) ~= text:sub(text_len - i +\
    \ 1, text_len - i + 1) then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local text_len = text:len()\n    for i = 1, text_len\
    \ do\n        if text:sub(i, i) ~= text:sub(text_len - i + 1, text_len - i + 1)\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "  local text_len = #text\n  for i = 1, text_len do\n    if text:sub(i, i) ~= text:sub(text_len\
    \ - i + 1, text_len - i + 1) then\n      return false\n    end\n  end\n  return\
    \ true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
